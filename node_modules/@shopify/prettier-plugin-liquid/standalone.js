(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("prettier"));
	else if(typeof define === 'function' && define.amd)
		define(["prettier/standalone"], factory);
	else if(typeof exports === 'object')
		exports["prettierPluginLiquid"] = factory(require("prettier"));
	else
		root["prettierPluginLiquid"] = factory(root["prettier"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_prettier__) {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./build/shims/liquid-html-ohm.js":
/*!****************************************!*\
  !*** ./build/shims/liquid-html-ohm.js ***!
  \****************************************/
/***/ ((module) => {

module.exports = String.raw`LiquidHTML {
  Node
    = (HtmlNode | liquidNode | TextNode)*

  HtmlNode =
    | HtmlComment
    | HtmlRawTag
    | HtmlVoidElement
    | HtmlSelfClosingElement
    | HtmlTagClose
    | HtmlTagOpen

  HtmlComment = "<!--" #(anyExceptStar<"-->"> "-->")

  // These are black holes, we'll ignore what's in them
  HtmlRawTag =
    | HtmlRawTagImpl<"script">
    | HtmlRawTagImpl<"style">
    | HtmlRawTagImpl<"svg">

  HtmlRawTagImpl<name> =
    #("<" name) AttrList ">" #(anyExceptStar<endTag<name>> endTag<name>)

  endTag<name> =
    "</" name space* ">"

  HtmlVoidElement =
    #("<" voidElementName) AttrList "/"? ">"

  HtmlSelfClosingElement =
    #("<" tagNameOrLiquidDrop) AttrList "/>"

  HtmlTagOpen =
    #("<" tagNameOrLiquidDrop) AttrList ">"

  HtmlTagClose =
    #("</" tagNameOrLiquidDrop) ">"

  tagNameOrLiquidDrop =
    | tagName
    | liquidDrop

  tagName =
    letter (alnum | "-" | ":")*

  liquidTagName =
    letter (alnum | "_")*

  AttrList = Attr*

  Attr =
    liquidNode | AttrSingleQuoted | AttrDoubleQuoted | AttrUnquoted | attrEmpty

  attrEmpty = attrName

  AttrUnquoted = attrName "=" attrUnquotedValue
  AttrSingleQuoted = attrName "=" "'" #(attrSingleQuotedValue "'")
  AttrDoubleQuoted = attrName "=" "\"" #(attrDoubleQuotedValue "\"")

  // https://html.spec.whatwg.org/#attributes-2
  attrName = anyExceptPlus<(space | quotes | "=" | ">" | "/" | "{{" | "{%" | controls | noncharacters)>
  attrUnquotedValue = (attrUnquotedTextNode)*
  attrSingleQuotedValue = (liquidNode | attrSingleQuotedTextNode)*
  attrDoubleQuotedValue = (liquidNode | attrDoubleQuotedTextNode)*

  attrUnquotedTextNode = anyExceptPlus<(space | quotes | "=" | "<" | ">" | "${"`"}" | "{{" | "{%")>
  attrSingleQuotedTextNode = anyExceptPlus<("'" | "{{" | "{%")>
  attrDoubleQuotedTextNode = anyExceptPlus<("\""| "{{" | "{%")>

  quotes =  "'" | "\""

  LiquidNode = liquidNode
  liquidNode = liquidRawTag | liquidDrop | liquidTagClose | liquidTagOpen | liquidTag | liquidInlineComment

  liquidTagOpen = "{%" "-"? space* blockName space* tagMarkup "-"? "%}"
  liquidTagClose = "{%" "-"? space* "end" blockName space* tagMarkup "-"? "%}"
  liquidTag = "{%" "-"? space* liquidTagName space? tagMarkup "-"? "%}"
  liquidDrop = "{{" "-"? anyExceptStar<("-}}" | "}}")> "-"? "}}"
  liquidInlineComment = "{%" "-"? space* "#" space? tagMarkup "-"? "%}"

  liquidRawTag =
    | liquidRawTagImpl<"raw">
    | liquidRawTagImpl<"comment">
    | liquidRawTagImpl<"javascript">
    | liquidRawTagImpl<"schema">
    | liquidRawTagImpl<"style">
  liquidRawTagImpl<name> =
    "{%" "-"? space* name space* "-"? "%}"
    anyExceptStar<liquidRawTagClose<name>>
    "{%" "-"? space* "end" name space* "-"? "%}"
  liquidRawTagClose<name> =
    "{%" "-"? space* "end" name space* "-"? "%}"

  // https://www.w3.org/TR/2011/WD-html-markup-20110113/syntax.html#void-element
  // Cheating a bit with by stretching it to the doctype
  voidElementName =
    | caseInsensitive<"!doctype">
    | caseInsensitive<"area">
    | caseInsensitive<"base">
    | caseInsensitive<"br">
    | caseInsensitive<"col">
    | caseInsensitive<"command">
    | caseInsensitive<"embed">
    | caseInsensitive<"hr">
    | caseInsensitive<"img">
    | caseInsensitive<"input">
    | caseInsensitive<"keygen">
    | caseInsensitive<"link">
    | caseInsensitive<"meta">
    | caseInsensitive<"param">
    | caseInsensitive<"source">
    | caseInsensitive<"track">
    | caseInsensitive<"wbr">

  blockName =
    // Shopify blocks
    | "style"
    | "form"
    | "paginate"
    // Base blocks
    | "capture"
    | "case"
    | "for"
    | "ifchanged"
    | "if"
    | "unless"
    | "raw"
    | "tablerow"

  tagMarkup = anyExceptStar<("-%}"| "%}")>

  anyExcept<lit> = (~ lit any)
  anyExceptStar<lit> = (~ lit any)*
  anyExceptPlus<lit> = (~ lit any)+
  AnyExcept<lit> = (~ lit any)
  AnyExceptPlus<lit> = (~ lit any)+
  AnyExceptStar<lit> = (~ lit any)*

  TextNode = AnyExceptPlus<openControl>
  openControl = "<" | "{{" | "{%"
  controls = "\u{007F}".."\u{009F}"
  noncharacters = "\u{FDD0}".."\u{FDEF}"
}
`;

/***/ }),

/***/ "./dist/constants.evaluate.js":
/*!************************************!*\
  !*** ./dist/constants.evaluate.js ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CSS_WHITE_SPACE_DEFAULT = exports.CSS_WHITE_SPACE_TAGS = exports.CSS_DISPLAY_DEFAULT = exports.CSS_DISPLAY_LIQUID_DEFAULT = exports.CSS_DISPLAY_LIQUID_TAGS = exports.CSS_DISPLAY_TAGS = void 0;
const htmlStyles = __webpack_require__(/*! html-styles */ "./node_modules/html-styles/index.js");
const getCssStyleTags = (property) => Object.fromEntries(htmlStyles
    .filter((htmlStyle) => htmlStyle.style[property])
    .flatMap((htmlStyle) => htmlStyle.selectorText
    .split(',')
    .map((selector) => selector.trim())
    .filter((selector) => /^[\dA-Za-z]+$/.test(selector))
    .map((tagName) => [tagName, htmlStyle.style[property]])));
exports.CSS_DISPLAY_TAGS = Object.assign(Object.assign({}, getCssStyleTags('display')), { button: 'inline-block', template: 'inline', source: 'block', track: 'block', script: 'block', param: 'block', details: 'block', summary: 'block', dialog: 'block', meter: 'inline-block', progress: 'inline-block', object: 'inline-block', video: 'inline-block', audio: 'inline-block', select: 'inline-block', option: 'block', optgroup: 'block' });
exports.CSS_DISPLAY_LIQUID_TAGS = {
    if: 'inline',
    unless: 'inline',
    else: 'inline',
    elsif: 'inline',
    case: 'inline',
    when: 'inline',
    for: 'inline',
    cycle: 'inline',
    tablerow: 'block',
    break: 'none',
    continue: 'none',
    comment: 'none',
    echo: 'inline',
    form: 'block',
    layout: 'none',
    liquid: 'inline',
    paginate: 'inline',
    raw: 'inline',
    render: 'inline',
    include: 'inline',
    section: 'block',
    style: 'none',
    assign: 'none',
    capture: 'inline',
    increment: 'inline',
    decrement: 'inline',
};
exports.CSS_DISPLAY_LIQUID_DEFAULT = 'inline';
exports.CSS_DISPLAY_DEFAULT = 'inline';
exports.CSS_WHITE_SPACE_TAGS = getCssStyleTags('white-space');
exports.CSS_WHITE_SPACE_DEFAULT = 'normal';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmV2YWx1YXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbnN0YW50cy5ldmFsdWF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxNQUFNLFVBQVUsR0FBUSxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7QUFFL0MsTUFBTSxlQUFlLEdBQUcsQ0FBQyxRQUFnQixFQUFFLEVBQUUsQ0FDM0MsTUFBTSxDQUFDLFdBQVcsQ0FDaEIsVUFBVTtLQUNQLE1BQU0sQ0FBQyxDQUFDLFNBQWMsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUNyRCxPQUFPLENBQUMsQ0FBQyxTQUFjLEVBQUUsRUFBRSxDQUMxQixTQUFTLENBQUMsWUFBWTtLQUNuQixLQUFLLENBQUMsR0FBRyxDQUFDO0tBQ1YsR0FBRyxDQUFDLENBQUMsUUFBYSxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7S0FDdkMsTUFBTSxDQUFDLENBQUMsUUFBYSxFQUFFLEVBQUUsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ3pELEdBQUcsQ0FBQyxDQUFDLE9BQVksRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQy9ELENBQ0osQ0FBQztBQUVTLFFBQUEsZ0JBQWdCLG1DQUN4QixlQUFlLENBQUMsU0FBUyxDQUFDLEtBRzdCLE1BQU0sRUFBRSxjQUFjLEVBR3RCLFFBQVEsRUFBRSxRQUFRLEVBQ2xCLE1BQU0sRUFBRSxPQUFPLEVBQ2YsS0FBSyxFQUFFLE9BQU8sRUFDZCxNQUFNLEVBQUUsT0FBTyxFQUNmLEtBQUssRUFBRSxPQUFPLEVBTWQsT0FBTyxFQUFFLE9BQU8sRUFDaEIsT0FBTyxFQUFFLE9BQU8sRUFDaEIsTUFBTSxFQUFFLE9BQU8sRUFDZixLQUFLLEVBQUUsY0FBYyxFQUNyQixRQUFRLEVBQUUsY0FBYyxFQUN4QixNQUFNLEVBQUUsY0FBYyxFQUN0QixLQUFLLEVBQUUsY0FBYyxFQUNyQixLQUFLLEVBQUUsY0FBYyxFQUNyQixNQUFNLEVBQUUsY0FBYyxFQUN0QixNQUFNLEVBQUUsT0FBTyxFQUNmLFFBQVEsRUFBRSxPQUFPLElBQ2pCO0FBRVcsUUFBQSx1QkFBdUIsR0FBMkI7SUFFN0QsRUFBRSxFQUFFLFFBQVE7SUFDWixNQUFNLEVBQUUsUUFBUTtJQUNoQixJQUFJLEVBQUUsUUFBUTtJQUNkLEtBQUssRUFBRSxRQUFRO0lBQ2YsSUFBSSxFQUFFLFFBQVE7SUFDZCxJQUFJLEVBQUUsUUFBUTtJQUdkLEdBQUcsRUFBRSxRQUFRO0lBQ2IsS0FBSyxFQUFFLFFBQVE7SUFDZixRQUFRLEVBQUUsT0FBTztJQUNqQixLQUFLLEVBQUUsTUFBTTtJQUNiLFFBQVEsRUFBRSxNQUFNO0lBR2hCLE9BQU8sRUFBRSxNQUFNO0lBQ2YsSUFBSSxFQUFFLFFBQVE7SUFDZCxJQUFJLEVBQUUsT0FBTztJQUNiLE1BQU0sRUFBRSxNQUFNO0lBQ2QsTUFBTSxFQUFFLFFBQVE7SUFDaEIsUUFBUSxFQUFFLFFBQVE7SUFDbEIsR0FBRyxFQUFFLFFBQVE7SUFDYixNQUFNLEVBQUUsUUFBUTtJQUNoQixPQUFPLEVBQUUsUUFBUTtJQUNqQixPQUFPLEVBQUUsT0FBTztJQUNoQixLQUFLLEVBQUUsTUFBTTtJQUdiLE1BQU0sRUFBRSxNQUFNO0lBQ2QsT0FBTyxFQUFFLFFBQVE7SUFDakIsU0FBUyxFQUFFLFFBQVE7SUFDbkIsU0FBUyxFQUFFLFFBQVE7Q0FDcEIsQ0FBQztBQUVXLFFBQUEsMEJBQTBCLEdBQUcsUUFBUSxDQUFDO0FBRXRDLFFBQUEsbUJBQW1CLEdBQUcsUUFBUSxDQUFDO0FBQy9CLFFBQUEsb0JBQW9CLEdBQy9CLGVBQWUsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNwQixRQUFBLHVCQUF1QixHQUFHLFFBQVEsQ0FBQyJ9

/***/ }),

/***/ "./dist/index.js":
/*!***********************!*\
  !*** ./dist/index.js ***!
  \***********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

const parser_1 = __webpack_require__(/*! ./parser */ "./dist/parser/index.js");
const printer_1 = __webpack_require__(/*! ./printer */ "./dist/printer/index.js");
const languages = [
    {
        name: 'LiquidHTML',
        parsers: [parser_1.liquidHtmlLanguageName],
        extensions: ['.liquid'],
        vscodeLanguageIds: ['liquid', 'Liquid'],
    },
];
const options = {
    singleLineLinkTags: {
        type: 'boolean',
        category: 'HTML',
        default: false,
        description: 'Always print link tags on a single line to remove clutter',
        since: '0.1.0',
    },
    indentSchema: {
        type: 'boolean',
        category: 'LIQUID',
        default: false,
        description: 'Indent the contents of the {% schema %} tag',
        since: '0.1.0',
    },
};
const defaultOptions = {
    printWidth: 120,
};
const plugin = {
    languages,
    parsers: parser_1.parsers,
    printers: printer_1.printers,
    options,
    defaultOptions,
};
module.exports = plugin;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQU1BLHFDQUEyRDtBQUMzRCx1Q0FBcUM7QUFHckMsTUFBTSxTQUFTLEdBQXNCO0lBQ25DO1FBQ0UsSUFBSSxFQUFFLFlBQVk7UUFDbEIsT0FBTyxFQUFFLENBQUMsK0JBQXNCLENBQUM7UUFDakMsVUFBVSxFQUFFLENBQUMsU0FBUyxDQUFDO1FBQ3ZCLGlCQUFpQixFQUFFLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQztLQUN4QztDQUNGLENBQUM7QUFFRixNQUFNLE9BQU8sR0FBbUI7SUFDOUIsa0JBQWtCLEVBQUU7UUFDbEIsSUFBSSxFQUFFLFNBQVM7UUFDZixRQUFRLEVBQUUsTUFBTTtRQUNoQixPQUFPLEVBQUUsS0FBSztRQUNkLFdBQVcsRUFBRSwyREFBMkQ7UUFDeEUsS0FBSyxFQUFFLE9BQU87S0FDZjtJQUNELFlBQVksRUFBRTtRQUNaLElBQUksRUFBRSxTQUFTO1FBQ2YsUUFBUSxFQUFFLFFBQVE7UUFDbEIsT0FBTyxFQUFFLEtBQUs7UUFDZCxXQUFXLEVBQUUsNkNBQTZDO1FBQzFELEtBQUssRUFBRSxPQUFPO0tBQ2Y7Q0FDRixDQUFDO0FBRUYsTUFBTSxjQUFjLEdBQTZCO0lBQy9DLFVBQVUsRUFBRSxHQUFHO0NBQ2hCLENBQUM7QUFFRixNQUFNLE1BQU0sR0FBMkI7SUFDckMsU0FBUztJQUNULE9BQU8sRUFBUCxnQkFBTztJQUNQLFFBQVEsRUFBUixrQkFBUTtJQUNSLE9BQU87SUFDUCxjQUFjO0NBQ2YsQ0FBQztBQUVGLGlCQUFTLE1BQU0sQ0FBQyJ9

/***/ }),

/***/ "./dist/parser/ast.js":
/*!****************************!*\
  !*** ./dist/parser/ast.js ***!
  \****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.walk = exports.cstToAst = exports.toLiquidHtmlAST = exports.isBranchedTag = void 0;
const cst_1 = __webpack_require__(/*! ../parser/cst */ "./dist/parser/cst.js");
const types_1 = __webpack_require__(/*! ../types */ "./dist/types.js");
const utils_1 = __webpack_require__(/*! ../utils */ "./dist/utils.js");
const errors_1 = __webpack_require__(/*! ../parser/errors */ "./dist/parser/errors.js");
function isBranchedTag(node) {
    return (node.type === types_1.NodeTypes.LiquidTag &&
        ['if', 'for', 'unless', 'case'].includes(node.name));
}
exports.isBranchedTag = isBranchedTag;
function isBranchTag(node) {
    return (node.type === types_1.NodeTypes.LiquidTag &&
        ['else', 'elsif', 'when'].includes(node.name));
}
function toLiquidHtmlAST(text) {
    const cst = (0, cst_1.toLiquidHtmlCST)(text);
    const root = {
        type: types_1.NodeTypes.Document,
        source: text,
        children: cstToAst(cst, text),
        name: '#document',
        position: {
            start: 0,
            end: text.length,
        },
    };
    return root;
}
exports.toLiquidHtmlAST = toLiquidHtmlAST;
class ASTBuilder {
    constructor(source) {
        this.ast = [];
        this.cursor = [];
        this.source = source;
    }
    get current() {
        return (0, utils_1.deepGet)(this.cursor, this.ast);
    }
    get currentPosition() {
        return (this.current || []).length - 1;
    }
    get parent() {
        if (this.cursor.length == 0)
            return undefined;
        return (0, utils_1.deepGet)((0, utils_1.dropLast)(1, this.cursor), this.ast);
    }
    open(node) {
        this.current.push(node);
        this.cursor.push(this.currentPosition);
        this.cursor.push('children');
        if (isBranchedTag(node)) {
            this.open({
                type: types_1.NodeTypes.LiquidBranch,
                name: null,
                markup: '',
                position: {
                    start: node.position.end,
                    end: node.position.end,
                },
                blockStartPosition: {
                    start: node.position.end,
                    end: node.position.end,
                },
                children: [],
                whitespaceStart: '',
                whitespaceEnd: '',
                source: this.source,
            });
        }
    }
    push(node) {
        var _a;
        if (node.type === types_1.NodeTypes.LiquidTag && isBranchTag(node)) {
            this.cursor.pop();
            this.cursor.pop();
            this.open({
                name: node.name,
                type: types_1.NodeTypes.LiquidBranch,
                markup: node.markup,
                position: Object.assign({}, node.position),
                children: [],
                blockStartPosition: Object.assign({}, node.position),
                whitespaceStart: node.whitespaceStart,
                whitespaceEnd: node.whitespaceEnd,
                source: this.source,
            });
        }
        else {
            if (((_a = this.parent) === null || _a === void 0 ? void 0 : _a.type) === types_1.NodeTypes.LiquidBranch) {
                this.parent.position.end = node.position.end;
            }
            this.current.push(node);
        }
    }
    close(node, nodeType) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        if (((_a = this.parent) === null || _a === void 0 ? void 0 : _a.type) === types_1.NodeTypes.LiquidBranch) {
            this.parent.position.end = node.locStart;
            this.cursor.pop();
            this.cursor.pop();
        }
        if (getName(this.parent) !== getName(node) ||
            ((_b = this.parent) === null || _b === void 0 ? void 0 : _b.type) !== nodeType) {
            throw new errors_1.LiquidHTMLASTParsingError(`Attempting to close ${nodeType} '${node.name}' before ${(_c = this.parent) === null || _c === void 0 ? void 0 : _c.type} '${(_d = this.parent) === null || _d === void 0 ? void 0 : _d.name}' was closed`, this.source, ((_f = (_e = this.parent) === null || _e === void 0 ? void 0 : _e.position) === null || _f === void 0 ? void 0 : _f.start) || 0, node.locEnd);
        }
        this.parent.position.end = node.locEnd;
        this.parent.blockEndPosition = position(node);
        if (this.parent.type == types_1.NodeTypes.LiquidTag &&
            node.type == cst_1.ConcreteNodeTypes.LiquidTagClose) {
            this.parent.delimiterWhitespaceStart = (_g = node.whitespaceStart) !== null && _g !== void 0 ? _g : '';
            this.parent.delimiterWhitespaceEnd = (_h = node.whitespaceEnd) !== null && _h !== void 0 ? _h : '';
        }
        this.cursor.pop();
        this.cursor.pop();
    }
}
function getName(node) {
    if (!node)
        return null;
    switch (node.type) {
        case types_1.NodeTypes.HtmlElement:
        case cst_1.ConcreteNodeTypes.HtmlTagClose:
            if (typeof node.name === 'string')
                return node.name;
            return `{{${node.name.markup.trim()}}}`;
        default:
            return node.name;
    }
}
function cstToAst(cst, source) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const builder = new ASTBuilder(source);
    for (const node of cst) {
        switch (node.type) {
            case cst_1.ConcreteNodeTypes.TextNode: {
                builder.push({
                    type: types_1.NodeTypes.TextNode,
                    value: node.value,
                    position: position(node),
                    source,
                });
                break;
            }
            case cst_1.ConcreteNodeTypes.LiquidDrop: {
                builder.push(toLiquidDrop(node, source));
                break;
            }
            case cst_1.ConcreteNodeTypes.LiquidTagOpen: {
                builder.open({
                    type: types_1.NodeTypes.LiquidTag,
                    markup: node.markup,
                    position: position(node),
                    children: [],
                    name: node.name,
                    whitespaceStart: (_a = node.whitespaceStart) !== null && _a !== void 0 ? _a : '',
                    whitespaceEnd: (_b = node.whitespaceEnd) !== null && _b !== void 0 ? _b : '',
                    blockStartPosition: position(node),
                    source,
                });
                break;
            }
            case cst_1.ConcreteNodeTypes.LiquidTagClose: {
                builder.close(node, types_1.NodeTypes.LiquidTag);
                break;
            }
            case cst_1.ConcreteNodeTypes.LiquidTag: {
                builder.push({
                    type: types_1.NodeTypes.LiquidTag,
                    markup: node.markup,
                    position: position(node),
                    name: node.name,
                    whitespaceStart: (_c = node.whitespaceStart) !== null && _c !== void 0 ? _c : '',
                    whitespaceEnd: (_d = node.whitespaceEnd) !== null && _d !== void 0 ? _d : '',
                    blockStartPosition: position(node),
                    source,
                });
                break;
            }
            case cst_1.ConcreteNodeTypes.LiquidRawTag: {
                builder.push({
                    type: types_1.NodeTypes.LiquidRawTag,
                    name: node.name,
                    body: node.body,
                    whitespaceStart: (_e = node.whitespaceStart) !== null && _e !== void 0 ? _e : '',
                    whitespaceEnd: (_f = node.whitespaceEnd) !== null && _f !== void 0 ? _f : '',
                    delimiterWhitespaceStart: (_g = node.delimiterWhitespaceStart) !== null && _g !== void 0 ? _g : '',
                    delimiterWhitespaceEnd: (_h = node.delimiterWhitespaceEnd) !== null && _h !== void 0 ? _h : '',
                    position: position(node),
                    blockStartPosition: {
                        start: node.blockStartLocStart,
                        end: node.blockStartLocEnd,
                    },
                    blockEndPosition: {
                        start: node.blockEndLocStart,
                        end: node.blockEndLocEnd,
                    },
                    source,
                });
                break;
            }
            case cst_1.ConcreteNodeTypes.HtmlTagOpen: {
                builder.open(toHtmlElement(node, source));
                break;
            }
            case cst_1.ConcreteNodeTypes.HtmlTagClose: {
                builder.close(node, types_1.NodeTypes.HtmlElement);
                break;
            }
            case cst_1.ConcreteNodeTypes.HtmlVoidElement: {
                builder.push(toHtmlVoidElement(node, source));
                break;
            }
            case cst_1.ConcreteNodeTypes.HtmlSelfClosingElement: {
                builder.push(toHtmlSelfClosingElement(node, source));
                break;
            }
            case cst_1.ConcreteNodeTypes.HtmlComment: {
                builder.push({
                    type: types_1.NodeTypes.HtmlComment,
                    body: node.body,
                    position: position(node),
                    source,
                });
                break;
            }
            case cst_1.ConcreteNodeTypes.HtmlRawTag: {
                builder.push({
                    type: types_1.NodeTypes.HtmlRawNode,
                    name: node.name,
                    body: node.body,
                    attributes: toAttributes(node.attrList || [], source),
                    position: position(node),
                    source,
                    blockStartPosition: {
                        start: node.blockStartLocStart,
                        end: node.blockStartLocEnd,
                    },
                    blockEndPosition: {
                        start: node.blockEndLocStart,
                        end: node.blockEndLocEnd,
                    },
                });
                break;
            }
            case cst_1.ConcreteNodeTypes.AttrEmpty: {
                builder.push({
                    type: types_1.NodeTypes.AttrEmpty,
                    name: node.name,
                    position: position(node),
                    source,
                });
                break;
            }
            case cst_1.ConcreteNodeTypes.AttrSingleQuoted:
            case cst_1.ConcreteNodeTypes.AttrDoubleQuoted:
            case cst_1.ConcreteNodeTypes.AttrUnquoted: {
                const abstractNode = {
                    type: node.type,
                    name: node.name,
                    position: position(node),
                    source,
                    attributePosition: { start: -1, end: -1 },
                    value: [],
                };
                const value = toAttributeValue(node.value, source);
                abstractNode.value = value;
                abstractNode.attributePosition = toAttributePosition(node, value);
                builder.push(abstractNode);
                break;
            }
            default: {
                (0, utils_1.assertNever)(node);
            }
        }
    }
    return builder.ast;
}
exports.cstToAst = cstToAst;
function toAttributePosition(node, value) {
    if (value.length === 0) {
        return {
            start: node.locStart + node.name.length + '='.length + '"'.length,
            end: node.locStart + node.name.length + '='.length + '"'.length,
        };
    }
    return {
        start: value[0].position.start,
        end: value[value.length - 1].position.end,
    };
}
function toAttributeValue(value, source) {
    return cstToAst(value, source);
}
function toAttributes(attrList, source) {
    return cstToAst(attrList, source);
}
function toName(name, source) {
    if (typeof name === 'string')
        return name;
    return toLiquidDrop(name, source);
}
function toLiquidDrop(node, source) {
    var _a, _b;
    return {
        type: types_1.NodeTypes.LiquidDrop,
        markup: node.markup,
        whitespaceStart: (_a = node.whitespaceStart) !== null && _a !== void 0 ? _a : '',
        whitespaceEnd: (_b = node.whitespaceEnd) !== null && _b !== void 0 ? _b : '',
        position: position(node),
        source,
    };
}
function toHtmlElement(node, source) {
    return {
        type: types_1.NodeTypes.HtmlElement,
        name: toName(node.name, source),
        attributes: toAttributes(node.attrList || [], source),
        position: position(node),
        blockStartPosition: position(node),
        blockEndPosition: { start: -1, end: -1 },
        children: [],
        source,
    };
}
function toHtmlVoidElement(node, source) {
    return {
        type: types_1.NodeTypes.HtmlVoidElement,
        name: node.name,
        attributes: toAttributes(node.attrList || [], source),
        position: position(node),
        blockStartPosition: position(node),
        source,
    };
}
function toHtmlSelfClosingElement(node, source) {
    return {
        type: types_1.NodeTypes.HtmlSelfClosingElement,
        name: toName(node.name, source),
        attributes: toAttributes(node.attrList || [], source),
        position: position(node),
        blockStartPosition: position(node),
        source,
    };
}
function position(node) {
    return {
        start: node.locStart,
        end: node.locEnd,
    };
}
function walk(ast, fn, parentNode) {
    for (const key of ['children', 'attributes']) {
        if (key in ast) {
            ast[key].forEach((node) => walk(node, fn, ast));
        }
    }
    if ('value' in ast) {
        if (Array.isArray(ast.value)) {
            ast.value.forEach((node) => walk(node, fn, ast));
        }
    }
    if ('name' in ast) {
        if (ast.name && typeof ast.name !== 'string' && ast.name.type) {
            fn(ast.name, ast);
        }
    }
    fn(ast, parentNode);
}
exports.walk = walk;
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ "./dist/parser/cst.js":
/*!****************************!*\
  !*** ./dist/parser/cst.js ***!
  \****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toLiquidHtmlCST = exports.ConcreteNodeTypes = void 0;
const extras_1 = __webpack_require__(/*! ohm-js/extras */ "./node_modules/ohm-js/extras/index.js");
const grammar_1 = __webpack_require__(/*! ../parser/grammar */ "./dist/parser/grammar.js");
const errors_1 = __webpack_require__(/*! ../parser/errors */ "./dist/parser/errors.js");
var ConcreteNodeTypes;
(function (ConcreteNodeTypes) {
    ConcreteNodeTypes["HtmlComment"] = "HtmlComment";
    ConcreteNodeTypes["HtmlRawTag"] = "HtmlRawTag";
    ConcreteNodeTypes["HtmlVoidElement"] = "HtmlVoidElement";
    ConcreteNodeTypes["HtmlSelfClosingElement"] = "HtmlSelfClosingElement";
    ConcreteNodeTypes["HtmlTagOpen"] = "HtmlTagOpen";
    ConcreteNodeTypes["HtmlTagClose"] = "HtmlTagClose";
    ConcreteNodeTypes["AttrSingleQuoted"] = "AttrSingleQuoted";
    ConcreteNodeTypes["AttrDoubleQuoted"] = "AttrDoubleQuoted";
    ConcreteNodeTypes["AttrUnquoted"] = "AttrUnquoted";
    ConcreteNodeTypes["AttrEmpty"] = "AttrEmpty";
    ConcreteNodeTypes["LiquidDrop"] = "LiquidDrop";
    ConcreteNodeTypes["LiquidRawTag"] = "LiquidRawTag";
    ConcreteNodeTypes["LiquidTag"] = "LiquidTag";
    ConcreteNodeTypes["LiquidTagOpen"] = "LiquidTagOpen";
    ConcreteNodeTypes["LiquidTagClose"] = "LiquidTagClose";
    ConcreteNodeTypes["TextNode"] = "TextNode";
})(ConcreteNodeTypes = exports.ConcreteNodeTypes || (exports.ConcreteNodeTypes = {}));
const markup = (i) => (tokens) => tokens[i].sourceString.trim();
function toLiquidHtmlCST(text) {
    const locStart = (tokens) => tokens[0].source.startIdx;
    const locEnd = (tokens) => tokens[tokens.length - 1].source.endIdx;
    const textNode = {
        type: ConcreteNodeTypes.TextNode,
        value: function () {
            return this.sourceString;
        },
        locStart,
        locEnd,
    };
    const res = grammar_1.liquidHtmlGrammar.match(text);
    if (res.failed()) {
        throw new errors_1.LiquidHTMLCSTParsingError(res);
    }
    const ohmAST = (0, extras_1.toAST)(res, {
        HtmlComment: {
            body: markup(1),
            locStart,
            locEnd,
        },
        HtmlRawTagImpl: {
            type: 'HtmlRawTag',
            name: 1,
            attrList: 2,
            body: 4,
            locStart,
            locEnd,
            blockStartLocStart: (tokens) => tokens[0].source.startIdx,
            blockStartLocEnd: (tokens) => tokens[3].source.endIdx,
            blockEndLocStart: (tokens) => tokens[5].source.startIdx,
            blockEndLocEnd: (tokens) => tokens[5].source.endIdx,
        },
        HtmlVoidElement: {
            name: 1,
            attrList: 2,
            locStart,
            locEnd,
        },
        HtmlSelfClosingElement: {
            name: 1,
            attrList: 2,
            locStart,
            locEnd,
        },
        HtmlTagOpen: {
            name: 1,
            attrList: 2,
            locStart,
            locEnd,
        },
        HtmlTagClose: {
            name: 1,
            locStart,
            locEnd,
        },
        tagNameOrLiquidDrop: 0,
        AttrUnquoted: {
            name: 0,
            value: 2,
            locStart,
            locEnd,
        },
        AttrSingleQuoted: {
            name: 0,
            value: 3,
            locStart,
            locEnd,
        },
        AttrDoubleQuoted: {
            name: 0,
            value: 3,
            locStart,
            locEnd,
        },
        attrEmpty: {
            type: ConcreteNodeTypes.AttrEmpty,
            name: 0,
            locStart,
            locEnd,
        },
        attrDoubleQuotedValue: 0,
        attrSingleQuotedValue: 0,
        attrUnquotedValue: 0,
        attrDoubleQuotedTextNode: textNode,
        attrSingleQuotedTextNode: textNode,
        attrUnquotedTextNode: textNode,
        liquidNode: 0,
        liquidRawTag: 0,
        liquidRawTagImpl: {
            type: ConcreteNodeTypes.LiquidRawTag,
            name: 3,
            body: 7,
            whitespaceStart: 1,
            whitespaceEnd: 5,
            delimiterWhitespaceStart: 9,
            delimiterWhitespaceEnd: 14,
            locStart,
            locEnd,
            blockStartLocStart: (tokens) => tokens[0].source.startIdx,
            blockStartLocEnd: (tokens) => tokens[6].source.endIdx,
            blockEndLocStart: (tokens) => tokens[8].source.startIdx,
            blockEndLocEnd: (tokens) => tokens[15].source.endIdx,
        },
        liquidTagOpen: {
            type: ConcreteNodeTypes.LiquidTagOpen,
            name: 3,
            markup: markup(5),
            whitespaceStart: 1,
            whitespaceEnd: 6,
            locStart,
            locEnd,
        },
        liquidTagClose: {
            type: ConcreteNodeTypes.LiquidTagClose,
            name: 4,
            whitespaceStart: 1,
            whitespaceEnd: 7,
            locStart,
            locEnd,
        },
        liquidTag: {
            type: ConcreteNodeTypes.LiquidTag,
            name: 3,
            markup: markup(5),
            whitespaceStart: 1,
            whitespaceEnd: 6,
            locStart,
            locEnd,
        },
        liquidDrop: {
            type: ConcreteNodeTypes.LiquidDrop,
            markup: markup(2),
            whitespaceStart: 1,
            whitespaceEnd: 3,
            locStart,
            locEnd,
        },
        liquidInlineComment: {
            type: ConcreteNodeTypes.LiquidTag,
            name: 3,
            markup: markup(5),
            whitespaceStart: 1,
            whitespaceEnd: 6,
            locStart,
            locEnd,
        },
        TextNode: textNode,
    });
    return ohmAST;
}
exports.toLiquidHtmlCST = toLiquidHtmlCST;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3N0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3BhcnNlci9jc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsMENBQXNDO0FBQ3RDLDhDQUFxRDtBQUNyRCw0Q0FBNEQ7QUFFNUQsSUFBWSxpQkFpQlg7QUFqQkQsV0FBWSxpQkFBaUI7SUFDM0IsZ0RBQTJCLENBQUE7SUFDM0IsOENBQXlCLENBQUE7SUFDekIsd0RBQW1DLENBQUE7SUFDbkMsc0VBQWlELENBQUE7SUFDakQsZ0RBQTJCLENBQUE7SUFDM0Isa0RBQTZCLENBQUE7SUFDN0IsMERBQXFDLENBQUE7SUFDckMsMERBQXFDLENBQUE7SUFDckMsa0RBQTZCLENBQUE7SUFDN0IsNENBQXVCLENBQUE7SUFDdkIsOENBQXlCLENBQUE7SUFDekIsa0RBQTZCLENBQUE7SUFDN0IsNENBQXVCLENBQUE7SUFDdkIsb0RBQStCLENBQUE7SUFDL0Isc0RBQWlDLENBQUE7SUFDakMsMENBQXFCLENBQUE7QUFDdkIsQ0FBQyxFQWpCVyxpQkFBaUIsR0FBakIseUJBQWlCLEtBQWpCLHlCQUFpQixRQWlCNUI7QUFtSUQsTUFBTSxNQUFNLEdBQUcsQ0FBQyxDQUFTLEVBQUUsRUFBRSxDQUFDLENBQUMsTUFBVyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDO0FBRTdFLFNBQWdCLGVBQWUsQ0FBQyxJQUFZO0lBQzFDLE1BQU0sUUFBUSxHQUFHLENBQUMsTUFBVyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztJQUM1RCxNQUFNLE1BQU0sR0FBRyxDQUFDLE1BQVcsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUN4RSxNQUFNLFFBQVEsR0FBRztR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

/***/ }),

/***/ "./dist/parser/errors.js":
/*!*******************************!*\
  !*** ./dist/parser/errors.js ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LiquidHTMLASTParsingError = exports.LiquidHTMLCSTParsingError = void 0;
const line_column_1 = __importDefault(__webpack_require__(/*! line-column */ "./node_modules/line-column/lib/line-column.js"));
class LiquidHTMLCSTParsingError extends SyntaxError {
    constructor(ohm) {
        super(ohm.shortMessage);
        this.name = 'LiquidHTMLParsingError';
        const input = ohm.input;
        const errorPos = ohm._rightmostFailurePosition;
        const lineCol = (0, line_column_1.default)(input).fromIndex(Math.min(errorPos, input.length - 1));
        if (lineCol) {
            this.loc = {
                start: {
                    line: lineCol.line,
                    column: lineCol.col,
                },
                end: {
                    line: lineCol.line,
                    column: lineCol.col,
                },
            };
        }
    }
}
exports.LiquidHTMLCSTParsingError = LiquidHTMLCSTParsingError;
class LiquidHTMLASTParsingError extends SyntaxError {
    constructor(message, source, startIndex, endIndex) {
        super(message);
        this.name = 'LiquidHTMLParsingError';
        const lc = (0, line_column_1.default)(source);
        const start = lc.fromIndex(startIndex);
        const end = lc.fromIndex(Math.min(endIndex, source.length - 1));
        this.loc = {
            start: {
                line: start.line,
                column: start.col,
            },
            end: {
                line: end.line,
                column: end.col,
            },
        };
    }
}
exports.LiquidHTMLASTParsingError = LiquidHTMLASTParsingError;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3BhcnNlci9lcnJvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsOERBQXFDO0FBT3JDLE1BQWEseUJBQTBCLFNBQVEsV0FBVztJQUd4RCxZQUFZLEdBQWdCO1FBQzFCLEtBQUssQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDeEIsSUFBSSxDQUFDLElBQUksR0FBRyx3QkFBd0IsQ0FBQztRQUVyQyxNQUFNLEtBQUssR0FBSSxHQUFXLENBQUMsS0FBSyxDQUFDO1FBQ2pDLE1BQU0sUUFBUSxHQUFJLEdBQVcsQ0FBQyx5QkFBeUIsQ0FBQztRQUN4RCxNQUFNLE9BQU8sR0FBRyxJQUFBLHFCQUFVLEVBQUMsS0FBSyxDQUFDLENBQUMsU0FBUyxDQUN6QyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUNyQyxDQUFDO1FBS0YsSUFBSSxPQUFPLEVBQUU7WUFDWCxJQUFJLENBQUMsR0FBRyxHQUFHO2dCQUNULEtBQUssRUFBRTtvQkFDTCxJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUk7b0JBQ2xCLE1BQU0sRUFBRSxPQUFPLENBQUMsR0FBRztpQkFDcEI7Z0JBQ0QsR0FBRyxFQUFFO29CQUNILElBQUksRUFBRSxPQUFPLENBQUMsSUFBSTtvQkFDbEIsTUFBTSxFQUFFLE9BQU8sQ0FBQyxHQUFHO2lCQUNwQjthQUNGLENBQUM7U0FDSDtJQUNILENBQUM7Q0FDRjtBQTdCRCw4REE2QkM7QUFFRCxNQUFhLHlCQUEwQixTQUFRLFdBQVc7SUFHeEQsWUFDRSxPQUFlLEVBQ2YsTUFBYyxFQUNkLFVBQWtCLEVBQ2xCLFFBQWdCO1FBRWhCLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNmLElBQUksQ0FBQyxJQUFJLEdBQUcsd0JBQXdCLENBQUM7UUFFckMsTUFBTSxFQUFFLEdBQUcsSUFBQSxxQkFBVSxFQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzlCLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdkMsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFLaEUsSUFBSSxDQUFDLEdBQUcsR0FBRztZQUNULEtBQUssRUFBRTtnQkFDTCxJQUFJLEVBQUUsS0FBTSxDQUFDLElBQUk7Z0JBQ2pCLE1BQU0sRUFBRSxLQUFNLENBQUMsR0FBRzthQUNuQjtZQUNELEdBQUcsRUFBRTtnQkFDSCxJQUFJLEVBQUUsR0FBSSxDQUFDLElBQUk7Z0JBQ2YsTUFBTSxFQUFFLEdBQUksQ0FBQyxHQUFHO2FBQ2pCO1NBQ0YsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQTlCRCw4REE4QkMifQ==

/***/ }),

/***/ "./dist/parser/grammar.js":
/*!********************************!*\
  !*** ./dist/parser/grammar.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VOID_ELEMENTS = exports.BLOCKS = exports.liquidHtmlGrammar = void 0;
const ohm_js_1 = __importDefault(__webpack_require__(/*! ohm-js */ "./node_modules/ohm-js/dist/ohm.esm.js"));
exports.liquidHtmlGrammar = ohm_js_1.default.grammar(__webpack_require__(/*! ../../grammar/liquid-html.ohm.js */ "./build/shims/liquid-html-ohm.js"));
exports.BLOCKS = exports.liquidHtmlGrammar.rules.blockName.body.terms.map((x) => x.obj);
exports.VOID_ELEMENTS = exports.liquidHtmlGrammar.rules.voidElementName.body.terms.map((x) => x.args[0].obj);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JhbW1hci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXJzZXIvZ3JhbW1hci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxvREFBeUI7QUFFWixRQUFBLGlCQUFpQixHQUFHLGdCQUFHLENBQUMsT0FBTyxDQUMxQyxPQUFPLENBQUMsa0NBQWtDLENBQUMsQ0FDNUMsQ0FBQztBQUdXLFFBQUEsTUFBTSxHQUFJLHlCQUFpQixDQUFDLEtBQWEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQzdFLENBQUMsQ0FBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUNOLENBQUM7QUFHRCxRQUFBLGFBQWEsR0FDeEIseUJBQWlCLENBQUMsS0FDbkIsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFhLENBQUMifQ==

/***/ }),

/***/ "./dist/parser/index.js":
/*!******************************!*\
  !*** ./dist/parser/index.js ***!
  \******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parsers = exports.liquidHtmlAstFormat = exports.liquidHtmlLanguageName = void 0;
const parser_1 = __webpack_require__(/*! ../parser/parser */ "./dist/parser/parser.js");
Object.defineProperty(exports, "liquidHtmlAstFormat", ({ enumerable: true, get: function () { return parser_1.liquidHtmlAstFormat; } }));
Object.defineProperty(exports, "liquidHtmlLanguageName", ({ enumerable: true, get: function () { return parser_1.liquidHtmlLanguageName; } }));
__exportStar(__webpack_require__(/*! ../parser/ast */ "./dist/parser/ast.js"), exports);
exports.parsers = {
    [parser_1.liquidHtmlLanguageName]: parser_1.liquidHtmlParser,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcGFyc2VyL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSw0Q0FLeUI7QUFJUSxvR0FOL0IsNEJBQW1CLE9BTStCO0FBQTNDLHVHQUxQLCtCQUFzQixPQUtPO0FBRi9CLCtDQUE2QjtBQUloQixRQUFBLE9BQU8sR0FBWTtJQUM5QixDQUFDLCtCQUFzQixDQUFDLEVBQUUseUJBQWdCO0NBQzNDLENBQUMifQ==

/***/ }),

/***/ "./dist/parser/parser.js":
/*!*******************************!*\
  !*** ./dist/parser/parser.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.liquidHtmlParser = exports.liquidHtmlLanguageName = exports.liquidHtmlAstFormat = void 0;
const utils_1 = __webpack_require__(/*! ../utils */ "./dist/utils.js");
const ast_1 = __webpack_require__(/*! ../parser/ast */ "./dist/parser/ast.js");
function parse(text, _parsers, _opts) {
    return (0, ast_1.toLiquidHtmlAST)(text);
}
exports.liquidHtmlAstFormat = 'liquid-html-ast';
exports.liquidHtmlLanguageName = 'liquid-html';
exports.liquidHtmlParser = {
    parse,
    astFormat: exports.liquidHtmlAstFormat,
    locStart: utils_1.locStart,
    locEnd: utils_1.locEnd,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3BhcnNlci9wYXJzZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsbUNBQTJDO0FBQzNDLHNDQUErRDtBQUUvRCxTQUFTLEtBQUssQ0FDWixJQUFZLEVBQ1osUUFBaUIsRUFDakIsS0FBb0M7SUFFcEMsT0FBTyxJQUFBLHFCQUFlLEVBQUMsSUFBSSxDQUFDLENBQUM7QUFDL0IsQ0FBQztBQUVZLFFBQUEsbUJBQW1CLEdBQUcsaUJBQWlCLENBQUM7QUFFeEMsUUFBQSxzQkFBc0IsR0FBRyxhQUFhLENBQUM7QUFFdkMsUUFBQSxnQkFBZ0IsR0FBMkI7SUFDdEQsS0FBSztJQUNMLFNBQVMsRUFBRSwyQkFBbUI7SUFDOUIsUUFBUSxFQUFSLGdCQUFRO0lBQ1IsTUFBTSxFQUFOLGNBQU07Q0FDUCxDQUFDIn0=

/***/ }),

/***/ "./dist/printer/index.js":
/*!*******************************!*\
  !*** ./dist/printer/index.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.printers = void 0;
const printer_liquid_html_1 = __webpack_require__(/*! ../printer/printer-liquid-html */ "./dist/printer/printer-liquid-html.js");
const parser_1 = __webpack_require__(/*! ../parser */ "./dist/parser/index.js");
exports.printers = {
    [parser_1.liquidHtmlAstFormat]: printer_liquid_html_1.printerLiquidHtml,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcHJpbnRlci9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx1RUFBa0U7QUFDbEUscUNBQStDO0FBRWxDLFFBQUEsUUFBUSxHQUFHO0lBQ3RCLENBQUMsNEJBQW1CLENBQUMsRUFBRSx1Q0FBaUI7Q0FDekMsQ0FBQyJ9

/***/ }),

/***/ "./dist/printer/preprocess/augment-with-css-properties.js":
/*!****************************************************************!*\
  !*** ./dist/printer/preprocess/augment-with-css-properties.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.augmentWithCSSProperties = void 0;
const constants_evaluate_1 = __webpack_require__(/*! ../../constants.evaluate */ "./dist/constants.evaluate.js");
const types_1 = __webpack_require__(/*! ../../types */ "./dist/types.js");
const utils_1 = __webpack_require__(/*! ../../utils */ "./dist/utils.js");
function getCssDisplay(node, options) {
    if (node.prev && node.prev.type === types_1.NodeTypes.HtmlComment) {
        const match = node.prev.body.match(/^\s*display:\s*([a-z]+)\s*$/);
        if (match) {
            return match[1];
        }
    }
    switch (node.type) {
        case types_1.NodeTypes.HtmlElement:
        case types_1.NodeTypes.HtmlVoidElement:
        case types_1.NodeTypes.HtmlSelfClosingElement:
        case types_1.NodeTypes.HtmlRawNode: {
            switch (options.htmlWhitespaceSensitivity) {
                case 'strict':
                    return 'inline';
                case 'ignore':
                    return 'block';
                default: {
                    return ((typeof node.name === 'string' && constants_evaluate_1.CSS_DISPLAY_TAGS[node.name]) ||
                        constants_evaluate_1.CSS_DISPLAY_DEFAULT);
                }
            }
        }
        case types_1.NodeTypes.TextNode:
            return 'inline';
        case types_1.NodeTypes.LiquidTag:
        case types_1.NodeTypes.LiquidRawTag:
            switch (options.htmlWhitespaceSensitivity) {
                case 'strict':
                    return 'inline';
                case 'ignore':
                    return 'block';
                default: {
                    return (constants_evaluate_1.CSS_DISPLAY_LIQUID_TAGS[node.name] || constants_evaluate_1.CSS_DISPLAY_LIQUID_DEFAULT);
                }
            }
        case types_1.NodeTypes.LiquidBranch:
        case types_1.NodeTypes.LiquidDrop:
            return 'inline';
        case types_1.NodeTypes.AttrDoubleQuoted:
        case types_1.NodeTypes.AttrSingleQuoted:
        case types_1.NodeTypes.AttrUnquoted:
        case types_1.NodeTypes.AttrEmpty:
            return 'inline';
        case types_1.NodeTypes.HtmlComment:
            return 'block';
        case types_1.NodeTypes.Document:
            return 'block';
        default:
            return (0, utils_1.assertNever)(node);
    }
}
function getNodeCssStyleWhiteSpace(node) {
    switch (node.type) {
        case types_1.NodeTypes.HtmlElement:
        case types_1.NodeTypes.HtmlVoidElement:
        case types_1.NodeTypes.HtmlSelfClosingElement:
        case types_1.NodeTypes.HtmlRawNode: {
            return ((typeof node.name === 'string' && constants_evaluate_1.CSS_WHITE_SPACE_TAGS[node.name]) ||
                constants_evaluate_1.CSS_WHITE_SPACE_DEFAULT);
        }
        case types_1.NodeTypes.TextNode:
            return constants_evaluate_1.CSS_WHITE_SPACE_DEFAULT;
        case types_1.NodeTypes.LiquidRawTag:
            return 'pre';
        case types_1.NodeTypes.LiquidTag:
            return constants_evaluate_1.CSS_WHITE_SPACE_DEFAULT;
        case types_1.NodeTypes.LiquidBranch:
        case types_1.NodeTypes.LiquidDrop:
            return constants_evaluate_1.CSS_WHITE_SPACE_DEFAULT;
        case types_1.NodeTypes.AttrDoubleQuoted:
        case types_1.NodeTypes.AttrSingleQuoted:
        case types_1.NodeTypes.AttrUnquoted:
        case types_1.NodeTypes.AttrEmpty:
            return constants_evaluate_1.CSS_WHITE_SPACE_DEFAULT;
        case types_1.NodeTypes.HtmlComment:
            return constants_evaluate_1.CSS_WHITE_SPACE_DEFAULT;
        case types_1.NodeTypes.Document:
            return constants_evaluate_1.CSS_WHITE_SPACE_DEFAULT;
        default:
            return (0, utils_1.assertNever)(node);
    }
}
const augmentWithCSSProperties = (options, node) => {
    const augmentations = {
        cssDisplay: getCssDisplay(node, options),
        cssWhitespace: getNodeCssStyleWhiteSpace(node),
    };
    Object.assign(node, augmentations);
};
exports.augmentWithCSSProperties = augmentWithCSSProperties;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVnbWVudC13aXRoLWNzcy1wcm9wZXJ0aWVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3ByaW50ZXIvcHJlcHJvY2Vzcy9hdWdtZW50LXdpdGgtY3NzLXByb3BlcnRpZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkRBTzhCO0FBQzlCLG1DQU9pQjtBQUNqQixtQ0FBc0M7QUFFdEMsU0FBUyxhQUFhLENBQ3BCLElBQWlDLEVBQ2pDLE9BQTRCO0lBRTVCLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxpQkFBUyxDQUFDLFdBQVcsRUFBRTtRQUV6RCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQztRQUNsRSxJQUFJLEtBQUssRUFBRTtZQUNULE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2pCO0tBQ0Y7SUFFRCxRQUFRLElBQUksQ0FBQyxJQUFJLEVBQUU7UUFDakIsS0FBSyxpQkFBUyxDQUFDLFdBQVcsQ0FBQztRQUMzQixLQUFLLGlCQUFTLENBQUMsZUFBZSxDQUFDO1FBQy9CLEtBQUssaUJBQVMsQ0FBQyxzQkFBc0IsQ0FBQztRQUN0QyxLQUFLLGlCQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDMUIsUUFBUSxPQUFPLENBQUMseUJBQXlCLEVBQUU7Z0JBQ3pDLEtBQUssUUFBUTtvQkFDWCxPQUFPLFFBQVEsQ0FBQztnQkFDbEIsS0FBSyxRQUFRO29CQUNYLE9BQU8sT0FBTyxDQUFDO2dCQUNqQixPQUFPLENBQUMsQ0FBQztvQkFDUCxPQUFPLENBQ0wsQ0FBQyxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssUUFBUSxJQUFJLHFDQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzt3QkFDOUQsd0NBQW1CLENBQ3BCLENBQUM7aUJBQ0g7YUFDRjtTQUNGO1FBRUQsS0FBSyxpQkFBUyxDQUFDLFFBQVE7WUFDckIsT0FBTyxRQUFRLENBQUM7UUFFbEIsS0FBSyxpQkFBUyxDQUFDLFNBQVMsQ0FBQztRQUN6QixLQUFLLGlCQUFTLENBQUMsWUFBWTtZQUN6QixRQUFRLE9BQU8sQ0FBQyx5QkFBeUIsRUFBRTtnQkFDekMsS0FBSyxRQUFRO29CQUNYLE9BQU8sUUFBUSxDQUFDO2dCQUNsQixLQUFLLFFBQVE7b0JBQ1gsT0FBTyxPQUFPLENBQUM7Z0JBQ2pCLE9BQU8sQ0FBQyxDQUFDO29CQUNQLE9BQU8sQ0FDTCw0Q0FBdUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksK0NBQTBCLENBQ2pFLENBQUM7aUJBQ0g7YUFDRjtRQUVILEtBQUssaUJBQVMsQ0FBQyxZQUFZLENBQUM7UUFDNUIsS0FBSyxpQkFBUyxDQUFDLFVBQVU7WUFDdkIsT0FBTyxRQUFRLENBQUM7UUFFbEIsS0FBSyxpQkFBUyxDQUFDLGdCQUFnQixDQUFDO1FBQ2hDLEtBQUssaUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQztRQUNoQyxLQUFLLGlCQUFTLENBQUMsWUFBWSxDQUFDO1FBQzVCLEtBQUssaUJBQVMsQ0FBQyxTQUFTO1lBQ3RCLE9BQU8sUUFBUSxDQUFDO1FBRWxCLEtBQUssaUJBQVMsQ0FBQyxXQUFXO1lBQ3hCLE9BQU8sT0FBTyxDQUFDO1FBRWpCLEtBQUssaUJBQVMsQ0FBQyxRQUFRO1lBQ3JCLE9BQU8sT0FBTyxDQUFDO1FBRWpCO1lBQ0UsT0FBTyxJQUFBLG1CQUFXLEVBQUMsSUFBSSxDQUFDLENBQUM7S0FDNUI7QUFDSCxDQUFDO0FBRUQsU0FBUyx5QkFBeUIsQ0FBQyxJQUFpQztJQUNsRSxRQUFRLElBQUksQ0FBQyxJQUFJLEVBQUU7UUFDakIsS0FBSyxpQkFBUyxDQUFDLFdBQVcsQ0FBQztRQUMzQixLQUFLLGlCQUFTLENBQUMsZUFBZSxDQUFDO1FBQy9CLEtBQUssaUJBQVMsQ0FBQyxzQkFBc0IsQ0FBQztRQUN0QyxLQUFLLGlCQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDMUIsT0FBTyxDQUNMLENBQUMsT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLFFBQVEsSUFBSSx5Q0FBb0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ2xFLDRDQUF1QixDQUN4QixDQUFDO1NBQ0g7UUFFRCxLQUFLLGlCQUFTLENBQUMsUUFBUTtZQUNyQixPQUFPLDRDQUF1QixDQUFDO1FBRWpDLEtBQUssaUJBQVMsQ0FBQyxZQUFZO1lBQ3pCLE9BQU8sS0FBSyxDQUFDO1FBRWYsS0FBSyxpQkFBUyxDQUFDLFNBQVM7WUFDdEIsT0FBTyw0Q0FBdUIsQ0FBQztRQUVqQyxLQUFLLGlCQUFTLENBQUMsWUFBWSxDQUFDO1FBQzVCLEtBQUssaUJBQVMsQ0FBQyxVQUFVO1lBQ3ZCLE9BQU8sNENBQXVCLENBQUM7UUFFakMsS0FBSyxpQkFBUyxDQUFDLGdCQUFnQixDQUFDO1FBQ2hDLEtBQUssaUJBQVMsQ0FBQyxnQkFBZ0IsQ0FBQztRQUNoQyxLQUFLLGlCQUFTLENBQUMsWUFBWSxDQUFDO1FBQzVCLEtBQUssaUJBQVMsQ0FBQyxTQUFTO1lBQ3RCLE9BQU8sNENBQXVCLENBQUM7UUFFakMsS0FBSyxpQkFBUyxDQUFDLFdBQVc7WUFDeEIsT0FBTyw0Q0FBdUIsQ0FBQztRQUVqQyxLQUFLLGlCQUFTLENBQUMsUUFBUTtZQUNyQixPQUFPLDRDQUF1QixDQUFDO1FBRWpDO1lBQ0UsT0FBTyxJQUFBLG1CQUFXLEVBQUMsSUFBSSxDQUFDLENBQUM7S0FDNUI7QUFDSCxDQUFDO0FBRU0sTUFBTSx3QkFBd0IsR0FBMEIsQ0FDN0QsT0FBTyxFQUNQLElBQUksRUFDSixFQUFFO0lBQ0YsTUFBTSxhQUFhLEdBQXNCO1FBQ3ZDLFVBQVUsRUFBRSxhQUFhLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQztRQUN4QyxhQUFhLEVBQUUseUJBQXlCLENBQUMsSUFBSSxDQUFDO0tBQy9DLENBQUM7SUFFRixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxhQUFhLENBQUMsQ0FBQztBQUNyQyxDQUFDLENBQUM7QUFWVyxRQUFBLHdCQUF3Qiw0QkFVbkMifQ==

/***/ }),

/***/ "./dist/printer/preprocess/augment-with-family.js":
/*!********************************************************!*\
  !*** ./dist/printer/preprocess/augment-with-family.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.augmentWithFamily = void 0;
const augmentWithFamily = (_options, node) => {
    const children = node.children || [];
    const augmentations = {
        firstChild: children[0],
        lastChild: children[children.length - 1],
    };
    Object.assign(node, augmentations);
};
exports.augmentWithFamily = augmentWithFamily;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVnbWVudC13aXRoLWZhbWlseS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wcmludGVyL3ByZXByb2Nlc3MvYXVnbWVudC13aXRoLWZhbWlseS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFTyxNQUFNLGlCQUFpQixHQUFnQixDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsRUFBRTtJQUMvRCxNQUFNLFFBQVEsR0FBc0IsSUFBWSxDQUFDLFFBQVEsSUFBSSxFQUFFLENBQUM7SUFDaEUsTUFBTSxhQUFhLEdBQWU7UUFDaEMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDdkIsU0FBUyxFQUFFLFFBQVEsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztLQUN6QyxDQUFDO0lBRUYsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsYUFBYSxDQUFDLENBQUM7QUFDckMsQ0FBQyxDQUFDO0FBUlcsUUFBQSxpQkFBaUIscUJBUTVCIn0=

/***/ }),

/***/ "./dist/printer/preprocess/augment-with-parent.js":
/*!********************************************************!*\
  !*** ./dist/printer/preprocess/augment-with-parent.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.augmentWithParent = void 0;
const augmentWithParent = (_options, node, parentNode) => {
    const augmentations = {
        parentNode: parentNode,
    };
    Object.assign(node, augmentations);
    Object.defineProperty(node, 'rawSource', {
        get() {
            return this.source.slice(this.position.start, this.position.end);
        },
    });
};
exports.augmentWithParent = augmentWithParent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVnbWVudC13aXRoLXBhcmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wcmludGVyL3ByZXByb2Nlc3MvYXVnbWVudC13aXRoLXBhcmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFTyxNQUFNLGlCQUFpQixHQUFnQixDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLEVBQUU7SUFDM0UsTUFBTSxhQUFhLEdBQWU7UUFDaEMsVUFBVSxFQUFFLFVBQW9DO0tBQ2pELENBQUM7SUFFRixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxhQUFhLENBQUMsQ0FBQztJQUluQyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxXQUFXLEVBQUU7UUFDdkMsR0FBRztZQUNELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNuRSxDQUFDO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDO0FBZFcsUUFBQSxpQkFBaUIscUJBYzVCIn0=

/***/ }),

/***/ "./dist/printer/preprocess/augment-with-siblings.js":
/*!**********************************************************!*\
  !*** ./dist/printer/preprocess/augment-with-siblings.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.augmentWithSiblings = exports.next = exports.prev = void 0;
const COLLECTION_KEYS = ['children', 'attributes', 'value'];
function prev(node) {
    if (!node.parentNode)
        return;
    const collection = parentCollection(node);
    return collection[collection.indexOf(node) - 1];
}
exports.prev = prev;
function next(node) {
    if (!node.parentNode)
        return;
    const collection = parentCollection(node);
    return collection[collection.indexOf(node) + 1];
}
exports.next = next;
function parentCollection(node) {
    if (!node.parentNode ||
        ('name' in node.parentNode && node.parentNode.name === node)) {
        return [];
    }
    for (const key of COLLECTION_KEYS) {
        if (key in node.parentNode &&
            Array.isArray(node.parentNode[key])) {
            if (node.parentNode[key].indexOf(node) !== -1) {
                return node.parentNode[key];
            }
        }
    }
    throw new Error('Could not find parent collection of node');
}
const augmentWithSiblings = (_options, node) => {
    const augmentations = {
        next: next(node),
        prev: prev(node),
    };
    Object.assign(node, augmentations);
};
exports.augmentWithSiblings = augmentWithSiblings;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVnbWVudC13aXRoLXNpYmxpbmdzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3ByaW50ZXIvcHJlcHJvY2Vzcy9hdWdtZW50LXdpdGgtc2libGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBUUEsTUFBTSxlQUFlLEdBQUcsQ0FBQyxVQUFVLEVBQUUsWUFBWSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBRTVELFNBQWdCLElBQUksQ0FBQyxJQUErQjtJQUNsRCxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVU7UUFBRSxPQUFPO0lBQzdCLE1BQU0sVUFBVSxHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFDLE9BQU8sVUFBVSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQztBQUpELG9CQUlDO0FBRUQsU0FBZ0IsSUFBSSxDQUFDLElBQStCO0lBQ2xELElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVTtRQUFFLE9BQU87SUFDN0IsTUFBTSxVQUFVLEdBQUcsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUMsT0FBTyxVQUFVLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNsRCxDQUFDO0FBSkQsb0JBSUM7QUFFRCxTQUFTLGdCQUFnQixDQUN2QixJQUErQjtJQUUvQixJQUNFLENBQUMsSUFBSSxDQUFDLFVBQVU7UUFDaEIsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsRUFDNUQ7UUFDQSxPQUFPLEVBQUUsQ0FBQztLQUNYO0lBRUQsS0FBSyxNQUFNLEdBQUcsSUFBSSxlQUFlLEVBQUU7UUFFakMsSUFDRSxHQUFHLElBQUksSUFBSSxDQUFDLFVBQVU7WUFDdEIsS0FBSyxDQUFDLE9BQU8sQ0FBRSxJQUFZLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQzVDO1lBQ0EsSUFBSyxJQUFZLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtnQkFDdEQsT0FBUSxJQUFZLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ3RDO1NBQ0Y7S0FDRjtJQUVELE1BQU0sSUFBSSxLQUFLLENBQUMsMENBQTBDLENBQUMsQ0FBQztBQUM5RCxDQUFDO0FBRU0sTUFBTSxtQkFBbUIsR0FBd0IsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLEVBQUU7SUFDekUsTUFBTSxhQUFhLEdBQWlCO1FBQ2xDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUErQjtRQUM5QyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBK0I7S0FDL0MsQ0FBQztJQUVGLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0FBQ3JDLENBQUMsQ0FBQztBQVBXLFFBQUEsbUJBQW1CLHVCQU85QiJ9

/***/ }),

/***/ "./dist/printer/preprocess/augment-with-whitespace-helpers.js":
/*!********************************************************************!*\
  !*** ./dist/printer/preprocess/augment-with-whitespace-helpers.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isTrimmingInnerRight = exports.isTrimmingInnerLeft = exports.isTrimmingOuterLeft = exports.isTrimmingOuterRight = exports.isParentNode = exports.isHtmlNode = exports.augmentWithWhitespaceHelpers = void 0;
const types_1 = __webpack_require__(/*! ../../types */ "./dist/types.js");
const constants_evaluate_1 = __webpack_require__(/*! ../../constants.evaluate */ "./dist/constants.evaluate.js");
const parser_1 = __webpack_require__(/*! ../../parser */ "./dist/parser/index.js");
const utils_1 = __webpack_require__(/*! ../../printer/utils */ "./dist/printer/utils/index.js");
const augmentWithWhitespaceHelpers = (_options, node) => {
    const augmentations = {
        isDanglingWhitespaceSensitive: isDanglingWhitespaceSensitiveNode(node),
        isIndentationSensitive: isIndentationSensitiveNode(node),
        isWhitespaceSensitive: isWhitespaceSensitiveNode(node),
        isLeadingWhitespaceSensitive: isLeadingWhitespaceSensitiveNode(node) &&
            (!node.prev || isTrailingWhitespaceSensitiveNode(node.prev)),
        isTrailingWhitespaceSensitive: isTrailingWhitespaceSensitiveNode(node) &&
            (!node.next || isLeadingWhitespaceSensitiveNode(node.next)),
        hasLeadingWhitespace: hasLeadingWhitespace(node),
        hasTrailingWhitespace: hasTrailingWhitespace(node),
        hasDanglingWhitespace: hasDanglingWhitespace(node),
    };
    Object.assign(node, augmentations);
};
exports.augmentWithWhitespaceHelpers = augmentWithWhitespaceHelpers;
function isDanglingWhitespaceSensitiveNode(node) {
    return (isDanglingSpaceSensitiveCssDisplay(node.cssDisplay) &&
        !(0, utils_1.isScriptLikeTag)(node) &&
        !isTrimmingInnerLeft(node) &&
        !isTrimmingInnerRight(node));
}
function isWhitespaceSensitiveNode(node) {
    return (isIndentationSensitiveNode(node));
}
function isIndentationSensitiveNode(node) {
    return getNodeCssStyleWhiteSpace(node).startsWith('pre');
}
function isLeadingWhitespaceSensitiveNode(node) {
    if (!node) {
        return false;
    }
    if (isTrimmingOuterLeft(node)) {
        return false;
    }
    if (node.prev && isTrimmingOuterRight(node.prev)) {
        return false;
    }
    if (!node.parentNode || node.parentNode.cssDisplay === 'none') {
        return false;
    }
    if ((0, utils_1.isPreLikeNode)(node.parentNode)) {
        return true;
    }
    if ((0, utils_1.isScriptLikeTag)(node)) {
        return false;
    }
    if (!node.prev && (node.parentNode.type === types_1.NodeTypes.Document
        || (0, utils_1.isPreLikeNode)(node)
        || (0, utils_1.isScriptLikeTag)(node.parentNode)
        || !isInnerLeftSpaceSensitiveCssDisplay(node.parentNode.cssDisplay)
        || isTrimmingInnerLeft(node.parentNode))) {
        return false;
    }
    if (node.prev &&
        !isOuterRightWhitespaceSensitiveCssDisplay(node.prev.cssDisplay)) {
        return false;
    }
    if (!isOuterLeftWhitespaceSensitiveCssDisplay(node.cssDisplay)) {
        return false;
    }
    return true;
}
function isTrailingWhitespaceSensitiveNode(node) {
    if (isTrimmingOuterRight(node)) {
        return false;
    }
    if (node.next && isTrimmingOuterLeft(node.next)) {
        return false;
    }
    if (!node.parentNode || node.parentNode.cssDisplay === 'none') {
        return false;
    }
    if ((0, utils_1.isPreLikeNode)(node.parentNode)) {
        return true;
    }
    if ((0, utils_1.isScriptLikeTag)(node)) {
        return false;
    }
    if (isHtmlNode(node) && typeof node.name === 'string' && node.name === 'br') {
        return false;
    }
    if (!node.next && (node.parentNode.type === types_1.NodeTypes.Document
        || (0, utils_1.isPreLikeNode)(node)
        || (0, utils_1.isScriptLikeTag)(node.parentNode)
        || !isInnerRightWhitespaceSensitiveCssDisplay(node.parentNode.cssDisplay)
        || isTrimmingInnerRight(node.parentNode))) {
        return false;
    }
    if (node.next &&
        !isOuterLeftWhitespaceSensitiveCssDisplay(node.next.cssDisplay)) {
        return false;
    }
    if (!isOuterRightWhitespaceSensitiveCssDisplay(node.cssDisplay)) {
        return false;
    }
    return true;
}
function hasDanglingWhitespace(node) {
    if (!isParentNode(node)) {
        return false;
    }
    else if (node.type === types_1.NodeTypes.Document) {
        return node.children.length === 0 && node.source.length > 0;
    }
    else if (!node.children) {
        return false;
    }
    else if (node.type === types_1.NodeTypes.LiquidTag &&
        (0, parser_1.isBranchedTag)(node) &&
        node.children.length === 1) {
        return hasDanglingWhitespace(node.firstChild);
    }
    else if (node.children.length > 0) {
        return false;
    }
    return (0, utils_1.isWhitespace)(node.source, node.blockStartPosition.end);
}
function hasLeadingWhitespace(node) {
    if (node.type === types_1.NodeTypes.LiquidBranch && !node.prev) {
        return node.firstChild
            ? hasLeadingWhitespace(node.firstChild)
            : hasDanglingWhitespace(node);
    }
    return (0, utils_1.isWhitespace)(node.source, node.position.start - 1);
}
function hasTrailingWhitespace(node) {
    if (node.type === types_1.NodeTypes.LiquidBranch) {
        return node.lastChild
            ? hasTrailingWhitespace(node.lastChild)
            : hasDanglingWhitespace(node);
    }
    return (0, utils_1.isWhitespace)(node.source, node.position.end);
}
function isHtmlNode(node) {
    return types_1.HtmlNodeTypes.includes(node.type);
}
exports.isHtmlNode = isHtmlNode;
function isParentNode(node) {
    return 'children' in node;
}
exports.isParentNode = isParentNode;
function isTrimmingOuterRight(node) {
    var _a;
    if (!node)
        return false;
    switch (node.type) {
        case types_1.NodeTypes.LiquidRawTag:
        case types_1.NodeTypes.LiquidTag:
            return ((_a = node.delimiterWhitespaceEnd) !== null && _a !== void 0 ? _a : node.whitespaceEnd) === '-';
        case types_1.NodeTypes.LiquidBranch:
            return false;
        case types_1.NodeTypes.LiquidDrop:
            return node.whitespaceEnd === '-';
        default:
            return false;
    }
}
exports.isTrimmingOuterRight = isTrimmingOuterRight;
function isTrimmingOuterLeft(node) {
    if (!node)
        return false;
    switch (node.type) {
        case types_1.NodeTypes.LiquidRawTag:
        case types_1.NodeTypes.LiquidTag:
        case types_1.NodeTypes.LiquidBranch:
        case types_1.NodeTypes.LiquidDrop:
            return node.whitespaceStart === '-';
        default:
            return false;
    }
}
exports.isTrimmingOuterLeft = isTrimmingOuterLeft;
function isTrimmingInnerLeft(node) {
    if (!node)
        return false;
    switch (node.type) {
        case types_1.NodeTypes.LiquidRawTag:
        case types_1.NodeTypes.LiquidTag:
            if (node.delimiterWhitespaceEnd === undefined)
                return false;
            return node.whitespaceEnd === '-';
        case types_1.NodeTypes.LiquidBranch:
            if (!node.parentNode || node.parentNode.type !== types_1.NodeTypes.LiquidTag) {
                return false;
            }
            if (!node.prev) {
                return isTrimmingInnerLeft(node.parentNode);
            }
            return node.whitespaceEnd === '-';
        case types_1.NodeTypes.LiquidDrop:
        default:
            return false;
    }
}
exports.isTrimmingInnerLeft = isTrimmingInnerLeft;
function isTrimmingInnerRight(node) {
    if (!node)
        return false;
    switch (node.type) {
        case types_1.NodeTypes.LiquidRawTag:
        case types_1.NodeTypes.LiquidTag:
            if (node.delimiterWhitespaceStart === undefined)
                return false;
            return node.delimiterWhitespaceStart === '-';
        case types_1.NodeTypes.LiquidBranch:
            if (!node.parentNode || node.parentNode.type !== types_1.NodeTypes.LiquidTag) {
                return false;
            }
            if (!node.next) {
                return isTrimmingInnerRight(node.parentNode);
            }
            return isTrimmingOuterLeft(node.next);
        case types_1.NodeTypes.LiquidDrop:
        default:
            return false;
    }
}
exports.isTrimmingInnerRight = isTrimmingInnerRight;
function isBlockLikeCssDisplay(cssDisplay) {
    return (cssDisplay === 'block' ||
        cssDisplay === 'list-item' ||
        cssDisplay.startsWith('table'));
}
function isInnerLeftSpaceSensitiveCssDisplay(cssDisplay) {
    return !isBlockLikeCssDisplay(cssDisplay) && cssDisplay !== 'inline-block';
}
function isInnerRightWhitespaceSensitiveCssDisplay(cssDisplay) {
    return !isBlockLikeCssDisplay(cssDisplay) && cssDisplay !== 'inline-block';
}
function isOuterLeftWhitespaceSensitiveCssDisplay(cssDisplay) {
    return !isBlockLikeCssDisplay(cssDisplay);
}
function isOuterRightWhitespaceSensitiveCssDisplay(cssDisplay) {
    return !isBlockLikeCssDisplay(cssDisplay);
}
function isDanglingSpaceSensitiveCssDisplay(cssDisplay) {
    return !isBlockLikeCssDisplay(cssDisplay) && cssDisplay !== 'inline-block';
}
function getNodeCssStyleWhiteSpace(node) {
    return ((isHtmlNode(node) &&
        typeof node.name === 'string' &&
        constants_evaluate_1.CSS_WHITE_SPACE_TAGS[node.name]) ||
        constants_evaluate_1.CSS_WHITE_SPACE_DEFAULT);
}
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ "./dist/printer/preprocess/index.js":
/*!******************************************!*\
  !*** ./dist/printer/preprocess/index.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AUGMENTATION_PIPELINE = void 0;
const augment_with_css_properties_1 = __webpack_require__(/*! ../../printer/preprocess/augment-with-css-properties */ "./dist/printer/preprocess/augment-with-css-properties.js");
const augment_with_parent_1 = __webpack_require__(/*! ../../printer/preprocess/augment-with-parent */ "./dist/printer/preprocess/augment-with-parent.js");
const augment_with_siblings_1 = __webpack_require__(/*! ../../printer/preprocess/augment-with-siblings */ "./dist/printer/preprocess/augment-with-siblings.js");
const augment_with_whitespace_helpers_1 = __webpack_require__(/*! ../../printer/preprocess/augment-with-whitespace-helpers */ "./dist/printer/preprocess/augment-with-whitespace-helpers.js");
const augment_with_family_1 = __webpack_require__(/*! ../../printer/preprocess/augment-with-family */ "./dist/printer/preprocess/augment-with-family.js");
exports.AUGMENTATION_PIPELINE = [
    augment_with_parent_1.augmentWithParent,
    augment_with_siblings_1.augmentWithSiblings,
    augment_with_family_1.augmentWithFamily,
    augment_with_css_properties_1.augmentWithCSSProperties,
    augment_with_whitespace_helpers_1.augmentWithWhitespaceHelpers,
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcHJpbnRlci9wcmVwcm9jZXNzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGtHQUE0RjtBQUM1RixrRkFBNkU7QUFDN0Usc0ZBQWlGO0FBQ2pGLDBHQUFvRztBQUNwRyxrRkFBNkU7QUFFaEUsUUFBQSxxQkFBcUIsR0FBRztJQUNuQyx1Q0FBaUI7SUFDakIsMkNBQW1CO0lBQ25CLHVDQUFpQjtJQUNqQixzREFBd0I7SUFDeEIsOERBQTRCO0NBQzdCLENBQUMifQ==

/***/ }),

/***/ "./dist/printer/print-preprocess.js":
/*!******************************************!*\
  !*** ./dist/printer/print-preprocess.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.preprocess = void 0;
const AST = __importStar(__webpack_require__(/*! ../parser/ast */ "./dist/parser/ast.js"));
const preprocess_1 = __webpack_require__(/*! ../printer/preprocess */ "./dist/printer/preprocess/index.js");
function preprocess(ast, options) {
    const augmentationPipeline = preprocess_1.AUGMENTATION_PIPELINE.map((fn) => fn.bind(null, options));
    for (const augmentation of augmentationPipeline) {
        AST.walk(ast, augmentation);
    }
    return ast;
}
exports.preprocess = preprocess;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpbnQtcHJlcHJvY2Vzcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmludGVyL3ByaW50LXByZXByb2Nlc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLGtEQUFvQztBQUVwQyxxREFBNkQ7QUFJN0QsU0FBZ0IsVUFBVSxDQUN4QixHQUFxQixFQUNyQixPQUE0QjtJQUU1QixNQUFNLG9CQUFvQixHQUFHLGtDQUFxQixDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQzVELEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUN2QixDQUFDO0lBRUYsS0FBSyxNQUFNLFlBQVksSUFBSSxvQkFBb0IsRUFBRTtRQUMvQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxZQUFtQixDQUFDLENBQUM7S0FDcEM7SUFFRCxPQUFPLEdBQW1CLENBQUM7QUFDN0IsQ0FBQztBQWJELGdDQWFDIn0=

/***/ }),

/***/ "./dist/printer/print/children.js":
/*!****************************************!*\
  !*** ./dist/printer/print/children.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.printChildren = void 0;
const prettier_1 = __webpack_require__(/*! prettier */ "prettier");
const utils_1 = __webpack_require__(/*! ../../utils */ "./dist/utils.js");
const types_1 = __webpack_require__(/*! ../../types */ "./dist/types.js");
const utils_2 = __webpack_require__(/*! ../../printer/utils */ "./dist/printer/utils/index.js");
const tag_1 = __webpack_require__(/*! ../../printer/print/tag */ "./dist/printer/print/tag.js");
const { builders: { breakParent, group, ifBreak, line, softline, hardline }, } = prettier_1.doc;
const { replaceTextEndOfLine } = prettier_1.doc.utils;
function printChild(childPath, options, print, args) {
    const child = childPath.getValue();
    if ((0, utils_2.hasPrettierIgnore)(child)) {
        return [
            (0, tag_1.printOpeningTagPrefix)(child, options),
            ...replaceTextEndOfLine(options.originalText.slice((0, utils_1.locStart)(child) +
                (child.prev && (0, tag_1.needsToBorrowNextOpeningTagStartMarker)(child.prev)
                    ? (0, tag_1.printOpeningTagStartMarker)(child).length
                    : 0), (0, utils_1.locEnd)(child) -
                (child.next && (0, tag_1.needsToBorrowPrevClosingTagEndMarker)(child.next)
                    ? (0, tag_1.printClosingTagEndMarker)(child, options).length
                    : 0))),
            (0, tag_1.printClosingTagSuffix)(child, options),
        ];
    }
    return print(childPath, args);
}
function printBetweenLine(prevNode, nextNode) {
    if (!prevNode || !nextNode)
        return '';
    const spaceBetweenLinesIsHandledSomewhereElse = ((0, tag_1.needsToBorrowNextOpeningTagStartMarker)(prevNode) &&
        ((0, utils_2.hasPrettierIgnore)(nextNode) ||
            nextNode.firstChild ||
            (0, utils_2.hasNoCloseMarker)(nextNode) ||
            (nextNode.type === types_1.NodeTypes.HtmlElement &&
                nextNode.attributes.length > 0))) ||
        (prevNode.type === types_1.NodeTypes.HtmlElement &&
            (0, utils_2.hasNoCloseMarker)(prevNode) &&
            (0, tag_1.needsToBorrowPrevClosingTagEndMarker)(nextNode));
    if (spaceBetweenLinesIsHandledSomewhereElse) {
        return '';
    }
    const shouldUseHardline = !nextNode.isLeadingWhitespaceSensitive ||
        (0, utils_2.preferHardlineAsLeadingSpaces)(nextNode) ||
        ((0, tag_1.needsToBorrowPrevClosingTagEndMarker)(nextNode) &&
            prevNode.lastChild &&
            (0, tag_1.needsToBorrowParentClosingTagStartMarker)(prevNode.lastChild) &&
            prevNode.lastChild.lastChild &&
            (0, tag_1.needsToBorrowParentClosingTagStartMarker)(prevNode.lastChild.lastChild));
    if (shouldUseHardline) {
        return hardline;
    }
    return nextNode.hasLeadingWhitespace ? line : softline;
}
function printChildren(path, options, print, args) {
    const node = path.getValue();
    if (!node.children) {
        throw new Error('attempting to use printChildren on something without children');
    }
    if ((0, utils_2.forceBreakChildren)(node)) {
        return [
            breakParent,
            ...path.map((childPath) => {
                const childNode = childPath.getValue();
                const prevBetweenLine = printBetweenLine(childNode.prev, childNode);
                return [
                    !prevBetweenLine
                        ? ''
                        : [
                            prevBetweenLine,
                            (0, utils_2.forceNextEmptyLine)(childNode.prev) ? hardline : '',
                        ],
                    printChild(childPath, options, print, {
                        leadingSpaceGroupId: utils_2.FORCE_BREAK_GROUP_ID,
                        trailingSpaceGroupId: utils_2.FORCE_BREAK_GROUP_ID,
                    }),
                ];
            }, 'children'),
        ];
    }
    const leadingSpaceGroupIds = node.children.map((_, i) => Symbol(`leading-${i}`));
    const trailingSpaceGroupIds = node.children.map((_, i) => Symbol(`trailing-${i}`));
    const whitespaceBetweenNode = path.map((childPath, childIndex) => {
        const childNode = childPath.getValue();
        const leadingHardlines = [];
        const leadingWhitespace = [];
        const leadingDependentWhitespace = [];
        const trailingWhitespace = [];
        const trailingHardlines = [];
        const prevBetweenLine = printBetweenLine(childNode.prev, childNode);
        const nextBetweenLine = printBetweenLine(childNode, childNode.next);
        if ((0, utils_2.isTextLikeNode)(childNode)) {
            return {
                leadingHardlines,
                leadingWhitespace,
                leadingDependentWhitespace,
                trailingWhitespace,
                trailingHardlines,
            };
        }
        if (prevBetweenLine) {
            if ((0, utils_2.forceNextEmptyLine)(childNode.prev)) {
                leadingHardlines.push(hardline, hardline);
            }
            else if (prevBetweenLine === hardline) {
                leadingHardlines.push(hardline);
            }
            else {
                if ((0, utils_2.isTextLikeNode)(childNode.prev)) {
                    if ((0, utils_2.isLiquidNode)(childNode) && prevBetweenLine === softline) {
                        leadingDependentWhitespace.push(prevBetweenLine);
                    }
                    else {
                        leadingWhitespace.push(prevBetweenLine);
                    }
                }
                else {
                    leadingWhitespace.push(ifBreak('', softline, {
                        groupId: trailingSpaceGroupIds[childIndex - 1],
                    }));
                }
            }
        }
        if (nextBetweenLine) {
            if ((0, utils_2.forceNextEmptyLine)(childNode)) {
                if ((0, utils_2.isTextLikeNode)(childNode.next)) {
                    trailingHardlines.push(hardline, hardline);
                }
            }
            else if (nextBetweenLine === hardline) {
                if ((0, utils_2.isTextLikeNode)(childNode.next)) {
                    trailingHardlines.push(hardline);
                }
            }
            else {
                trailingWhitespace.push(nextBetweenLine);
            }
        }
        return {
            leadingHardlines,
            leadingWhitespace,
            leadingDependentWhitespace,
            trailingWhitespace,
            trailingHardlines,
        };
    }, 'children');
    return path.map((childPath, childIndex) => {
        const { leadingHardlines, leadingWhitespace, leadingDependentWhitespace, trailingWhitespace, trailingHardlines, } = whitespaceBetweenNode[childIndex];
        return [
            ...leadingHardlines,
            group([
                ...leadingWhitespace,
                group([
                    ...leadingDependentWhitespace,
                    printChild(childPath, options, print, {
                        leadingSpaceGroupId: leadingSpaceGroupId(whitespaceBetweenNode, childIndex),
                        trailingSpaceGroupId: trailingSpaceGroupId(whitespaceBetweenNode, childIndex),
                    }),
                    ...trailingWhitespace,
                ], {
                    id: trailingSpaceGroupIds[childIndex],
                }),
            ], {
                id: leadingSpaceGroupIds[childIndex],
            }),
            ...trailingHardlines,
        ];
    }, 'children');
    function leadingSpaceGroupId(whitespaceBetweenNode, index) {
        if (index === 0) {
            return args.leadingSpaceGroupId;
        }
        const prev = whitespaceBetweenNode[index - 1];
        const curr = whitespaceBetweenNode[index];
        const groupIds = [];
        if (!(0, utils_2.isEmpty)(prev.trailingHardlines) || !(0, utils_2.isEmpty)(curr.leadingHardlines)) {
            return utils_2.FORCE_BREAK_GROUP_ID;
        }
        if (!(0, utils_2.isEmpty)(prev.trailingWhitespace)) {
            groupIds.push(trailingSpaceGroupIds[index - 1]);
        }
        if (!(0, utils_2.isEmpty)(curr.leadingWhitespace)) {
            groupIds.push(leadingSpaceGroupIds[index]);
        }
        if (!(0, utils_2.isEmpty)(curr.leadingDependentWhitespace)) {
            groupIds.push(trailingSpaceGroupIds[index]);
        }
        if ((0, utils_2.isEmpty)(groupIds)) {
            groupIds.push(utils_2.FORCE_FLAT_GROUP_ID);
        }
        return groupIds;
    }
    function trailingSpaceGroupId(whitespaceBetweenNode, index) {
        if (index === whitespaceBetweenNode.length - 1) {
            return args.trailingSpaceGroupId;
        }
        const curr = whitespaceBetweenNode[index];
        const next = whitespaceBetweenNode[index + 1];
        const groupIds = [];
        if (!(0, utils_2.isEmpty)(curr.trailingHardlines) || !(0, utils_2.isEmpty)(next.leadingHardlines)) {
            return utils_2.FORCE_BREAK_GROUP_ID;
        }
        if (!(0, utils_2.isEmpty)(curr.trailingWhitespace)) {
            groupIds.push(trailingSpaceGroupIds[index]);
        }
        if ((0, utils_2.isEmpty)(groupIds)) {
            groupIds.push(utils_2.FORCE_FLAT_GROUP_ID);
        }
        return groupIds;
    }
}
exports.printChildren = printChildren;
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ "./dist/printer/print/element.js":
/*!***************************************!*\
  !*** ./dist/printer/print/element.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.printElement = void 0;
const prettier_1 = __webpack_require__(/*! prettier */ "prettier");
const utils_1 = __webpack_require__(/*! ../../printer/utils */ "./dist/printer/utils/index.js");
const tag_1 = __webpack_require__(/*! ../../printer/print/tag */ "./dist/printer/print/tag.js");
const children_1 = __webpack_require__(/*! ../../printer/print/children */ "./dist/printer/print/children.js");
const types_1 = __webpack_require__(/*! ../../types */ "./dist/types.js");
const { builders: { breakParent, dedentToRoot, group, indent, line, softline }, } = prettier_1.doc;
const { replaceTextEndOfLine } = prettier_1.doc.utils;
function printElement(path, options, print) {
    const node = path.getValue();
    if ((0, utils_1.hasNoCloseMarker)(node)) {
        return [
            group((0, tag_1.printOpeningTag)(path, options, print)),
            ...(0, tag_1.printClosingTag)(node, options),
            (0, tag_1.printClosingTagSuffix)(node, options),
        ];
    }
    if ((0, utils_1.shouldPreserveContent)(node, options) ||
        node.type === types_1.NodeTypes.HtmlRawNode) {
        return [
            (0, tag_1.printOpeningTagPrefix)(node, options),
            group((0, tag_1.printOpeningTag)(path, options, print)),
            ...replaceTextEndOfLine((0, tag_1.getNodeContent)(node, options)),
            ...(0, tag_1.printClosingTag)(node, options),
            (0, tag_1.printClosingTagSuffix)(node, options),
        ];
    }
    const attrGroupId = Symbol('element-attr-group-id');
    const elementGroupId = Symbol('element-group-id');
    const printTag = (doc) => group([
        group((0, tag_1.printOpeningTag)(path, options, print), { id: attrGroupId }),
        doc,
        (0, tag_1.printClosingTag)(node, options),
    ], { id: elementGroupId });
    const printLineBeforeChildren = () => {
        if (node.firstChild.hasLeadingWhitespace &&
            node.firstChild.isLeadingWhitespaceSensitive) {
            return line;
        }
        if (node.firstChild.type === types_1.NodeTypes.TextNode &&
            node.isWhitespaceSensitive &&
            node.isIndentationSensitive) {
            return dedentToRoot(softline);
        }
        return softline;
    };
    const printLineAfterChildren = () => {
        const needsToBorrow = node.next
            ? (0, tag_1.needsToBorrowPrevClosingTagEndMarker)(node.next)
            : (0, tag_1.needsToBorrowLastChildClosingTagEndMarker)(node.parentNode);
        if (needsToBorrow) {
            if (node.lastChild.hasTrailingWhitespace &&
                node.lastChild.isTrailingWhitespaceSensitive) {
                return ' ';
            }
            return '';
        }
        if (node.lastChild.hasTrailingWhitespace &&
            node.lastChild.isTrailingWhitespaceSensitive) {
            return line;
        }
        return softline;
    };
    if (node.children.length === 0) {
        return printTag(node.hasDanglingWhitespace && node.isDanglingWhitespaceSensitive
            ? line
            : '');
    }
    return printTag([
        (0, utils_1.forceBreakContent)(node) ? breakParent : '',
        indent([
            printLineBeforeChildren(),
            (0, children_1.printChildren)(path, options, print, {
                leadingSpaceGroupId: elementGroupId,
                trailingSpaceGroupId: elementGroupId,
            }),
        ]),
        printLineAfterChildren(),
    ]);
}
exports.printElement = printElement;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxlbWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wcmludGVyL3ByaW50L2VsZW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOzs7QUFFYix1Q0FBNkM7QUFDN0MsMkNBSXlCO0FBQ3pCLDZDQVE2QjtBQUM3Qix1REFBeUQ7QUFDekQsbUNBTWlCO0FBRWpCLE1BQU0sRUFDSixRQUFRLEVBQUUsRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxHQUN2RSxHQUFHLGNBQUcsQ0FBQztBQUNSLE1BQU0sRUFBRSxvQkFBb0IsRUFBRSxHQUFHLGNBQUcsQ0FBQyxLQUFZLENBQUM7QUFFbEQsU0FBZ0IsWUFBWSxDQUMxQixJQUE2QyxFQUM3QyxPQUE0QixFQUM1QixLQUFvQjtJQUVwQixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7SUFFN0IsSUFBSSxJQUFBLHdCQUFnQixFQUFDLElBQUksQ0FBQyxFQUFFO1FBRTFCLE9BQU87WUFDTCxLQUFLLENBQUMsSUFBQSxxQkFBZSxFQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDNUMsR0FBRyxJQUFBLHFCQUFlLEVBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQztZQUNqQyxJQUFBLDJCQUFxQixFQUFDLElBQUksRUFBRSxPQUFPLENBQUM7U0FDckMsQ0FBQztLQUNIO0lBRUQsSUFDRSxJQUFBLDZCQUFxQixFQUFDLElBQUksRUFBRSxPQUFPLENBQUM7UUFDcEMsSUFBSSxDQUFDLElBQUksS0FBSyxpQkFBUyxDQUFDLFdBQVcsRUFDbkM7UUFDQSxPQUFPO1lBQ0wsSUFBQSwyQkFBcUIsRUFBQyxJQUFJLEVBQUUsT0FBTyxDQUFDO1lBQ3BDLEtBQUssQ0FBQyxJQUFBLHFCQUFlLEVBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLENB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

/***/ }),

/***/ "./dist/printer/print/liquid.js":
/*!**************************************!*\
  !*** ./dist/printer/print/liquid.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.printLiquidBranch = exports.printLiquidTag = exports.printLiquidBlockEnd = exports.printLiquidBlockStart = exports.printLiquidDrop = void 0;
const prettier_1 = __webpack_require__(/*! prettier */ "prettier");
const types_1 = __webpack_require__(/*! ../../types */ "./dist/types.js");
const ast_1 = __webpack_require__(/*! ../../parser/ast */ "./dist/parser/ast.js");
const utils_1 = __webpack_require__(/*! ../../utils */ "./dist/utils.js");
const utils_2 = __webpack_require__(/*! ../../printer/utils */ "./dist/printer/utils/index.js");
const children_1 = __webpack_require__(/*! ../../printer/print/children */ "./dist/printer/print/children.js");
const LIQUID_TAGS_THAT_ALWAYS_BREAK = ['for', 'case'];
const { builders } = prettier_1.doc;
const { group, hardline, ifBreak, indent, join, line, softline } = builders;
function printLiquidDrop(path, _options, _print, { leadingSpaceGroupId, trailingSpaceGroupId }) {
    const node = path.getValue();
    const whitespaceStart = (0, utils_2.getWhitespaceTrim)(node.whitespaceStart, (0, utils_2.hasMeaningfulLackOfLeadingWhitespace)(node), leadingSpaceGroupId);
    const whitespaceEnd = (0, utils_2.getWhitespaceTrim)(node.whitespaceEnd, (0, utils_2.hasMeaningfulLackOfTrailingWhitespace)(node), trailingSpaceGroupId);
    const lines = (0, utils_2.markupLines)(node);
    if (lines.length > 1) {
        return group([
            '{{',
            whitespaceStart,
            indent([hardline, join(hardline, lines.map(utils_2.trim))]),
            hardline,
            whitespaceEnd,
            '}}',
        ]);
    }
    return group([
        '{{',
        whitespaceStart,
        ' ',
        node.markup,
        ' ',
        whitespaceEnd,
        '}}',
    ]);
}
exports.printLiquidDrop = printLiquidDrop;
function printLiquidBlockStart(path, leadingSpaceGroupId, trailingSpaceGroupId) {
    const node = path.getValue();
    if (!node.name)
        return '';
    const lines = (0, utils_2.markupLines)(node);
    const whitespaceStart = (0, utils_2.getWhitespaceTrim)(node.whitespaceStart, needsBlockStartLeadingWhitespaceStrippingOnBreak(node), leadingSpaceGroupId);
    const whitespaceEnd = (0, utils_2.getWhitespaceTrim)(node.whitespaceEnd, needsBlockStartTrailingWhitespaceStrippingOnBreak(node), trailingSpaceGroupId);
    if (node.name === 'liquid') {
        return group([
            '{%',
            whitespaceStart,
            ' ',
            node.name,
            indent([hardline, join(hardline, (0, utils_2.reindent)(lines, true))]),
            hardline,
            whitespaceEnd,
            '%}',
        ]);
    }
    if (lines.length > 1) {
        return group([
            '{%',
            whitespaceStart,
            indent([hardline, node.name, ' ', join(hardline, lines.map(utils_2.trim))]),
            hardline,
            whitespaceEnd,
            '%}',
        ]);
    }
    const markup = node.markup;
    return group([
        '{%',
        whitespaceStart,
        ' ',
        node.name,
        markup ? ` ${markup}` : '',
        ' ',
        whitespaceEnd,
        '%}',
    ]);
}
exports.printLiquidBlockStart = printLiquidBlockStart;
function printLiquidBlockEnd(path, leadingSpaceGroupId, trailingSpaceGroupId) {
    var _a, _b;
    const node = path.getValue();
    if (!node.children || !node.blockEndPosition)
        return '';
    const whitespaceStart = (0, utils_2.getWhitespaceTrim)((_a = node.delimiterWhitespaceStart) !== null && _a !== void 0 ? _a : '', needsBlockEndLeadingWhitespaceStrippingOnBreak(node), leadingSpaceGroupId);
    const whitespaceEnd = (0, utils_2.getWhitespaceTrim)((_b = node.delimiterWhitespaceEnd) !== null && _b !== void 0 ? _b : '', (0, utils_2.hasMeaningfulLackOfTrailingWhitespace)(node), trailingSpaceGroupId);
    return group([
        '{%',
        whitespaceStart,
        ` end${node.name} `,
        whitespaceEnd,
        '%}',
    ]);
}
exports.printLiquidBlockEnd = printLiquidBlockEnd;
function printLiquidTag(path, options, print, { leadingSpaceGroupId, trailingSpaceGroupId } = {}) {
    const node = path.getValue();
    if (!node.children || !node.blockEndPosition) {
        return printLiquidBlockStart(path, leadingSpaceGroupId, trailingSpaceGroupId);
    }
    const tagGroupId = Symbol('tag-group');
    const blockStart = printLiquidBlockStart(path, leadingSpaceGroupId, tagGroupId);
    const blockEnd = printLiquidBlockEnd(path, tagGroupId, trailingSpaceGroupId);
    let body = [];
    if ((0, ast_1.isBranchedTag)(node)) {
        body = cleanDoc(path.map((p) => print(p, {
            leadingSpaceGroupId: tagGroupId,
            trailingSpaceGroupId: tagGroupId,
        }), 'children'));
        if (node.name === 'case')
            body = indent(body);
    }
    else if (node.children.length > 0) {
        body = indent([
            innerLeadingWhitespace(node),
            (0, children_1.printChildren)(path, options, print, {
                leadingSpaceGroupId: tagGroupId,
                trailingSpaceGroupId: tagGroupId,
            }),
        ]);
    }
    return group([blockStart, body, innerTrailingWhitespace(node), blockEnd], {
        id: tagGroupId,
        shouldBreak: LIQUID_TAGS_THAT_ALWAYS_BREAK.includes(node.name) ||
            (0, utils_2.originallyHadLineBreaks)(path, options) ||
            isAttributeNode(node) ||
            (0, utils_2.isDeeplyNested)(node),
    });
}
exports.printLiquidTag = printLiquidTag;
function isAttributeNode(node) {
    return ((0, utils_2.isHtmlNode)(node.parentNode) &&
        node.parentNode.attributes.indexOf(node) !== -1);
}
function innerLeadingWhitespace(node) {
    if (!node.firstChild) {
        if (node.isDanglingWhitespaceSensitive && node.hasDanglingWhitespace) {
            return line;
        }
        else {
            return '';
        }
    }
    if (node.firstChild.hasLeadingWhitespace &&
        node.firstChild.isLeadingWhitespaceSensitive) {
        return line;
    }
    return softline;
}
function innerTrailingWhitespace(node) {
    if (node.type === types_1.NodeTypes.LiquidBranch ||
        !node.blockEndPosition ||
        !node.lastChild) {
        return '';
    }
    if (node.lastChild.hasTrailingWhitespace &&
        node.lastChild.isTrailingWhitespaceSensitive) {
        return line;
    }
    return softline;
}
function printLiquidDefaultBranch(path, options, print, args) {
    const branch = path.getValue();
    const parentNode = path.getParentNode();
    const shouldCollapseSpace = (0, utils_2.isEmpty)(branch.children) && parentNode.children.length === 1;
    if (shouldCollapseSpace)
        return '';
    const isBranchEmptyWithoutSpace = (0, utils_2.isEmpty)(branch.children) && !branch.hasDanglingWhitespace;
    if (isBranchEmptyWithoutSpace)
        return '';
    if (branch.hasDanglingWhitespace) {
        return ifBreak('', ' ');
    }
    return indent([
        innerLeadingWhitespace(parentNode),
        (0, children_1.printChildren)(path, options, print, args),
    ]);
}
function printLiquidBranch(path, options, print, args) {
    const branch = path.getValue();
    const isDefaultBranch = !branch.name;
    if (isDefaultBranch) {
        return printLiquidDefaultBranch(path, options, print, args);
    }
    const leftSibling = branch.prev;
    const shouldCollapseSpace = leftSibling && (0, utils_2.isEmpty)(leftSibling.children);
    const outerLeadingWhitespace = branch.hasLeadingWhitespace && !shouldCollapseSpace ? line : softline;
    return [
        outerLeadingWhitespace,
        printLiquidBlockStart(path, args.leadingSpaceGroupId, args.trailingSpaceGroupId),
        indent([
            innerLeadingWhitespace(branch),
            (0, children_1.printChildren)(path, options, print, args),
        ]),
    ];
}
exports.printLiquidBranch = printLiquidBranch;
function needsBlockStartLeadingWhitespaceStrippingOnBreak(node) {
    switch (node.type) {
        case types_1.NodeTypes.LiquidTag: {
            return (!isAttributeNode(node) && (0, utils_2.hasMeaningfulLackOfLeadingWhitespace)(node));
        }
        case types_1.NodeTypes.LiquidBranch: {
            return (!isAttributeNode(node.parentNode) &&
                (0, utils_2.hasMeaningfulLackOfLeadingWhitespace)(node));
        }
        default: {
            return (0, utils_1.assertNever)(node);
        }
    }
}
function needsBlockStartTrailingWhitespaceStrippingOnBreak(node) {
    switch (node.type) {
        case types_1.NodeTypes.LiquidTag: {
            if ((0, ast_1.isBranchedTag)(node)) {
                return needsBlockStartLeadingWhitespaceStrippingOnBreak(node.firstChild);
            }
            if (!node.children) {
                return (0, utils_2.hasMeaningfulLackOfTrailingWhitespace)(node);
            }
            return (0, utils_2.isEmpty)(node.children)
                ? (0, utils_2.hasMeaningfulLackOfDanglingWhitespace)(node)
                : (0, utils_2.hasMeaningfulLackOfLeadingWhitespace)(node.firstChild);
        }
        case types_1.NodeTypes.LiquidBranch: {
            if (isAttributeNode(node.parentNode)) {
                return false;
            }
            return node.firstChild
                ? (0, utils_2.hasMeaningfulLackOfLeadingWhitespace)(node.firstChild)
                : (0, utils_2.hasMeaningfulLackOfDanglingWhitespace)(node);
        }
        default: {
            return (0, utils_1.assertNever)(node);
        }
    }
}
function needsBlockEndLeadingWhitespaceStrippingOnBreak(node) {
    if (!node.children) {
        throw new Error('Should only call needsBlockEndLeadingWhitespaceStrippingOnBreak for tags that have closing tags');
    }
    else if (isAttributeNode(node)) {
        return false;
    }
    else if ((0, ast_1.isBranchedTag)(node)) {
        return (0, utils_2.hasMeaningfulLackOfTrailingWhitespace)(node.lastChild);
    }
    else if ((0, utils_2.isEmpty)(node.children)) {
        return (0, utils_2.hasMeaningfulLackOfDanglingWhitespace)(node);
    }
    else {
        return (0, utils_2.hasMeaningfulLackOfTrailingWhitespace)(node.lastChild);
    }
}
function cleanDoc(doc) {
    return doc.filter((x) => x !== '');
}
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ "./dist/printer/print/tag.js":
/*!***********************************!*\
  !*** ./dist/printer/print/tag.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getNodeContent = exports.printOpeningTagEndMarker = exports.printOpeningTagStartMarker = exports.printOpeningTagPrefix = exports.printOpeningTagStart = exports.printOpeningTag = exports.needsToBorrowParentOpeningTagEndMarker = exports.needsToBorrowNextOpeningTagStartMarker = exports.needsToBorrowParentClosingTagStartMarker = exports.needsToBorrowLastChildClosingTagEndMarker = exports.needsToBorrowPrevClosingTagEndMarker = exports.printClosingTagEndMarker = exports.printClosingTagStartMarker = exports.printClosingTagSuffix = exports.printClosingTagEnd = exports.printClosingTagStart = exports.printClosingTag = void 0;
const prettier_1 = __webpack_require__(/*! prettier */ "prettier");
const types_1 = __webpack_require__(/*! ../../types */ "./dist/types.js");
const utils_1 = __webpack_require__(/*! ../../printer/utils */ "./dist/printer/utils/index.js");
const { builders: { breakParent, indent, join, line, softline, hardline }, } = prettier_1.doc;
const { replaceTextEndOfLine } = prettier_1.doc.utils;
function printClosingTag(node, options) {
    return [
        (0, utils_1.hasNoCloseMarker)(node) ? '' : printClosingTagStart(node, options),
        printClosingTagEnd(node, options),
    ];
}
exports.printClosingTag = printClosingTag;
function printClosingTagStart(node, options) {
    return node.lastChild &&
        needsToBorrowParentClosingTagStartMarker(node.lastChild)
        ? ''
        : [
            printClosingTagPrefix(node, options),
            printClosingTagStartMarker(node, options),
        ];
}
exports.printClosingTagStart = printClosingTagStart;
function printClosingTagEnd(node, options) {
    return (node.next
        ? needsToBorrowPrevClosingTagEndMarker(node.next)
        : needsToBorrowLastChildClosingTagEndMarker(node.parentNode))
        ? ''
        : [
            printClosingTagEndMarker(node, options),
            printClosingTagSuffix(node, options),
        ];
}
exports.printClosingTagEnd = printClosingTagEnd;
function printClosingTagPrefix(node, options) {
    return needsToBorrowLastChildClosingTagEndMarker(node)
        ? printClosingTagEndMarker(node.lastChild, options)
        : '';
}
function printClosingTagSuffix(node, options) {
    return needsToBorrowParentClosingTagStartMarker(node)
        ? printClosingTagStartMarker(node.parentNode, options)
        : needsToBorrowNextOpeningTagStartMarker(node)
            ? printOpeningTagStartMarker(node.next)
            : '';
}
exports.printClosingTagSuffix = printClosingTagSuffix;
function printClosingTagStartMarker(node, options) {
    if (!node)
        return '';
    if (shouldNotPrintClosingTag(node, options)) {
        return '';
    }
    switch (node.type) {
        case types_1.NodeTypes.HtmlElement:
        case types_1.NodeTypes.HtmlRawNode:
            if (typeof node.name !== 'string') {
                return `</{{ ${node.name.markup.trim()} }}`;
            }
            return `</${node.name}`;
        default:
            return '';
    }
}
exports.printClosingTagStartMarker = printClosingTagStartMarker;
function printClosingTagEndMarker(node, options) {
    if (!node)
        return '';
    if (shouldNotPrintClosingTag(node, options)) {
        return '';
    }
    switch (node.type) {
        case types_1.NodeTypes.HtmlSelfClosingElement: {
            return '/>';
        }
        default:
            return '>';
    }
}
exports.printClosingTagEndMarker = printClosingTagEndMarker;
function shouldNotPrintClosingTag(node, options) {
    return (!(0, utils_1.hasNoCloseMarker)(node) &&
        !node.blockEndPosition &&
        ((0, utils_1.hasPrettierIgnore)(node) ||
            (0, utils_1.shouldPreserveContent)(node.parentNode, options)));
}
function needsToBorrowPrevClosingTagEndMarker(node) {
    return (!(0, utils_1.isLiquidNode)(node) &&
        node.prev &&
        (0, utils_1.isHtmlNode)(node.prev) &&
        (0, utils_1.hasMeaningfulLackOfLeadingWhitespace)(node));
}
exports.needsToBorrowPrevClosingTagEndMarker = needsToBorrowPrevClosingTagEndMarker;
function needsToBorrowLastChildClosingTagEndMarker(node) {
    return ((0, utils_1.isHtmlNode)(node) &&
        node.lastChild &&
        (0, utils_1.hasMeaningfulLackOfTrailingWhitespace)(node.lastChild) &&
        (0, utils_1.isHtmlNode)((0, utils_1.getLastDescendant)(node.lastChild)) &&
        !(0, utils_1.isPreLikeNode)(node));
}
exports.needsToBorrowLastChildClosingTagEndMarker = needsToBorrowLastChildClosingTagEndMarker;
function needsToBorrowParentClosingTagStartMarker(node) {
    return ((0, utils_1.isHtmlNode)(node.parentNode) &&
        !node.next &&
        (0, utils_1.hasMeaningfulLackOfTrailingWhitespace)(node) &&
        !(0, utils_1.isLiquidNode)(node) &&
        ((0, utils_1.isTextLikeNode)((0, utils_1.getLastDescendant)(node)) ||
            (0, utils_1.isLiquidNode)((0, utils_1.getLastDescendant)(node))));
}
exports.needsToBorrowParentClosingTagStartMarker = needsToBorrowParentClosingTagStartMarker;
function needsToBorrowNextOpeningTagStartMarker(node) {
    return (node.next &&
        (0, utils_1.isHtmlNode)(node.next) &&
        (0, utils_1.isTextLikeNode)(node) &&
        (0, utils_1.hasMeaningfulLackOfTrailingWhitespace)(node));
}
exports.needsToBorrowNextOpeningTagStartMarker = needsToBorrowNextOpeningTagStartMarker;
function getPrettierIgnoreAttributeCommentData(value) {
    const match = value.trim().match(/^prettier-ignore-attribute(?:\s+(.+))?$/s);
    if (!match) {
        return false;
    }
    if (!match[1]) {
        return true;
    }
    return match[1].split(/\s+/);
}
function needsToBorrowParentOpeningTagEndMarker(node) {
    return ((0, utils_1.isHtmlNode)(node.parentNode) &&
        !node.prev &&
        (0, utils_1.hasMeaningfulLackOfLeadingWhitespace)(node) &&
        !(0, utils_1.isLiquidNode)(node));
}
exports.needsToBorrowParentOpeningTagEndMarker = needsToBorrowParentOpeningTagEndMarker;
function printAttributes(path, options, print) {
    const node = path.getValue();
    const { locStart, locEnd } = options;
    if ((0, utils_1.isHtmlComment)(node))
        return '';
    if (!(0, utils_1.isNonEmptyArray)(node.attributes)) {
        return (0, utils_1.isSelfClosing)(node)
            ?
                ' '
            : '';
    }
    const ignoreAttributeData = node.prev &&
        node.prev.type === types_1.NodeTypes.HtmlComment &&
        getPrettierIgnoreAttributeCommentData(node.prev.body);
    const hasPrettierIgnoreAttribute = typeof ignoreAttributeData === 'boolean'
        ? () => ignoreAttributeData
        : Array.isArray(ignoreAttributeData)
            ? (attribute) => ignoreAttributeData.includes(attribute.rawName)
            : () => false;
    const printedAttributes = path.map((attributePath) => {
        const attribute = attributePath.getValue();
        return hasPrettierIgnoreAttribute(attribute)
            ? replaceTextEndOfLine(options.originalText.slice(locStart(attribute), locEnd(attribute)))
            : print(attributePath);
    }, 'attributes');
    const forceNotToBreakAttrContent = (options.singleLineLinkTags &&
        typeof node.name === 'string' &&
        node.name === 'link') ||
        (((0, utils_1.isSelfClosing)(node) ||
            (0, utils_1.isVoidElement)(node) ||
            ((0, utils_1.isHtmlElement)(node) && node.children.length > 0)) &&
            node.attributes &&
            node.attributes.length === 1 &&
            !(0, utils_1.isMultilineLiquidTag)(node.attributes[0]));
    const forceBreakAttrContent = node.source
        .slice(node.blockStartPosition.start, node.blockStartPosition.end)
        .indexOf('\n') !== -1;
    const attributeLine = forceNotToBreakAttrContent
        ? ' '
        : options.singleAttributePerLine && node.attributes.length > 1
            ? hardline
            : line;
    const parts = [
        indent([
            forceNotToBreakAttrContent ? ' ' : line,
            forceBreakAttrContent ? breakParent : '',
            join(attributeLine, printedAttributes),
        ]),
    ];
    if ((node.firstChild &&
        needsToBorrowParentOpeningTagEndMarker(node.firstChild)) ||
        ((0, utils_1.hasNoCloseMarker)(node) &&
            needsToBorrowLastChildClosingTagEndMarker(node.parentNode)) ||
        forceNotToBreakAttrContent) {
        parts.push((0, utils_1.isSelfClosing)(node) ? ' ' : '');
    }
    else {
        parts.push(options.bracketSameLine
            ? (0, utils_1.isSelfClosing)(node)
                ? ' '
                : ''
            : (0, utils_1.isSelfClosing)(node)
                ? line
                : softline);
    }
    return parts;
}
function printOpeningTagEnd(node) {
    return node.firstChild &&
        needsToBorrowParentOpeningTagEndMarker(node.firstChild)
        ? ''
        : printOpeningTagEndMarker(node);
}
function printOpeningTag(path, options, print) {
    const node = path.getValue();
    return [
        printOpeningTagStart(node, options),
        printAttributes(path, options, print),
        (0, utils_1.hasNoCloseMarker)(node) ? '' : printOpeningTagEnd(node),
    ];
}
exports.printOpeningTag = printOpeningTag;
function printOpeningTagStart(node, options) {
    return node.prev && needsToBorrowNextOpeningTagStartMarker(node.prev)
        ? ''
        : [printOpeningTagPrefix(node, options), printOpeningTagStartMarker(node)];
}
exports.printOpeningTagStart = printOpeningTagStart;
function printOpeningTagPrefix(node, options) {
    return needsToBorrowParentOpeningTagEndMarker(node)
        ? printOpeningTagEndMarker(node.parentNode)
        : needsToBorrowPrevClosingTagEndMarker(node)
            ? printClosingTagEndMarker(node.prev, options)
            : '';
}
exports.printOpeningTagPrefix = printOpeningTagPrefix;
function printOpeningTagStartMarker(node) {
    if (!node)
        return '';
    switch (node.type) {
        case types_1.NodeTypes.HtmlComment:
            return '<!--';
        case types_1.NodeTypes.HtmlElement:
        case types_1.NodeTypes.HtmlSelfClosingElement:
        case types_1.NodeTypes.HtmlVoidElement:
        case types_1.NodeTypes.HtmlRawNode:
            if (typeof node.name !== 'string') {
                return `<{{ ${node.name.markup.trim()} }}`;
            }
            return `<${node.name}`;
        default:
            return '';
    }
}
exports.printOpeningTagStartMarker = printOpeningTagStartMarker;
function printOpeningTagEndMarker(node) {
    if (!node)
        return '';
    switch (node.type) {
        case types_1.NodeTypes.HtmlComment:
            return '-->';
        case types_1.NodeTypes.HtmlSelfClosingElement:
        case types_1.NodeTypes.HtmlVoidElement:
            return '';
        case types_1.NodeTypes.HtmlElement:
        case types_1.NodeTypes.HtmlRawNode:
            return '>';
        default:
            return '>';
    }
}
exports.printOpeningTagEndMarker = printOpeningTagEndMarker;
function getNodeContent(node, options) {
    let start = node.blockStartPosition.end;
    if (node.firstChild &&
        needsToBorrowParentOpeningTagEndMarker(node.firstChild)) {
        start -= printOpeningTagEndMarker(node).length;
    }
    let end = node.blockEndPosition.start;
    if (node.lastChild &&
        needsToBorrowParentClosingTagStartMarker(node.lastChild)) {
        end += printClosingTagStartMarker(node, options).length;
    }
    else if (node.lastChild &&
        needsToBorrowLastChildClosingTagEndMarker(node)) {
        end -= printClosingTagEndMarker(node.lastChild, options).length;
    }
    return options.originalText.slice(start, end);
}
exports.getNodeContent = getNodeContent;
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ "./dist/printer/printer-liquid-html.js":
/*!*********************************************!*\
  !*** ./dist/printer/printer-liquid-html.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.printerLiquidHtml = void 0;
const prettier_1 = __webpack_require__(/*! prettier */ "prettier");
const types_1 = __webpack_require__(/*! ../types */ "./dist/types.js");
const utils_1 = __webpack_require__(/*! ../utils */ "./dist/utils.js");
const print_preprocess_1 = __webpack_require__(/*! ../printer/print-preprocess */ "./dist/printer/print-preprocess.js");
const utils_2 = __webpack_require__(/*! ../printer/utils */ "./dist/printer/utils/index.js");
const element_1 = __webpack_require__(/*! ../printer/print/element */ "./dist/printer/print/element.js");
const tag_1 = __webpack_require__(/*! ../printer/print/tag */ "./dist/printer/print/tag.js");
const liquid_1 = __webpack_require__(/*! ../printer/print/liquid */ "./dist/printer/print/liquid.js");
const children_1 = __webpack_require__(/*! ../printer/print/children */ "./dist/printer/print/children.js");
const { builders } = prettier_1.doc;
const { fill, group, hardline, indent, join, line, softline } = builders;
const { replaceTextEndOfLine } = prettier_1.doc.utils;
function getSchema(contents, options) {
    try {
        return [JSON.stringify(JSON.parse(contents), null, options.tabWidth), true];
    }
    catch (e) {
        return [contents, false];
    }
}
function printAttributes(path, _options, print) {
    const node = path.getValue();
    if ((0, utils_2.isEmpty)(node.attributes))
        return '';
    return group([
        indent([
            line,
            join(line, path.map((p) => print(p), 'attributes')),
        ]),
        softline,
    ], {
        shouldBreak: (0, utils_2.hasLineBreakInRange)(node.source, node.blockStartPosition.start, node.blockStartPosition.end),
    });
}
const oppositeQuotes = {
    '"': "'",
    "'": '"',
};
function printAttribute(path, options, _print) {
    const node = path.getValue();
    const attrGroupId = Symbol('attr-group-id');
    const value = node.source.slice(node.attributePosition.start, node.attributePosition.end);
    const preferredQuote = options.singleQuote ? `'` : `"`;
    const attributeValueContainsQuote = !!node.value.find((valueNode) => (0, utils_2.isTextLikeNode)(valueNode) && valueNode.value.includes(preferredQuote));
    const quote = attributeValueContainsQuote
        ? oppositeQuotes[preferredQuote]
        : preferredQuote;
    return [
        node.name,
        '=',
        quote,
        (0, utils_2.hasLineBreakInRange)(node.source, node.attributePosition.start, node.attributePosition.end)
            ? group([
                indent([
                    softline,
                    join(hardline, (0, utils_2.reindent)((0, utils_2.bodyLines)(value), true)),
                ]),
                softline,
            ], { id: attrGroupId })
            : value,
        quote,
    ];
}
function printTextNode(path, options, _print) {
    const node = path.getValue();
    if (node.value.match(/^\s*$/))
        return '';
    const text = node.value;
    const paragraphs = text
        .split(/(\r?\n){2,}/)
        .filter(Boolean)
        .map((curr) => {
        let doc = [];
        const words = curr.trim().split(/\s+/g);
        let isFirst = true;
        for (let j = 0; j < words.length; j++) {
            const word = words[j];
            if (isFirst) {
                isFirst = false;
            }
            else {
                doc.push(line);
            }
            doc.push(word);
        }
        return fill(doc);
    });
    return [
        (0, tag_1.printOpeningTagPrefix)(node, options),
        join(hardline, paragraphs),
        (0, tag_1.printClosingTagSuffix)(node, options),
    ];
}
function printNode(path, options, print, args = {}) {
    const node = path.getValue();
    switch (node.type) {
        case types_1.NodeTypes.Document: {
            return [
                (0, children_1.printChildren)(path, options, print, args),
                hardline,
            ];
        }
        case types_1.NodeTypes.HtmlElement: {
            return (0, element_1.printElement)(path, options, print);
        }
        case types_1.NodeTypes.HtmlVoidElement: {
            return (0, element_1.printElement)(path, options, print);
        }
        case types_1.NodeTypes.HtmlSelfClosingElement: {
            return (0, element_1.printElement)(path, options, print);
        }
        case types_1.NodeTypes.HtmlRawNode: {
            const lines = (0, utils_2.bodyLines)(node.body);
            const shouldSkipFirstLine = !node.source[node.blockStartPosition.end].match(/\r|\n/);
            const body = lines.length > 0 && lines[0] !== ''
                ? [
                    indent([
                        hardline,
                        join(hardline, (0, utils_2.reindent)(lines, shouldSkipFirstLine)),
                    ]),
                    hardline,
                ]
                : [softline];
            return group([
                group([
                    '<',
                    node.name,
                    printAttributes(path, options, print),
                    '>',
                ]),
                body,
                ['</', node.name, '>'],
            ]);
        }
        case types_1.NodeTypes.LiquidDrop: {
            return (0, liquid_1.printLiquidDrop)(path, options, print, args);
        }
        case types_1.NodeTypes.LiquidRawTag: {
            const lines = (0, utils_2.bodyLines)(node.body);
            const shouldSkipFirstLine = !node.source[node.blockStartPosition.end].match(/\r|\n/);
            const body = (0, utils_2.reindent)(lines, shouldSkipFirstLine);
            const blockStart = group([
                '{%',
                node.whitespaceStart,
                ' ',
                node.name,
                ' ',
                node.whitespaceEnd,
                '%}',
            ]);
            const blockEnd = [
                '{%',
                node.whitespaceStart,
                ' ',
                'end',
                node.name,
                ' ',
                node.whitespaceEnd,
                '%}',
            ];
            if (node.name === 'schema') {
                const [schema, isValid] = getSchema(node.body, options);
                if (!isValid) {
                    return [
                        blockStart,
                        ...replaceTextEndOfLine(schema, hardline),
                        blockEnd,
                    ];
                }
                const body = [hardline, ...replaceTextEndOfLine(schema, hardline)];
                return [
                    blockStart,
                    options.indentSchema ? indent(body) : body,
                    hardline,
                    blockEnd,
                ];
            }
            if (!(0, utils_2.hasLineBreakInRange)(node.source, node.blockStartPosition.end, node.blockEndPosition.start)) {
                return [
                    blockStart,
                    node.source.slice(node.blockStartPosition.end, node.blockEndPosition.start),
                    blockEnd,
                ];
            }
            return [
                blockStart,
                indent([hardline, join(hardline, body)]),
                hardline,
                blockEnd,
            ];
        }
        case types_1.NodeTypes.LiquidTag: {
            return (0, liquid_1.printLiquidTag)(path, options, print, args);
        }
        case types_1.NodeTypes.LiquidBranch: {
            return (0, liquid_1.printLiquidBranch)(path, options, print, args);
        }
        case types_1.NodeTypes.AttrEmpty: {
            return node.name;
        }
        case types_1.NodeTypes.AttrUnquoted:
        case types_1.NodeTypes.AttrSingleQuoted:
        case types_1.NodeTypes.AttrDoubleQuoted: {
            return printAttribute(path, options, print);
        }
        case types_1.NodeTypes.HtmlComment: {
            return [
                '<!--',
                group([
                    indent([line, join(hardline, (0, utils_2.reindent)((0, utils_2.bodyLines)(node.body), true))]),
                    line,
                ]),
                '-->',
            ];
        }
        case types_1.NodeTypes.TextNode: {
            return printTextNode(path, options, print);
        }
        default: {
            return (0, utils_1.assertNever)(node);
        }
    }
}
exports.printerLiquidHtml = {
    print: printNode,
    preprocess: print_preprocess_1.preprocess,
};
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ "./dist/printer/utils/array.js":
/*!*************************************!*\
  !*** ./dist/printer/utils/array.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isEmpty = exports.intersperse = exports.first = exports.last = void 0;
function last(x) {
    return x[x.length - 1];
}
exports.last = last;
function first(x) {
    return x[0];
}
exports.first = first;
function intersperse(array, delim) {
    return array.flatMap((val) => [delim, val]).slice(1);
}
exports.intersperse = intersperse;
function isEmpty(col) {
    return col.length === 0;
}
exports.isEmpty = isEmpty;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJyYXkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcHJpbnRlci91dGlscy9hcnJheS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxTQUFnQixJQUFJLENBQUksQ0FBTTtJQUM1QixPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3pCLENBQUM7QUFGRCxvQkFFQztBQUVELFNBQWdCLEtBQUssQ0FBSSxDQUFNO0lBQzdCLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2QsQ0FBQztBQUZELHNCQUVDO0FBRUQsU0FBZ0IsV0FBVyxDQUFJLEtBQVUsRUFBRSxLQUFRO0lBQ2pELE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdkQsQ0FBQztBQUZELGtDQUVDO0FBRUQsU0FBZ0IsT0FBTyxDQUFDLEdBQVU7SUFDaEMsT0FBTyxHQUFHLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQztBQUMxQixDQUFDO0FBRkQsMEJBRUMifQ==

/***/ }),

/***/ "./dist/printer/utils/index.js":
/*!*************************************!*\
  !*** ./dist/printer/utils/index.js ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isNonEmptyArray = exports.ifBreakChain = exports.FORCE_BREAK_GROUP_ID = exports.FORCE_FLAT_GROUP_ID = exports.getWhitespaceTrim = exports.isDeeplyNested = exports.getSource = void 0;
const prettier_1 = __webpack_require__(/*! prettier */ "prettier");
const parser_1 = __webpack_require__(/*! ../../parser */ "./dist/parser/index.js");
const array_1 = __webpack_require__(/*! ../../printer/utils/array */ "./dist/printer/utils/array.js");
__exportStar(__webpack_require__(/*! ../../printer/utils/array */ "./dist/printer/utils/array.js"), exports);
__exportStar(__webpack_require__(/*! ../../printer/utils/string */ "./dist/printer/utils/string.js"), exports);
__exportStar(__webpack_require__(/*! ../../printer/utils/node */ "./dist/printer/utils/node.js"), exports);
const { builders } = prettier_1.doc;
const { ifBreak } = builders;
function getSource(path) {
    return path.getValue().source;
}
exports.getSource = getSource;
function isDeeplyNested(node) {
    if (!node.children)
        return false;
    if ((0, parser_1.isBranchedTag)(node)) {
        return !!node.children.find((child) => isDeeplyNested(child));
    }
    return !!node.children.find((child) => !(0, array_1.isEmpty)(child.children || []));
}
exports.isDeeplyNested = isDeeplyNested;
function getWhitespaceTrim(currWhitespaceTrim, needsWhitespaceStrippingOnBreak, groupIds) {
    return ifBreakChain(needsWhitespaceStrippingOnBreak ? '-' : currWhitespaceTrim, currWhitespaceTrim, Array.isArray(groupIds) ? groupIds : [groupIds]);
}
exports.getWhitespaceTrim = getWhitespaceTrim;
exports.FORCE_FLAT_GROUP_ID = Symbol('force-no-break');
exports.FORCE_BREAK_GROUP_ID = Symbol('force-break');
function ifBreakChain(breaksContent, flatContent, groupIds) {
    if (groupIds.includes(exports.FORCE_BREAK_GROUP_ID))
        return breaksContent;
    if (groupIds.includes(exports.FORCE_FLAT_GROUP_ID))
        return flatContent;
    return groupIds.reduce((currFlatContent, groupId) => ifBreak(breaksContent, currFlatContent, { groupId }), flatContent);
}
exports.ifBreakChain = ifBreakChain;
function isNonEmptyArray(object) {
    return Array.isArray(object) && object.length > 0;
}
exports.isNonEmptyArray = isNonEmptyArray;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcHJpbnRlci91dGlscy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEsdUNBQW9DO0FBRXBDLHFDQUF5QztBQUN6QyxpREFBZ0Q7QUFFaEQsd0RBQXNDO0FBQ3RDLHlEQUF1QztBQUN2Qyx1REFBcUM7QUFFckMsTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLGNBQUcsQ0FBQztBQUN6QixNQUFNLEVBQUUsT0FBTyxFQUFFLEdBQUcsUUFBUSxDQUFDO0FBRTdCLFNBQWdCLFNBQVMsQ0FBQyxJQUFtQjtJQUMzQyxPQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxNQUFNLENBQUM7QUFDaEMsQ0FBQztBQUZELDhCQUVDO0FBRUQsU0FBZ0IsY0FBYyxDQUM1QixJQUE4RDtJQUU5RCxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVE7UUFBRSxPQUFPLEtBQUssQ0FBQztJQUNqQyxJQUFJLElBQUEsc0JBQWEsRUFBQyxJQUFJLENBQUMsRUFBRTtRQUN2QixPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQ3BDLGNBQWMsQ0FBQyxLQUFxQixDQUFDLENBQ3RDLENBQUM7S0FDSDtJQUNELE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUN6QixDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFBLGVBQU8sRUFBRSxLQUFhLENBQUMsUUFBUSxJQUFJLEVBQUUsQ0FBQyxDQUNuRCxDQUFDO0FBQ0osQ0FBQztBQVpELHdDQVlDO0FBR0QsU0FBZ0IsaUJBQWlCLENBQy9CLGtCQUEwQixFQUMxQiwrQkFBb0QsRUFDcEQsUUFBNEI7SUFFNUIsT0FBTyxZQUFZLENBQ2pCLCtCQUErQixDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixFQUMxRCxrQkFBa0IsRUFDbEIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUNoRCxDQUFDO0FBQ0osQ0FBQztBQVZELDhDQVVDO0FBR1ksUUFBQSxtQkFBbUIsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUMvQyxRQUFBLG9CQUFvQixHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUUxRCxTQUFnQixZQUFZLENBQzFCLGFBQWtCLEVBQ2xCLFdBQWdCLEVBQ2hCLFFBQWdDO0lBRWhDLElBQUksUUFBUSxDQUFDLFFBQVEsQ0FBQyw0QkFBb0IsQ0FBQztRQUFFLE9BQU8sYUFBYSxDQUFDO0lBQ2xFLElBQUksUUFBUSxDQUFDLFFBQVEsQ0FBQywyQkFBbUIsQ0FBQztRQUFFLE9BQU8sV0FBVyxDQUFDO0lBQy9ELE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FDcEIsQ0FBQyxlQUFlLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FDM0IsT0FBTyxDQUFDLGFBQWEsRUFBRSxlQUFlLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUN0RCxXQUFXLENBQ1osQ0FBQztBQUNKLENBQUM7QUFaRCxvQ0FZQztBQUVELFNBQWdCLGVBQWUsQ0FBQyxNQUFXO0lBQ3pDLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztBQUNwRCxDQUFDO0FBRkQsMENBRUMifQ==

/***/ }),

/***/ "./dist/printer/utils/node.js":
/*!************************************!*\
  !*** ./dist/printer/utils/node.js ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getLastDescendant = exports.hasMeaningfulLackOfDanglingWhitespace = exports.hasMeaningfulLackOfTrailingWhitespace = exports.hasMeaningfulLackOfLeadingWhitespace = exports.preferHardlineAsTrailingSpaces = exports.preferHardlineAsLeadingSpaces = exports.preferHardlineAsSurroundingSpaces = exports.forceBreakChildren = exports.forceBreakContent = exports.forceNextEmptyLine = exports.hasPrettierIgnore = exports.isPrettierIgnoreNode = exports.shouldPreserveContent = exports.hasNonTextChild = exports.isHtmlNode = exports.isMultilineLiquidTag = exports.isLiquidNode = exports.isTextLikeNode = exports.isHtmlElement = exports.isVoidElement = exports.isSelfClosing = exports.isHtmlComment = exports.hasNoCloseMarker = exports.isPreLikeNode = exports.isScriptLikeTag = void 0;
const types_1 = __webpack_require__(/*! ../../types */ "./dist/types.js");
const array_1 = __webpack_require__(/*! ../../printer/utils/array */ "./dist/printer/utils/array.js");
function isScriptLikeTag(node) {
    return node.type === types_1.NodeTypes.HtmlRawNode;
}
exports.isScriptLikeTag = isScriptLikeTag;
function isPreLikeNode(node) {
    return node.cssWhitespace.startsWith('pre');
}
exports.isPreLikeNode = isPreLikeNode;
function hasNoCloseMarker(node) {
    return isSelfClosing(node) || isVoidElement(node) || isHtmlComment(node);
}
exports.hasNoCloseMarker = hasNoCloseMarker;
function isHtmlComment(node) {
    return node.type === types_1.NodeTypes.HtmlComment;
}
exports.isHtmlComment = isHtmlComment;
function isSelfClosing(node) {
    return node.type === types_1.NodeTypes.HtmlSelfClosingElement;
}
exports.isSelfClosing = isSelfClosing;
function isVoidElement(node) {
    return node.type === types_1.NodeTypes.HtmlVoidElement;
}
exports.isVoidElement = isVoidElement;
function isHtmlElement(node) {
    return node.type === types_1.NodeTypes.HtmlElement;
}
exports.isHtmlElement = isHtmlElement;
function isTextLikeNode(node) {
    return !!node && node.type === types_1.NodeTypes.TextNode;
}
exports.isTextLikeNode = isTextLikeNode;
function isLiquidNode(node) {
    return !!node && types_1.LiquidNodeTypes.includes(node.type);
}
exports.isLiquidNode = isLiquidNode;
function isMultilineLiquidTag(node) {
    return (!!node &&
        node.type === types_1.NodeTypes.LiquidTag &&
        !!node.children &&
        !(0, array_1.isEmpty)(node.children));
}
exports.isMultilineLiquidTag = isMultilineLiquidTag;
function isHtmlNode(node) {
    return !!node && types_1.HtmlNodeTypes.includes(node.type);
}
exports.isHtmlNode = isHtmlNode;
function hasNonTextChild(node) {
    return (node.children &&
        node.children.some((child) => child.type !== types_1.NodeTypes.TextNode));
}
exports.hasNonTextChild = hasNonTextChild;
function shouldPreserveContent(node, _options) {
    if (isPreLikeNode(node) &&
        node.children &&
        node.children.some((child) => !isTextLikeNode(child))) {
        return true;
    }
    return false;
}
exports.shouldPreserveContent = shouldPreserveContent;
function isPrettierIgnoreNode(node) {
    return (node &&
        node.type === types_1.NodeTypes.HtmlComment &&
        /^\s*prettier-ignore/m.test(node.body));
}
exports.isPrettierIgnoreNode = isPrettierIgnoreNode;
function hasPrettierIgnore(node) {
    return isPrettierIgnoreNode(node) || isPrettierIgnoreNode(node.prev);
}
exports.hasPrettierIgnore = hasPrettierIgnore;
function forceNextEmptyLine(node) {
    if (!node)
        return false;
    if (!node.next)
        return false;
    const source = node.source;
    let tmp;
    tmp = source.indexOf('\n', node.position.end);
    if (tmp === -1)
        return false;
    tmp = source.indexOf('\n', tmp + 1);
    if (tmp === -1)
        return false;
    return tmp < node.next.position.start;
}
exports.forceNextEmptyLine = forceNextEmptyLine;
function forceBreakContent(node) {
    return (forceBreakChildren(node) ||
        (node.type === types_1.NodeTypes.HtmlElement &&
            node.children.length > 0 &&
            typeof node.name === 'string' &&
            (['body', 'script', 'style'].includes(node.name) ||
                node.children.some((child) => hasNonTextChild(child)))) ||
        (node.firstChild &&
            node.firstChild === node.lastChild &&
            node.firstChild.type !== types_1.NodeTypes.TextNode &&
            hasLeadingLineBreak(node.firstChild) &&
            (!node.lastChild.isTrailingWhitespaceSensitive ||
                hasTrailingLineBreak(node.lastChild))));
}
exports.forceBreakContent = forceBreakContent;
function forceBreakChildren(node) {
    return (node.type === types_1.NodeTypes.HtmlElement &&
        node.children.length > 0 &&
        typeof node.name === 'string' &&
        (['html', 'head', 'ul', 'ol', 'select'].includes(node.name) ||
            (node.cssDisplay.startsWith('table') && node.cssDisplay !== 'table-cell')));
}
exports.forceBreakChildren = forceBreakChildren;
function preferHardlineAsSurroundingSpaces(node) {
    switch (node.type) {
        case types_1.NodeTypes.HtmlComment:
            return true;
        case types_1.NodeTypes.HtmlElement:
            return (typeof node.name === 'string' &&
                ['script', 'select'].includes(node.name));
        case types_1.NodeTypes.LiquidTag:
            if ((node.prev && isTextLikeNode(node.prev)) ||
                (node.next && isTextLikeNode(node.next))) {
                return false;
            }
            return node.children && node.children.length > 0;
    }
    return false;
}
exports.preferHardlineAsSurroundingSpaces = preferHardlineAsSurroundingSpaces;
function preferHardlineAsLeadingSpaces(node) {
    return (preferHardlineAsSurroundingSpaces(node) ||
        (isLiquidNode(node) && node.prev && isLiquidNode(node.prev)) ||
        (node.prev && preferHardlineAsTrailingSpaces(node.prev)) ||
        hasSurroundingLineBreak(node));
}
exports.preferHardlineAsLeadingSpaces = preferHardlineAsLeadingSpaces;
function preferHardlineAsTrailingSpaces(node) {
    return (preferHardlineAsSurroundingSpaces(node) ||
        (isLiquidNode(node) &&
            node.next &&
            (isLiquidNode(node.next) || isHtmlNode(node.next))) ||
        (node.type === types_1.NodeTypes.HtmlElement && node.name === 'br') ||
        hasSurroundingLineBreak(node));
}
exports.preferHardlineAsTrailingSpaces = preferHardlineAsTrailingSpaces;
function hasMeaningfulLackOfLeadingWhitespace(node) {
    return node.isLeadingWhitespaceSensitive && !node.hasLeadingWhitespace;
}
exports.hasMeaningfulLackOfLeadingWhitespace = hasMeaningfulLackOfLeadingWhitespace;
function hasMeaningfulLackOfTrailingWhitespace(node) {
    return node.isTrailingWhitespaceSensitive && !node.hasTrailingWhitespace;
}
exports.hasMeaningfulLackOfTrailingWhitespace = hasMeaningfulLackOfTrailingWhitespace;
function hasMeaningfulLackOfDanglingWhitespace(node) {
    return node.isDanglingWhitespaceSensitive && !node.hasDanglingWhitespace;
}
exports.hasMeaningfulLackOfDanglingWhitespace = hasMeaningfulLackOfDanglingWhitespace;
function hasSurroundingLineBreak(node) {
    return hasLeadingLineBreak(node) && hasTrailingLineBreak(node);
}
function hasLeadingLineBreak(node) {
    if (node.type === types_1.NodeTypes.Document)
        return false;
    return (node.hasLeadingWhitespace &&
        hasLineBreakInRange(node.source, node.prev
            ? node.prev.position.end
            : node.parentNode.blockStartPosition
                ? node.parentNode.blockStartPosition.end
                : node.parentNode.position.start, node.position.start));
}
function hasTrailingLineBreak(node) {
    if (node.type === types_1.NodeTypes.Document)
        return false;
    return (node.hasTrailingWhitespace &&
        hasLineBreakInRange(node.source, node.position.end, node.next
            ? node.next.position.start
            : node.parentNode.blockEndPosition
                ? node.parentNode.blockEndPosition.start
                : node.parentNode.position.end));
}
function hasLineBreakInRange(source, start, end) {
    const index = source.indexOf('\n', start);
    return index !== -1 && index < end;
}
function getLastDescendant(node) {
    return node.lastChild ? getLastDescendant(node.lastChild) : node;
}
exports.getLastDescendant = getLastDescendant;
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ "./dist/printer/utils/string.js":
/*!**************************************!*\
  !*** ./dist/printer/utils/string.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.hasLineBreakInRange = exports.originallyHadLineBreaks = exports.reindent = exports.markupLines = exports.bodyLines = exports.trimEnd = exports.trim = exports.isWhitespace = void 0;
function isWhitespace(source, loc) {
    if (loc < 0 || loc >= source.length)
        return false;
    return !!source[loc].match(/\s/);
}
exports.isWhitespace = isWhitespace;
const trim = (x) => x.trim();
exports.trim = trim;
const trimEnd = (x) => x.trimEnd();
exports.trimEnd = trimEnd;
function bodyLines(str) {
    return str
        .replace(/^\n*|\s*$/g, '')
        .split(/\r?\n/);
}
exports.bodyLines = bodyLines;
function markupLines(node) {
    return node.markup.trim().split('\n');
}
exports.markupLines = markupLines;
function reindent(lines, skipFirst = false) {
    const minIndentLevel = lines
        .filter((_, i) => (skipFirst ? i > 0 : true))
        .filter((line) => line.trim().length > 0)
        .map((line) => line.match(/^\s*/)[0].length)
        .reduce((a, b) => Math.min(a, b), Infinity);
    if (minIndentLevel === Infinity) {
        return lines;
    }
    const indentStrip = new RegExp('^' + ' '.repeat(minIndentLevel));
    return lines.map((line) => line.replace(indentStrip, '')).map(exports.trimEnd);
}
exports.reindent = reindent;
function originallyHadLineBreaks(path, { locStart, locEnd }) {
    const node = path.getValue();
    return hasLineBreakInRange(node.source, locStart(node), locEnd(node));
}
exports.originallyHadLineBreaks = originallyHadLineBreaks;
function hasLineBreakInRange(source, locStart, locEnd) {
    const indexOfNewLine = source.indexOf('\n', locStart);
    return 0 <= indexOfNewLine && indexOfNewLine < locEnd;
}
exports.hasLineBreakInRange = hasLineBreakInRange;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3ByaW50ZXIvdXRpbHMvc3RyaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBLFNBQWdCLFlBQVksQ0FBQyxNQUFjLEVBQUUsR0FBVztJQUN0RCxJQUFJLEdBQUcsR0FBRyxDQUFDLElBQUksR0FBRyxJQUFJLE1BQU0sQ0FBQyxNQUFNO1FBQUUsT0FBTyxLQUFLLENBQUM7SUFDbEQsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNuQyxDQUFDO0FBSEQsb0NBR0M7QUFFTSxNQUFNLElBQUksR0FBRyxDQUFDLENBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQS9CLFFBQUEsSUFBSSxRQUEyQjtBQUNyQyxNQUFNLE9BQU8sR0FBRyxDQUFDLENBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQXJDLFFBQUEsT0FBTyxXQUE4QjtBQUVsRCxTQUFnQixTQUFTLENBQUMsR0FBVztJQUNuQyxPQUFPLEdBQUc7U0FDUCxPQUFPLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQztTQUN6QixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDcEIsQ0FBQztBQUpELDhCQUlDO0FBRUQsU0FBZ0IsV0FBVyxDQUV6QixJQUFPO0lBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN4QyxDQUFDO0FBSkQsa0NBSUM7QUFFRCxTQUFnQixRQUFRLENBQUMsS0FBZSxFQUFFLFNBQVMsR0FBRyxLQUFLO0lBQ3pELE1BQU0sY0FBYyxHQUFHLEtBQUs7U0FDekIsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzVDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7U0FDeEMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztTQUNwRCxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUU5QyxJQUFJLGNBQWMsS0FBSyxRQUFRLEVBQUU7UUFDL0IsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUVELE1BQU0sV0FBVyxHQUFHLElBQUksTUFBTSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7SUFDakUsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxlQUFPLENBQUMsQ0FBQztBQUN6RSxDQUFDO0FBYkQsNEJBYUM7QUFFRCxTQUFnQix1QkFBdUIsQ0FDckMsSUFBbUIsRUFDbkIsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUF1QjtJQUV6QyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDN0IsT0FBTyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUN4RSxDQUFDO0FBTkQsMERBTUM7QUFFRCxTQUFnQixtQkFBbUIsQ0FDakMsTUFBYyxFQUNkLFFBQWdCLEVBQ2hCLE1BQWM7SUFFZCxNQUFNLGNBQWMsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztJQUN0RCxPQUFPLENBQUMsSUFBSSxjQUFjLElBQUksY0FBYyxHQUFHLE1BQU0sQ0FBQztBQUN4RCxDQUFDO0FBUEQsa0RBT0MifQ==

/***/ }),

/***/ "./dist/types.js":
/*!***********************!*\
  !*** ./dist/types.js ***!
  \***********************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LiquidNodeTypes = exports.HtmlNodeTypes = exports.NodeTypes = void 0;
var NodeTypes;
(function (NodeTypes) {
    NodeTypes["Document"] = "Document";
    NodeTypes["LiquidRawTag"] = "LiquidRawTag";
    NodeTypes["LiquidTag"] = "LiquidTag";
    NodeTypes["LiquidBranch"] = "LiquidBranch";
    NodeTypes["LiquidDrop"] = "LiquidDrop";
    NodeTypes["HtmlSelfClosingElement"] = "HtmlSelfClosingElement";
    NodeTypes["HtmlVoidElement"] = "HtmlVoidElement";
    NodeTypes["HtmlComment"] = "HtmlComment";
    NodeTypes["HtmlElement"] = "HtmlElement";
    NodeTypes["HtmlRawNode"] = "HtmlRawNode";
    NodeTypes["AttrSingleQuoted"] = "AttrSingleQuoted";
    NodeTypes["AttrDoubleQuoted"] = "AttrDoubleQuoted";
    NodeTypes["AttrUnquoted"] = "AttrUnquoted";
    NodeTypes["AttrEmpty"] = "AttrEmpty";
    NodeTypes["TextNode"] = "TextNode";
})(NodeTypes = exports.NodeTypes || (exports.NodeTypes = {}));
exports.HtmlNodeTypes = [
    NodeTypes.HtmlElement,
    NodeTypes.HtmlRawNode,
    NodeTypes.HtmlVoidElement,
    NodeTypes.HtmlSelfClosingElement,
];
exports.LiquidNodeTypes = [
    NodeTypes.LiquidTag,
    NodeTypes.LiquidDrop,
    NodeTypes.LiquidBranch,
    NodeTypes.LiquidRawTag,
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdHlwZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBUUEsSUFBWSxTQWdCWDtBQWhCRCxXQUFZLFNBQVM7SUFDbkIsa0NBQXFCLENBQUE7SUFDckIsMENBQTZCLENBQUE7SUFDN0Isb0NBQXVCLENBQUE7SUFDdkIsMENBQTZCLENBQUE7SUFDN0Isc0NBQXlCLENBQUE7SUFDekIsOERBQWlELENBQUE7SUFDakQsZ0RBQW1DLENBQUE7SUFDbkMsd0NBQTJCLENBQUE7SUFDM0Isd0NBQTJCLENBQUE7SUFDM0Isd0NBQTJCLENBQUE7SUFDM0Isa0RBQXFDLENBQUE7SUFDckMsa0RBQXFDLENBQUE7SUFDckMsMENBQTZCLENBQUE7SUFDN0Isb0NBQXVCLENBQUE7SUFDdkIsa0NBQXFCLENBQUE7QUFDdkIsQ0FBQyxFQWhCVyxTQUFTLEdBQVQsaUJBQVMsS0FBVCxpQkFBUyxRQWdCcEI7QUFFWSxRQUFBLGFBQWEsR0FBRztJQUMzQixTQUFTLENBQUMsV0FBVztJQUNyQixTQUFTLENBQUMsV0FBVztJQUNyQixTQUFTLENBQUMsZUFBZTtJQUN6QixTQUFTLENBQUMsc0JBQXNCO0NBQ3hCLENBQUM7QUFFRSxRQUFBLGVBQWUsR0FBRztJQUM3QixTQUFTLENBQUMsU0FBUztJQUNuQixTQUFTLENBQUMsVUFBVTtJQUNwQixTQUFTLENBQUMsWUFBWTtJQUN0QixTQUFTLENBQUMsWUFBWTtDQUNkLENBQUMifQ==

/***/ }),

/***/ "./dist/utils.js":
/*!***********************!*\
  !*** ./dist/utils.js ***!
  \***********************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dropLast = exports.deepGet = exports.locEnd = exports.locStart = exports.assertNever = void 0;
function assertNever(x) {
    throw new Error(`Unexpected object: ${x}`);
}
exports.assertNever = assertNever;
function locStart(node) {
    return node.position.start;
}
exports.locStart = locStart;
function locEnd(node) {
    return node.position.end;
}
exports.locEnd = locEnd;
function deepGet(path, obj) {
    return path.reduce((curr, k) => {
        if (curr && curr[k] !== undefined)
            return curr[k];
        return undefined;
    }, obj);
}
exports.deepGet = deepGet;
function dropLast(n, xs) {
    const result = [...xs];
    for (let i = 0; i < n; i++) {
        result.pop();
    }
    return result;
}
exports.dropLast = dropLast;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsU0FBZ0IsV0FBVyxDQUFDLENBQVE7SUFDbEMsTUFBTSxJQUFJLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUM3QyxDQUFDO0FBRkQsa0NBRUM7QUFFRCxTQUFnQixRQUFRLENBQUMsSUFBNEI7SUFDbkQsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQztBQUM3QixDQUFDO0FBRkQsNEJBRUM7QUFFRCxTQUFnQixNQUFNLENBQUMsSUFBNEI7SUFDakQsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQztBQUMzQixDQUFDO0FBRkQsd0JBRUM7QUFFRCxTQUFnQixPQUFPLENBQVUsSUFBeUIsRUFBRSxHQUFRO0lBQ2xFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQVMsRUFBRSxDQUFrQixFQUFFLEVBQUU7UUFDbkQsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFNBQVM7WUFBRSxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDVixDQUFDO0FBTEQsMEJBS0M7QUFFRCxTQUFnQixRQUFRLENBQUksQ0FBUyxFQUFFLEVBQWdCO0lBQ3JELE1BQU0sTUFBTSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUN2QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzFCLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQztLQUNkO0lBQ0QsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQU5ELDRCQU1DIn0=

/***/ }),

/***/ "./node_modules/html-styles/index.js":
/*!*******************************************!*\
  !*** ./node_modules/html-styles/index.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! ./index.json */ "./node_modules/html-styles/index.json");

/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/***/ ((module) => {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ "./node_modules/isobject/index.js":
/*!****************************************!*\
  !*** ./node_modules/isobject/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/*!
 * isobject <https://github.com/jonschlinkert/isobject>
 *
 * Copyright (c) 2014-2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */



var isArray = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js");

module.exports = function isObject(val) {
  return val != null && typeof val === 'object' && isArray(val) === false;
};


/***/ }),

/***/ "./node_modules/line-column/lib/line-column.js":
/*!*****************************************************!*\
  !*** ./node_modules/line-column/lib/line-column.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/**
 * line-column - Convert efficiently index to/from line-column in a string
 * @module  lineColumn
 * @license MIT
 */


var isArray  = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js");
var isObject = __webpack_require__(/*! isobject */ "./node_modules/isobject/index.js");
var slice = Array.prototype.slice;

module.exports = LineColumnFinder;

/**
 * Finder for index and line-column from given string.
 *
 * You can call this without `new` operator as it returns an instance anyway.
 *
 * @class
 * @param {string} str - A string to be parsed.
 * @param {Object|number} [options] - Options.
 *     This can be an index in the string for shorthand of `lineColumn(str, index)`.
 * @param {number} [options.origin=1] - The origin value of line and column.
 */
function LineColumnFinder(str, options) {
  if (!(this instanceof LineColumnFinder)) {
    if (typeof options === "number") {
      return (new LineColumnFinder(str)).fromIndex(options);
    }
    return new LineColumnFinder(str, options);
  }

  this.str = str || "";
  this.lineToIndex = buildLineToIndex(this.str);

  options = options || {};
  this.origin = typeof options.origin === "undefined" ? 1 : options.origin;
}

/**
 * Find line and column from index in the string.
 *
 * @param  {number} index - Index in the string. (0-origin)
 * @return {Object|null}
 *     Found line number and column number in object `{ line: X, col: Y }`.
 *     If the given index is out of range, it returns `null`.
 */
LineColumnFinder.prototype.fromIndex = function (index) {
  if (index < 0 || index >= this.str.length || isNaN(index)) {
    return null;
  }

  var line = findLowerIndexInRangeArray(index, this.lineToIndex);
  return {
    line: line + this.origin,
    col:  index - this.lineToIndex[line] + this.origin
  };
}

/**
 * Find index from line and column in the string.
 *
 * @param  {number|Object|Array} line - Line number in the string.
 *     This can be an Object of `{ line: X, col: Y }`, or
 *     an Array of `[line, col]`.
 * @param  {number} [column] - Column number in the string.
 *     This must be omitted or undefined when Object or Array is given
 *     to the first argument.
 * @return {number}
 *     Found index in the string. (always 0-origin)
 *     If the given line or column is out of range, it returns `-1`.
 */
LineColumnFinder.prototype.toIndex = function (line, column) {
  if (typeof column === "undefined") {
    if (isArray(line) && line.length >= 2) {
      return this.toIndex(line[0], line[1]);
    }
    if (isObject(line) && "line" in line && ("col" in line || "column" in line)) {
      return this.toIndex(line.line, ("col" in line ? line.col : line.column));
    }
    return -1;
  }
  if (isNaN(line) || isNaN(column)) {
    return -1;
  }

  line -= this.origin;
  column -= this.origin;

  if (line >= 0 && column >= 0 && line < this.lineToIndex.length) {
    var lineIndex = this.lineToIndex[line];
    var nextIndex = (
      line === this.lineToIndex.length - 1
        ? this.str.length
        : this.lineToIndex[line + 1]
    );

    if (column < nextIndex - lineIndex) {
      return lineIndex + column;
    }
  }
  return -1;
}

/**
 * Build an array of indexes of each line from a string.
 *
 * @private
 * @param   str {string}  An input string.
 * @return  {number[]}    Built array of indexes. The key is line number.
 */
function buildLineToIndex(str) {
  var lines = str.split("\n"),
      lineToIndex = new Array(lines.length),
      index = 0;

  for (var i = 0, l = lines.length; i < l; i++) {
    lineToIndex[i] = index;
    index += lines[i].length + /* "\n".length */ 1;
  }
  return lineToIndex;
}

/**
 * Find a lower-bound index of a value in a sorted array of ranges.
 *
 * Assume `arr = [0, 5, 10, 15, 20]` and
 * this returns `1` for `value = 7` (5 <= value < 10),
 * and returns `3` for `value = 18` (15 <= value < 20).
 *
 * @private
 * @param  arr   {number[]} An array of values representing ranges.
 * @param  value {number}   A value to be searched.
 * @return {number} Found index. If not found `-1`.
 */
function findLowerIndexInRangeArray(value, arr) {
  if (value >= arr[arr.length - 1]) {
    return arr.length - 1;
  }

  var min = 0, max = arr.length - 2, mid;
  while (min < max) {
    mid = min + ((max - min) >> 1);

    if (value < arr[mid]) {
      max = mid - 1;
    } else if (value >= arr[mid + 1]) {
      min = mid + 1;
    } else { // value >= arr[mid] && value < arr[mid + 1]
      min = mid;
      break;
    }
  }
  return min;
}


/***/ }),

/***/ "./node_modules/ohm-js/dist/ohm.esm.js":
/*!*********************************************!*\
  !*** ./node_modules/ohm-js/dist/ohm.esm.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ohm),
/* harmony export */   "extras": () => (/* binding */ extras)
/* harmony export */ });
/// <reference types="../index.d.ts" />
var main$1 = {exports: {}};

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

/*
  `Failure`s represent expressions that weren't matched while parsing. They are used to generate
  error messages automatically. The interface of `Failure`s includes the collowing methods:

  - getText() : String
  - getType() : String  (one of {"description", "string", "code"})
  - isDescription() : bool
  - isStringTerminal() : bool
  - isCode() : bool
  - isFluffy() : bool
  - makeFluffy() : void
  - subsumes(Failure) : bool
*/

function isValidType(type) {
  return type === 'description' || type === 'string' || type === 'code';
}

function Failure$2(pexpr, text, type) {
  if (!isValidType(type)) {
    throw new Error('invalid Failure type: ' + type);
  }
  this.pexpr = pexpr;
  this.text = text;
  this.type = type;
  this.fluffy = false;
}

Failure$2.prototype.getPExpr = function() {
  return this.pexpr;
};

Failure$2.prototype.getText = function() {
  return this.text;
};

Failure$2.prototype.getType = function() {
  return this.type;
};

Failure$2.prototype.isDescription = function() {
  return this.type === 'description';
};

Failure$2.prototype.isStringTerminal = function() {
  return this.type === 'string';
};

Failure$2.prototype.isCode = function() {
  return this.type === 'code';
};

Failure$2.prototype.isFluffy = function() {
  return this.fluffy;
};

Failure$2.prototype.makeFluffy = function() {
  this.fluffy = true;
};

Failure$2.prototype.clearFluffy = function() {
  this.fluffy = false;
};

Failure$2.prototype.subsumes = function(that) {
  return (
    this.getText() === that.getText() &&
    this.type === that.type &&
    (!this.isFluffy() || (this.isFluffy() && that.isFluffy()))
  );
};

Failure$2.prototype.toString = function() {
  return this.type === 'string' ? JSON.stringify(this.getText()) : this.getText();
};

Failure$2.prototype.clone = function() {
  const failure = new Failure$2(this.pexpr, this.text, this.type);
  if (this.isFluffy()) {
    failure.makeFluffy();
  }
  return failure;
};

Failure$2.prototype.toKey = function() {
  return this.toString() + '#' + this.type;
};

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var Failure_1 = Failure$2;

var common$l = {};

(function (exports) {

// --------------------------------------------------------------------
// Private Stuff
// --------------------------------------------------------------------

// Helpers

const escapeStringFor = {};
for (let c = 0; c < 128; c++) {
  escapeStringFor[c] = String.fromCharCode(c);
}
escapeStringFor["'".charCodeAt(0)] = "\\'";
escapeStringFor['"'.charCodeAt(0)] = '\\"';
escapeStringFor['\\'.charCodeAt(0)] = '\\\\';
escapeStringFor['\b'.charCodeAt(0)] = '\\b';
escapeStringFor['\f'.charCodeAt(0)] = '\\f';
escapeStringFor['\n'.charCodeAt(0)] = '\\n';
escapeStringFor['\r'.charCodeAt(0)] = '\\r';
escapeStringFor['\t'.charCodeAt(0)] = '\\t';
escapeStringFor['\u000b'.charCodeAt(0)] = '\\v';

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

exports.abstract = function(optMethodName) {
  const methodName = optMethodName || '';
  return function() {
    throw new Error(
        'this method ' +
        methodName +
        ' is abstract! ' +
        '(it has no implementation in class ' +
        this.constructor.name +
        ')'
    );
  };
};

exports.assert = function(cond, message) {
  if (!cond) {
    throw new Error(message || 'Assertion failed');
  }
};

// Define a lazily-computed, non-enumerable property named `propName`
// on the object `obj`. `getterFn` will be called to compute the value the
// first time the property is accessed.
exports.defineLazyProperty = function(obj, propName, getterFn) {
  let memo;
  Object.defineProperty(obj, propName, {
    get() {
      if (!memo) {
        memo = getterFn.call(this);
      }
      return memo;
    },
  });
};

exports.clone = function(obj) {
  if (obj) {
    return Object.assign({}, obj);
  }
  return obj;
};

exports.repeatFn = function(fn, n) {
  const arr = [];
  while (n-- > 0) {
    arr.push(fn());
  }
  return arr;
};

exports.repeatStr = function(str, n) {
  return new Array(n + 1).join(str);
};

exports.repeat = function(x, n) {
  return exports.repeatFn(() => x, n);
};

exports.getDuplicates = function(array) {
  const duplicates = [];
  for (let idx = 0; idx < array.length; idx++) {
    const x = array[idx];
    if (array.lastIndexOf(x) !== idx && duplicates.indexOf(x) < 0) {
      duplicates.push(x);
    }
  }
  return duplicates;
};

exports.copyWithoutDuplicates = function(array) {
  const noDuplicates = [];
  array.forEach(entry => {
    if (noDuplicates.indexOf(entry) < 0) {
      noDuplicates.push(entry);
    }
  });
  return noDuplicates;
};

exports.isSyntactic = function(ruleName) {
  const firstChar = ruleName[0];
  return firstChar === firstChar.toUpperCase();
};

exports.isLexical = function(ruleName) {
  return !exports.isSyntactic(ruleName);
};

exports.padLeft = function(str, len, optChar) {
  const ch = optChar || ' ';
  if (str.length < len) {
    return exports.repeatStr(ch, len - str.length) + str;
  }
  return str;
};

// StringBuffer

exports.StringBuffer = function() {
  this.strings = [];
};

exports.StringBuffer.prototype.append = function(str) {
  this.strings.push(str);
};

exports.StringBuffer.prototype.contents = function() {
  return this.strings.join('');
};

const escapeUnicode = str => String.fromCodePoint(parseInt(str, 16));

exports.unescapeCodePoint = function(s) {
  if (s.charAt(0) === '\\') {
    switch (s.charAt(1)) {
      case 'b':
        return '\b';
      case 'f':
        return '\f';
      case 'n':
        return '\n';
      case 'r':
        return '\r';
      case 't':
        return '\t';
      case 'v':
        return '\v';
      case 'x':
        return escapeUnicode(s.slice(2, 4));
      case 'u':
        return s.charAt(2) === '{' ?
          escapeUnicode(s.slice(3, -1)) :
          escapeUnicode(s.slice(2, 6));
      default:
        return s.charAt(1);
    }
  } else {
    return s;
  }
};

// Helper for producing a description of an unknown object in a safe way.
// Especially useful for error messages where an unexpected type of object was encountered.
exports.unexpectedObjToString = function(obj) {
  if (obj == null) {
    return String(obj);
  }
  const baseToString = Object.prototype.toString.call(obj);
  try {
    let typeName;
    if (obj.constructor && obj.constructor.name) {
      typeName = obj.constructor.name;
    } else if (baseToString.indexOf('[object ') === 0) {
      typeName = baseToString.slice(8, -1); // Extract e.g. "Array" from "[object Array]".
    } else {
      typeName = typeof obj;
    }
    return typeName + ': ' + JSON.stringify(String(obj));
  } catch (e) {
    return baseToString;
  }
};
}(common$l));

const common$k = common$l;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

class Node {
  constructor(matchLength) {
    this.matchLength = matchLength;
  }

  get ctorName() {
    throw new Error('subclass responsibility');
  }

  numChildren() {
    return this.children ? this.children.length : 0;
  }

  childAt(idx) {
    if (this.children) {
      return this.children[idx];
    }
  }

  indexOfChild(arg) {
    return this.children.indexOf(arg);
  }

  hasChildren() {
    return this.numChildren() > 0;
  }

  hasNoChildren() {
    return !this.hasChildren();
  }

  onlyChild() {
    if (this.numChildren() !== 1) {
      throw new Error(
          'cannot get only child of a node of type ' +
          this.ctorName +
          ' (it has ' +
          this.numChildren() +
          ' children)'
      );
    } else {
      return this.firstChild();
    }
  }

  firstChild() {
    if (this.hasNoChildren()) {
      throw new Error(
          'cannot get first child of a ' + this.ctorName + ' node, which has no children'
      );
    } else {
      return this.childAt(0);
    }
  }

  lastChild() {
    if (this.hasNoChildren()) {
      throw new Error(
          'cannot get last child of a ' + this.ctorName + ' node, which has no children'
      );
    } else {
      return this.childAt(this.numChildren() - 1);
    }
  }

  childBefore(child) {
    const childIdx = this.indexOfChild(child);
    if (childIdx < 0) {
      throw new Error('Node.childBefore() called w/ an argument that is not a child');
    } else if (childIdx === 0) {
      throw new Error('cannot get child before first child');
    } else {
      return this.childAt(childIdx - 1);
    }
  }

  childAfter(child) {
    const childIdx = this.indexOfChild(child);
    if (childIdx < 0) {
      throw new Error('Node.childAfter() called w/ an argument that is not a child');
    } else if (childIdx === this.numChildren() - 1) {
      throw new Error('cannot get child after last child');
    } else {
      return this.childAt(childIdx + 1);
    }
  }

  isTerminal() {
    return false;
  }

  isNonterminal() {
    return false;
  }

  isIteration() {
    return false;
  }

  isOptional() {
    return false;
  }
}

// Terminals

class TerminalNode$2 extends Node {
  get ctorName() {
    return '_terminal';
  }

  isTerminal() {
    return true;
  }

  get primitiveValue() {
    throw new Error('The `primitiveValue` property was removed in Ohm v17.');
  }
}

// Nonterminals

class NonterminalNode$1 extends Node {
  constructor(ruleName, children, childOffsets, matchLength) {
    super(matchLength);
    this.ruleName = ruleName;
    this.children = children;
    this.childOffsets = childOffsets;
  }

  get ctorName() {
    return this.ruleName;
  }

  isNonterminal() {
    return true;
  }

  isLexical() {
    return common$k.isLexical(this.ctorName);
  }

  isSyntactic() {
    return common$k.isSyntactic(this.ctorName);
  }
}

// Iterations

class IterationNode$2 extends Node {
  constructor(children, childOffsets, matchLength, isOptional) {
    super(matchLength);
    this.children = children;
    this.childOffsets = childOffsets;
    this.optional = isOptional;
  }

  get ctorName() {
    return '_iter';
  }

  isIteration() {
    return true;
  }

  isOptional() {
    return this.optional;
  }
}

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var nodes$1 = {
  Node,
  TerminalNode: TerminalNode$2,
  NonterminalNode: NonterminalNode$1,
  IterationNode: IterationNode$2,
};

var pexprsMain = {};

// Based on https://github.com/mathiasbynens/unicode-9.0.0.
// These are just categories that are used in ES5/ES2015.
// The full list of Unicode categories is here: http://www.fileformat.info/info/unicode/category/index.htm.
var UnicodeCategories$1 = {
  // Letters
  Lu: /[A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A]|\uD801[\uDC00-\uDC27\uDCB0-\uDCD3]|\uD803[\uDC80-\uDCB2]|\uD806[\uDCA0-\uDCBF]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21]/,
  Ll: /[a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0561-\u0587\u13F8-\u13FD\u1C80-\u1C88\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7B5\uA7B7\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A]|\uD801[\uDC28-\uDC4F\uDCD8-\uDCFB]|\uD803[\uDCC0-\uDCF2]|\uD806[\uDCC0-\uDCDF]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD83A[\uDD22-\uDD43]/,
  Lt: /[\u01C5\u01C8\u01CB\u01F2\u1F88-\u1F8F\u1F98-\u1F9F\u1FA8-\u1FAF\u1FBC\u1FCC\u1FFC]/,
  Lm: /[\u02B0-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0374\u037A\u0559\u0640\u06E5\u06E6\u07F4\u07F5\u07FA\u081A\u0824\u0828\u0971\u0E46\u0EC6\u10FC\u17D7\u1843\u1AA7\u1C78-\u1C7D\u1D2C-\u1D6A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C\u2C7D\u2D6F\u2E2F\u3005\u3031-\u3035\u303B\u309D\u309E\u30FC-\u30FE\uA015\uA4F8-\uA4FD\uA60C\uA67F\uA69C\uA69D\uA717-\uA71F\uA770\uA788\uA7F8\uA7F9\uA9CF\uA9E6\uAA70\uAADD\uAAF3\uAAF4\uAB5C-\uAB5F\uFF70\uFF9E\uFF9F]|\uD81A[\uDF40-\uDF43]|\uD81B[\uDF93-\uDF9F\uDFE0]/,
  Lo: /[\xAA\xBA\u01BB\u01C0-\u01C3\u0294\u05D0-\u05EA\u05F0-\u05F2\u0620-\u063F\u0641-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u0800-\u0815\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0972-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E45\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10D0-\u10FA\u10FD-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17DC\u1820-\u1842\u1844-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C77\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u2135-\u2138\u2D30-\u2D67\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3006\u303C\u3041-\u3096\u309F\u30A1-\u30FA\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA014\uA016-\uA48C\uA4D0-\uA4F7\uA500-\uA60B\uA610-\uA61F\uA62A\uA62B\uA66E\uA6A0-\uA6E5\uA78F\uA7F7\uA7FB-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9E0-\uA9E4\uA9E7-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA6F\uAA71-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB\uAADC\uAAE0-\uAAEA\uAAF2\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF66-\uFF6F\uFF71-\uFF9D\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC50-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,

  // Numbers
  Nl: /[\u16EE-\u16F0\u2160-\u2182\u2185-\u2188\u3007\u3021-\u3029\u3038-\u303A\uA6E6-\uA6EF]|\uD800[\uDD40-\uDD74\uDF41\uDF4A\uDFD1-\uDFD5]|\uD809[\uDC00-\uDC6E]/,
  Nd: /[0-9\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0BE6-\u0BEF\u0C66-\u0C6F\u0CE6-\u0CEF\u0D66-\u0D6F\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F29\u1040-\u1049\u1090-\u1099\u17E0-\u17E9\u1810-\u1819\u1946-\u194F\u19D0-\u19D9\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\uA620-\uA629\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19]|\uD801[\uDCA0-\uDCA9]|\uD804[\uDC66-\uDC6F\uDCF0-\uDCF9\uDD36-\uDD3F\uDDD0-\uDDD9\uDEF0-\uDEF9]|[\uD805\uD807][\uDC50-\uDC59\uDCD0-\uDCD9\uDE50-\uDE59\uDEC0-\uDEC9\uDF30-\uDF39]|\uD806[\uDCE0-\uDCE9]|\uD81A[\uDE60-\uDE69\uDF50-\uDF59]|\uD835[\uDFCE-\uDFFF]|\uD83A[\uDD50-\uDD59]/,

  // Marks
  Mn: /[\u0300-\u036F\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D4-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC6\u0CCC\u0CCD\u0CE2\u0CE3\u0D01\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ABD\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFB-\u1DFF\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099\u309A\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA8C4\uA8C5\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC01\uDC38-\uDC46\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDDCA-\uDDCC\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDE3E\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3C\uDF40\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC38-\uDC3F\uDC42-\uDC44\uDC46\uDCB3-\uDCB8\uDCBA\uDCBF\uDCC0\uDCC2\uDCC3\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B]|\uD807[\uDC30-\uDC36\uDC38-\uDC3D\uDC3F\uDC92-\uDCA7\uDCAA-\uDCB0\uDCB2\uDCB3\uDCB5\uDCB6]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD67-\uDD69\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uDB40[\uDD00-\uDDEF]/,
  Mc: /[\u0903-\u0903]|[\u093E-\u0940]|[\u0949-\u094C]|[\u0982-\u0983]|[\u09BE-\u09C0]|[\u09C7-\u09C8]|[\u09CB-\u09CC]|[\u09D7-\u09D7]|[\u0A3E-\u0A40]|[\u0A83-\u0A83]|[\u0ABE-\u0AC0]|[\u0AC9-\u0AC9]|[\u0ACB-\u0ACC]|[\u0B02-\u0B03]|[\u0B3E-\u0B3E]|[\u0B40-\u0B40]|[\u0B47-\u0B48]|[\u0B4B-\u0B4C]|[\u0B57-\u0B57]|[\u0B83-\u0B83]|[\u0BBE-\u0BBF]|[\u0BC1-\u0BC2]|[\u0BC6-\u0BC8]|[\u0BCA-\u0BCC]|[\u0BD7-\u0BD7]|[\u0C01-\u0C03]|[\u0C41-\u0C44]|[\u0C82-\u0C83]|[\u0CBE-\u0CBE]|[\u0CC0-\u0CC4]|[\u0CC7-\u0CC8]|[\u0CCA-\u0CCB]|[\u0CD5-\u0CD6]|[\u0D02-\u0D03]|[\u0D3E-\u0D40]|[\u0D46-\u0D48]|[\u0D4A-\u0D4C]|[\u0D57-\u0D57]|[\u0F3E-\u0F3F]|[\u0F7F-\u0F7F]/,

  // Punctuation, Connector
  Pc: /[_\u203F\u2040\u2054\uFE33\uFE34\uFE4D-\uFE4F\uFF3F]/,

  // Separator, Space
  Zs: /[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/,

  // These two are not real Unicode categories, but our useful for Ohm.
  // L is a combination of all the letter categories.
  // Ltmo is a combination of Lt, Lm, and Lo.
  L: /[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,
  Ltmo: /[\u01C5\u01C8\u01CB\u01F2\u1F88-\u1F8F\u1F98-\u1F9F\u1FA8-\u1FAF\u1FBC\u1FCC\u1FFC]|[\u02B0-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0374\u037A\u0559\u0640\u06E5\u06E6\u07F4\u07F5\u07FA\u081A\u0824\u0828\u0971\u0E46\u0EC6\u10FC\u17D7\u1843\u1AA7\u1C78-\u1C7D\u1D2C-\u1D6A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C\u2C7D\u2D6F\u2E2F\u3005\u3031-\u3035\u303B\u309D\u309E\u30FC-\u30FE\uA015\uA4F8-\uA4FD\uA60C\uA67F\uA69C\uA69D\uA717-\uA71F\uA770\uA788\uA7F8\uA7F9\uA9CF\uA9E6\uAA70\uAADD\uAAF3\uAAF4\uAB5C-\uAB5F\uFF70\uFF9E\uFF9F]|\uD81A[\uDF40-\uDF43]|\uD81B[\uDF93-\uDF9F\uDFE0]|[\xAA\xBA\u01BB\u01C0-\u01C3\u0294\u05D0-\u05EA\u05F0-\u05F2\u0620-\u063F\u0641-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u0800-\u0815\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0972-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E45\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10D0-\u10FA\u10FD-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17DC\u1820-\u1842\u1844-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C77\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u2135-\u2138\u2D30-\u2D67\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3006\u303C\u3041-\u3096\u309F\u30A1-\u30FA\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA014\uA016-\uA48C\uA4D0-\uA4F7\uA500-\uA60B\uA610-\uA61F\uA62A\uA62B\uA66E\uA6A0-\uA6E5\uA78F\uA7F7\uA7FB-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9E0-\uA9E4\uA9E7-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA6F\uAA71-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB\uAADC\uAAE0-\uAAEA\uAAF2\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF66-\uFF6F\uFF71-\uFF9D\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC50-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/
};

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const UnicodeCategories = UnicodeCategories$1;
const common$j = common$l;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

// General stuff

class PExpr$1 {
  constructor() {
    if (this.constructor === PExpr$1) {
      throw new Error("PExpr cannot be instantiated -- it's abstract");
    }
  }

  // Set the `source` property to the interval containing the source for this expression.
  withSource(interval) {
    if (interval) {
      this.source = interval.trimmed();
    }
    return this;
  }
}

// Any

const any = Object.create(PExpr$1.prototype);

// End

const end = Object.create(PExpr$1.prototype);

// Terminals

class Terminal$1 extends PExpr$1 {
  constructor(obj) {
    super();
    this.obj = obj;
  }
}

// Ranges

class Range extends PExpr$1 {
  constructor(from, to) {
    super();
    this.from = from;
    this.to = to;
    // If either `from` or `to` is made up of multiple code units, then
    // the range should consume a full code point, not a single code unit.
    this.matchCodePoint = from.length > 1 || to.length > 1;
  }
}

// Parameters

class Param extends PExpr$1 {
  constructor(index) {
    super();
    this.index = index;
  }
}

// Alternation

class Alt extends PExpr$1 {
  constructor(terms) {
    super();
    this.terms = terms;
  }
}

// Extend is an implementation detail of rule extension

class Extend extends Alt {
  constructor(superGrammar, name, body) {
    const origBody = superGrammar.rules[name].body;
    super([body, origBody]);

    this.superGrammar = superGrammar;
    this.name = name;
    this.body = body;
  }
}

// Splice is an implementation detail of rule overriding with the `...` operator.
class Splice extends Alt {
  constructor(superGrammar, ruleName, beforeTerms, afterTerms) {
    const origBody = superGrammar.rules[ruleName].body;
    super([...beforeTerms, origBody, ...afterTerms]);

    this.superGrammar = superGrammar;
    this.ruleName = ruleName;
    this.expansionPos = beforeTerms.length;
  }
}

// Sequences

class Seq extends PExpr$1 {
  constructor(factors) {
    super();
    this.factors = factors;
  }
}

// Iterators and optionals

class Iter extends PExpr$1 {
  constructor(expr) {
    super();
    this.expr = expr;
  }
}

class Star extends Iter {}
class Plus extends Iter {}
class Opt extends Iter {}

Star.prototype.operator = '*';
Plus.prototype.operator = '+';
Opt.prototype.operator = '?';

Star.prototype.minNumMatches = 0;
Plus.prototype.minNumMatches = 1;
Opt.prototype.minNumMatches = 0;

Star.prototype.maxNumMatches = Number.POSITIVE_INFINITY;
Plus.prototype.maxNumMatches = Number.POSITIVE_INFINITY;
Opt.prototype.maxNumMatches = 1;

// Predicates

class Not extends PExpr$1 {
  constructor(expr) {
    super();
    this.expr = expr;
  }
}

class Lookahead extends PExpr$1 {
  constructor(expr) {
    super();
    this.expr = expr;
  }
}

// "Lexification"

class Lex extends PExpr$1 {
  constructor(expr) {
    super();
    this.expr = expr;
  }
}

// Rule application

class Apply extends PExpr$1 {
  constructor(ruleName, args = []) {
    super();
    this.ruleName = ruleName;
    this.args = args;
  }

  isSyntactic() {
    return common$j.isSyntactic(this.ruleName);
  }

  // This method just caches the result of `this.toString()` in a non-enumerable property.
  toMemoKey() {
    if (!this._memoKey) {
      Object.defineProperty(this, '_memoKey', {value: this.toString()});
    }
    return this._memoKey;
  }
}

// Unicode character

class UnicodeChar extends PExpr$1 {
  constructor(category) {
    super();
    this.category = category;
    this.pattern = UnicodeCategories[category];
  }
}

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

pexprsMain.PExpr = PExpr$1;
pexprsMain.any = any;
pexprsMain.end = end;
pexprsMain.Terminal = Terminal$1;
pexprsMain.Range = Range;
pexprsMain.Param = Param;
pexprsMain.Alt = Alt;
pexprsMain.Extend = Extend;
pexprsMain.Splice = Splice;
pexprsMain.Seq = Seq;
pexprsMain.Iter = Iter;
pexprsMain.Star = Star;
pexprsMain.Plus = Plus;
pexprsMain.Opt = Opt;
pexprsMain.Not = Not;
pexprsMain.Lookahead = Lookahead;
pexprsMain.Lex = Lex;
pexprsMain.Apply = Apply;
pexprsMain.UnicodeChar = UnicodeChar;

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const common$i = common$l;
const pexprs$l = pexprsMain;

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

/*
  Return true if we should skip spaces preceding this expression in a syntactic context.
*/
pexprs$l.PExpr.prototype.allowsSkippingPrecedingSpace = common$i.abstract(
    'allowsSkippingPrecedingSpace'
);

/*
  Generally, these are all first-order expressions and (with the exception of Apply)
  directly read from the input stream.
*/
pexprs$l.any.allowsSkippingPrecedingSpace =
  pexprs$l.end.allowsSkippingPrecedingSpace =
  pexprs$l.Apply.prototype.allowsSkippingPrecedingSpace =
  pexprs$l.Terminal.prototype.allowsSkippingPrecedingSpace =
  pexprs$l.Range.prototype.allowsSkippingPrecedingSpace =
  pexprs$l.UnicodeChar.prototype.allowsSkippingPrecedingSpace =
    function() {
      return true;
    };

/*
  Higher-order expressions that don't directly consume input.
*/
pexprs$l.Alt.prototype.allowsSkippingPrecedingSpace =
  pexprs$l.Iter.prototype.allowsSkippingPrecedingSpace =
  pexprs$l.Lex.prototype.allowsSkippingPrecedingSpace =
  pexprs$l.Lookahead.prototype.allowsSkippingPrecedingSpace =
  pexprs$l.Not.prototype.allowsSkippingPrecedingSpace =
  pexprs$l.Param.prototype.allowsSkippingPrecedingSpace =
  pexprs$l.Seq.prototype.allowsSkippingPrecedingSpace =
    function() {
      return false;
    };

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

function Namespace$2() {}
Namespace$2.prototype = Object.create(null);

Namespace$2.asNamespace = function(objOrNamespace) {
  if (objOrNamespace instanceof Namespace$2) {
    return objOrNamespace;
  }
  return Namespace$2.createNamespace(objOrNamespace);
};

// Create a new namespace. If `optProps` is specified, all of its properties
// will be copied to the new namespace.
Namespace$2.createNamespace = function(optProps) {
  return Namespace$2.extend(Namespace$2.prototype, optProps);
};

// Create a new namespace which extends another namespace. If `optProps` is
// specified, all of its properties will be copied to the new namespace.
Namespace$2.extend = function(namespace, optProps) {
  if (namespace !== Namespace$2.prototype && !(namespace instanceof Namespace$2)) {
    throw new TypeError('not a Namespace object: ' + namespace);
  }
  const ns = Object.create(namespace, {
    constructor: {
      value: Namespace$2,
      enumerable: false,
      writable: true,
      configurable: true,
    },
  });
  return Object.assign(ns, optProps);
};

// TODO: Should this be a regular method?
Namespace$2.toString = function(ns) {
  return Object.prototype.toString.call(ns);
};

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var Namespace_1 = Namespace$2;

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const {assert: assert$3} = common$l;
const Namespace$1 = Namespace_1;
const pexprs$k = pexprsMain;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

function createError(message, optInterval) {
  let e;
  if (optInterval) {
    e = new Error(optInterval.getLineAndColumnMessage() + message);
    e.shortMessage = message;
    e.interval = optInterval;
  } else {
    e = new Error(message);
  }
  return e;
}

// ----------------- errors about intervals -----------------

function intervalSourcesDontMatch() {
  return createError("Interval sources don't match");
}

// ----------------- errors about grammars -----------------

// Grammar syntax error

function grammarSyntaxError(matchFailure) {
  const e = new Error();
  Object.defineProperty(e, 'message', {
    enumerable: true,
    get() {
      return matchFailure.message;
    },
  });
  Object.defineProperty(e, 'shortMessage', {
    enumerable: true,
    get() {
      return 'Expected ' + matchFailure.getExpectedText();
    },
  });
  e.interval = matchFailure.getInterval();
  return e;
}

// Undeclared grammar

function undeclaredGrammar(grammarName, namespace, interval) {
  const message = namespace ?
    'Grammar ' +
      grammarName +
      ' is not declared in namespace ' +
      Namespace$1.toString(namespace) :
    'Undeclared grammar ' + grammarName;
  return createError(message, interval);
}

// Duplicate grammar declaration

function duplicateGrammarDeclaration(grammar, namespace) {
  return createError('Grammar ' + grammar.name + ' is already declared in this namespace');
}

// ----------------- rules -----------------

// Undeclared rule

function undeclaredRule(ruleName, grammarName, optInterval) {
  return createError(
      'Rule ' + ruleName + ' is not declared in grammar ' + grammarName,
      optInterval
  );
}

// Cannot override undeclared rule

function cannotOverrideUndeclaredRule(ruleName, grammarName, optSource) {
  return createError(
      'Cannot override rule ' + ruleName + ' because it is not declared in ' + grammarName,
      optSource
  );
}

// Cannot extend undeclared rule

function cannotExtendUndeclaredRule(ruleName, grammarName, optSource) {
  return createError(
      'Cannot extend rule ' + ruleName + ' because it is not declared in ' + grammarName,
      optSource
  );
}

// Duplicate rule declaration

function duplicateRuleDeclaration(ruleName, grammarName, declGrammarName, optSource) {
  let message =
    "Duplicate declaration for rule '" + ruleName + "' in grammar '" + grammarName + "'";
  if (grammarName !== declGrammarName) {
    message += " (originally declared in '" + declGrammarName + "')";
  }
  return createError(message, optSource);
}

// Wrong number of parameters

function wrongNumberOfParameters(ruleName, expected, actual, source) {
  return createError(
      'Wrong number of parameters for rule ' +
      ruleName +
      ' (expected ' +
      expected +
      ', got ' +
      actual +
      ')',
      source
  );
}

// Wrong number of arguments

function wrongNumberOfArguments(ruleName, expected, actual, expr) {
  return createError(
      'Wrong number of arguments for rule ' +
      ruleName +
      ' (expected ' +
      expected +
      ', got ' +
      actual +
      ')',
      expr
  );
}

// Duplicate parameter names

function duplicateParameterNames(ruleName, duplicates, source) {
  return createError(
      'Duplicate parameter names in rule ' + ruleName + ': ' + duplicates.join(', '),
      source
  );
}

// Invalid parameter expression

function invalidParameter(ruleName, expr) {
  return createError(
      'Invalid parameter to rule ' +
      ruleName +
      ': ' +
      expr +
      ' has arity ' +
      expr.getArity() +
      ', but parameter expressions must have arity 1',
      expr.source
  );
}

// Application of syntactic rule from lexical rule

const syntacticVsLexicalNote =
  'NOTE: A _syntactic rule_ is a rule whose name begins with a capital letter. ' +
  'See https://ohmjs.org/d/svl for more details.';

function applicationOfSyntacticRuleFromLexicalContext(ruleName, applyExpr) {
  return createError(
      'Cannot apply syntactic rule ' + ruleName + ' from here (inside a lexical context)',
      applyExpr.source
  );
}

// Lexical rule application used with applySyntactic

function applySyntacticWithLexicalRuleApplication(applyExpr) {
  const {ruleName} = applyExpr;
  return createError(
      `applySyntactic is for syntactic rules, but '${ruleName}' is a lexical rule. ` +
      syntacticVsLexicalNote,
      applyExpr.source
  );
}

// Application of applySyntactic in a syntactic context

function unnecessaryExperimentalApplySyntactic(applyExpr) {
  return createError(
      'applySyntactic is not required here (in a syntactic context)',
      applyExpr.source
  );
}

// Incorrect argument type

function incorrectArgumentType(expectedType, expr) {
  return createError('Incorrect argument type: expected ' + expectedType, expr.source);
}

// Multiple instances of the super-splice operator (`...`) in the rule body.

function multipleSuperSplices(expr) {
  return createError("'...' can appear at most once in a rule body", expr.source);
}

// Unicode code point escapes

function invalidCodePoint(applyWrapper) {
  const node = applyWrapper._node;
  assert$3(node && node.isNonterminal() && node.ctorName === 'escapeChar_unicodeCodePoint');

  // Get an interval that covers all of the hex digits.
  const digitIntervals = applyWrapper.children.slice(1, -1).map(d => d.source);
  const fullInterval = digitIntervals[0].coverageWith(...digitIntervals.slice(1));
  return createError(
      `U+${fullInterval.contents} is not a valid Unicode code point`,
      fullInterval
  );
}

// ----------------- Kleene operators -----------------

function kleeneExprHasNullableOperand(kleeneExpr, applicationStack) {
  const actuals =
    applicationStack.length > 0 ? applicationStack[applicationStack.length - 1].args : [];
  const expr = kleeneExpr.expr.substituteParams(actuals);
  let message =
    'Nullable expression ' +
    expr +
    " is not allowed inside '" +
    kleeneExpr.operator +
    "' (possible infinite loop)";
  if (applicationStack.length > 0) {
    const stackTrace = applicationStack
        .map(app => new pexprs$k.Apply(app.ruleName, app.args))
        .join('\n');
    message += '\nApplication stack (most recent application last):\n' + stackTrace;
  }
  return createError(message, kleeneExpr.expr.source);
}

// ----------------- arity -----------------

function inconsistentArity(ruleName, expected, actual, expr) {
  return createError(
      'Rule ' +
      ruleName +
      ' involves an alternation which has inconsistent arity ' +
      '(expected ' +
      expected +
      ', got ' +
      actual +
      ')',
      expr.source
  );
}

// ----------------- properties -----------------

function duplicatePropertyNames(duplicates) {
  return createError('Object pattern has duplicate property names: ' + duplicates.join(', '));
}

// ----------------- constructors -----------------

function invalidConstructorCall(grammar, ctorName, children) {
  return createError(
      'Attempt to invoke constructor ' + ctorName + ' with invalid or unexpected arguments'
  );
}

// ----------------- convenience -----------------

function multipleErrors(errors) {
  const messages = errors.map(e => e.message);
  return createError(['Errors:'].concat(messages).join('\n- '), errors[0].interval);
}

// ----------------- semantic -----------------

function missingSemanticAction(ctorName, name, type, stack) {
  let stackTrace = stack
      .slice(0, -1)
      .map(info => {
        const ans = '  ' + info[0].name + ' > ' + info[1];
        return info.length === 3 ? ans + " for '" + info[2] + "'" : ans;
      })
      .join('\n');
  stackTrace += '\n  ' + name + ' > ' + ctorName;

  let moreInfo = '';
  if (ctorName === '_iter') {
    moreInfo = [
      '\nNOTE: as of Ohm v16, there is no default action for iteration nodes — see ',
      '  https://ohmjs.org/d/dsa for details.',
    ].join('\n');
  }

  const message = [
    `Missing semantic action for '${ctorName}' in ${type} '${name}'.${moreInfo}`,
    'Action stack (most recent call last):',
    stackTrace,
  ].join('\n');

  const e = createError(message);
  e.name = 'missingSemanticAction';
  return e;
}

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var errors$9 = {
  applicationOfSyntacticRuleFromLexicalContext,
  applySyntacticWithLexicalRuleApplication,
  cannotExtendUndeclaredRule,
  cannotOverrideUndeclaredRule,
  duplicateGrammarDeclaration,
  duplicateParameterNames,
  duplicatePropertyNames,
  duplicateRuleDeclaration,
  inconsistentArity,
  incorrectArgumentType,
  intervalSourcesDontMatch,
  invalidCodePoint,
  invalidConstructorCall,
  invalidParameter,
  grammarSyntaxError,
  kleeneExprHasNullableOperand,
  missingSemanticAction,
  multipleSuperSplices,
  undeclaredGrammar,
  undeclaredRule,
  unnecessaryExperimentalApplySyntactic,
  wrongNumberOfArguments,
  wrongNumberOfParameters,

  throwErrors(errors) {
    if (errors.length === 1) {
      throw errors[0];
    }
    if (errors.length > 1) {
      throw multipleErrors(errors);
    }
  },
};

var util$7 = {};

(function (exports) {

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const common = common$l;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

// Given an array of numbers `arr`, return an array of the numbers as strings,
// right-justified and padded to the same length.
function padNumbersToEqualLength(arr) {
  let maxLen = 0;
  const strings = arr.map(n => {
    const str = n.toString();
    maxLen = Math.max(maxLen, str.length);
    return str;
  });
  return strings.map(s => common.padLeft(s, maxLen));
}

// Produce a new string that would be the result of copying the contents
// of the string `src` onto `dest` at offset `offest`.
function strcpy(dest, src, offset) {
  const origDestLen = dest.length;
  const start = dest.slice(0, offset);
  const end = dest.slice(offset + src.length);
  return (start + src + end).substr(0, origDestLen);
}

// Casts the underlying lineAndCol object to a formatted message string,
// highlighting `ranges`.
function lineAndColumnToMessage(...ranges) {
  const lineAndCol = this;
  const {offset} = lineAndCol;
  const {repeatStr} = common;

  const sb = new common.StringBuffer();
  sb.append('Line ' + lineAndCol.lineNum + ', col ' + lineAndCol.colNum + ':\n');

  // An array of the previous, current, and next line numbers as strings of equal length.
  const lineNumbers = padNumbersToEqualLength([
    lineAndCol.prevLine == null ? 0 : lineAndCol.lineNum - 1,
    lineAndCol.lineNum,
    lineAndCol.nextLine == null ? 0 : lineAndCol.lineNum + 1,
  ]);

  // Helper for appending formatting input lines to the buffer.
  const appendLine = (num, content, prefix) => {
    sb.append(prefix + lineNumbers[num] + ' | ' + content + '\n');
  };

  // Include the previous line for context if possible.
  if (lineAndCol.prevLine != null) {
    appendLine(0, lineAndCol.prevLine, '  ');
  }
  // Line that the error occurred on.
  appendLine(1, lineAndCol.line, '> ');

  // Build up the line that points to the offset and possible indicates one or more ranges.
  // Start with a blank line, and indicate each range by overlaying a string of `~` chars.
  const lineLen = lineAndCol.line.length;
  let indicationLine = repeatStr(' ', lineLen + 1);
  for (let i = 0; i < ranges.length; ++i) {
    let startIdx = ranges[i][0];
    let endIdx = ranges[i][1];
    common.assert(startIdx >= 0 && startIdx <= endIdx, 'range start must be >= 0 and <= end');

    const lineStartOffset = offset - lineAndCol.colNum + 1;
    startIdx = Math.max(0, startIdx - lineStartOffset);
    endIdx = Math.min(endIdx - lineStartOffset, lineLen);

    indicationLine = strcpy(indicationLine, repeatStr('~', endIdx - startIdx), startIdx);
  }
  const gutterWidth = 2 + lineNumbers[1].length + 3;
  sb.append(repeatStr(' ', gutterWidth));
  indicationLine = strcpy(indicationLine, '^', lineAndCol.colNum - 1);
  sb.append(indicationLine.replace(/ +$/, '') + '\n');

  // Include the next line for context if possible.
  if (lineAndCol.nextLine != null) {
    appendLine(2, lineAndCol.nextLine, '  ');
  }
  return sb.contents();
}

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

let builtInRulesCallbacks = [];

// Since Grammar.BuiltInRules is bootstrapped, most of Ohm can't directly depend it.
// This function allows modules that do depend on the built-in rules to register a callback
// that will be called later in the initialization process.
exports.awaitBuiltInRules = cb => {
  builtInRulesCallbacks.push(cb);
};

exports.announceBuiltInRules = grammar => {
  builtInRulesCallbacks.forEach(cb => {
    cb(grammar);
  });
  builtInRulesCallbacks = null;
};

// Return an object with the line and column information for the given
// offset in `str`.
exports.getLineAndColumn = (str, offset) => {
  let lineNum = 1;
  let colNum = 1;

  let currOffset = 0;
  let lineStartOffset = 0;

  let nextLine = null;
  let prevLine = null;
  let prevLineStartOffset = -1;

  while (currOffset < offset) {
    const c = str.charAt(currOffset++);
    if (c === '\n') {
      lineNum++;
      colNum = 1;
      prevLineStartOffset = lineStartOffset;
      lineStartOffset = currOffset;
    } else if (c !== '\r') {
      colNum++;
    }
  }

  // Find the end of the target line.
  let lineEndOffset = str.indexOf('\n', lineStartOffset);
  if (lineEndOffset === -1) {
    lineEndOffset = str.length;
  } else {
    // Get the next line.
    const nextLineEndOffset = str.indexOf('\n', lineEndOffset + 1);
    nextLine =
      nextLineEndOffset === -1 ?
        str.slice(lineEndOffset) :
        str.slice(lineEndOffset, nextLineEndOffset);
    // Strip leading and trailing EOL char(s).
    nextLine = nextLine.replace(/^\r?\n/, '').replace(/\r$/, '');
  }

  // Get the previous line.
  if (prevLineStartOffset >= 0) {
    // Strip trailing EOL char(s).
    prevLine = str.slice(prevLineStartOffset, lineStartOffset).replace(/\r?\n$/, '');
  }

  // Get the target line, stripping a trailing carriage return if necessary.
  const line = str.slice(lineStartOffset, lineEndOffset).replace(/\r$/, '');

  return {
    offset,
    lineNum,
    colNum,
    line,
    prevLine,
    nextLine,
    toString: lineAndColumnToMessage,
  };
};

// Return a nicely-formatted string describing the line and column for the
// given offset in `str` highlighting `ranges`.
exports.getLineAndColumnMessage = function(str, offset, ...ranges) {
  return exports.getLineAndColumn(str, offset).toString(...ranges);
};

exports.uniqueId = (() => {
  let idCounter = 0;
  return prefix => '' + prefix + idCounter++;
})();
}(util$7));

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const {abstract, isSyntactic} = common$l;
const errors$8 = errors$9;
const pexprs$j = pexprsMain;
const util$6 = util$7;

let BuiltInRules;

util$6.awaitBuiltInRules(g => {
  BuiltInRules = g;
});

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

let lexifyCount;

pexprs$j.PExpr.prototype.assertAllApplicationsAreValid = function(ruleName, grammar) {
  lexifyCount = 0;
  this._assertAllApplicationsAreValid(ruleName, grammar);
};

pexprs$j.PExpr.prototype._assertAllApplicationsAreValid = abstract(
    '_assertAllApplicationsAreValid'
);

pexprs$j.any._assertAllApplicationsAreValid =
  pexprs$j.end._assertAllApplicationsAreValid =
  pexprs$j.Terminal.prototype._assertAllApplicationsAreValid =
  pexprs$j.Range.prototype._assertAllApplicationsAreValid =
  pexprs$j.Param.prototype._assertAllApplicationsAreValid =
  pexprs$j.UnicodeChar.prototype._assertAllApplicationsAreValid =
    function(ruleName, grammar) {
      // no-op
    };

pexprs$j.Lex.prototype._assertAllApplicationsAreValid = function(ruleName, grammar) {
  lexifyCount++;
  this.expr._assertAllApplicationsAreValid(ruleName, grammar);
  lexifyCount--;
};

pexprs$j.Alt.prototype._assertAllApplicationsAreValid = function(ruleName, grammar) {
  for (let idx = 0; idx < this.terms.length; idx++) {
    this.terms[idx]._assertAllApplicationsAreValid(ruleName, grammar);
  }
};

pexprs$j.Seq.prototype._assertAllApplicationsAreValid = function(ruleName, grammar) {
  for (let idx = 0; idx < this.factors.length; idx++) {
    this.factors[idx]._assertAllApplicationsAreValid(ruleName, grammar);
  }
};

pexprs$j.Iter.prototype._assertAllApplicationsAreValid =
  pexprs$j.Not.prototype._assertAllApplicationsAreValid =
  pexprs$j.Lookahead.prototype._assertAllApplicationsAreValid =
    function(ruleName, grammar) {
      this.expr._assertAllApplicationsAreValid(ruleName, grammar);
    };

pexprs$j.Apply.prototype._assertAllApplicationsAreValid = function(
    ruleName,
    grammar,
    skipSyntacticCheck = false
) {
  const ruleInfo = grammar.rules[this.ruleName];
  const isContextSyntactic = isSyntactic(ruleName) && lexifyCount === 0;

  // Make sure that the rule exists...
  if (!ruleInfo) {
    throw errors$8.undeclaredRule(this.ruleName, grammar.name, this.source);
  }

  // ...and that this application is allowed
  if (!skipSyntacticCheck && isSyntactic(this.ruleName) && !isContextSyntactic) {
    throw errors$8.applicationOfSyntacticRuleFromLexicalContext(this.ruleName, this);
  }

  // ...and that this application has the correct number of arguments.
  const actual = this.args.length;
  const expected = ruleInfo.formals.length;
  if (actual !== expected) {
    throw errors$8.wrongNumberOfArguments(this.ruleName, expected, actual, this.source);
  }

  const isBuiltInApplySyntactic =
    BuiltInRules && ruleInfo === BuiltInRules.rules.applySyntactic;
  const isBuiltInCaseInsensitive =
    BuiltInRules && ruleInfo === BuiltInRules.rules.caseInsensitive;

  // If it's an application of 'caseInsensitive', ensure that the argument is a Terminal.
  if (isBuiltInCaseInsensitive) {
    if (!(this.args[0] instanceof pexprs$j.Terminal)) {
      throw errors$8.incorrectArgumentType('a Terminal (e.g. "abc")', this.args[0]);
    }
  }

  if (isBuiltInApplySyntactic) {
    const arg = this.args[0];
    if (!(arg instanceof pexprs$j.Apply)) {
      throw errors$8.incorrectArgumentType('a syntactic rule application', arg);
    }
    if (!isSyntactic(arg.ruleName)) {
      throw errors$8.applySyntacticWithLexicalRuleApplication(arg);
    }
    if (isContextSyntactic) {
      throw errors$8.unnecessaryExperimentalApplySyntactic(this);
    }
  }

  // ...and that all of the argument expressions only have valid applications and have arity 1.
  // If `this` is an application of the built-in applySyntactic rule, then its arg is
  // allowed (and expected) to be a syntactic rule, even if we're in a lexical context.
  this.args.forEach(arg => {
    arg._assertAllApplicationsAreValid(ruleName, grammar, isBuiltInApplySyntactic);
    if (arg.getArity() !== 1) {
      throw errors$8.invalidParameter(this.ruleName, arg);
    }
  });
};

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const common$h = common$l;
const errors$7 = errors$9;
const pexprs$i = pexprsMain;

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

pexprs$i.PExpr.prototype.assertChoicesHaveUniformArity = common$h.abstract(
    'assertChoicesHaveUniformArity'
);

pexprs$i.any.assertChoicesHaveUniformArity =
  pexprs$i.end.assertChoicesHaveUniformArity =
  pexprs$i.Terminal.prototype.assertChoicesHaveUniformArity =
  pexprs$i.Range.prototype.assertChoicesHaveUniformArity =
  pexprs$i.Param.prototype.assertChoicesHaveUniformArity =
  pexprs$i.Lex.prototype.assertChoicesHaveUniformArity =
  pexprs$i.UnicodeChar.prototype.assertChoicesHaveUniformArity =
    function(ruleName) {
      // no-op
    };

pexprs$i.Alt.prototype.assertChoicesHaveUniformArity = function(ruleName) {
  if (this.terms.length === 0) {
    return;
  }
  const arity = this.terms[0].getArity();
  for (let idx = 0; idx < this.terms.length; idx++) {
    const term = this.terms[idx];
    term.assertChoicesHaveUniformArity();
    const otherArity = term.getArity();
    if (arity !== otherArity) {
      throw errors$7.inconsistentArity(ruleName, arity, otherArity, term);
    }
  }
};

pexprs$i.Extend.prototype.assertChoicesHaveUniformArity = function(ruleName) {
  // Extend is a special case of Alt that's guaranteed to have exactly two
  // cases: [extensions, origBody].
  const actualArity = this.terms[0].getArity();
  const expectedArity = this.terms[1].getArity();
  if (actualArity !== expectedArity) {
    throw errors$7.inconsistentArity(ruleName, expectedArity, actualArity, this.terms[0]);
  }
};

pexprs$i.Seq.prototype.assertChoicesHaveUniformArity = function(ruleName) {
  for (let idx = 0; idx < this.factors.length; idx++) {
    this.factors[idx].assertChoicesHaveUniformArity(ruleName);
  }
};

pexprs$i.Iter.prototype.assertChoicesHaveUniformArity = function(ruleName) {
  this.expr.assertChoicesHaveUniformArity(ruleName);
};

pexprs$i.Not.prototype.assertChoicesHaveUniformArity = function(ruleName) {
  // no-op (not required b/c the nested expr doesn't show up in the CST)
};

pexprs$i.Lookahead.prototype.assertChoicesHaveUniformArity = function(ruleName) {
  this.expr.assertChoicesHaveUniformArity(ruleName);
};

pexprs$i.Apply.prototype.assertChoicesHaveUniformArity = function(ruleName) {
  // The arities of the parameter expressions is required to be 1 by
  // `assertAllApplicationsAreValid()`.
};

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const common$g = common$l;
const errors$6 = errors$9;
const pexprs$h = pexprsMain;

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

pexprs$h.PExpr.prototype.assertIteratedExprsAreNotNullable = common$g.abstract(
    'assertIteratedExprsAreNotNullable'
);

pexprs$h.any.assertIteratedExprsAreNotNullable =
  pexprs$h.end.assertIteratedExprsAreNotNullable =
  pexprs$h.Terminal.prototype.assertIteratedExprsAreNotNullable =
  pexprs$h.Range.prototype.assertIteratedExprsAreNotNullable =
  pexprs$h.Param.prototype.assertIteratedExprsAreNotNullable =
  pexprs$h.UnicodeChar.prototype.assertIteratedExprsAreNotNullable =
    function(grammar) {
      // no-op
    };

pexprs$h.Alt.prototype.assertIteratedExprsAreNotNullable = function(grammar) {
  for (let idx = 0; idx < this.terms.length; idx++) {
    this.terms[idx].assertIteratedExprsAreNotNullable(grammar);
  }
};

pexprs$h.Seq.prototype.assertIteratedExprsAreNotNullable = function(grammar) {
  for (let idx = 0; idx < this.factors.length; idx++) {
    this.factors[idx].assertIteratedExprsAreNotNullable(grammar);
  }
};

pexprs$h.Iter.prototype.assertIteratedExprsAreNotNullable = function(grammar) {
  // Note: this is the implementation of this method for `Star` and `Plus` expressions.
  // It is overridden for `Opt` below.
  this.expr.assertIteratedExprsAreNotNullable(grammar);
  if (this.expr.isNullable(grammar)) {
    throw errors$6.kleeneExprHasNullableOperand(this, []);
  }
};

pexprs$h.Opt.prototype.assertIteratedExprsAreNotNullable =
  pexprs$h.Not.prototype.assertIteratedExprsAreNotNullable =
  pexprs$h.Lookahead.prototype.assertIteratedExprsAreNotNullable =
  pexprs$h.Lex.prototype.assertIteratedExprsAreNotNullable =
    function(grammar) {
      this.expr.assertIteratedExprsAreNotNullable(grammar);
    };

pexprs$h.Apply.prototype.assertIteratedExprsAreNotNullable = function(grammar) {
  this.args.forEach(arg => {
    arg.assertIteratedExprsAreNotNullable(grammar);
  });
};

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const {assert: assert$2} = common$l;
const errors$5 = errors$9;
const util$5 = util$7;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

function Interval$3(sourceString, startIdx, endIdx) {
  this.sourceString = sourceString;
  this.startIdx = startIdx;
  this.endIdx = endIdx;
}

Interval$3.coverage = function(firstInterval, ...intervals) {
  let {startIdx, endIdx} = firstInterval;
  for (const interval of intervals) {
    if (interval.sourceString !== firstInterval.sourceString) {
      throw errors$5.intervalSourcesDontMatch();
    } else {
      startIdx = Math.min(startIdx, interval.startIdx);
      endIdx = Math.max(endIdx, interval.endIdx);
    }
  }
  return new Interval$3(firstInterval.sourceString, startIdx, endIdx);
};

Interval$3.prototype = {
  coverageWith(...intervals) {
    return Interval$3.coverage(...intervals, this);
  },

  collapsedLeft() {
    return new Interval$3(this.sourceString, this.startIdx, this.startIdx);
  },

  collapsedRight() {
    return new Interval$3(this.sourceString, this.endIdx, this.endIdx);
  },

  getLineAndColumn() {
    return util$5.getLineAndColumn(this.sourceString, this.startIdx);
  },

  getLineAndColumnMessage() {
    const range = [this.startIdx, this.endIdx];
    return util$5.getLineAndColumnMessage(this.sourceString, this.startIdx, range);
  },

  // Returns an array of 0, 1, or 2 intervals that represents the result of the
  // interval difference operation.
  minus(that) {
    if (this.sourceString !== that.sourceString) {
      throw errors$5.intervalSourcesDontMatch();
    } else if (this.startIdx === that.startIdx && this.endIdx === that.endIdx) {
      // `this` and `that` are the same interval!
      return [];
    } else if (this.startIdx < that.startIdx && that.endIdx < this.endIdx) {
      // `that` splits `this` into two intervals
      return [
        new Interval$3(this.sourceString, this.startIdx, that.startIdx),
        new Interval$3(this.sourceString, that.endIdx, this.endIdx),
      ];
    } else if (this.startIdx < that.endIdx && that.endIdx < this.endIdx) {
      // `that` contains a prefix of `this`
      return [new Interval$3(this.sourceString, that.endIdx, this.endIdx)];
    } else if (this.startIdx < that.startIdx && that.startIdx < this.endIdx) {
      // `that` contains a suffix of `this`
      return [new Interval$3(this.sourceString, this.startIdx, that.startIdx)];
    } else {
      // `that` and `this` do not overlap
      return [this];
    }
  },

  // Returns a new Interval that has the same extent as this one, but which is relative
  // to `that`, an Interval that fully covers this one.
  relativeTo(that) {
    if (this.sourceString !== that.sourceString) {
      throw errors$5.intervalSourcesDontMatch();
    }
    assert$2(
        this.startIdx >= that.startIdx && this.endIdx <= that.endIdx,
        'other interval does not cover this one'
    );
    return new Interval$3(
        this.sourceString,
        this.startIdx - that.startIdx,
        this.endIdx - that.startIdx
    );
  },

  // Returns a new Interval which contains the same contents as this one,
  // but with whitespace trimmed from both ends. (This only makes sense when
  // the input stream is a string.)
  trimmed() {
    const {contents} = this;
    const startIdx = this.startIdx + contents.match(/^\s*/)[0].length;
    const endIdx = this.endIdx - contents.match(/\s*$/)[0].length;
    return new Interval$3(this.sourceString, startIdx, endIdx);
  },

  subInterval(offset, len) {
    const newStartIdx = this.startIdx + offset;
    return new Interval$3(this.sourceString, newStartIdx, newStartIdx + len);
  },
};

Object.defineProperties(Interval$3.prototype, {
  contents: {
    get() {
      if (this._contents === undefined) {
        this._contents = this.sourceString.slice(this.startIdx, this.endIdx);
      }
      return this._contents;
    },
    enumerable: true,
  },
  length: {
    get() {
      return this.endIdx - this.startIdx;
    },
    enumerable: true,
  },
});

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var Interval_1 = Interval$3;

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const Interval$2 = Interval_1;
const common$f = common$l;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

// Unicode characters that are used in the `toString` output.
const BALLOT_X = '\u2717';
const CHECK_MARK = '\u2713';
const DOT_OPERATOR = '\u22C5';
const RIGHTWARDS_DOUBLE_ARROW = '\u21D2';
const SYMBOL_FOR_HORIZONTAL_TABULATION = '\u2409';
const SYMBOL_FOR_LINE_FEED = '\u240A';
const SYMBOL_FOR_CARRIAGE_RETURN = '\u240D';

const Flags = {
  succeeded: 1 << 0,
  isRootNode: 1 << 1,
  isImplicitSpaces: 1 << 2,
  isMemoized: 1 << 3,
  isHeadOfLeftRecursion: 1 << 4,
  terminatesLR: 1 << 5,
};

function spaces(n) {
  return common$f.repeat(' ', n).join('');
}

// Return a string representation of a portion of `input` at offset `pos`.
// The result will contain exactly `len` characters.
function getInputExcerpt(input, pos, len) {
  const excerpt = asEscapedString(input.slice(pos, pos + len));

  // Pad the output if necessary.
  if (excerpt.length < len) {
    return excerpt + common$f.repeat(' ', len - excerpt.length).join('');
  }
  return excerpt;
}

function asEscapedString(obj) {
  if (typeof obj === 'string') {
    // Replace non-printable characters with visible symbols.
    return obj
        .replace(/ /g, DOT_OPERATOR)
        .replace(/\t/g, SYMBOL_FOR_HORIZONTAL_TABULATION)
        .replace(/\n/g, SYMBOL_FOR_LINE_FEED)
        .replace(/\r/g, SYMBOL_FOR_CARRIAGE_RETURN);
  }
  return String(obj);
}

// ----------------- Trace -----------------

function Trace$2(input, pos1, pos2, expr, succeeded, bindings, optChildren) {
  this.input = input;
  this.pos = this.pos1 = pos1;
  this.pos2 = pos2;
  this.source = new Interval$2(input, pos1, pos2);
  this.expr = expr;
  this.bindings = bindings;
  this.children = optChildren || [];
  this.terminatingLREntry = null;

  this._flags = succeeded ? Flags.succeeded : 0;
}

// A value that can be returned from visitor functions to indicate that a
// node should not be recursed into.
Trace$2.prototype.SKIP = {};

Object.defineProperty(Trace$2.prototype, 'displayString', {
  get() {
    return this.expr.toDisplayString();
  },
});

// For convenience, create a getter and setter for the boolean flags in `Flags`.
Object.keys(Flags).forEach(name => {
  const mask = Flags[name];
  Object.defineProperty(Trace$2.prototype, name, {
    get() {
      return (this._flags & mask) !== 0;
    },
    set(val) {
      if (val) {
        this._flags |= mask;
      } else {
        this._flags &= ~mask;
      }
    },
  });
});

Trace$2.prototype.clone = function() {
  return this.cloneWithExpr(this.expr);
};

Trace$2.prototype.cloneWithExpr = function(expr) {
  const ans = new Trace$2(
      this.input,
      this.pos,
      this.pos2,
      expr,
      this.succeeded,
      this.bindings,
      this.children
  );

  ans.isHeadOfLeftRecursion = this.isHeadOfLeftRecursion;
  ans.isImplicitSpaces = this.isImplicitSpaces;
  ans.isMemoized = this.isMemoized;
  ans.isRootNode = this.isRootNode;
  ans.terminatesLR = this.terminatesLR;
  ans.terminatingLREntry = this.terminatingLREntry;
  return ans;
};

// Record the trace information for the terminating condition of the LR loop.
Trace$2.prototype.recordLRTermination = function(ruleBodyTrace, value) {
  this.terminatingLREntry = new Trace$2(
      this.input,
      this.pos,
      this.pos2,
      this.expr,
      false,
      [value],
      [ruleBodyTrace]
  );
  this.terminatingLREntry.terminatesLR = true;
};

// Recursively traverse this trace node and all its descendents, calling a visitor function
// for each node that is visited. If `vistorObjOrFn` is an object, then its 'enter' property
// is a function to call before visiting the children of a node, and its 'exit' property is
// a function to call afterwards. If `visitorObjOrFn` is a function, it represents the 'enter'
// function.
//
// The functions are called with three arguments: the Trace node, its parent Trace, and a number
// representing the depth of the node in the tree. (The root node has depth 0.) `optThisArg`, if
// specified, is the value to use for `this` when executing the visitor functions.
Trace$2.prototype.walk = function(visitorObjOrFn, optThisArg) {
  let visitor = visitorObjOrFn;
  if (typeof visitor === 'function') {
    visitor = {enter: visitor};
  }

  function _walk(node, parent, depth) {
    let recurse = true;
    if (visitor.enter) {
      if (visitor.enter.call(optThisArg, node, parent, depth) === Trace$2.prototype.SKIP) {
        recurse = false;
      }
    }
    if (recurse) {
      node.children.forEach(child => {
        _walk(child, node, depth + 1);
      });
      if (visitor.exit) {
        visitor.exit.call(optThisArg, node, parent, depth);
      }
    }
  }
  if (this.isRootNode) {
    // Don't visit the root node itself, only its children.
    this.children.forEach(c => {
      _walk(c, null, 0);
    });
  } else {
    _walk(this, null, 0);
  }
};

// Return a string representation of the trace.
// Sample:
//     12⋅+⋅2⋅*⋅3 ✓ exp ⇒  "12"
//     12⋅+⋅2⋅*⋅3   ✓ addExp (LR) ⇒  "12"
//     12⋅+⋅2⋅*⋅3       ✗ addExp_plus
Trace$2.prototype.toString = function() {
  const sb = new common$f.StringBuffer();
  this.walk((node, parent, depth) => {
    if (!node) {
      return this.SKIP;
    }
    const ctorName = node.expr.constructor.name;
    // Don't print anything for Alt nodes.
    if (ctorName === 'Alt') {
      return; // eslint-disable-line consistent-return
    }
    sb.append(getInputExcerpt(node.input, node.pos, 10) + spaces(depth * 2 + 1));
    sb.append((node.succeeded ? CHECK_MARK : BALLOT_X) + ' ' + node.displayString);
    if (node.isHeadOfLeftRecursion) {
      sb.append(' (LR)');
    }
    if (node.succeeded) {
      const contents = asEscapedString(node.source.contents);
      sb.append(' ' + RIGHTWARDS_DOUBLE_ARROW + '  ');
      sb.append(typeof contents === 'string' ? '"' + contents + '"' : contents);
    }
    sb.append('\n');
  });
  return sb.contents();
};

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var Trace_1 = Trace$2;

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const Trace$1 = Trace_1;
const common$e = common$l;
const errors$4 = errors$9;
const nodes = nodes$1;
const pexprs$g = pexprsMain;

const {TerminalNode: TerminalNode$1} = nodes;
const {NonterminalNode} = nodes;
const {IterationNode: IterationNode$1} = nodes;

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

/*
  Evaluate the expression and return `true` if it succeeds, `false` otherwise. This method should
  only be called directly by `State.prototype.eval(expr)`, which also updates the data structures
  that are used for tracing. (Making those updates in a method of `State` enables the trace-specific
  data structures to be "secrets" of that class, which is good for modularity.)

  The contract of this method is as follows:
  * When the return value is `true`,
    - the state object will have `expr.getArity()` more bindings than it did before the call.
  * When the return value is `false`,
    - the state object may have more bindings than it did before the call, and
    - its input stream's position may be anywhere.

  Note that `State.prototype.eval(expr)`, unlike this method, guarantees that neither the state
  object's bindings nor its input stream's position will change if the expression fails to match.
*/
pexprs$g.PExpr.prototype.eval = common$e.abstract('eval'); // function(state) { ... }

pexprs$g.any.eval = function(state) {
  const {inputStream} = state;
  const origPos = inputStream.pos;
  const ch = inputStream.next();
  if (ch) {
    state.pushBinding(new TerminalNode$1(ch.length), origPos);
    return true;
  } else {
    state.processFailure(origPos, this);
    return false;
  }
};

pexprs$g.end.eval = function(state) {
  const {inputStream} = state;
  const origPos = inputStream.pos;
  if (inputStream.atEnd()) {
    state.pushBinding(new TerminalNode$1(0), origPos);
    return true;
  } else {
    state.processFailure(origPos, this);
    return false;
  }
};

pexprs$g.Terminal.prototype.eval = function(state) {
  const {inputStream} = state;
  const origPos = inputStream.pos;
  if (!inputStream.matchString(this.obj)) {
    state.processFailure(origPos, this);
    return false;
  } else {
    state.pushBinding(new TerminalNode$1(this.obj.length), origPos);
    return true;
  }
};

pexprs$g.Range.prototype.eval = function(state) {
  const {inputStream} = state;
  const origPos = inputStream.pos;

  // A range can operate in one of two modes: matching a single, 16-bit _code unit_,
  // or matching a _code point_. (Code points over 0xFFFF take up two 16-bit code units.)
  const cp = this.matchCodePoint ? inputStream.nextCodePoint() : inputStream.nextCharCode();

  // Always compare by code point value to get the correct result in all scenarios.
  // Note that for strings of length 1, codePointAt(0) and charPointAt(0) are equivalent.
  if (cp !== undefined && this.from.codePointAt(0) <= cp && cp <= this.to.codePointAt(0)) {
    state.pushBinding(new TerminalNode$1(String.fromCodePoint(cp).length), origPos);
    return true;
  } else {
    state.processFailure(origPos, this);
    return false;
  }
};

pexprs$g.Param.prototype.eval = function(state) {
  return state.eval(state.currentApplication().args[this.index]);
};

pexprs$g.Lex.prototype.eval = function(state) {
  state.enterLexifiedContext();
  const ans = state.eval(this.expr);
  state.exitLexifiedContext();
  return ans;
};

pexprs$g.Alt.prototype.eval = function(state) {
  for (let idx = 0; idx < this.terms.length; idx++) {
    if (state.eval(this.terms[idx])) {
      return true;
    }
  }
  return false;
};

pexprs$g.Seq.prototype.eval = function(state) {
  for (let idx = 0; idx < this.factors.length; idx++) {
    const factor = this.factors[idx];
    if (!state.eval(factor)) {
      return false;
    }
  }
  return true;
};

pexprs$g.Iter.prototype.eval = function(state) {
  const {inputStream} = state;
  const origPos = inputStream.pos;
  const arity = this.getArity();
  const cols = [];
  const colOffsets = [];
  while (cols.length < arity) {
    cols.push([]);
    colOffsets.push([]);
  }

  let numMatches = 0;
  let prevPos = origPos;
  let idx;
  while (numMatches < this.maxNumMatches && state.eval(this.expr)) {
    if (inputStream.pos === prevPos) {
      throw errors$4.kleeneExprHasNullableOperand(this, state._applicationStack);
    }
    prevPos = inputStream.pos;
    numMatches++;
    const row = state._bindings.splice(state._bindings.length - arity, arity);
    const rowOffsets = state._bindingOffsets.splice(
        state._bindingOffsets.length - arity,
        arity
    );
    for (idx = 0; idx < row.length; idx++) {
      cols[idx].push(row[idx]);
      colOffsets[idx].push(rowOffsets[idx]);
    }
  }
  if (numMatches < this.minNumMatches) {
    return false;
  }
  let offset = state.posToOffset(origPos);
  let matchLength = 0;
  if (numMatches > 0) {
    const lastCol = cols[arity - 1];
    const lastColOffsets = colOffsets[arity - 1];

    const endOffset =
      lastColOffsets[lastColOffsets.length - 1] + lastCol[lastCol.length - 1].matchLength;
    offset = colOffsets[0][0];
    matchLength = endOffset - offset;
  }
  const isOptional = this instanceof pexprs$g.Opt;
  for (idx = 0; idx < cols.length; idx++) {
    state._bindings.push(
        new IterationNode$1(cols[idx], colOffsets[idx], matchLength, isOptional)
    );
    state._bindingOffsets.push(offset);
  }
  return true;
};

pexprs$g.Not.prototype.eval = function(state) {
  /*
    TODO:
    - Right now we're just throwing away all of the failures that happen inside a `not`, and
      recording `this` as a failed expression.
    - Double negation should be equivalent to lookahead, but that's not the case right now wrt
      failures. E.g., ~~'foo' produces a failure for ~~'foo', but maybe it should produce
      a failure for 'foo' instead.
  */

  const {inputStream} = state;
  const origPos = inputStream.pos;
  state.pushFailuresInfo();

  const ans = state.eval(this.expr);

  state.popFailuresInfo();
  if (ans) {
    state.processFailure(origPos, this);
    return false;
  }

  inputStream.pos = origPos;
  return true;
};

pexprs$g.Lookahead.prototype.eval = function(state) {
  const {inputStream} = state;
  const origPos = inputStream.pos;
  if (state.eval(this.expr)) {
    inputStream.pos = origPos;
    return true;
  } else {
    return false;
  }
};

pexprs$g.Apply.prototype.eval = function(state) {
  const caller = state.currentApplication();
  const actuals = caller ? caller.args : [];
  const app = this.substituteParams(actuals);

  const posInfo = state.getCurrentPosInfo();
  if (posInfo.isActive(app)) {
    // This rule is already active at this position, i.e., it is left-recursive.
    return app.handleCycle(state);
  }

  const memoKey = app.toMemoKey();
  const memoRec = posInfo.memo[memoKey];

  if (memoRec && posInfo.shouldUseMemoizedResult(memoRec)) {
    if (state.hasNecessaryInfo(memoRec)) {
      return state.useMemoizedResult(state.inputStream.pos, memoRec);
    }
    delete posInfo.memo[memoKey];
  }
  return app.reallyEval(state);
};

pexprs$g.Apply.prototype.handleCycle = function(state) {
  const posInfo = state.getCurrentPosInfo();
  const {currentLeftRecursion} = posInfo;
  const memoKey = this.toMemoKey();
  let memoRec = posInfo.memo[memoKey];

  if (currentLeftRecursion && currentLeftRecursion.headApplication.toMemoKey() === memoKey) {
    // We already know about this left recursion, but it's possible there are "involved
    // applications" that we don't already know about, so...
    memoRec.updateInvolvedApplicationMemoKeys();
  } else if (!memoRec) {
    // New left recursion detected! Memoize a failure to try to get a seed parse.
    memoRec = posInfo.memoize(memoKey, {
      matchLength: 0,
      examinedLength: 0,
      value: false,
      rightmostFailureOffset: -1,
    });
    posInfo.startLeftRecursion(this, memoRec);
  }
  return state.useMemoizedResult(state.inputStream.pos, memoRec);
};

pexprs$g.Apply.prototype.reallyEval = function(state) {
  const {inputStream} = state;
  const origPos = inputStream.pos;
  const origPosInfo = state.getCurrentPosInfo();
  const ruleInfo = state.grammar.rules[this.ruleName];
  const {body} = ruleInfo;
  const {description} = ruleInfo;

  state.enterApplication(origPosInfo, this);

  if (description) {
    state.pushFailuresInfo();
  }

  // Reset the input stream's examinedLength property so that we can track
  // the examined length of this particular application.
  const origInputStreamExaminedLength = inputStream.examinedLength;
  inputStream.examinedLength = 0;

  let value = this.evalOnce(body, state);
  const currentLR = origPosInfo.currentLeftRecursion;
  const memoKey = this.toMemoKey();
  const isHeadOfLeftRecursion = currentLR && currentLR.headApplication.toMemoKey() === memoKey;
  let memoRec;

  if (isHeadOfLeftRecursion) {
    value = this.growSeedResult(body, state, origPos, currentLR, value);
    origPosInfo.endLeftRecursion();
    memoRec = currentLR;
    memoRec.examinedLength = inputStream.examinedLength - origPos;
    memoRec.rightmostFailureOffset = state._getRightmostFailureOffset();
    origPosInfo.memoize(memoKey, memoRec); // updates origPosInfo's maxExaminedLength
  } else if (!currentLR || !currentLR.isInvolved(memoKey)) {
    // This application is not involved in left recursion, so it's ok to memoize it.
    memoRec = origPosInfo.memoize(memoKey, {
      matchLength: inputStream.pos - origPos,
      examinedLength: inputStream.examinedLength - origPos,
      value,
      failuresAtRightmostPosition: state.cloneRecordedFailures(),
      rightmostFailureOffset: state._getRightmostFailureOffset(),
    });
  }
  const succeeded = !!value;

  if (description) {
    state.popFailuresInfo();
    if (!succeeded) {
      state.processFailure(origPos, this);
    }
    if (memoRec) {
      memoRec.failuresAtRightmostPosition = state.cloneRecordedFailures();
    }
  }

  // Record trace information in the memo table, so that it is available if the memoized result
  // is used later.
  if (state.isTracing() && memoRec) {
    const entry = state.getTraceEntry(origPos, this, succeeded, succeeded ? [value] : []);
    if (isHeadOfLeftRecursion) {
      common$e.assert(entry.terminatingLREntry != null || !succeeded);
      entry.isHeadOfLeftRecursion = true;
    }
    memoRec.traceEntry = entry;
  }

  // Fix the input stream's examinedLength -- it should be the maximum examined length
  // across all applications, not just this one.
  inputStream.examinedLength = Math.max(
      inputStream.examinedLength,
      origInputStreamExaminedLength
  );

  state.exitApplication(origPosInfo, value);

  return succeeded;
};

pexprs$g.Apply.prototype.evalOnce = function(expr, state) {
  const {inputStream} = state;
  const origPos = inputStream.pos;

  if (state.eval(expr)) {
    const arity = expr.getArity();
    const bindings = state._bindings.splice(state._bindings.length - arity, arity);
    const offsets = state._bindingOffsets.splice(state._bindingOffsets.length - arity, arity);
    const matchLength = inputStream.pos - origPos;
    return new NonterminalNode(this.ruleName, bindings, offsets, matchLength);
  } else {
    return false;
  }
};

pexprs$g.Apply.prototype.growSeedResult = function(body, state, origPos, lrMemoRec, newValue) {
  if (!newValue) {
    return false;
  }

  const {inputStream} = state;

  while (true) {
    lrMemoRec.matchLength = inputStream.pos - origPos;
    lrMemoRec.value = newValue;
    lrMemoRec.failuresAtRightmostPosition = state.cloneRecordedFailures();

    if (state.isTracing()) {
      // Before evaluating the body again, add a trace node for this application to the memo entry.
      // Its only child is a copy of the trace node from `newValue`, which will always be the last
      // element in `state.trace`.
      const seedTrace = state.trace[state.trace.length - 1];
      lrMemoRec.traceEntry = new Trace$1(
          state.input,
          origPos,
          inputStream.pos,
          this,
          true,
          [newValue],
          [seedTrace.clone()]
      );
    }
    inputStream.pos = origPos;
    newValue = this.evalOnce(body, state);
    if (inputStream.pos - origPos <= lrMemoRec.matchLength) {
      break;
    }
    if (state.isTracing()) {
      state.trace.splice(-2, 1); // Drop the trace for the old seed.
    }
  }
  if (state.isTracing()) {
    // The last entry is for an unused result -- pop it and save it in the "real" entry.
    lrMemoRec.traceEntry.recordLRTermination(state.trace.pop(), newValue);
  }
  inputStream.pos = origPos + lrMemoRec.matchLength;
  return lrMemoRec.value;
};

pexprs$g.UnicodeChar.prototype.eval = function(state) {
  const {inputStream} = state;
  const origPos = inputStream.pos;
  const ch = inputStream.next();
  if (ch && this.pattern.test(ch)) {
    state.pushBinding(new TerminalNode$1(ch.length), origPos);
    return true;
  } else {
    state.processFailure(origPos, this);
    return false;
  }
};

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const common$d = common$l;
const pexprs$f = pexprsMain;

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

pexprs$f.PExpr.prototype.getArity = common$d.abstract('getArity');

pexprs$f.any.getArity =
  pexprs$f.end.getArity =
  pexprs$f.Terminal.prototype.getArity =
  pexprs$f.Range.prototype.getArity =
  pexprs$f.Param.prototype.getArity =
  pexprs$f.Apply.prototype.getArity =
  pexprs$f.UnicodeChar.prototype.getArity =
    function() {
      return 1;
    };

pexprs$f.Alt.prototype.getArity = function() {
  // This is ok b/c all terms must have the same arity -- this property is
  // checked by the Grammar constructor.
  return this.terms.length === 0 ? 0 : this.terms[0].getArity();
};

pexprs$f.Seq.prototype.getArity = function() {
  let arity = 0;
  for (let idx = 0; idx < this.factors.length; idx++) {
    arity += this.factors[idx].getArity();
  }
  return arity;
};

pexprs$f.Iter.prototype.getArity = function() {
  return this.expr.getArity();
};

pexprs$f.Not.prototype.getArity = function() {
  return 0;
};

pexprs$f.Lookahead.prototype.getArity = pexprs$f.Lex.prototype.getArity = function() {
  return this.expr.getArity();
};

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const common$c = common$l;
const pexprs$e = pexprsMain;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

function getMetaInfo(expr, grammarInterval) {
  const metaInfo = {};
  if (expr.source && grammarInterval) {
    const adjusted = expr.source.relativeTo(grammarInterval);
    metaInfo.sourceInterval = [adjusted.startIdx, adjusted.endIdx];
  }
  return metaInfo;
}

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

pexprs$e.PExpr.prototype.outputRecipe = common$c.abstract('outputRecipe');

pexprs$e.any.outputRecipe = function(formals, grammarInterval) {
  return ['any', getMetaInfo(this, grammarInterval)];
};

pexprs$e.end.outputRecipe = function(formals, grammarInterval) {
  return ['end', getMetaInfo(this, grammarInterval)];
};

pexprs$e.Terminal.prototype.outputRecipe = function(formals, grammarInterval) {
  return ['terminal', getMetaInfo(this, grammarInterval), this.obj];
};

pexprs$e.Range.prototype.outputRecipe = function(formals, grammarInterval) {
  return ['range', getMetaInfo(this, grammarInterval), this.from, this.to];
};

pexprs$e.Param.prototype.outputRecipe = function(formals, grammarInterval) {
  return ['param', getMetaInfo(this, grammarInterval), this.index];
};

pexprs$e.Alt.prototype.outputRecipe = function(formals, grammarInterval) {
  return ['alt', getMetaInfo(this, grammarInterval)].concat(
      this.terms.map(term => term.outputRecipe(formals, grammarInterval))
  );
};

pexprs$e.Extend.prototype.outputRecipe = function(formals, grammarInterval) {
  const extension = this.terms[0]; // [extension, original]
  return extension.outputRecipe(formals, grammarInterval);
};

pexprs$e.Splice.prototype.outputRecipe = function(formals, grammarInterval) {
  const beforeTerms = this.terms.slice(0, this.expansionPos);
  const afterTerms = this.terms.slice(this.expansionPos + 1);
  return [
    'splice',
    getMetaInfo(this, grammarInterval),
    beforeTerms.map(term => term.outputRecipe(formals, grammarInterval)),
    afterTerms.map(term => term.outputRecipe(formals, grammarInterval)),
  ];
};

pexprs$e.Seq.prototype.outputRecipe = function(formals, grammarInterval) {
  return ['seq', getMetaInfo(this, grammarInterval)].concat(
      this.factors.map(factor => factor.outputRecipe(formals, grammarInterval))
  );
};

pexprs$e.Star.prototype.outputRecipe =
  pexprs$e.Plus.prototype.outputRecipe =
  pexprs$e.Opt.prototype.outputRecipe =
  pexprs$e.Not.prototype.outputRecipe =
  pexprs$e.Lookahead.prototype.outputRecipe =
  pexprs$e.Lex.prototype.outputRecipe =
    function(formals, grammarInterval) {
      return [
        this.constructor.name.toLowerCase(),
        getMetaInfo(this, grammarInterval),
        this.expr.outputRecipe(formals, grammarInterval),
      ];
    };

pexprs$e.Apply.prototype.outputRecipe = function(formals, grammarInterval) {
  return [
    'app',
    getMetaInfo(this, grammarInterval),
    this.ruleName,
    this.args.map(arg => arg.outputRecipe(formals, grammarInterval)),
  ];
};

pexprs$e.UnicodeChar.prototype.outputRecipe = function(formals, grammarInterval) {
  return ['unicodeChar', getMetaInfo(this, grammarInterval), this.category];
};

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const common$b = common$l;
const pexprs$d = pexprsMain;

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

/*
  Called at grammar creation time to rewrite a rule body, replacing each reference to a formal
  parameter with a `Param` node. Returns a PExpr -- either a new one, or the original one if
  it was modified in place.
*/
pexprs$d.PExpr.prototype.introduceParams = common$b.abstract('introduceParams');

pexprs$d.any.introduceParams =
  pexprs$d.end.introduceParams =
  pexprs$d.Terminal.prototype.introduceParams =
  pexprs$d.Range.prototype.introduceParams =
  pexprs$d.Param.prototype.introduceParams =
  pexprs$d.UnicodeChar.prototype.introduceParams =
    function(formals) {
      return this;
    };

pexprs$d.Alt.prototype.introduceParams = function(formals) {
  this.terms.forEach((term, idx, terms) => {
    terms[idx] = term.introduceParams(formals);
  });
  return this;
};

pexprs$d.Seq.prototype.introduceParams = function(formals) {
  this.factors.forEach((factor, idx, factors) => {
    factors[idx] = factor.introduceParams(formals);
  });
  return this;
};

pexprs$d.Iter.prototype.introduceParams =
  pexprs$d.Not.prototype.introduceParams =
  pexprs$d.Lookahead.prototype.introduceParams =
  pexprs$d.Lex.prototype.introduceParams =
    function(formals) {
      this.expr = this.expr.introduceParams(formals);
      return this;
    };

pexprs$d.Apply.prototype.introduceParams = function(formals) {
  const index = formals.indexOf(this.ruleName);
  if (index >= 0) {
    if (this.args.length > 0) {
      // TODO: Should this be supported? See issue #64.
      throw new Error('Parameterized rules cannot be passed as arguments to another rule.');
    }
    return new pexprs$d.Param(index).withSource(this.source);
  } else {
    this.args.forEach((arg, idx, args) => {
      args[idx] = arg.introduceParams(formals);
    });
    return this;
  }
};

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const common$a = common$l;
const pexprs$c = pexprsMain;

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

// Returns `true` if this parsing expression may accept without consuming any input.
pexprs$c.PExpr.prototype.isNullable = function(grammar) {
  return this._isNullable(grammar, Object.create(null));
};

pexprs$c.PExpr.prototype._isNullable = common$a.abstract('_isNullable');

pexprs$c.any._isNullable =
  pexprs$c.Range.prototype._isNullable =
  pexprs$c.Param.prototype._isNullable =
  pexprs$c.Plus.prototype._isNullable =
  pexprs$c.UnicodeChar.prototype._isNullable =
    function(grammar, memo) {
      return false;
    };

pexprs$c.end._isNullable = function(grammar, memo) {
  return true;
};

pexprs$c.Terminal.prototype._isNullable = function(grammar, memo) {
  if (typeof this.obj === 'string') {
    // This is an over-simplification: it's only correct if the input is a string. If it's an array
    // or an object, then the empty string parsing expression is not nullable.
    return this.obj === '';
  } else {
    return false;
  }
};

pexprs$c.Alt.prototype._isNullable = function(grammar, memo) {
  return this.terms.length === 0 || this.terms.some(term => term._isNullable(grammar, memo));
};

pexprs$c.Seq.prototype._isNullable = function(grammar, memo) {
  return this.factors.every(factor => factor._isNullable(grammar, memo));
};

pexprs$c.Star.prototype._isNullable =
  pexprs$c.Opt.prototype._isNullable =
  pexprs$c.Not.prototype._isNullable =
  pexprs$c.Lookahead.prototype._isNullable =
    function(grammar, memo) {
      return true;
    };

pexprs$c.Lex.prototype._isNullable = function(grammar, memo) {
  return this.expr._isNullable(grammar, memo);
};

pexprs$c.Apply.prototype._isNullable = function(grammar, memo) {
  const key = this.toMemoKey();
  if (!Object.prototype.hasOwnProperty.call(memo, key)) {
    const {body} = grammar.rules[this.ruleName];
    const inlined = body.substituteParams(this.args);
    memo[key] = false; // Prevent infinite recursion for recursive rules.
    memo[key] = inlined._isNullable(grammar, memo);
  }
  return memo[key];
};

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const common$9 = common$l;
const pexprs$b = pexprsMain;

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

/*
  Returns a PExpr that results from recursively replacing every formal parameter (i.e., instance
  of `Param`) inside this PExpr with its actual value from `actuals` (an Array).

  The receiver must not be modified; a new PExpr must be returned if any replacement is necessary.
*/
// function(actuals) { ... }
pexprs$b.PExpr.prototype.substituteParams = common$9.abstract('substituteParams');

pexprs$b.any.substituteParams =
  pexprs$b.end.substituteParams =
  pexprs$b.Terminal.prototype.substituteParams =
  pexprs$b.Range.prototype.substituteParams =
  pexprs$b.UnicodeChar.prototype.substituteParams =
    function(actuals) {
      return this;
    };

pexprs$b.Param.prototype.substituteParams = function(actuals) {
  return actuals[this.index];
};

pexprs$b.Alt.prototype.substituteParams = function(actuals) {
  return new pexprs$b.Alt(this.terms.map(term => term.substituteParams(actuals)));
};

pexprs$b.Seq.prototype.substituteParams = function(actuals) {
  return new pexprs$b.Seq(this.factors.map(factor => factor.substituteParams(actuals)));
};

pexprs$b.Iter.prototype.substituteParams =
  pexprs$b.Not.prototype.substituteParams =
  pexprs$b.Lookahead.prototype.substituteParams =
  pexprs$b.Lex.prototype.substituteParams =
    function(actuals) {
      return new this.constructor(this.expr.substituteParams(actuals));
    };

pexprs$b.Apply.prototype.substituteParams = function(actuals) {
  if (this.args.length === 0) {
    // Avoid making a copy of this application, as an optimization
    return this;
  } else {
    const args = this.args.map(arg => arg.substituteParams(actuals));
    return new pexprs$b.Apply(this.ruleName, args);
  }
};

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const common$8 = common$l;
const pexprs$a = pexprsMain;

const {copyWithoutDuplicates} = common$8;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

function isRestrictedJSIdentifier(str) {
  return /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(str);
}

function resolveDuplicatedNames(argumentNameList) {
  // `count` is used to record the number of times each argument name occurs in the list,
  // this is useful for checking duplicated argument name. It maps argument names to ints.
  const count = Object.create(null);
  argumentNameList.forEach(argName => {
    count[argName] = (count[argName] || 0) + 1;
  });

  // Append subscripts ('_1', '_2', ...) to duplicate argument names.
  Object.keys(count).forEach(dupArgName => {
    if (count[dupArgName] <= 1) {
      return;
    }

    // This name shows up more than once, so add subscripts.
    let subscript = 1;
    argumentNameList.forEach((argName, idx) => {
      if (argName === dupArgName) {
        argumentNameList[idx] = argName + '_' + subscript++;
      }
    });
  });
}

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

/*
  Returns a list of strings that will be used as the default argument names for its receiver
  (a pexpr) in a semantic action. This is used exclusively by the Semantics Editor.

  `firstArgIndex` is the 1-based index of the first argument name that will be generated for this
  pexpr. It enables us to name arguments positionally, e.g., if the second argument is a
  non-alphanumeric terminal like "+", it will be named '$2'.

  `noDupCheck` is true if the caller of `toArgumentNameList` is not a top level caller. It enables
  us to avoid nested duplication subscripts appending, e.g., '_1_1', '_1_2', by only checking
  duplicates at the top level.

  Here is a more elaborate example that illustrates how this method works:
  `(a "+" b).toArgumentNameList(1)` evaluates to `['a', '$2', 'b']` with the following recursive
  calls:

    (a).toArgumentNameList(1) -> ['a'],
    ("+").toArgumentNameList(2) -> ['$2'],
    (b).toArgumentNameList(3) -> ['b']

  Notes:
  * This method must only be called on well-formed expressions, e.g., the receiver must
    not have any Alt sub-expressions with inconsistent arities.
  * e.getArity() === e.toArgumentNameList(1).length
*/
// function(firstArgIndex, noDupCheck) { ... }
pexprs$a.PExpr.prototype.toArgumentNameList = common$8.abstract('toArgumentNameList');

pexprs$a.any.toArgumentNameList = function(firstArgIndex, noDupCheck) {
  return ['any'];
};

pexprs$a.end.toArgumentNameList = function(firstArgIndex, noDupCheck) {
  return ['end'];
};

pexprs$a.Terminal.prototype.toArgumentNameList = function(firstArgIndex, noDupCheck) {
  if (typeof this.obj === 'string' && /^[_a-zA-Z0-9]+$/.test(this.obj)) {
    // If this terminal is a valid suffix for a JS identifier, just prepend it with '_'
    return ['_' + this.obj];
  } else {
    // Otherwise, name it positionally.
    return ['$' + firstArgIndex];
  }
};

pexprs$a.Range.prototype.toArgumentNameList = function(firstArgIndex, noDupCheck) {
  let argName = this.from + '_to_' + this.to;
  // If the `argName` is not valid then try to prepend a `_`.
  if (!isRestrictedJSIdentifier(argName)) {
    argName = '_' + argName;
  }
  // If the `argName` still not valid after prepending a `_`, then name it positionally.
  if (!isRestrictedJSIdentifier(argName)) {
    argName = '$' + firstArgIndex;
  }
  return [argName];
};

pexprs$a.Alt.prototype.toArgumentNameList = function(firstArgIndex, noDupCheck) {
  // `termArgNameLists` is an array of arrays where each row is the
  // argument name list that corresponds to a term in this alternation.
  const termArgNameLists = this.terms.map(term =>
    term.toArgumentNameList(firstArgIndex, true)
  );

  const argumentNameList = [];
  const numArgs = termArgNameLists[0].length;
  for (let colIdx = 0; colIdx < numArgs; colIdx++) {
    const col = [];
    for (let rowIdx = 0; rowIdx < this.terms.length; rowIdx++) {
      col.push(termArgNameLists[rowIdx][colIdx]);
    }
    const uniqueNames = copyWithoutDuplicates(col);
    argumentNameList.push(uniqueNames.join('_or_'));
  }

  if (!noDupCheck) {
    resolveDuplicatedNames(argumentNameList);
  }
  return argumentNameList;
};

pexprs$a.Seq.prototype.toArgumentNameList = function(firstArgIndex, noDupCheck) {
  // Generate the argument name list, without worrying about duplicates.
  let argumentNameList = [];
  this.factors.forEach(factor => {
    const factorArgumentNameList = factor.toArgumentNameList(firstArgIndex, true);
    argumentNameList = argumentNameList.concat(factorArgumentNameList);

    // Shift the firstArgIndex to take this factor's argument names into account.
    firstArgIndex += factorArgumentNameList.length;
  });
  if (!noDupCheck) {
    resolveDuplicatedNames(argumentNameList);
  }
  return argumentNameList;
};

pexprs$a.Iter.prototype.toArgumentNameList = function(firstArgIndex, noDupCheck) {
  const argumentNameList = this.expr
      .toArgumentNameList(firstArgIndex, noDupCheck)
      .map(exprArgumentString =>
      exprArgumentString[exprArgumentString.length - 1] === 's' ?
        exprArgumentString + 'es' :
        exprArgumentString + 's'
      );
  if (!noDupCheck) {
    resolveDuplicatedNames(argumentNameList);
  }
  return argumentNameList;
};

pexprs$a.Opt.prototype.toArgumentNameList = function(firstArgIndex, noDupCheck) {
  return this.expr.toArgumentNameList(firstArgIndex, noDupCheck).map(argName => {
    return 'opt' + argName[0].toUpperCase() + argName.slice(1);
  });
};

pexprs$a.Not.prototype.toArgumentNameList = function(firstArgIndex, noDupCheck) {
  return [];
};

pexprs$a.Lookahead.prototype.toArgumentNameList = pexprs$a.Lex.prototype.toArgumentNameList =
  function(firstArgIndex, noDupCheck) {
    return this.expr.toArgumentNameList(firstArgIndex, noDupCheck);
  };

pexprs$a.Apply.prototype.toArgumentNameList = function(firstArgIndex, noDupCheck) {
  return [this.ruleName];
};

pexprs$a.UnicodeChar.prototype.toArgumentNameList = function(firstArgIndex, noDupCheck) {
  return ['$' + firstArgIndex];
};

pexprs$a.Param.prototype.toArgumentNameList = function(firstArgIndex, noDupCheck) {
  return ['param' + this.index];
};

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const common$7 = common$l;
const pexprs$9 = pexprsMain;

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

// Returns a string representing the PExpr, for use as a UI label, etc.
pexprs$9.PExpr.prototype.toDisplayString = common$7.abstract('toDisplayString');

pexprs$9.Alt.prototype.toDisplayString = pexprs$9.Seq.prototype.toDisplayString = function() {
  if (this.source) {
    return this.source.trimmed().contents;
  }
  return '[' + this.constructor.name + ']';
};

pexprs$9.any.toDisplayString =
  pexprs$9.end.toDisplayString =
  pexprs$9.Iter.prototype.toDisplayString =
  pexprs$9.Not.prototype.toDisplayString =
  pexprs$9.Lookahead.prototype.toDisplayString =
  pexprs$9.Lex.prototype.toDisplayString =
  pexprs$9.Terminal.prototype.toDisplayString =
  pexprs$9.Range.prototype.toDisplayString =
  pexprs$9.Param.prototype.toDisplayString =
    function() {
      return this.toString();
    };

pexprs$9.Apply.prototype.toDisplayString = function() {
  if (this.args.length > 0) {
    const ps = this.args.map(arg => arg.toDisplayString());
    return this.ruleName + '<' + ps.join(',') + '>';
  } else {
    return this.ruleName;
  }
};

pexprs$9.UnicodeChar.prototype.toDisplayString = function() {
  return 'Unicode [' + this.category + '] character';
};

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const Failure$1 = Failure_1;
const common$6 = common$l;
const pexprs$8 = pexprsMain;

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

pexprs$8.PExpr.prototype.toFailure = common$6.abstract('toFailure');

pexprs$8.any.toFailure = function(grammar) {
  return new Failure$1(this, 'any object', 'description');
};

pexprs$8.end.toFailure = function(grammar) {
  return new Failure$1(this, 'end of input', 'description');
};

pexprs$8.Terminal.prototype.toFailure = function(grammar) {
  return new Failure$1(this, this.obj, 'string');
};

pexprs$8.Range.prototype.toFailure = function(grammar) {
  // TODO: come up with something better
  return new Failure$1(this, JSON.stringify(this.from) + '..' + JSON.stringify(this.to), 'code');
};

pexprs$8.Not.prototype.toFailure = function(grammar) {
  const description =
    this.expr === pexprs$8.any ? 'nothing' : 'not ' + this.expr.toFailure(grammar);
  return new Failure$1(this, description, 'description');
};

pexprs$8.Lookahead.prototype.toFailure = function(grammar) {
  return this.expr.toFailure(grammar);
};

pexprs$8.Apply.prototype.toFailure = function(grammar) {
  let {description} = grammar.rules[this.ruleName];
  if (!description) {
    const article = /^[aeiouAEIOU]/.test(this.ruleName) ? 'an' : 'a';
    description = article + ' ' + this.ruleName;
  }
  return new Failure$1(this, description, 'description');
};

pexprs$8.UnicodeChar.prototype.toFailure = function(grammar) {
  return new Failure$1(this, 'a Unicode [' + this.category + '] character', 'description');
};

pexprs$8.Alt.prototype.toFailure = function(grammar) {
  const fs = this.terms.map(t => t.toFailure(grammar));
  const description = '(' + fs.join(' or ') + ')';
  return new Failure$1(this, description, 'description');
};

pexprs$8.Seq.prototype.toFailure = function(grammar) {
  const fs = this.factors.map(f => f.toFailure(grammar));
  const description = '(' + fs.join(' ') + ')';
  return new Failure$1(this, description, 'description');
};

pexprs$8.Iter.prototype.toFailure = function(grammar) {
  const description = '(' + this.expr.toFailure(grammar) + this.operator + ')';
  return new Failure$1(this, description, 'description');
};

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const common$5 = common$l;
const pexprs$7 = pexprsMain;

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

/*
  e1.toString() === e2.toString() ==> e1 and e2 are semantically equivalent.
  Note that this is not an iff (<==>): e.g.,
  (~"b" "a").toString() !== ("a").toString(), even though
  ~"b" "a" and "a" are interchangeable in any grammar,
  both in terms of the languages they accept and their arities.
*/
pexprs$7.PExpr.prototype.toString = common$5.abstract('toString');

pexprs$7.any.toString = function() {
  return 'any';
};

pexprs$7.end.toString = function() {
  return 'end';
};

pexprs$7.Terminal.prototype.toString = function() {
  return JSON.stringify(this.obj);
};

pexprs$7.Range.prototype.toString = function() {
  return JSON.stringify(this.from) + '..' + JSON.stringify(this.to);
};

pexprs$7.Param.prototype.toString = function() {
  return '$' + this.index;
};

pexprs$7.Lex.prototype.toString = function() {
  return '#(' + this.expr.toString() + ')';
};

pexprs$7.Alt.prototype.toString = function() {
  return this.terms.length === 1 ?
    this.terms[0].toString() :
    '(' + this.terms.map(term => term.toString()).join(' | ') + ')';
};

pexprs$7.Seq.prototype.toString = function() {
  return this.factors.length === 1 ?
    this.factors[0].toString() :
    '(' + this.factors.map(factor => factor.toString()).join(' ') + ')';
};

pexprs$7.Iter.prototype.toString = function() {
  return this.expr + this.operator;
};

pexprs$7.Not.prototype.toString = function() {
  return '~' + this.expr;
};

pexprs$7.Lookahead.prototype.toString = function() {
  return '&' + this.expr;
};

pexprs$7.Apply.prototype.toString = function() {
  if (this.args.length > 0) {
    const ps = this.args.map(arg => arg.toString());
    return this.ruleName + '<' + ps.join(',') + '>';
  } else {
    return this.ruleName;
  }
};

pexprs$7.UnicodeChar.prototype.toString = function() {
  return '\\p{' + this.category + '}';
};

// --------------------------------------------------------------------
// Re-export classes
// --------------------------------------------------------------------

var pexprs$6 = pexprsMain;

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const Failure = Failure_1;
const {TerminalNode} = nodes$1;
const {assert: assert$1} = common$l;
const {PExpr, Terminal} = pexprs$6;

class CaseInsensitiveTerminal$1 extends PExpr {
  constructor(param) {
    super();
    this.obj = param;
  }

  _getString(state) {
    const terminal = state.currentApplication().args[this.obj.index];
    assert$1(terminal instanceof Terminal, 'expected a Terminal expression');
    return terminal.obj;
  }

  // Implementation of the PExpr API

  allowsSkippingPrecedingSpace() {
    return true;
  }

  eval(state) {
    const {inputStream} = state;
    const origPos = inputStream.pos;
    const matchStr = this._getString(state);
    if (!inputStream.matchString(matchStr, true)) {
      state.processFailure(origPos, this);
      return false;
    } else {
      state.pushBinding(new TerminalNode(matchStr.length), origPos);
      return true;
    }
  }

  getArity() {
    return 1;
  }

  substituteParams(actuals) {
    return new CaseInsensitiveTerminal$1(this.obj.substituteParams(actuals));
  }

  toDisplayString() {
    return this.obj.toDisplayString() + ' (case-insensitive)';
  }

  toFailure(grammar) {
    return new Failure(
        this,
        this.obj.toFailure(grammar) + ' (case-insensitive)',
        'description'
    );
  }

  _isNullable(grammar, memo) {
    return this.obj._isNullable(grammar, memo);
  }
}

var CaseInsensitiveTerminal_1 = CaseInsensitiveTerminal$1;

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const Interval$1 = Interval_1;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

function InputStream$3(source) {
  this.source = source;
  this.pos = 0;
  this.examinedLength = 0;
}

InputStream$3.prototype = {
  atEnd() {
    const ans = this.pos === this.source.length;
    this.examinedLength = Math.max(this.examinedLength, this.pos + 1);
    return ans;
  },

  next() {
    const ans = this.source[this.pos++];
    this.examinedLength = Math.max(this.examinedLength, this.pos);
    return ans;
  },

  nextCharCode() {
    const nextChar = this.next();
    return nextChar && nextChar.charCodeAt(0);
  },

  nextCodePoint() {
    const cp = this.source.slice(this.pos++).codePointAt(0);
    // If the code point is beyond plane 0, it takes up two characters.
    if (cp > 0xffff) {
      this.pos += 1;
    }
    this.examinedLength = Math.max(this.examinedLength, this.pos);
    return cp;
  },

  matchString(s, optIgnoreCase) {
    let idx;
    if (optIgnoreCase) {
      /*
        Case-insensitive comparison is a tricky business. Some notable gotchas include the
        "Turkish I" problem (http://www.i18nguy.com/unicode/turkish-i18n.html) and the fact
        that the German Esszet (ß) turns into "SS" in upper case.

        This is intended to be a locale-invariant comparison, which means it may not obey
        locale-specific expectations (e.g. "i" => "İ").
       */
      for (idx = 0; idx < s.length; idx++) {
        const actual = this.next();
        const expected = s[idx];
        if (actual == null || actual.toUpperCase() !== expected.toUpperCase()) {
          return false;
        }
      }
      return true;
    }
    // Default is case-sensitive comparison.
    for (idx = 0; idx < s.length; idx++) {
      if (this.next() !== s[idx]) {
        return false;
      }
    }
    return true;
  },

  sourceSlice(startIdx, endIdx) {
    return this.source.slice(startIdx, endIdx);
  },

  interval(startIdx, optEndIdx) {
    return new Interval$1(this.source, startIdx, optEndIdx ? optEndIdx : this.pos);
  },
};

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var InputStream_1 = InputStream$3;

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const common$4 = common$l;
const util$4 = util$7;
const Interval = Interval_1;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

function MatchResult$2(
    matcher,
    input,
    startExpr,
    cst,
    cstOffset,
    rightmostFailurePosition,
    optRecordedFailures
) {
  this.matcher = matcher;
  this.input = input;
  this.startExpr = startExpr;
  this._cst = cst;
  this._cstOffset = cstOffset;
  this._rightmostFailurePosition = rightmostFailurePosition;
  this._rightmostFailures = optRecordedFailures;

  if (this.failed()) {
    /* eslint-disable no-invalid-this */
    common$4.defineLazyProperty(this, 'message', function() {
      const detail = 'Expected ' + this.getExpectedText();
      return (
        util$4.getLineAndColumnMessage(this.input, this.getRightmostFailurePosition()) + detail
      );
    });
    common$4.defineLazyProperty(this, 'shortMessage', function() {
      const detail = 'expected ' + this.getExpectedText();
      const errorInfo = util$4.getLineAndColumn(this.input, this.getRightmostFailurePosition());
      return 'Line ' + errorInfo.lineNum + ', col ' + errorInfo.colNum + ': ' + detail;
    });
    /* eslint-enable no-invalid-this */
  }
}

MatchResult$2.prototype.succeeded = function() {
  return !!this._cst;
};

MatchResult$2.prototype.failed = function() {
  return !this.succeeded();
};

MatchResult$2.prototype.getRightmostFailurePosition = function() {
  return this._rightmostFailurePosition;
};

MatchResult$2.prototype.getRightmostFailures = function() {
  if (!this._rightmostFailures) {
    this.matcher.setInput(this.input);
    const matchResultWithFailures = this.matcher._match(
        this.startExpr,
        false,
        this.getRightmostFailurePosition()
    );
    this._rightmostFailures = matchResultWithFailures.getRightmostFailures();
  }
  return this._rightmostFailures;
};

MatchResult$2.prototype.toString = function() {
  return this.succeeded() ?
    '[match succeeded]' :
    '[match failed at position ' + this.getRightmostFailurePosition() + ']';
};

// Return a string summarizing the expected contents of the input stream when
// the match failure occurred.
MatchResult$2.prototype.getExpectedText = function() {
  if (this.succeeded()) {
    throw new Error('cannot get expected text of a successful MatchResult');
  }

  const sb = new common$4.StringBuffer();
  let failures = this.getRightmostFailures();

  // Filter out the fluffy failures to make the default error messages more useful
  failures = failures.filter(failure => !failure.isFluffy());

  for (let idx = 0; idx < failures.length; idx++) {
    if (idx > 0) {
      if (idx === failures.length - 1) {
        sb.append(failures.length > 2 ? ', or ' : ' or ');
      } else {
        sb.append(', ');
      }
    }
    sb.append(failures[idx].toString());
  }
  return sb.contents();
};

MatchResult$2.prototype.getInterval = function() {
  const pos = this.getRightmostFailurePosition();
  return new Interval(this.input, pos, pos);
};

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var MatchResult_1 = MatchResult$2;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

function PosInfo$1() {
  this.applicationMemoKeyStack = []; // active applications at this position
  this.memo = {};
  this.maxExaminedLength = 0;
  this.maxRightmostFailureOffset = -1;
  this.currentLeftRecursion = undefined;
}

PosInfo$1.prototype = {
  isActive(application) {
    return this.applicationMemoKeyStack.indexOf(application.toMemoKey()) >= 0;
  },

  enter(application) {
    this.applicationMemoKeyStack.push(application.toMemoKey());
  },

  exit() {
    this.applicationMemoKeyStack.pop();
  },

  startLeftRecursion(headApplication, memoRec) {
    memoRec.isLeftRecursion = true;
    memoRec.headApplication = headApplication;
    memoRec.nextLeftRecursion = this.currentLeftRecursion;
    this.currentLeftRecursion = memoRec;

    const {applicationMemoKeyStack} = this;
    const indexOfFirstInvolvedRule =
      applicationMemoKeyStack.indexOf(headApplication.toMemoKey()) + 1;
    const involvedApplicationMemoKeys = applicationMemoKeyStack.slice(
        indexOfFirstInvolvedRule
    );

    memoRec.isInvolved = function(applicationMemoKey) {
      return involvedApplicationMemoKeys.indexOf(applicationMemoKey) >= 0;
    };

    memoRec.updateInvolvedApplicationMemoKeys = function() {
      for (let idx = indexOfFirstInvolvedRule; idx < applicationMemoKeyStack.length; idx++) {
        const applicationMemoKey = applicationMemoKeyStack[idx];
        if (!this.isInvolved(applicationMemoKey)) {
          involvedApplicationMemoKeys.push(applicationMemoKey);
        }
      }
    };
  },

  endLeftRecursion() {
    this.currentLeftRecursion = this.currentLeftRecursion.nextLeftRecursion;
  },

  // Note: this method doesn't get called for the "head" of a left recursion -- for LR heads,
  // the memoized result (which starts out being a failure) is always used.
  shouldUseMemoizedResult(memoRec) {
    if (!memoRec.isLeftRecursion) {
      return true;
    }
    const {applicationMemoKeyStack} = this;
    for (let idx = 0; idx < applicationMemoKeyStack.length; idx++) {
      const applicationMemoKey = applicationMemoKeyStack[idx];
      if (memoRec.isInvolved(applicationMemoKey)) {
        return false;
      }
    }
    return true;
  },

  memoize(memoKey, memoRec) {
    this.memo[memoKey] = memoRec;
    this.maxExaminedLength = Math.max(this.maxExaminedLength, memoRec.examinedLength);
    this.maxRightmostFailureOffset = Math.max(
        this.maxRightmostFailureOffset,
        memoRec.rightmostFailureOffset
    );
    return memoRec;
  },

  clearObsoleteEntries(pos, invalidatedIdx) {
    if (pos + this.maxExaminedLength <= invalidatedIdx) {
      // Optimization: none of the rule applications that were memoized here examined the
      // interval of the input that changed, so nothing has to be invalidated.
      return;
    }

    const {memo} = this;
    this.maxExaminedLength = 0;
    this.maxRightmostFailureOffset = -1;
    Object.keys(memo).forEach(k => {
      const memoRec = memo[k];
      if (pos + memoRec.examinedLength > invalidatedIdx) {
        delete memo[k];
      } else {
        this.maxExaminedLength = Math.max(this.maxExaminedLength, memoRec.examinedLength);
        this.maxRightmostFailureOffset = Math.max(
            this.maxRightmostFailureOffset,
            memoRec.rightmostFailureOffset
        );
      }
    });
  },
};

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var PosInfo_1 = PosInfo$1;

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const InputStream$2 = InputStream_1;
const MatchResult$1 = MatchResult_1;
const PosInfo = PosInfo_1;
const Trace = Trace_1;
const pexprs$5 = pexprs$6;
const util$3 = util$7;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

let builtInApplySyntacticBody;

util$3.awaitBuiltInRules(builtInRules => {
  builtInApplySyntacticBody = builtInRules.rules.applySyntactic.body;
});

const applySpaces = new pexprs$5.Apply('spaces');

function MatchState$1(matcher, startExpr, optPositionToRecordFailures) {
  this.matcher = matcher;
  this.startExpr = startExpr;

  this.grammar = matcher.grammar;
  this.input = matcher.input;
  this.inputStream = new InputStream$2(matcher.input);
  this.memoTable = matcher.memoTable;

  this._bindings = [];
  this._bindingOffsets = [];
  this._applicationStack = [];
  this._posStack = [0];
  this.inLexifiedContextStack = [false];

  this.rightmostFailurePosition = -1;
  this._rightmostFailurePositionStack = [];
  this._recordedFailuresStack = [];

  if (optPositionToRecordFailures !== undefined) {
    this.positionToRecordFailures = optPositionToRecordFailures;
    this.recordedFailures = Object.create(null);
  }
}

MatchState$1.prototype = {
  posToOffset(pos) {
    return pos - this._posStack[this._posStack.length - 1];
  },

  enterApplication(posInfo, app) {
    this._posStack.push(this.inputStream.pos);
    this._applicationStack.push(app);
    this.inLexifiedContextStack.push(false);
    posInfo.enter(app);
    this._rightmostFailurePositionStack.push(this.rightmostFailurePosition);
    this.rightmostFailurePosition = -1;
  },

  exitApplication(posInfo, optNode) {
    const origPos = this._posStack.pop();
    this._applicationStack.pop();
    this.inLexifiedContextStack.pop();
    posInfo.exit();

    this.rightmostFailurePosition = Math.max(
        this.rightmostFailurePosition,
        this._rightmostFailurePositionStack.pop()
    );

    if (optNode) {
      this.pushBinding(optNode, origPos);
    }
  },

  enterLexifiedContext() {
    this.inLexifiedContextStack.push(true);
  },

  exitLexifiedContext() {
    this.inLexifiedContextStack.pop();
  },

  currentApplication() {
    return this._applicationStack[this._applicationStack.length - 1];
  },

  inSyntacticContext() {
    const currentApplication = this.currentApplication();
    if (currentApplication) {
      return currentApplication.isSyntactic() && !this.inLexifiedContext();
    } else {
      // The top-level context is syntactic if the start application is.
      return this.startExpr.factors[0].isSyntactic();
    }
  },

  inLexifiedContext() {
    return this.inLexifiedContextStack[this.inLexifiedContextStack.length - 1];
  },

  skipSpaces() {
    this.pushFailuresInfo();
    this.eval(applySpaces);
    this.popBinding();
    this.popFailuresInfo();
    return this.inputStream.pos;
  },

  skipSpacesIfInSyntacticContext() {
    return this.inSyntacticContext() ? this.skipSpaces() : this.inputStream.pos;
  },

  maybeSkipSpacesBefore(expr) {
    if (expr.allowsSkippingPrecedingSpace() && expr !== applySpaces) {
      return this.skipSpacesIfInSyntacticContext();
    } else {
      return this.inputStream.pos;
    }
  },

  pushBinding(node, origPos) {
    this._bindings.push(node);
    this._bindingOffsets.push(this.posToOffset(origPos));
  },

  popBinding() {
    this._bindings.pop();
    this._bindingOffsets.pop();
  },

  numBindings() {
    return this._bindings.length;
  },

  truncateBindings(newLength) {
    // Yes, this is this really faster than setting the `length` property (tested with
    // bin/es5bench on Node v6.1.0).
    // Update 2021-10-25: still true on v14.15.5 — it's ~20% speedup on es5bench.
    while (this._bindings.length > newLength) {
      this.popBinding();
    }
  },

  getCurrentPosInfo() {
    return this.getPosInfo(this.inputStream.pos);
  },

  getPosInfo(pos) {
    let posInfo = this.memoTable[pos];
    if (!posInfo) {
      posInfo = this.memoTable[pos] = new PosInfo();
    }
    return posInfo;
  },

  processFailure(pos, expr) {
    this.rightmostFailurePosition = Math.max(this.rightmostFailurePosition, pos);

    if (this.recordedFailures && pos === this.positionToRecordFailures) {
      const app = this.currentApplication();
      if (app) {
        // Substitute parameters with the actual pexprs that were passed to
        // the current rule.
        expr = expr.substituteParams(app.args);
      }

      this.recordFailure(expr.toFailure(this.grammar), false);
    }
  },

  recordFailure(failure, shouldCloneIfNew) {
    const key = failure.toKey();
    if (!this.recordedFailures[key]) {
      this.recordedFailures[key] = shouldCloneIfNew ? failure.clone() : failure;
    } else if (this.recordedFailures[key].isFluffy() && !failure.isFluffy()) {
      this.recordedFailures[key].clearFluffy();
    }
  },

  recordFailures(failures, shouldCloneIfNew) {
    Object.keys(failures).forEach(key => {
      this.recordFailure(failures[key], shouldCloneIfNew);
    });
  },

  cloneRecordedFailures() {
    if (!this.recordedFailures) {
      return undefined;
    }

    const ans = Object.create(null);
    Object.keys(this.recordedFailures).forEach(key => {
      ans[key] = this.recordedFailures[key].clone();
    });
    return ans;
  },

  getRightmostFailurePosition() {
    return this.rightmostFailurePosition;
  },

  _getRightmostFailureOffset() {
    return this.rightmostFailurePosition >= 0 ?
      this.posToOffset(this.rightmostFailurePosition) :
      -1;
  },

  // Returns the memoized trace entry for `expr` at `pos`, if one exists, `null` otherwise.
  getMemoizedTraceEntry(pos, expr) {
    const posInfo = this.memoTable[pos];
    if (posInfo && expr instanceof pexprs$5.Apply) {
      const memoRec = posInfo.memo[expr.toMemoKey()];
      if (memoRec && memoRec.traceEntry) {
        const entry = memoRec.traceEntry.cloneWithExpr(expr);
        entry.isMemoized = true;
        return entry;
      }
    }
    return null;
  },

  // Returns a new trace entry, with the currently active trace array as its children.
  getTraceEntry(pos, expr, succeeded, bindings) {
    if (expr instanceof pexprs$5.Apply) {
      const app = this.currentApplication();
      const actuals = app ? app.args : [];
      expr = expr.substituteParams(actuals);
    }
    return (
      this.getMemoizedTraceEntry(pos, expr) ||
      new Trace(this.input, pos, this.inputStream.pos, expr, succeeded, bindings, this.trace)
    );
  },

  isTracing() {
    return !!this.trace;
  },

  hasNecessaryInfo(memoRec) {
    if (this.trace && !memoRec.traceEntry) {
      return false;
    }

    if (
      this.recordedFailures &&
      this.inputStream.pos + memoRec.rightmostFailureOffset === this.positionToRecordFailures
    ) {
      return !!memoRec.failuresAtRightmostPosition;
    }

    return true;
  },

  useMemoizedResult(origPos, memoRec) {
    if (this.trace) {
      this.trace.push(memoRec.traceEntry);
    }

    const memoRecRightmostFailurePosition =
      this.inputStream.pos + memoRec.rightmostFailureOffset;
    this.rightmostFailurePosition = Math.max(
        this.rightmostFailurePosition,
        memoRecRightmostFailurePosition
    );
    if (
      this.recordedFailures &&
      this.positionToRecordFailures === memoRecRightmostFailurePosition &&
      memoRec.failuresAtRightmostPosition
    ) {
      this.recordFailures(memoRec.failuresAtRightmostPosition, true);
    }

    this.inputStream.examinedLength = Math.max(
        this.inputStream.examinedLength,
        memoRec.examinedLength + origPos
    );

    if (memoRec.value) {
      this.inputStream.pos += memoRec.matchLength;
      this.pushBinding(memoRec.value, origPos);
      return true;
    }
    return false;
  },

  // Evaluate `expr` and return `true` if it succeeded, `false` otherwise. On success, `bindings`
  // will have `expr.getArity()` more elements than before, and the input stream's position may
  // have increased. On failure, `bindings` and position will be unchanged.
  eval(expr) {
    const {inputStream} = this;
    const origNumBindings = this._bindings.length;

    let origRecordedFailures;
    if (this.recordedFailures) {
      origRecordedFailures = this.recordedFailures;
      this.recordedFailures = Object.create(null);
    }

    const origPos = inputStream.pos;
    const memoPos = this.maybeSkipSpacesBefore(expr);

    let origTrace;
    if (this.trace) {
      origTrace = this.trace;
      this.trace = [];
    }

    // Do the actual evaluation.
    const ans = expr.eval(this);

    if (this.trace) {
      const bindings = this._bindings.slice(origNumBindings);
      const traceEntry = this.getTraceEntry(memoPos, expr, ans, bindings);
      traceEntry.isImplicitSpaces = expr === applySpaces;
      traceEntry.isRootNode = expr === this.startExpr;
      origTrace.push(traceEntry);
      this.trace = origTrace;
    }

    if (ans) {
      if (this.recordedFailures && inputStream.pos === this.positionToRecordFailures) {
        Object.keys(this.recordedFailures).forEach(key => {
          this.recordedFailures[key].makeFluffy();
        });
      }
    } else {
      // Reset the position and the bindings.
      inputStream.pos = origPos;
      this.truncateBindings(origNumBindings);
    }

    if (this.recordedFailures) {
      this.recordFailures(origRecordedFailures, false);
    }

    // The built-in applySyntactic rule needs special handling: we want to skip
    // trailing spaces, just as with the top-level application of a syntactic rule.
    if (expr === builtInApplySyntacticBody) {
      this.skipSpaces();
    }

    return ans;
  },

  getMatchResult() {
    this.eval(this.startExpr);
    let rightmostFailures;
    if (this.recordedFailures) {
      rightmostFailures = Object.keys(this.recordedFailures).map(
          key => this.recordedFailures[key]
      );
    }
    const cst = this._bindings[0];
    if (cst) {
      cst.grammar = this.grammar;
    }
    return new MatchResult$1(
        this.matcher,
        this.input,
        this.startExpr,
        cst,
        this._bindingOffsets[0],
        this.rightmostFailurePosition,
        rightmostFailures
    );
  },

  getTrace() {
    this.trace = [];
    const matchResult = this.getMatchResult();

    // The trace node for the start rule is always the last entry. If it is a syntactic rule,
    // the first entry is for an application of 'spaces'.
    // TODO(pdubroy): Clean this up by introducing a special `Match<startAppl>` rule, which will
    // ensure that there is always a single root trace node.
    const rootTrace = this.trace[this.trace.length - 1];
    rootTrace.result = matchResult;
    return rootTrace;
  },

  pushFailuresInfo() {
    this._rightmostFailurePositionStack.push(this.rightmostFailurePosition);
    this._recordedFailuresStack.push(this.recordedFailures);
  },

  popFailuresInfo() {
    this.rightmostFailurePosition = this._rightmostFailurePositionStack.pop();
    this.recordedFailures = this._recordedFailuresStack.pop();
  },
};

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var MatchState_1 = MatchState$1;

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const MatchState = MatchState_1;

const pexprs$4 = pexprs$6;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

function Matcher$1(grammar) {
  this.grammar = grammar;
  this.memoTable = [];
  this.input = '';
}

Matcher$1.prototype.getInput = function() {
  return this.input;
};

Matcher$1.prototype.setInput = function(str) {
  if (this.input !== str) {
    this.replaceInputRange(0, this.input.length, str);
  }
  return this;
};

Matcher$1.prototype.replaceInputRange = function(startIdx, endIdx, str) {
  const currentInput = this.input;
  if (
    startIdx < 0 ||
    startIdx > currentInput.length ||
    endIdx < 0 ||
    endIdx > currentInput.length ||
    startIdx > endIdx
  ) {
    throw new Error('Invalid indices: ' + startIdx + ' and ' + endIdx);
  }

  // update input
  this.input = currentInput.slice(0, startIdx) + str + currentInput.slice(endIdx);

  // update memo table (similar to the above)
  const restOfMemoTable = this.memoTable.slice(endIdx);
  this.memoTable.length = startIdx;
  for (let idx = 0; idx < str.length; idx++) {
    this.memoTable.push(undefined);
  }
  restOfMemoTable.forEach(function(posInfo) {
    this.memoTable.push(posInfo);
  }, this);

  // Invalidate memoRecs
  for (let pos = 0; pos < startIdx; pos++) {
    const posInfo = this.memoTable[pos];
    if (posInfo) {
      posInfo.clearObsoleteEntries(pos, startIdx);
    }
  }

  return this;
};

Matcher$1.prototype.match = function(optStartApplicationStr) {
  return this._match(this._getStartExpr(optStartApplicationStr), false);
};

Matcher$1.prototype.trace = function(optStartApplicationStr) {
  return this._match(this._getStartExpr(optStartApplicationStr), true);
};

Matcher$1.prototype._match = function(startExpr, tracing, optPositionToRecordFailures) {
  const state = new MatchState(this, startExpr, optPositionToRecordFailures);
  return tracing ? state.getTrace() : state.getMatchResult();
};

/*
  Returns the starting expression for this Matcher's associated grammar. If `optStartApplicationStr`
  is specified, it is a string expressing a rule application in the grammar. If not specified, the
  grammar's default start rule will be used.
*/
Matcher$1.prototype._getStartExpr = function(optStartApplicationStr) {
  const applicationStr = optStartApplicationStr || this.grammar.defaultStartRule;
  if (!applicationStr) {
    throw new Error('Missing start rule argument -- the grammar has no default start rule.');
  }

  const startApp = this.grammar.parseApplication(applicationStr);
  return new pexprs$4.Seq([startApp, pexprs$4.end]);
};

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var Matcher_1 = Matcher$1;

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const InputStream$1 = InputStream_1;
const {IterationNode} = nodes$1;
const MatchResult = MatchResult_1;
const common$3 = common$l;
const errors$3 = errors$9;
const util$2 = util$7;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

const globalActionStack = [];

const hasOwnProperty = (x, prop) => Object.prototype.hasOwnProperty.call(x, prop);

// ----------------- Wrappers -----------------

// Wrappers decorate CST nodes with all of the functionality (i.e., operations and attributes)
// provided by a Semantics (see below). `Wrapper` is the abstract superclass of all wrappers. A
// `Wrapper` must have `_node` and `_semantics` instance variables, which refer to the CST node and
// Semantics (resp.) for which it was created, and a `_childWrappers` instance variable which is
// used to cache the wrapper instances that are created for its child nodes. Setting these instance
// variables is the responsibility of the constructor of each Semantics-specific subclass of
// `Wrapper`.
class Wrapper {
  constructor(node, sourceInterval, baseInterval) {
    this._node = node;
    this.source = sourceInterval;

    // The interval that the childOffsets of `node` are relative to. It should be the source
    // of the closest Nonterminal node.
    this._baseInterval = baseInterval;

    if (node.isNonterminal()) {
      common$3.assert(sourceInterval === baseInterval);
    }
    this._childWrappers = [];
  }

  toString() {
    return '[semantics wrapper for ' + this._node.grammar.name + ']';
  }

  _forgetMemoizedResultFor(attributeName) {
    // Remove the memoized attribute from the cstNode and all its children.
    delete this._node[this._semantics.attributeKeys[attributeName]];
    this.children.forEach(child => {
      child._forgetMemoizedResultFor(attributeName);
    });
  }

  // Returns the wrapper of the specified child node. Child wrappers are created lazily and
  // cached in the parent wrapper's `_childWrappers` instance variable.
  child(idx) {
    if (!(0 <= idx && idx < this._node.numChildren())) {
      // TODO: Consider throwing an exception here.
      return undefined;
    }
    let childWrapper = this._childWrappers[idx];
    if (!childWrapper) {
      const childNode = this._node.childAt(idx);
      const offset = this._node.childOffsets[idx];

      const source = this._baseInterval.subInterval(offset, childNode.matchLength);
      const base = childNode.isNonterminal() ? source : this._baseInterval;
      childWrapper = this._childWrappers[idx] = this._semantics.wrap(childNode, source, base);
    }
    return childWrapper;
  }

  // Returns an array containing the wrappers of all of the children of the node associated
  // with this wrapper.
  _children() {
    // Force the creation of all child wrappers
    for (let idx = 0; idx < this._node.numChildren(); idx++) {
      this.child(idx);
    }
    return this._childWrappers;
  }

  // Returns `true` if the CST node associated with this wrapper corresponds to an iteration
  // expression, i.e., a Kleene-*, Kleene-+, or an optional. Returns `false` otherwise.
  isIteration() {
    return this._node.isIteration();
  }

  // Returns `true` if the CST node associated with this wrapper is a terminal node, `false`
  // otherwise.
  isTerminal() {
    return this._node.isTerminal();
  }

  // Returns `true` if the CST node associated with this wrapper is a nonterminal node, `false`
  // otherwise.
  isNonterminal() {
    return this._node.isNonterminal();
  }

  // Returns `true` if the CST node associated with this wrapper is a nonterminal node
  // corresponding to a syntactic rule, `false` otherwise.
  isSyntactic() {
    return this.isNonterminal() && this._node.isSyntactic();
  }

  // Returns `true` if the CST node associated with this wrapper is a nonterminal node
  // corresponding to a lexical rule, `false` otherwise.
  isLexical() {
    return this.isNonterminal() && this._node.isLexical();
  }

  // Returns `true` if the CST node associated with this wrapper is an iterator node
  // having either one or no child (? operator), `false` otherwise.
  // Otherwise, throws an exception.
  isOptional() {
    return this._node.isOptional();
  }

  // Create a new _iter wrapper in the same semantics as this wrapper.
  iteration(optChildWrappers) {
    const childWrappers = optChildWrappers || [];

    const childNodes = childWrappers.map(c => c._node);
    const iter = new IterationNode(childNodes, [], -1, false);

    const wrapper = this._semantics.wrap(iter, null, null);
    wrapper._childWrappers = childWrappers;
    return wrapper;
  }

  // Returns an array containing the children of this CST node.
  get children() {
    return this._children();
  }

  // Returns the name of grammar rule that created this CST node.
  get ctorName() {
    return this._node.ctorName;
  }

  // TODO: Remove this eventually (deprecated in v0.12).
  get interval() {
    throw new Error('The `interval` property is deprecated -- use `source` instead');
  }

  // Returns the number of children of this CST node.
  get numChildren() {
    return this._node.numChildren();
  }

  // Returns the contents of the input stream consumed by this CST node.
  get sourceString() {
    return this.source.contents;
  }
}

// ----------------- Semantics -----------------

// A Semantics is a container for a family of Operations and Attributes for a given grammar.
// Semantics enable modularity (different clients of a grammar can create their set of operations
// and attributes in isolation) and extensibility even when operations and attributes are mutually-
// recursive. This constructor should not be called directly except from
// `Semantics.createSemantics`. The normal ways to create a Semantics, given a grammar 'g', are
// `g.createSemantics()` and `g.extendSemantics(parentSemantics)`.
function Semantics$2(grammar, superSemantics) {
  const self = this;
  this.grammar = grammar;
  this.checkedActionDicts = false;

  // Constructor for wrapper instances, which are passed as the arguments to the semantic actions
  // of an operation or attribute. Operations and attributes require double dispatch: the semantic
  // action is chosen based on both the node's type and the semantics. Wrappers ensure that
  // the `execute` method is called with the correct (most specific) semantics object as an
  // argument.
  this.Wrapper = class extends (superSemantics ? superSemantics.Wrapper : Wrapper) {
    constructor(node, sourceInterval, baseInterval) {
      super(node, sourceInterval, baseInterval);
      self.checkActionDictsIfHaventAlready();
      this._semantics = self;
    }
  };

  this.super = superSemantics;
  if (superSemantics) {
    if (!(grammar.equals(this.super.grammar) || grammar._inheritsFrom(this.super.grammar))) {
      throw new Error(
          "Cannot extend a semantics for grammar '" +
          this.super.grammar.name +
          "' for use with grammar '" +
          grammar.name +
          "' (not a sub-grammar)"
      );
    }
    this.operations = Object.create(this.super.operations);
    this.attributes = Object.create(this.super.attributes);
    this.attributeKeys = Object.create(null);

    // Assign unique symbols for each of the attributes inherited from the super-semantics so that
    // they are memoized independently.
    // eslint-disable-next-line guard-for-in
    for (const attributeName in this.attributes) {
      Object.defineProperty(this.attributeKeys, attributeName, {
        value: util$2.uniqueId(attributeName),
      });
    }
  } else {
    this.operations = Object.create(null);
    this.attributes = Object.create(null);
    this.attributeKeys = Object.create(null);
  }
}

Semantics$2.prototype.toString = function() {
  return '[semantics for ' + this.grammar.name + ']';
};

Semantics$2.prototype.checkActionDictsIfHaventAlready = function() {
  if (!this.checkedActionDicts) {
    this.checkActionDicts();
    this.checkedActionDicts = true;
  }
};

// Checks that the action dictionaries for all operations and attributes in this semantics,
// including the ones that were inherited from the super-semantics, agree with the grammar.
// Throws an exception if one or more of them doesn't.
Semantics$2.prototype.checkActionDicts = function() {
  let name;
  // eslint-disable-next-line guard-for-in
  for (name in this.operations) {
    this.operations[name].checkActionDict(this.grammar);
  }
  // eslint-disable-next-line guard-for-in
  for (name in this.attributes) {
    this.attributes[name].checkActionDict(this.grammar);
  }
};

Semantics$2.prototype.toRecipe = function(semanticsOnly) {
  function hasSuperSemantics(s) {
    return s.super !== Semantics$2.BuiltInSemantics._getSemantics();
  }

  let str = '(function(g) {\n';
  if (hasSuperSemantics(this)) {
    str += '  var semantics = ' + this.super.toRecipe(true) + '(g';

    const superSemanticsGrammar = this.super.grammar;
    let relatedGrammar = this.grammar;
    while (relatedGrammar !== superSemanticsGrammar) {
      str += '.superGrammar';
      relatedGrammar = relatedGrammar.superGrammar;
    }

    str += ');\n';
    str += '  return g.extendSemantics(semantics)';
  } else {
    str += '  return g.createSemantics()';
  }
  ['Operation', 'Attribute'].forEach(type => {
    const semanticOperations = this[type.toLowerCase() + 's'];
    Object.keys(semanticOperations).forEach(name => {
      const {actionDict, formals, builtInDefault} = semanticOperations[name];

      let signature = name;
      if (formals.length > 0) {
        signature += '(' + formals.join(', ') + ')';
      }

      let method;
      if (hasSuperSemantics(this) && this.super[type.toLowerCase() + 's'][name]) {
        method = 'extend' + type;
      } else {
        method = 'add' + type;
      }
      str += '\n    .' + method + '(' + JSON.stringify(signature) + ', {';

      const srcArray = [];
      Object.keys(actionDict).forEach(actionName => {
        if (actionDict[actionName] !== builtInDefault) {
          let source = actionDict[actionName].toString().trim();

          // Convert method shorthand to plain old function syntax.
          // https://github.com/harc/ohm/issues/263
          source = source.replace(/^.*\(/, 'function(');

          srcArray.push('\n      ' + JSON.stringify(actionName) + ': ' + source);
        }
      });
      str += srcArray.join(',') + '\n    })';
    });
  });
  str += ';\n  })';

  if (!semanticsOnly) {
    str =
      '(function() {\n' +
      '  var grammar = this.fromRecipe(' +
      this.grammar.toRecipe() +
      ');\n' +
      '  var semantics = ' +
      str +
      '(grammar);\n' +
      '  return semantics;\n' +
      '});\n';
  }

  return str;
};

function parseSignature$1(signature, type) {
  if (!Semantics$2.prototypeGrammar) {
    // The Operations and Attributes grammar won't be available while Ohm is loading,
    // but we can get away the following simplification b/c none of the operations
    // that are used while loading take arguments.
    common$3.assert(signature.indexOf('(') === -1);
    return {
      name: signature,
      formals: [],
    };
  }

  const r = Semantics$2.prototypeGrammar.match(
      signature,
    type === 'operation' ? 'OperationSignature' : 'AttributeSignature'
  );
  if (r.failed()) {
    throw new Error(r.message);
  }

  return Semantics$2.prototypeGrammarSemantics(r).parse();
}

function newDefaultAction(type, name, doIt) {
  return function(...children) {
    const thisThing = this._semantics.operations[name] || this._semantics.attributes[name];
    const args = thisThing.formals.map(formal => this.args[formal]);

    if (!this.isIteration() && children.length === 1) {
      // This CST node corresponds to a non-terminal in the grammar (e.g., AddExpr). The fact that
      // we got here means that this action dictionary doesn't have an action for this particular
      // non-terminal or a generic `_nonterminal` action.
      // As a convenience, if this node only has one child, we just return the result of applying
      // this operation / attribute to the child node.
      return doIt.apply(children[0], args);
    } else {
      // Otherwise, we throw an exception to let the programmer know that we don't know what
      // to do with this node.
      throw errors$3.missingSemanticAction(this.ctorName, name, type, globalActionStack);
    }
  };
}

Semantics$2.prototype.addOperationOrAttribute = function(type, signature, actionDict) {
  const typePlural = type + 's';

  const parsedNameAndFormalArgs = parseSignature$1(signature, type);
  const {name} = parsedNameAndFormalArgs;
  const {formals} = parsedNameAndFormalArgs;

  // TODO: check that there are no duplicate formal arguments

  this.assertNewName(name, type);

  // Create the action dictionary for this operation / attribute that contains a `_default` action
  // which defines the default behavior of iteration, terminal, and non-terminal nodes...
  const builtInDefault = newDefaultAction(type, name, doIt);
  const realActionDict = {_default: builtInDefault};
  // ... and add in the actions supplied by the programmer, which may override some or all of the
  // default ones.
  Object.keys(actionDict).forEach(name => {
    realActionDict[name] = actionDict[name];
  });

  const entry =
    type === 'operation' ?
      new Operation(name, formals, realActionDict, builtInDefault) :
      new Attribute(name, realActionDict, builtInDefault);

  // The following check is not strictly necessary (it will happen later anyway) but it's better to
  // catch errors early.
  entry.checkActionDict(this.grammar);

  this[typePlural][name] = entry;

  function doIt(...args) {
    // Dispatch to most specific version of this operation / attribute -- it may have been
    // overridden by a sub-semantics.
    const thisThing = this._semantics[typePlural][name];

    // Check that the caller passed the correct number of arguments.
    if (arguments.length !== thisThing.formals.length) {
      throw new Error(
          'Invalid number of arguments passed to ' +
          name +
          ' ' +
          type +
          ' (expected ' +
          thisThing.formals.length +
          ', got ' +
          arguments.length +
          ')'
      );
    }

    // Create an "arguments object" from the arguments that were passed to this
    // operation / attribute.
    const argsObj = Object.create(null);
    for (const [idx, val] of Object.entries(args)) {
      const formal = thisThing.formals[idx];
      argsObj[formal] = val;
    }

    const oldArgs = this.args;
    this.args = argsObj;
    const ans = thisThing.execute(this._semantics, this);
    this.args = oldArgs;
    return ans;
  }

  if (type === 'operation') {
    this.Wrapper.prototype[name] = doIt;
    this.Wrapper.prototype[name].toString = function() {
      return '[' + name + ' operation]';
    };
  } else {
    Object.defineProperty(this.Wrapper.prototype, name, {
      get: doIt,
      configurable: true, // So the property can be deleted.
    });
    Object.defineProperty(this.attributeKeys, name, {
      value: util$2.uniqueId(name),
    });
  }
};

Semantics$2.prototype.extendOperationOrAttribute = function(type, name, actionDict) {
  const typePlural = type + 's';

  // Make sure that `name` really is just a name, i.e., that it doesn't also contain formals.
  parseSignature$1(name, 'attribute');

  if (!(this.super && name in this.super[typePlural])) {
    throw new Error(
        'Cannot extend ' +
        type +
        " '" +
        name +
        "': did not inherit an " +
        type +
        ' with that name'
    );
  }
  if (hasOwnProperty(this[typePlural], name)) {
    throw new Error('Cannot extend ' + type + " '" + name + "' again");
  }

  // Create a new operation / attribute whose actionDict delegates to the super operation /
  // attribute's actionDict, and which has all the keys from `inheritedActionDict`.
  const inheritedFormals = this[typePlural][name].formals;
  const inheritedActionDict = this[typePlural][name].actionDict;
  const newActionDict = Object.create(inheritedActionDict);
  Object.keys(actionDict).forEach(name => {
    newActionDict[name] = actionDict[name];
  });

  this[typePlural][name] =
    type === 'operation' ?
      new Operation(name, inheritedFormals, newActionDict) :
      new Attribute(name, newActionDict);

  // The following check is not strictly necessary (it will happen later anyway) but it's better to
  // catch errors early.
  this[typePlural][name].checkActionDict(this.grammar);
};

Semantics$2.prototype.assertNewName = function(name, type) {
  if (hasOwnProperty(Wrapper.prototype, name)) {
    throw new Error('Cannot add ' + type + " '" + name + "': that's a reserved name");
  }
  if (name in this.operations) {
    throw new Error(
        'Cannot add ' + type + " '" + name + "': an operation with that name already exists"
    );
  }
  if (name in this.attributes) {
    throw new Error(
        'Cannot add ' + type + " '" + name + "': an attribute with that name already exists"
    );
  }
};

// Returns a wrapper for the given CST `node` in this semantics.
// If `node` is already a wrapper, returns `node` itself.  // TODO: why is this needed?
Semantics$2.prototype.wrap = function(node, source, optBaseInterval) {
  const baseInterval = optBaseInterval || source;
  return node instanceof this.Wrapper ? node : new this.Wrapper(node, source, baseInterval);
};

// Creates a new Semantics instance for `grammar`, inheriting operations and attributes from
// `optSuperSemantics`, if it is specified. Returns a function that acts as a proxy for the new
// Semantics instance. When that function is invoked with a CST node as an argument, it returns
// a wrapper for that node which gives access to the operations and attributes provided by this
// semantics.
Semantics$2.createSemantics = function(grammar, optSuperSemantics) {
  const s = new Semantics$2(
      grammar,
    optSuperSemantics !== undefined ?
      optSuperSemantics :
      Semantics$2.BuiltInSemantics._getSemantics()
  );

  // To enable clients to invoke a semantics like a function, return a function that acts as a proxy
  // for `s`, which is the real `Semantics` instance.
  const proxy = function ASemantics(matchResult) {
    if (!(matchResult instanceof MatchResult)) {
      throw new TypeError(
          'Semantics expected a MatchResult, but got ' +
          common$3.unexpectedObjToString(matchResult)
      );
    }
    if (matchResult.failed()) {
      throw new TypeError('cannot apply Semantics to ' + matchResult.toString());
    }

    const cst = matchResult._cst;
    if (cst.grammar !== grammar) {
      throw new Error(
          "Cannot use a MatchResult from grammar '" +
          cst.grammar.name +
          "' with a semantics for '" +
          grammar.name +
          "'"
      );
    }
    const inputStream = new InputStream$1(matchResult.input);
    return s.wrap(cst, inputStream.interval(matchResult._cstOffset, matchResult.input.length));
  };

  // Forward public methods from the proxy to the semantics instance.
  proxy.addOperation = function(signature, actionDict) {
    s.addOperationOrAttribute('operation', signature, actionDict);
    return proxy;
  };
  proxy.extendOperation = function(name, actionDict) {
    s.extendOperationOrAttribute('operation', name, actionDict);
    return proxy;
  };
  proxy.addAttribute = function(name, actionDict) {
    s.addOperationOrAttribute('attribute', name, actionDict);
    return proxy;
  };
  proxy.extendAttribute = function(name, actionDict) {
    s.extendOperationOrAttribute('attribute', name, actionDict);
    return proxy;
  };
  proxy._getActionDict = function(operationOrAttributeName) {
    const action =
      s.operations[operationOrAttributeName] || s.attributes[operationOrAttributeName];
    if (!action) {
      throw new Error(
          '"' +
          operationOrAttributeName +
          '" is not a valid operation or attribute ' +
          'name in this semantics for "' +
          grammar.name +
          '"'
      );
    }
    return action.actionDict;
  };
  proxy._remove = function(operationOrAttributeName) {
    let semantic;
    if (operationOrAttributeName in s.operations) {
      semantic = s.operations[operationOrAttributeName];
      delete s.operations[operationOrAttributeName];
    } else if (operationOrAttributeName in s.attributes) {
      semantic = s.attributes[operationOrAttributeName];
      delete s.attributes[operationOrAttributeName];
    }
    delete s.Wrapper.prototype[operationOrAttributeName];
    return semantic;
  };
  proxy.getOperationNames = function() {
    return Object.keys(s.operations);
  };
  proxy.getAttributeNames = function() {
    return Object.keys(s.attributes);
  };
  proxy.getGrammar = function() {
    return s.grammar;
  };
  proxy.toRecipe = function(semanticsOnly) {
    return s.toRecipe(semanticsOnly);
  };

  // Make the proxy's toString() work.
  proxy.toString = s.toString.bind(s);

  // Returns the semantics for the proxy.
  proxy._getSemantics = function() {
    return s;
  };

  return proxy;
};

// ----------------- Operation -----------------

// An Operation represents a function to be applied to a concrete syntax tree (CST) -- it's very
// similar to a Visitor (http://en.wikipedia.org/wiki/Visitor_pattern). An operation is executed by
// recursively walking the CST, and at each node, invoking the matching semantic action from
// `actionDict`. See `Operation.prototype.execute` for details of how a CST node's matching semantic
// action is found.
class Operation {
  constructor(name, formals, actionDict, builtInDefault) {
    this.name = name;
    this.formals = formals;
    this.actionDict = actionDict;
    this.builtInDefault = builtInDefault;
  }

  checkActionDict(grammar) {
    grammar._checkTopDownActionDict(this.typeName, this.name, this.actionDict);
  }

  // Execute this operation on the CST node associated with `nodeWrapper` in the context of the
  // given Semantics instance.
  execute(semantics, nodeWrapper) {
    try {
      // Look for a semantic action whose name matches the node's constructor name, which is either
      // the name of a rule in the grammar, or '_terminal' (for a terminal node), or '_iter' (for an
      // iteration node).
      const {ctorName} = nodeWrapper._node;
      let actionFn = this.actionDict[ctorName];
      if (actionFn) {
        globalActionStack.push([this, ctorName]);
        return actionFn.apply(nodeWrapper, nodeWrapper._children());
      }

      // The action dictionary does not contain a semantic action for this specific type of node.
      // If this is a nonterminal node and the programmer has provided a `_nonterminal` semantic
      // action, we invoke it:
      if (nodeWrapper.isNonterminal()) {
        actionFn = this.actionDict._nonterminal;
        if (actionFn) {
          globalActionStack.push([this, '_nonterminal', ctorName]);
          return actionFn.apply(nodeWrapper, nodeWrapper._children());
        }
      }

      // Otherwise, we invoke the '_default' semantic action.
      globalActionStack.push([this, 'default action', ctorName]);
      return this.actionDict._default.apply(nodeWrapper, nodeWrapper._children());
    } finally {
      globalActionStack.pop();
    }
  }
}

Operation.prototype.typeName = 'operation';

// ----------------- Attribute -----------------

// Attributes are Operations whose results are memoized. This means that, for any given semantics,
// the semantic action for a CST node will be invoked no more than once.
class Attribute extends Operation {
  constructor(name, actionDict, builtInDefault) {
    super(name, [], actionDict, builtInDefault);
  }

  execute(semantics, nodeWrapper) {
    const node = nodeWrapper._node;
    const key = semantics.attributeKeys[this.name];
    if (!hasOwnProperty(node, key)) {
      // The following is a super-send -- isn't JS beautiful? :/
      node[key] = Operation.prototype.execute.call(this, semantics, nodeWrapper);
    }
    return node[key];
  }
}

Attribute.prototype.typeName = 'attribute';

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var Semantics_1 = Semantics$2;

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const CaseInsensitiveTerminal = CaseInsensitiveTerminal_1;
const Matcher = Matcher_1;
const Semantics$1 = Semantics_1;
const common$2 = common$l;
const errors$2 = errors$9;
const pexprs$3 = pexprs$6;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

const SPECIAL_ACTION_NAMES = ['_iter', '_terminal', '_nonterminal', '_default'];

function getSortedRuleValues(grammar) {
  return Object.keys(grammar.rules)
      .sort()
      .map(name => grammar.rules[name]);
}

// Until ES2019, JSON was not a valid subset of JavaScript because U+2028 (line separator)
// and U+2029 (paragraph separator) are allowed in JSON string literals, but not in JS.
// This function properly encodes those two characters so that the resulting string is
// represents both valid JSON, and valid JavaScript (for ES2018 and below).
// See https://v8.dev/features/subsume-json for more details.
const jsonToJS = str => str.replace(/\u2028/g, '\\u2028').replace(/\u2029/g, '\\u2029');

function Grammar$4(name, superGrammar, rules, optDefaultStartRule) {
  this.name = name;
  this.superGrammar = superGrammar;
  this.rules = rules;
  if (optDefaultStartRule) {
    if (!(optDefaultStartRule in rules)) {
      throw new Error(
          "Invalid start rule: '" +
          optDefaultStartRule +
          "' is not a rule in grammar '" +
          name +
          "'"
      );
    }
    this.defaultStartRule = optDefaultStartRule;
  }
}

let ohmGrammar$2;
let buildGrammar$1;

// This method is called from main.js once Ohm has loaded.
Grammar$4.initApplicationParser = function(grammar, builderFn) {
  ohmGrammar$2 = grammar;
  buildGrammar$1 = builderFn;
};

Grammar$4.prototype = {
  matcher() {
    return new Matcher(this);
  },

  // Return true if the grammar is a built-in grammar, otherwise false.
  // NOTE: This might give an unexpected result if called before BuiltInRules is defined!
  isBuiltIn() {
    return this === Grammar$4.ProtoBuiltInRules || this === Grammar$4.BuiltInRules;
  },

  equals(g) {
    if (this === g) {
      return true;
    }
    // Do the cheapest comparisons first.
    if (
      g == null ||
      this.name !== g.name ||
      this.defaultStartRule !== g.defaultStartRule ||
      !(this.superGrammar === g.superGrammar || this.superGrammar.equals(g.superGrammar))
    ) {
      return false;
    }
    const myRules = getSortedRuleValues(this);
    const otherRules = getSortedRuleValues(g);
    return (
      myRules.length === otherRules.length &&
      myRules.every((rule, i) => {
        return (
          rule.description === otherRules[i].description &&
          rule.formals.join(',') === otherRules[i].formals.join(',') &&
          rule.body.toString() === otherRules[i].body.toString()
        );
      })
    );
  },

  match(input, optStartApplication) {
    const m = this.matcher();
    m.replaceInputRange(0, 0, input);
    return m.match(optStartApplication);
  },

  trace(input, optStartApplication) {
    const m = this.matcher();
    m.replaceInputRange(0, 0, input);
    return m.trace(optStartApplication);
  },

  createSemantics() {
    return Semantics$1.createSemantics(this);
  },

  extendSemantics(superSemantics) {
    return Semantics$1.createSemantics(this, superSemantics._getSemantics());
  },

  // Check that every key in `actionDict` corresponds to a semantic action, and that it maps to
  // a function of the correct arity. If not, throw an exception.
  _checkTopDownActionDict(what, name, actionDict) {
    const problems = [];

    // eslint-disable-next-line guard-for-in
    for (const k in actionDict) {
      const v = actionDict[k];
      const isSpecialAction = SPECIAL_ACTION_NAMES.includes(k);

      if (!isSpecialAction && !(k in this.rules)) {
        problems.push(`'${k}' is not a valid semantic action for '${this.name}'`);
        continue;
      }
      if (typeof v !== 'function') {
        problems.push(`'${k}' must be a function in an action dictionary for '${this.name}'`);
        continue;
      }
      const actual = v.length;
      const expected = this._topDownActionArity(k);
      if (actual !== expected) {
        let details;
        if (k === '_iter' || k === '_nonterminal') {
          details =
            `it should use a rest parameter, e.g. \`${k}(...children) {}\`. ` +
            'NOTE: this is new in Ohm v16 — see https://ohmjs.org/d/ati for details.';
        } else {
          details = `expected ${expected}, got ${actual}`;
        }
        problems.push(`Semantic action '${k}' has the wrong arity: ${details}`);
      }
    }
    if (problems.length > 0) {
      const prettyProblems = problems.map(problem => '- ' + problem);
      const error = new Error(
          [
            `Found errors in the action dictionary of the '${name}' ${what}:`,
            ...prettyProblems,
          ].join('\n')
      );
      error.problems = problems;
      throw error;
    }
  },

  // Return the expected arity for a semantic action named `actionName`, which
  // is either a rule name or a special action name like '_nonterminal'.
  _topDownActionArity(actionName) {
    // All special actions have an expected arity of 0, though all but _terminal
    // are expected to use the rest parameter syntax (e.g. `_iter(...children)`).
    // This is considered to have arity 0, i.e. `((...args) => {}).length` is 0.
    return SPECIAL_ACTION_NAMES.includes(actionName) ?
      0 :
      this.rules[actionName].body.getArity();
  },

  _inheritsFrom(grammar) {
    let g = this.superGrammar;
    while (g) {
      if (g.equals(grammar, true)) {
        return true;
      }
      g = g.superGrammar;
    }
    return false;
  },

  toRecipe(superGrammarExpr = undefined) {
    const metaInfo = {};
    // Include the grammar source if it is available.
    if (this.source) {
      metaInfo.source = this.source.contents;
    }

    let startRule = null;
    if (this.defaultStartRule) {
      startRule = this.defaultStartRule;
    }

    const rules = {};
    Object.keys(this.rules).forEach(ruleName => {
      const ruleInfo = this.rules[ruleName];
      const {body} = ruleInfo;
      const isDefinition = !this.superGrammar || !this.superGrammar.rules[ruleName];

      let operation;
      if (isDefinition) {
        operation = 'define';
      } else {
        operation = body instanceof pexprs$3.Extend ? 'extend' : 'override';
      }

      const metaInfo = {};
      if (ruleInfo.source && this.source) {
        const adjusted = ruleInfo.source.relativeTo(this.source);
        metaInfo.sourceInterval = [adjusted.startIdx, adjusted.endIdx];
      }

      const description = isDefinition ? ruleInfo.description : null;
      const bodyRecipe = body.outputRecipe(ruleInfo.formals, this.source);

      rules[ruleName] = [
        operation, // "define"/"extend"/"override"
        metaInfo,
        description,
        ruleInfo.formals,
        bodyRecipe,
      ];
    });

    // If the caller provided an expression to use for the supergrammar, use that.
    // Otherwise, if the supergrammar is a user grammar, use its recipe inline.
    let superGrammarOutput = 'null';
    if (superGrammarExpr) {
      superGrammarOutput = superGrammarExpr;
    } else if (this.superGrammar && !this.superGrammar.isBuiltIn()) {
      superGrammarOutput = this.superGrammar.toRecipe();
    }

    const recipeElements = [
      ...['grammar', metaInfo, this.name].map(JSON.stringify),
      superGrammarOutput,
      ...[startRule, rules].map(JSON.stringify),
    ];
    return jsonToJS(`[${recipeElements.join(',')}]`);
  },

  // TODO: Come up with better names for these methods.
  // TODO: Write the analog of these methods for inherited attributes.
  toOperationActionDictionaryTemplate() {
    return this._toOperationOrAttributeActionDictionaryTemplate();
  },
  toAttributeActionDictionaryTemplate() {
    return this._toOperationOrAttributeActionDictionaryTemplate();
  },

  _toOperationOrAttributeActionDictionaryTemplate() {
    // TODO: add the super-grammar's templates at the right place, e.g., a case for AddExpr_plus
    // should appear next to other cases of AddExpr.

    const sb = new common$2.StringBuffer();
    sb.append('{');

    let first = true;
    // eslint-disable-next-line guard-for-in
    for (const ruleName in this.rules) {
      const {body} = this.rules[ruleName];
      if (first) {
        first = false;
      } else {
        sb.append(',');
      }
      sb.append('\n');
      sb.append('  ');
      this.addSemanticActionTemplate(ruleName, body, sb);
    }

    sb.append('\n}');
    return sb.contents();
  },

  addSemanticActionTemplate(ruleName, body, sb) {
    sb.append(ruleName);
    sb.append(': function(');
    const arity = this._topDownActionArity(ruleName);
    sb.append(common$2.repeat('_', arity).join(', '));
    sb.append(') {\n');
    sb.append('  }');
  },

  // Parse a string which expresses a rule application in this grammar, and return the
  // resulting Apply node.
  parseApplication(str) {
    let app;
    if (str.indexOf('<') === -1) {
      // simple application
      app = new pexprs$3.Apply(str);
    } else {
      // parameterized application
      const cst = ohmGrammar$2.match(str, 'Base_application');
      app = buildGrammar$1(cst, {});
    }

    // Ensure that the application is valid.
    if (!(app.ruleName in this.rules)) {
      throw errors$2.undeclaredRule(app.ruleName, this.name);
    }
    const {formals} = this.rules[app.ruleName];
    if (formals.length !== app.args.length) {
      const {source} = this.rules[app.ruleName];
      throw errors$2.wrongNumberOfParameters(
          app.ruleName,
          formals.length,
          app.args.length,
          source
      );
    }
    return app;
  },
};

// The following grammar contains a few rules that couldn't be written  in "userland".
// At the bottom of src/main.js, we create a sub-grammar of this grammar that's called
// `BuiltInRules`. That grammar contains several convenience rules, e.g., `letter` and
// `digit`, and is implicitly the super-grammar of any grammar whose super-grammar
// isn't specified.
Grammar$4.ProtoBuiltInRules = new Grammar$4(
    'ProtoBuiltInRules', // name
    undefined, // supergrammar
    {
      any: {
        body: pexprs$3.any,
        formals: [],
        description: 'any character',
        primitive: true,
      },
      end: {
        body: pexprs$3.end,
        formals: [],
        description: 'end of input',
        primitive: true,
      },

      caseInsensitive: {
        body: new CaseInsensitiveTerminal(new pexprs$3.Param(0)),
        formals: ['str'],
        primitive: true,
      },
      lower: {
        body: new pexprs$3.UnicodeChar('Ll'),
        formals: [],
        description: 'a lowercase letter',
        primitive: true,
      },
      upper: {
        body: new pexprs$3.UnicodeChar('Lu'),
        formals: [],
        description: 'an uppercase letter',
        primitive: true,
      },
      // Union of Lt (titlecase), Lm (modifier), and Lo (other), i.e. any letter not in Ll or Lu.
      unicodeLtmo: {
        body: new pexprs$3.UnicodeChar('Ltmo'),
        formals: [],
        description: 'a Unicode character in Lt, Lm, or Lo',
        primitive: true,
      },

      // These rules are not truly primitive (they could be written in userland) but are defined
      // here for bootstrapping purposes.
      spaces: {
        body: new pexprs$3.Star(new pexprs$3.Apply('space')),
        formals: [],
      },
      space: {
        body: new pexprs$3.Range('\x00', ' '),
        formals: [],
        description: 'a space',
      },
    }
);

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var Grammar_1 = Grammar$4;

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const Grammar$3 = Grammar_1;
const InputStream = InputStream_1;
const common$1 = common$l;
const errors$1 = errors$9;
const pexprs$2 = pexprs$6;

// --------------------------------------------------------------------
// Private Stuff
// --------------------------------------------------------------------

// Constructors

function GrammarDecl$1(name) {
  this.name = name;
}

// Helpers

GrammarDecl$1.prototype.sourceInterval = function(startIdx, endIdx) {
  return this.source.subInterval(startIdx, endIdx - startIdx);
};

GrammarDecl$1.prototype.ensureSuperGrammar = function() {
  if (!this.superGrammar) {
    this.withSuperGrammar(
      // TODO: The conditional expression below is an ugly hack. It's kind of ok because
      // I doubt anyone will ever try to declare a grammar called `BuiltInRules`. Still,
      // we should try to find a better way to do this.
      this.name === 'BuiltInRules' ? Grammar$3.ProtoBuiltInRules : Grammar$3.BuiltInRules
    );
  }
  return this.superGrammar;
};

GrammarDecl$1.prototype.ensureSuperGrammarRuleForOverriding = function(name, source) {
  const ruleInfo = this.ensureSuperGrammar().rules[name];
  if (!ruleInfo) {
    throw errors$1.cannotOverrideUndeclaredRule(name, this.superGrammar.name, source);
  }
  return ruleInfo;
};

GrammarDecl$1.prototype.installOverriddenOrExtendedRule = function(
    name,
    formals,
    body,
    source
) {
  const duplicateParameterNames = common$1.getDuplicates(formals);
  if (duplicateParameterNames.length > 0) {
    throw errors$1.duplicateParameterNames(name, duplicateParameterNames, source);
  }
  const ruleInfo = this.ensureSuperGrammar().rules[name];
  const expectedFormals = ruleInfo.formals;
  const expectedNumFormals = expectedFormals ? expectedFormals.length : 0;
  if (formals.length !== expectedNumFormals) {
    throw errors$1.wrongNumberOfParameters(name, expectedNumFormals, formals.length, source);
  }
  return this.install(name, formals, body, ruleInfo.description, source);
};

GrammarDecl$1.prototype.install = function(name, formals, body, description, source) {
  this.rules[name] = {
    body: body.introduceParams(formals),
    formals,
    description,
    source,
  };
  return this;
};

// Stuff that you should only do once

GrammarDecl$1.prototype.withSuperGrammar = function(superGrammar) {
  if (this.superGrammar) {
    throw new Error('the super grammar of a GrammarDecl cannot be set more than once');
  }
  this.superGrammar = superGrammar;
  this.rules = Object.create(superGrammar.rules);

  // Grammars with an explicit supergrammar inherit a default start rule.
  if (!superGrammar.isBuiltIn()) {
    this.defaultStartRule = superGrammar.defaultStartRule;
  }
  return this;
};

GrammarDecl$1.prototype.withDefaultStartRule = function(ruleName) {
  this.defaultStartRule = ruleName;
  return this;
};

GrammarDecl$1.prototype.withSource = function(source) {
  this.source = new InputStream(source).interval(0, source.length);
  return this;
};

// Creates a Grammar instance, and if it passes the sanity checks, returns it.
GrammarDecl$1.prototype.build = function() {
  const grammar = new Grammar$3(
      this.name,
      this.ensureSuperGrammar(),
      this.rules,
      this.defaultStartRule
  );

  // TODO: change the pexpr.prototype.assert... methods to make them add
  // exceptions to an array that's provided as an arg. Then we'll be able to
  // show more than one error of the same type at a time.
  // TODO: include the offending pexpr in the errors, that way we can show
  // the part of the source that caused it.
  const grammarErrors = [];
  let grammarHasInvalidApplications = false;
  Object.keys(grammar.rules).forEach(ruleName => {
    const {body} = grammar.rules[ruleName];
    try {
      body.assertChoicesHaveUniformArity(ruleName);
    } catch (e) {
      grammarErrors.push(e);
    }
    try {
      body.assertAllApplicationsAreValid(ruleName, grammar);
    } catch (e) {
      grammarErrors.push(e);
      grammarHasInvalidApplications = true;
    }
  });
  if (!grammarHasInvalidApplications) {
    // The following check can only be done if the grammar has no invalid applications.
    Object.keys(grammar.rules).forEach(ruleName => {
      const {body} = grammar.rules[ruleName];
      try {
        body.assertIteratedExprsAreNotNullable(grammar, []);
      } catch (e) {
        grammarErrors.push(e);
      }
    });
  }
  if (grammarErrors.length > 0) {
    errors$1.throwErrors(grammarErrors);
  }
  if (this.source) {
    grammar.source = this.source;
  }

  return grammar;
};

// Rule declarations

GrammarDecl$1.prototype.define = function(name, formals, body, description, source) {
  this.ensureSuperGrammar();
  if (this.superGrammar.rules[name]) {
    throw errors$1.duplicateRuleDeclaration(name, this.name, this.superGrammar.name, source);
  } else if (this.rules[name]) {
    throw errors$1.duplicateRuleDeclaration(name, this.name, this.name, source);
  }
  const duplicateParameterNames = common$1.getDuplicates(formals);
  if (duplicateParameterNames.length > 0) {
    throw errors$1.duplicateParameterNames(name, duplicateParameterNames, source);
  }
  return this.install(name, formals, body, description, source);
};

GrammarDecl$1.prototype.override = function(name, formals, body, descIgnored, source) {
  this.ensureSuperGrammarRuleForOverriding(name, source);
  this.installOverriddenOrExtendedRule(name, formals, body, source);
  return this;
};

GrammarDecl$1.prototype.extend = function(name, formals, fragment, descIgnored, source) {
  const ruleInfo = this.ensureSuperGrammar().rules[name];
  if (!ruleInfo) {
    throw errors$1.cannotExtendUndeclaredRule(name, this.superGrammar.name, source);
  }
  const body = new pexprs$2.Extend(this.superGrammar, name, fragment);
  body.source = fragment.source;
  this.installOverriddenOrExtendedRule(name, formals, body, source);
  return this;
};

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var GrammarDecl_1 = GrammarDecl$1;

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const Grammar$2 = Grammar_1;
const GrammarDecl = GrammarDecl_1;
const pexprs$1 = pexprs$6;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

function Builder$2() {}

Builder$2.prototype = {
  currentDecl: null,
  currentRuleName: null,

  newGrammar(name) {
    return new GrammarDecl(name);
  },

  grammar(metaInfo, name, superGrammar, defaultStartRule, rules) {
    const gDecl = new GrammarDecl(name);
    if (superGrammar) {
      // `superGrammar` may be a recipe (i.e. an Array), or an actual grammar instance.
      gDecl.withSuperGrammar(
        superGrammar instanceof Grammar$2 ? superGrammar : this.fromRecipe(superGrammar)
      );
    }
    if (defaultStartRule) {
      gDecl.withDefaultStartRule(defaultStartRule);
    }
    if (metaInfo && metaInfo.source) {
      gDecl.withSource(metaInfo.source);
    }

    this.currentDecl = gDecl;
    Object.keys(rules).forEach(ruleName => {
      this.currentRuleName = ruleName;
      const ruleRecipe = rules[ruleName];

      const action = ruleRecipe[0]; // define/extend/override
      const metaInfo = ruleRecipe[1];
      const description = ruleRecipe[2];
      const formals = ruleRecipe[3];
      const body = this.fromRecipe(ruleRecipe[4]);

      let source;
      if (gDecl.source && metaInfo && metaInfo.sourceInterval) {
        source = gDecl.source.subInterval(
            metaInfo.sourceInterval[0],
            metaInfo.sourceInterval[1] - metaInfo.sourceInterval[0]
        );
      }
      gDecl[action](ruleName, formals, body, description, source);
    });
    this.currentRuleName = this.currentDecl = null;
    return gDecl.build();
  },

  terminal(x) {
    return new pexprs$1.Terminal(x);
  },

  range(from, to) {
    return new pexprs$1.Range(from, to);
  },

  param(index) {
    return new pexprs$1.Param(index);
  },

  alt(...termArgs) {
    let terms = [];
    for (let arg of termArgs) {
      if (!(arg instanceof pexprs$1.PExpr)) {
        arg = this.fromRecipe(arg);
      }
      if (arg instanceof pexprs$1.Alt) {
        terms = terms.concat(arg.terms);
      } else {
        terms.push(arg);
      }
    }
    return terms.length === 1 ? terms[0] : new pexprs$1.Alt(terms);
  },

  seq(...factorArgs) {
    let factors = [];
    for (let arg of factorArgs) {
      if (!(arg instanceof pexprs$1.PExpr)) {
        arg = this.fromRecipe(arg);
      }
      if (arg instanceof pexprs$1.Seq) {
        factors = factors.concat(arg.factors);
      } else {
        factors.push(arg);
      }
    }
    return factors.length === 1 ? factors[0] : new pexprs$1.Seq(factors);
  },

  star(expr) {
    if (!(expr instanceof pexprs$1.PExpr)) {
      expr = this.fromRecipe(expr);
    }
    return new pexprs$1.Star(expr);
  },

  plus(expr) {
    if (!(expr instanceof pexprs$1.PExpr)) {
      expr = this.fromRecipe(expr);
    }
    return new pexprs$1.Plus(expr);
  },

  opt(expr) {
    if (!(expr instanceof pexprs$1.PExpr)) {
      expr = this.fromRecipe(expr);
    }
    return new pexprs$1.Opt(expr);
  },

  not(expr) {
    if (!(expr instanceof pexprs$1.PExpr)) {
      expr = this.fromRecipe(expr);
    }
    return new pexprs$1.Not(expr);
  },

  la(expr) {
    // TODO: temporary to still be able to read old recipes
    return this.lookahead(expr);
  },

  lookahead(expr) {
    if (!(expr instanceof pexprs$1.PExpr)) {
      expr = this.fromRecipe(expr);
    }
    return new pexprs$1.Lookahead(expr);
  },

  lex(expr) {
    if (!(expr instanceof pexprs$1.PExpr)) {
      expr = this.fromRecipe(expr);
    }
    return new pexprs$1.Lex(expr);
  },

  app(ruleName, optParams) {
    if (optParams && optParams.length > 0) {
      optParams = optParams.map(function(param) {
        return param instanceof pexprs$1.PExpr ? param : this.fromRecipe(param);
      }, this);
    }
    return new pexprs$1.Apply(ruleName, optParams);
  },

  // Note that unlike other methods in this class, this method cannot be used as a
  // convenience constructor. It only works with recipes, because it relies on
  // `this.currentDecl` and `this.currentRuleName` being set.
  splice(beforeTerms, afterTerms) {
    return new pexprs$1.Splice(
        this.currentDecl.superGrammar,
        this.currentRuleName,
        beforeTerms.map(term => this.fromRecipe(term)),
        afterTerms.map(term => this.fromRecipe(term))
    );
  },

  fromRecipe(recipe) {
    // the meta-info of 'grammar' is processed in Builder.grammar
    const args = recipe[0] === 'grammar' ? recipe.slice(1) : recipe.slice(2);
    const result = this[recipe[0]](...args);

    const metaInfo = recipe[1];
    if (metaInfo) {
      if (metaInfo.sourceInterval && this.currentDecl) {
        result.withSource(this.currentDecl.sourceInterval(...metaInfo.sourceInterval));
      }
    }
    return result;
  },
};

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var Builder_1 = Builder$2;

var name = "ohm-js";
var version$2 = "16.3.4";
var description = "An object-oriented language for parsing and pattern matching";
var repository = "https://github.com/harc/ohm";
var keywords = [
	"parser",
	"compiler",
	"pattern matching",
	"pattern-matching",
	"ometa",
	"ometa/js",
	"ometa-js",
	"ometajs",
	"rapid",
	"prototyping"
];
var homepage = "https://ohmjs.org";
var bugs = "https://github.com/harc/ohm/issues";
var main = "index.js";
var module = "dist/ohm.esm.js";
var files = [
	"src",
	"dist",
	"extras",
	"third_party",
	"index.d.ts"
];
var types = "index.d.ts";
var scripts = {
	prebootstrap: "bash scripts/prebootstrap",
	bootstrap: "bash scripts/bootstrap --test || (echo 'Bootstrap failed.' && mv -v dist/ohm-grammar.js.old dist/ohm-grammar.js && mv -v dist/built-in-rules.js.old dist/built-in-rules.js && mv -v dist/operations-and-attributes.js.old dist/operations-and-attributes.js)",
	build: "yarn build-debug && webpack --mode=production",
	"build-debug": "webpack --mode=development && yarn build-esm && node scripts/generate-types.mjs",
	"build-esm": "rollup -c rollup.config.mjs",
	clean: "rm -f dist/ohm.js dist/ohm.min.js",
	lint: "eslint . --ignore-path ../.eslintignore",
	format: "prettier . --write --ignore-path ../.prettierignore --config ../.prettierrc && eslint . --ignore-path ../.eslintignore --fix",
	test: "ava && ava --config ava-ts.config.js test/test-typings.ts",
	"test-watch": "ava --watch",
	"pre-commit": "yarn run lint && yarn run build && yarn run test",
	prepublishOnly: "bash scripts/prepublishOnly",
	prepack: "cp ../../README.md . && yarn build",
	postpack: "rm README.md",
	postpublish: "echo '👉  Now go to https://github.com/harc/ohm/releases and create a release.'",
	"unsafe-bootstrap": "bash scripts/bootstrap",
	"update-contributors": "bash scripts/update-contributors",
	watch: "webpack --mode=development --watch"
};
var license = "MIT";
var author = "Alex Warth <alexwarth@gmail.com> (http://tinlizzie.org/~awarth)";
var contributors = [
	"Patrick Dubroy <pdubroy@gmail.com>",
	"Meixian Li <lmeixian@gmail.com>",
	"Marko Röder <m.roeder@photon-software.de>",
	"Tony Garnock-Jones <tonygarnockjones@gmail.com>",
	"Saketh Kasibatla <sake.kasi@gmail.com>",
	"Lionel Landwerlin <llandwerlin@gmail.com>",
	"Ray Toal <rtoal@lmu.edu>",
	"Jason Merrill <jwmerrill@gmail.com>",
	"Yoshiki Ohshima <Yoshiki.Ohshima@acm.org>",
	"megabuz <3299889+megabuz@users.noreply.github.com>",
	"Milan Lajtoš <milan.lajtos@me.com>",
	"Neil Jewers <njjewers@uwaterloo.ca>",
	"Jonathan Edwards <JonathanMEdwards@gmail.com>",
	"stagas <gstagas@gmail.com>",
	"Daniel Tomlinson <DanielTomlinson@me.com>",
	"Pierre Donias <pierre.donias@gmail.com>",
	"Casey Olson <casey.m.olson@gmail.com>",
	"Arthur Carabott <arthurc@gmail.com>",
	"Stan Rozenraukh <stan@stanistan.com>",
	"Stephan Seidt <stephan.seidt@gmail.com>",
	"Leslie Ying <acetophore@users.noreply.github.com>",
	"Szymon Kaliski <kaliskiszymon@gmail.com>",
	"Thomas Nyberg <tomnyberg@gmail.com>",
	"AngryPowman <angrypowman@qq.com>",
	"Vse Mozhet Byt <vsemozhetbyt@gmail.com>",
	"Wil Chung <10446+iamwilhelm@users.noreply.github.com>",
	"Zachary Sakowitz <zsakowitz@gmail.com>",
	"abego <ub@abego-software.de>",
	"acslk <d_vd415@hotmail.com>",
	"codeZeilen <codeZeilen@users.noreply.github.com>",
	"kassadin <kassadin@foxmail.com>",
	"owch <bowenrainyday@gmail.com>",
	"sfinnie <scott.finnie@gmail.com>",
	"Steve Phillips <steve@tryingtobeawesome.com>",
	"Justin Chase <justin.m.chase@gmail.com>",
	"Luca Guzzon <luca.guzzon@gmail.com>",
	"Ian Harris <ian@fofgof.xyz>",
	"Mike Niebling <(none)>",
	"Patrick Dubroy <patrick@sourcegraph.com>"
];
var dependencies = {
};
var devDependencies = {
	"@ohm-js/cli": "^1.0.0",
	"@rollup/plugin-commonjs": "^21.0.1",
	"@rollup/plugin-json": "^4.1.0",
	"@rollup/plugin-node-resolve": "^13.1.3",
	ava: "^3.15.0",
	"ava-spec": "^1.1.1",
	dedent: "^0.7.0",
	eslint: "^7.9.0",
	"eslint-config-google": "^0.14.0",
	"eslint-plugin-ava": "^11.0.0",
	"eslint-plugin-camelcase-ohm": "^0.2.1",
	"eslint-plugin-no-extension-in-require": "^0.2.0",
	husky: "^4.2.5",
	jsdom: "^9.9.1",
	json: "^9.0.6",
	markscript: "^0.5.0",
	"node-static": "^0.7.11",
	"ohm-grammar-ecmascript": "^1.0.0",
	rollup: "^2.63.0",
	"ts-loader": "^8.0.4",
	"ts-node": "^9.0.0",
	typescript: "^4.0.3",
	"walk-sync": "^2.2.0",
	webpack: "^4.44.2",
	"webpack-cli": "^3.3.12"
};
var engines = {
	node: ">=0.12.1"
};
var require$$0 = {
	name: name,
	version: version$2,
	description: description,
	repository: repository,
	keywords: keywords,
	homepage: homepage,
	bugs: bugs,
	main: main,
	module: module,
	files: files,
	types: types,
	scripts: scripts,
	license: license,
	author: author,
	contributors: contributors,
	dependencies: dependencies,
	devDependencies: devDependencies,
	engines: engines
};

/* global __GLOBAL_OHM_VERSION__ */

// When running under Node, read the version from package.json. For the browser,
// use a special global variable defined in the build process (see webpack.config.js).
var version$1 =
  typeof __GLOBAL_OHM_VERSION__ === 'string' ?
    __GLOBAL_OHM_VERSION__ :
    require$$0.version;

var makeRecipe$5 = {};

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const Builder$1 = Builder_1;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

function makeRecipe$4(recipe) {
  if (typeof recipe === 'function') {
    return recipe.call(new Builder$1());
  } else {
    if (typeof recipe === 'string') {
      // stringified JSON recipe
      recipe = JSON.parse(recipe);
    }
    return new Builder$1().fromRecipe(recipe);
  }
}

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

makeRecipe$5.makeRecipe = makeRecipe$4;

var {makeRecipe: makeRecipe$3} = makeRecipe$5;
var builtInRules = makeRecipe$3(["grammar",{"source":"BuiltInRules {\n\n  alnum  (an alpha-numeric character)\n    = letter\n    | digit\n\n  letter  (a letter)\n    = lower\n    | upper\n    | unicodeLtmo\n\n  digit  (a digit)\n    = \"0\"..\"9\"\n\n  hexDigit  (a hexadecimal digit)\n    = digit\n    | \"a\"..\"f\"\n    | \"A\"..\"F\"\n\n  ListOf<elem, sep>\n    = NonemptyListOf<elem, sep>\n    | EmptyListOf<elem, sep>\n\n  NonemptyListOf<elem, sep>\n    = elem (sep elem)*\n\n  EmptyListOf<elem, sep>\n    = /* nothing */\n\n  listOf<elem, sep>\n    = nonemptyListOf<elem, sep>\n    | emptyListOf<elem, sep>\n\n  nonemptyListOf<elem, sep>\n    = elem (sep elem)*\n\n  emptyListOf<elem, sep>\n    = /* nothing */\n\n  // Allows a syntactic rule application within a lexical context.\n  applySyntactic<app> = app\n}"},"BuiltInRules",null,null,{"alnum":["define",{"sourceInterval":[18,78]},"an alpha-numeric character",[],["alt",{"sourceInterval":[60,78]},["app",{"sourceInterval":[60,66]},"letter",[]],["app",{"sourceInterval":[73,78]},"digit",[]]]],"letter":["define",{"sourceInterval":[82,142]},"a letter",[],["alt",{"sourceInterval":[107,142]},["app",{"sourceInterval":[107,112]},"lower",[]],["app",{"sourceInterval":[119,124]},"upper",[]],["app",{"sourceInterval":[131,142]},"unicodeLtmo",[]]]],"digit":["define",{"sourceInterval":[146,177]},"a digit",[],["range",{"sourceInterval":[169,177]},"0","9"]],"hexDigit":["define",{"sourceInterval":[181,254]},"a hexadecimal digit",[],["alt",{"sourceInterval":[219,254]},["app",{"sourceInterval":[219,224]},"digit",[]],["range",{"sourceInterval":[231,239]},"a","f"],["range",{"sourceInterval":[246,254]},"A","F"]]],"ListOf":["define",{"sourceInterval":[258,336]},null,["elem","sep"],["alt",{"sourceInterval":[282,336]},["app",{"sourceInterval":[282,307]},"NonemptyListOf",[["param",{"sourceInterval":[297,301]},0],["param",{"sourceInterval":[303,306]},1]]],["app",{"sourceInterval":[314,336]},"EmptyListOf",[["param",{"sourceInterval":[326,330]},0],["param",{"sourceInterval":[332,335]},1]]]]],"NonemptyListOf":["define",{"sourceInterval":[340,388]},null,["elem","sep"],["seq",{"sourceInterval":[372,388]},["param",{"sourceInterval":[372,376]},0],["star",{"sourceInterval":[377,388]},["seq",{"sourceInterval":[378,386]},["param",{"sourceInterval":[378,381]},1],["param",{"sourceInterval":[382,386]},0]]]]],"EmptyListOf":["define",{"sourceInterval":[392,434]},null,["elem","sep"],["seq",{"sourceInterval":[438,438]}]],"listOf":["define",{"sourceInterval":[438,516]},null,["elem","sep"],["alt",{"sourceInterval":[462,516]},["app",{"sourceInterval":[462,487]},"nonemptyListOf",[["param",{"sourceInterval":[477,481]},0],["param",{"sourceInterval":[483,486]},1]]],["app",{"sourceInterval":[494,516]},"emptyListOf",[["param",{"sourceInterval":[506,510]},0],["param",{"sourceInterval":[512,515]},1]]]]],"nonemptyListOf":["define",{"sourceInterval":[520,568]},null,["elem","sep"],["seq",{"sourceInterval":[552,568]},["param",{"sourceInterval":[552,556]},0],["star",{"sourceInterval":[557,568]},["seq",{"sourceInterval":[558,566]},["param",{"sourceInterval":[558,561]},1],["param",{"sourceInterval":[562,566]},0]]]]],"emptyListOf":["define",{"sourceInterval":[572,682]},null,["elem","sep"],["seq",{"sourceInterval":[685,685]}]],"applySyntactic":["define",{"sourceInterval":[685,710]},null,["app"],["param",{"sourceInterval":[707,710]},0]]}]);

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const Grammar$1 = Grammar_1;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

Grammar$1.BuiltInRules = builtInRules;

var {makeRecipe: makeRecipe$2} = makeRecipe$5;
var operationsAndAttributes = makeRecipe$2(["grammar",{"source":"OperationsAndAttributes {\n\n  AttributeSignature =\n    name\n\n  OperationSignature =\n    name Formals?\n\n  Formals\n    = \"(\" ListOf<name, \",\"> \")\"\n\n  name  (a name)\n    = nameFirst nameRest*\n\n  nameFirst\n    = \"_\"\n    | letter\n\n  nameRest\n    = \"_\"\n    | alnum\n\n}"},"OperationsAndAttributes",null,"AttributeSignature",{"AttributeSignature":["define",{"sourceInterval":[29,58]},null,[],["app",{"sourceInterval":[54,58]},"name",[]]],"OperationSignature":["define",{"sourceInterval":[62,100]},null,[],["seq",{"sourceInterval":[87,100]},["app",{"sourceInterval":[87,91]},"name",[]],["opt",{"sourceInterval":[92,100]},["app",{"sourceInterval":[92,99]},"Formals",[]]]]],"Formals":["define",{"sourceInterval":[104,143]},null,[],["seq",{"sourceInterval":[118,143]},["terminal",{"sourceInterval":[118,121]},"("],["app",{"sourceInterval":[122,139]},"ListOf",[["app",{"sourceInterval":[129,133]},"name",[]],["terminal",{"sourceInterval":[135,138]},","]]],["terminal",{"sourceInterval":[140,143]},")"]]],"name":["define",{"sourceInterval":[147,187]},"a name",[],["seq",{"sourceInterval":[168,187]},["app",{"sourceInterval":[168,177]},"nameFirst",[]],["star",{"sourceInterval":[178,187]},["app",{"sourceInterval":[178,186]},"nameRest",[]]]]],"nameFirst":["define",{"sourceInterval":[191,223]},null,[],["alt",{"sourceInterval":[207,223]},["terminal",{"sourceInterval":[207,210]},"_"],["app",{"sourceInterval":[217,223]},"letter",[]]]],"nameRest":["define",{"sourceInterval":[227,257]},null,[],["alt",{"sourceInterval":[242,257]},["terminal",{"sourceInterval":[242,245]},"_"],["app",{"sourceInterval":[252,257]},"alnum",[]]]]}]);

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const Semantics = Semantics_1;
const util$1 = util$7;

// ----------------- Deferred initialization -----------------

util$1.awaitBuiltInRules(builtInRules => {
  const operationsAndAttributesGrammar = operationsAndAttributes;
  initBuiltInSemantics(builtInRules);
  initPrototypeParser(operationsAndAttributesGrammar); // requires BuiltInSemantics
});

function initBuiltInSemantics(builtInRules) {
  const actions = {
    empty() {
      return this.iteration();
    },
    nonEmpty(first, _, rest) {
      return this.iteration([first].concat(rest.children));
    },
  };

  Semantics.BuiltInSemantics = Semantics.createSemantics(builtInRules, null).addOperation(
      'asIteration',
      {
        emptyListOf: actions.empty,
        nonemptyListOf: actions.nonEmpty,
        EmptyListOf: actions.empty,
        NonemptyListOf: actions.nonEmpty,
      }
  );
}

function initPrototypeParser(grammar) {
  Semantics.prototypeGrammarSemantics = grammar.createSemantics().addOperation('parse', {
    AttributeSignature(name) {
      return {
        name: name.parse(),
        formals: [],
      };
    },
    OperationSignature(name, optFormals) {
      return {
        name: name.parse(),
        formals: optFormals.children.map(c => c.parse())[0] || [],
      };
    },
    Formals(oparen, fs, cparen) {
      return fs.asIteration().children.map(c => c.parse());
    },
    name(first, rest) {
      return this.sourceString;
    },
  });
  Semantics.prototypeGrammar = grammar;
}

var {makeRecipe: makeRecipe$1} = makeRecipe$5;
var ohmGrammar$1 = makeRecipe$1(["grammar",{"source":"Ohm {\n\n  Grammars\n    = Grammar*\n\n  Grammar\n    = ident SuperGrammar? \"{\" Rule* \"}\"\n\n  SuperGrammar\n    = \"<:\" ident\n\n  Rule\n    = ident Formals? ruleDescr? \"=\"  RuleBody  -- define\n    | ident Formals?            \":=\" OverrideRuleBody  -- override\n    | ident Formals?            \"+=\" RuleBody  -- extend\n\n  RuleBody\n    = \"|\"? NonemptyListOf<TopLevelTerm, \"|\">\n\n  TopLevelTerm\n    = Seq caseName  -- inline\n    | Seq\n\n  OverrideRuleBody\n    = \"|\"? NonemptyListOf<OverrideTopLevelTerm, \"|\">\n\n  OverrideTopLevelTerm\n    = \"...\"  -- superSplice\n    | TopLevelTerm\n\n  Formals\n    = \"<\" ListOf<ident, \",\"> \">\"\n\n  Params\n    = \"<\" ListOf<Seq, \",\"> \">\"\n\n  Alt\n    = NonemptyListOf<Seq, \"|\">\n\n  Seq\n    = Iter*\n\n  Iter\n    = Pred \"*\"  -- star\n    | Pred \"+\"  -- plus\n    | Pred \"?\"  -- opt\n    | Pred\n\n  Pred\n    = \"~\" Lex  -- not\n    | \"&\" Lex  -- lookahead\n    | Lex\n\n  Lex\n    = \"#\" Base  -- lex\n    | Base\n\n  Base\n    = ident Params? ~(ruleDescr? \"=\" | \":=\" | \"+=\")  -- application\n    | oneCharTerminal \"..\" oneCharTerminal           -- range\n    | terminal                                       -- terminal\n    | \"(\" Alt \")\"                                    -- paren\n\n  ruleDescr  (a rule description)\n    = \"(\" ruleDescrText \")\"\n\n  ruleDescrText\n    = (~\")\" any)*\n\n  caseName\n    = \"--\" (~\"\\n\" space)* name (~\"\\n\" space)* (\"\\n\" | &\"}\")\n\n  name  (a name)\n    = nameFirst nameRest*\n\n  nameFirst\n    = \"_\"\n    | letter\n\n  nameRest\n    = \"_\"\n    | alnum\n\n  ident  (an identifier)\n    = name\n\n  terminal\n    = \"\\\"\" terminalChar* \"\\\"\"\n\n  oneCharTerminal\n    = \"\\\"\" terminalChar \"\\\"\"\n\n  terminalChar\n    = escapeChar\n      | ~\"\\\\\" ~\"\\\"\" ~\"\\n\" \"\\u{0}\"..\"\\u{10FFFF}\"\n\n  escapeChar  (an escape sequence)\n    = \"\\\\\\\\\"                                     -- backslash\n    | \"\\\\\\\"\"                                     -- doubleQuote\n    | \"\\\\\\'\"                                     -- singleQuote\n    | \"\\\\b\"                                      -- backspace\n    | \"\\\\n\"                                      -- lineFeed\n    | \"\\\\r\"                                      -- carriageReturn\n    | \"\\\\t\"                                      -- tab\n    | \"\\\\u{\" hexDigit hexDigit? hexDigit?\n             hexDigit? hexDigit? hexDigit? \"}\"   -- unicodeCodePoint\n    | \"\\\\u\" hexDigit hexDigit hexDigit hexDigit  -- unicodeEscape\n    | \"\\\\x\" hexDigit hexDigit                    -- hexEscape\n\n  space\n   += comment\n\n  comment\n    = \"//\" (~\"\\n\" any)* &(\"\\n\" | end)  -- singleLine\n    | \"/*\" (~\"*/\" any)* \"*/\"  -- multiLine\n\n  tokens = token*\n\n  token = caseName | comment | ident | operator | punctuation | terminal | any\n\n  operator = \"<:\" | \"=\" | \":=\" | \"+=\" | \"*\" | \"+\" | \"?\" | \"~\" | \"&\"\n\n  punctuation = \"<\" | \">\" | \",\" | \"--\"\n}"},"Ohm",null,"Grammars",{"Grammars":["define",{"sourceInterval":[9,32]},null,[],["star",{"sourceInterval":[24,32]},["app",{"sourceInterval":[24,31]},"Grammar",[]]]],"Grammar":["define",{"sourceInterval":[36,83]},null,[],["seq",{"sourceInterval":[50,83]},["app",{"sourceInterval":[50,55]},"ident",[]],["opt",{"sourceInterval":[56,69]},["app",{"sourceInterval":[56,68]},"SuperGrammar",[]]],["terminal",{"sourceInterval":[70,73]},"{"],["star",{"sourceInterval":[74,79]},["app",{"sourceInterval":[74,78]},"Rule",[]]],["terminal",{"sourceInterval":[80,83]},"}"]]],"SuperGrammar":["define",{"sourceInterval":[87,116]},null,[],["seq",{"sourceInterval":[106,116]},["terminal",{"sourceInterval":[106,110]},"<:"],["app",{"sourceInterval":[111,116]},"ident",[]]]],"Rule_define":["define",{"sourceInterval":[131,181]},null,[],["seq",{"sourceInterval":[131,170]},["app",{"sourceInterval":[131,136]},"ident",[]],["opt",{"sourceInterval":[137,145]},["app",{"sourceInterval":[137,144]},"Formals",[]]],["opt",{"sourceInterval":[146,156]},["app",{"sourceInterval":[146,155]},"ruleDescr",[]]],["terminal",{"sourceInterval":[157,160]},"="],["app",{"sourceInterval":[162,170]},"RuleBody",[]]]],"Rule_override":["define",{"sourceInterval":[188,248]},null,[],["seq",{"sourceInterval":[188,235]},["app",{"sourceInterval":[188,193]},"ident",[]],["opt",{"sourceInterval":[194,202]},["app",{"sourceInterval":[194,201]},"Formals",[]]],["terminal",{"sourceInterval":[214,218]},":="],["app",{"sourceInterval":[219,235]},"OverrideRuleBody",[]]]],"Rule_extend":["define",{"sourceInterval":[255,305]},null,[],["seq",{"sourceInterval":[255,294]},["app",{"sourceInterval":[255,260]},"ident",[]],["opt",{"sourceInterval":[261,269]},["app",{"sourceInterval":[261,268]},"Formals",[]]],["terminal",{"sourceInterval":[281,285]},"+="],["app",{"sourceInterval":[286,294]},"RuleBody",[]]]],"Rule":["define",{"sourceInterval":[120,305]},null,[],["alt",{"sourceInterval":[131,305]},["app",{"sourceInterval":[131,170]},"Rule_define",[]],["app",{"sourceInterval":[188,235]},"Rule_override",[]],["app",{"sourceInterval":[255,294]},"Rule_extend",[]]]],"RuleBody":["define",{"sourceInterval":[309,362]},null,[],["seq",{"sourceInterval":[324,362]},["opt",{"sourceInterval":[324,328]},["terminal",{"sourceInterval":[324,327]},"|"]],["app",{"sourceInterval":[329,362]},"NonemptyListOf",[["app",{"sourceInterval":[344,356]},"TopLevelTerm",[]],["terminal",{"sourceInterval":[358,361]},"|"]]]]],"TopLevelTerm_inline":["define",{"sourceInterval":[385,408]},null,[],["seq",{"sourceInterval":[385,397]},["app",{"sourceInterval":[385,388]},"Seq",[]],["app",{"sourceInterval":[389,397]},"caseName",[]]]],"TopLevelTerm":["define",{"sourceInterval":[366,418]},null,[],["alt",{"sourceInterval":[385,418]},["app",{"sourceInterval":[385,397]},"TopLevelTerm_inline",[]],["app",{"sourceInterval":[415,418]},"Seq",[]]]],"OverrideRuleBody":["define",{"sourceInterval":[422,491]},null,[],["seq",{"sourceInterval":[445,491]},["opt",{"sourceInterval":[445,449]},["terminal",{"sourceInterval":[445,448]},"|"]],["app",{"sourceInterval":[450,491]},"NonemptyListOf",[["app",{"sourceInterval":[465,485]},"OverrideTopLevelTerm",[]],["terminal",{"sourceInterval":[487,490]},"|"]]]]],"OverrideTopLevelTerm_superSplice":["define",{"sourceInterval":[522,543]},null,[],["terminal",{"sourceInterval":[522,527]},"..."]],"OverrideTopLevelTerm":["define",{"sourceInterval":[495,562]},null,[],["alt",{"sourceInterval":[522,562]},["app",{"sourceInterval":[522,527]},"OverrideTopLevelTerm_superSplice",[]],["app",{"sourceInterval":[550,562]},"TopLevelTerm",[]]]],"Formals":["define",{"sourceInterval":[566,606]},null,[],["seq",{"sourceInterval":[580,606]},["terminal",{"sourceInterval":[580,583]},"<"],["app",{"sourceInterval":[584,602]},"ListOf",[["app",{"sourceInterval":[591,596]},"ident",[]],["terminal",{"sourceInterval":[598,601]},","]]],["terminal",{"sourceInterval":[603,606]},">"]]],"Params":["define",{"sourceInterval":[610,647]},null,[],["seq",{"sourceInterval":[623,647]},["terminal",{"sourceInterval":[623,626]},"<"],["app",{"sourceInterval":[627,643]},"ListOf",[["app",{"sourceInterval":[634,637]},"Seq",[]],["terminal",{"sourceInterval":[639,642]},","]]],["terminal",{"sourceInterval":[644,647]},">"]]],"Alt":["define",{"sourceInterval":[651,685]},null,[],["app",{"sourceInterval":[661,685]},"NonemptyListOf",[["app",{"sourceInterval":[676,679]},"Seq",[]],["terminal",{"sourceInterval":[681,684]},"|"]]]],"Seq":["define",{"sourceInterval":[689,704]},null,[],["star",{"sourceInterval":[699,704]},["app",{"sourceInterval":[699,703]},"Iter",[]]]],"Iter_star":["define",{"sourceInterval":[719,736]},null,[],["seq",{"sourceInterval":[719,727]},["app",{"sourceInterval":[719,723]},"Pred",[]],["terminal",{"sourceInterval":[724,727]},"*"]]],"Iter_plus":["define",{"sourceInterval":[743,760]},null,[],["seq",{"sourceInterval":[743,751]},["app",{"sourceInterval":[743,747]},"Pred",[]],["terminal",{"sourceInterval":[748,751]},"+"]]],"Iter_opt":["define",{"sourceInterval":[767,783]},null,[],["seq",{"sourceInterval":[767,775]},["app",{"sourceInterval":[767,771]},"Pred",[]],["terminal",{"sourceInterval":[772,775]},"?"]]],"Iter":["define",{"sourceInterval":[708,794]},null,[],["alt",{"sourceInterval":[719,794]},["app",{"sourceInterval":[719,727]},"Iter_star",[]],["app",{"sourceInterval":[743,751]},"Iter_plus",[]],["app",{"sourceInterval":[767,775]},"Iter_opt",[]],["app",{"sourceInterval":[790,794]},"Pred",[]]]],"Pred_not":["define",{"sourceInterval":[809,824]},null,[],["seq",{"sourceInterval":[809,816]},["terminal",{"sourceInterval":[809,812]},"~"],["app",{"sourceInterval":[813,816]},"Lex",[]]]],"Pred_lookahead":["define",{"sourceInterval":[831,852]},null,[],["seq",{"sourceInterval":[831,838]},["terminal",{"sourceInterval":[831,834]},"&"],["app",{"sourceInterval":[835,838]},"Lex",[]]]],"Pred":["define",{"sourceInterval":[798,862]},null,[],["alt",{"sourceInterval":[809,862]},["app",{"sourceInterval":[809,816]},"Pred_not",[]],["app",{"sourceInterval":[831,838]},"Pred_lookahead",[]],["app",{"sourceInterval":[859,862]},"Lex",[]]]],"Lex_lex":["define",{"sourceInterval":[876,892]},null,[],["seq",{"sourceInterval":[876,884]},["terminal",{"sourceInterval":[876,879]},"#"],["app",{"sourceInterval":[880,884]},"Base",[]]]],"Lex":["define",{"sourceInterval":[866,903]},null,[],["alt",{"sourceInterval":[876,903]},["app",{"sourceInterval":[876,884]},"Lex_lex",[]],["app",{"sourceInterval":[899,903]},"Base",[]]]],"Base_application":["define",{"sourceInterval":[918,979]},null,[],["seq",{"sourceInterval":[918,963]},["app",{"sourceInterval":[918,923]},"ident",[]],["opt",{"sourceInterval":[924,931]},["app",{"sourceInterval":[924,930]},"Params",[]]],["not",{"sourceInterval":[932,963]},["alt",{"sourceInterval":[934,962]},["seq",{"sourceInterval":[934,948]},["opt",{"sourceInterval":[934,944]},["app",{"sourceInterval":[934,943]},"ruleDescr",[]]],["terminal",{"sourceInterval":[945,948]},"="]],["terminal",{"sourceInterval":[951,955]},":="],["terminal",{"sourceInterval":[958,962]},"+="]]]]],"Base_range":["define",{"sourceInterval":[986,1041]},null,[],["seq",{"sourceInterval":[986,1022]},["app",{"sourceInterval":[986,1001]},"oneCharTerminal",[]],["terminal",{"sourceInterval":[1002,1006]},".."],["app",{"sourceInterval":[1007,1022]},"oneCharTerminal",[]]]],"Base_terminal":["define",{"sourceInterval":[1048,1106]},null,[],["app",{"sourceInterval":[1048,1056]},"terminal",[]]],"Base_paren":["define",{"sourceInterval":[1113,1168]},null,[],["seq",{"sourceInterval":[1113,1124]},["terminal",{"sourceInterval":[1113,1116]},"("],["app",{"sourceInterval":[1117,1120]},"Alt",[]],["terminal",{"sourceInterval":[1121,1124]},")"]]],"Base":["define",{"sourceInterval":[907,1168]},null,[],["alt",{"sourceInterval":[918,1168]},["app",{"sourceInterval":[918,963]},"Base_application",[]],["app",{"sourceInterval":[986,1022]},"Base_range",[]],["app",{"sourceInterval":[1048,1056]},"Base_terminal",[]],["app",{"sourceInterval":[1113,1124]},"Base_paren",[]]]],"ruleDescr":["define",{"sourceInterval":[1172,1231]},"a rule description",[],["seq",{"sourceInterval":[1210,1231]},["terminal",{"sourceInterval":[1210,1213]},"("],["app",{"sourceInterval":[1214,1227]},"ruleDescrText",[]],["terminal",{"sourceInterval":[1228,1231]},")"]]],"ruleDescrText":["define",{"sourceInterval":[1235,1266]},null,[],["star",{"sourceInterval":[1255,1266]},["seq",{"sourceInterval":[1256,1264]},["not",{"sourceInterval":[1256,1260]},["terminal",{"sourceInterval":[1257,1260]},")"]],["app",{"sourceInterval":[1261,1264]},"any",[]]]]],"caseName":["define",{"sourceInterval":[1270,1338]},null,[],["seq",{"sourceInterval":[1285,1338]},["terminal",{"sourceInterval":[1285,1289]},"--"],["star",{"sourceInterval":[1290,1304]},["seq",{"sourceInterval":[1291,1302]},["not",{"sourceInterval":[1291,1296]},["terminal",{"sourceInterval":[1292,1296]},"\n"]],["app",{"sourceInterval":[1297,1302]},"space",[]]]],["app",{"sourceInterval":[1305,1309]},"name",[]],["star",{"sourceInterval":[1310,1324]},["seq",{"sourceInterval":[1311,1322]},["not",{"sourceInterval":[1311,1316]},["terminal",{"sourceInterval":[1312,1316]},"\n"]],["app",{"sourceInterval":[1317,1322]},"space",[]]]],["alt",{"sourceInterval":[1326,1337]},["terminal",{"sourceInterval":[1326,1330]},"\n"],["lookahead",{"sourceInterval":[1333,1337]},["terminal",{"sourceInterval":[1334,1337]},"}"]]]]],"name":["define",{"sourceInterval":[1342,1382]},"a name",[],["seq",{"sourceInterval":[1363,1382]},["app",{"sourceInterval":[1363,1372]},"nameFirst",[]],["star",{"sourceInterval":[1373,1382]},["app",{"sourceInterval":[1373,1381]},"nameRest",[]]]]],"nameFirst":["define",{"sourceInterval":[1386,1418]},null,[],["alt",{"sourceInterval":[1402,1418]},["terminal",{"sourceInterval":[1402,1405]},"_"],["app",{"sourceInterval":[1412,1418]},"letter",[]]]],"nameRest":["define",{"sourceInterval":[1422,1452]},null,[],["alt",{"sourceInterval":[1437,1452]},["terminal",{"sourceInterval":[1437,1440]},"_"],["app",{"sourceInterval":[1447,1452]},"alnum",[]]]],"ident":["define",{"sourceInterval":[1456,1489]},"an identifier",[],["app",{"sourceInterval":[1485,1489]},"name",[]]],"terminal":["define",{"sourceInterval":[1493,1531]},null,[],["seq",{"sourceInterval":[1508,1531]},["terminal",{"sourceInterval":[1508,1512]},"\""],["star",{"sourceInterval":[1513,1526]},["app",{"sourceInterval":[1513,1525]},"terminalChar",[]]],["terminal",{"sourceInterval":[1527,1531]},"\""]]],"oneCharTerminal":["define",{"sourceInterval":[1535,1579]},null,[],["seq",{"sourceInterval":[1557,1579]},["terminal",{"sourceInterval":[1557,1561]},"\""],["app",{"sourceInterval":[1562,1574]},"terminalChar",[]],["terminal",{"sourceInterval":[1575,1579]},"\""]]],"terminalChar":["define",{"sourceInterval":[1583,1660]},null,[],["alt",{"sourceInterval":[1602,1660]},["app",{"sourceInterval":[1602,1612]},"escapeChar",[]],["seq",{"sourceInterval":[1621,1660]},["not",{"sourceInterval":[1621,1626]},["terminal",{"sourceInterval":[1622,1626]},"\\"]],["not",{"sourceInterval":[1627,1632]},["terminal",{"sourceInterval":[1628,1632]},"\""]],["not",{"sourceInterval":[1633,1638]},["terminal",{"sourceInterval":[1634,1638]},"\n"]],["range",{"sourceInterval":[1639,1660]},"\u0000","􏿿"]]]],"escapeChar_backslash":["define",{"sourceInterval":[1703,1758]},null,[],["terminal",{"sourceInterval":[1703,1709]},"\\\\"]],"escapeChar_doubleQuote":["define",{"sourceInterval":[1765,1822]},null,[],["terminal",{"sourceInterval":[1765,1771]},"\\\""]],"escapeChar_singleQuote":["define",{"sourceInterval":[1829,1886]},null,[],["terminal",{"sourceInterval":[1829,1835]},"\\'"]],"escapeChar_backspace":["define",{"sourceInterval":[1893,1948]},null,[],["terminal",{"sourceInterval":[1893,1898]},"\\b"]],"escapeChar_lineFeed":["define",{"sourceInterval":[1955,2009]},null,[],["terminal",{"sourceInterval":[1955,1960]},"\\n"]],"escapeChar_carriageReturn":["define",{"sourceInterval":[2016,2076]},null,[],["terminal",{"sourceInterval":[2016,2021]},"\\r"]],"escapeChar_tab":["define",{"sourceInterval":[2083,2132]},null,[],["terminal",{"sourceInterval":[2083,2088]},"\\t"]],"escapeChar_unicodeCodePoint":["define",{"sourceInterval":[2139,2243]},null,[],["seq",{"sourceInterval":[2139,2221]},["terminal",{"sourceInterval":[2139,2145]},"\\u{"],["app",{"sourceInterval":[2146,2154]},"hexDigit",[]],["opt",{"sourceInterval":[2155,2164]},["app",{"sourceInterval":[2155,2163]},"hexDigit",[]]],["opt",{"sourceInterval":[2165,2174]},["app",{"sourceInterval":[2165,2173]},"hexDigit",[]]],["opt",{"sourceInterval":[2188,2197]},["app",{"sourceInterval":[2188,2196]},"hexDigit",[]]],["opt",{"sourceInterval":[2198,2207]},["app",{"sourceInterval":[2198,2206]},"hexDigit",[]]],["opt",{"sourceInterval":[2208,2217]},["app",{"sourceInterval":[2208,2216]},"hexDigit",[]]],["terminal",{"sourceInterval":[2218,2221]},"}"]]],"escapeChar_unicodeEscape":["define",{"sourceInterval":[2250,2309]},null,[],["seq",{"sourceInterval":[2250,2291]},["terminal",{"sourceInterval":[2250,2255]},"\\u"],["app",{"sourceInterval":[2256,2264]},"hexDigit",[]],["app",{"sourceInterval":[2265,2273]},"hexDigit",[]],["app",{"sourceInterval":[2274,2282]},"hexDigit",[]],["app",{"sourceInterval":[2283,2291]},"hexDigit",[]]]],"escapeChar_hexEscape":["define",{"sourceInterval":[2316,2371]},null,[],["seq",{"sourceInterval":[2316,2339]},["terminal",{"sourceInterval":[2316,2321]},"\\x"],["app",{"sourceInterval":[2322,2330]},"hexDigit",[]],["app",{"sourceInterval":[2331,2339]},"hexDigit",[]]]],"escapeChar":["define",{"sourceInterval":[1664,2371]},"an escape sequence",[],["alt",{"sourceInterval":[1703,2371]},["app",{"sourceInterval":[1703,1709]},"escapeChar_backslash",[]],["app",{"sourceInterval":[1765,1771]},"escapeChar_doubleQuote",[]],["app",{"sourceInterval":[1829,1835]},"escapeChar_singleQuote",[]],["app",{"sourceInterval":[1893,1898]},"escapeChar_backspace",[]],["app",{"sourceInterval":[1955,1960]},"escapeChar_lineFeed",[]],["app",{"sourceInterval":[2016,2021]},"escapeChar_carriageReturn",[]],["app",{"sourceInterval":[2083,2088]},"escapeChar_tab",[]],["app",{"sourceInterval":[2139,2221]},"escapeChar_unicodeCodePoint",[]],["app",{"sourceInterval":[2250,2291]},"escapeChar_unicodeEscape",[]],["app",{"sourceInterval":[2316,2339]},"escapeChar_hexEscape",[]]]],"space":["extend",{"sourceInterval":[2375,2394]},null,[],["app",{"sourceInterval":[2387,2394]},"comment",[]]],"comment_singleLine":["define",{"sourceInterval":[2412,2458]},null,[],["seq",{"sourceInterval":[2412,2443]},["terminal",{"sourceInterval":[2412,2416]},"//"],["star",{"sourceInterval":[2417,2429]},["seq",{"sourceInterval":[2418,2427]},["not",{"sourceInterval":[2418,2423]},["terminal",{"sourceInterval":[2419,2423]},"\n"]],["app",{"sourceInterval":[2424,2427]},"any",[]]]],["lookahead",{"sourceInterval":[2430,2443]},["alt",{"sourceInterval":[2432,2442]},["terminal",{"sourceInterval":[2432,2436]},"\n"],["app",{"sourceInterval":[2439,2442]},"end",[]]]]]],"comment_multiLine":["define",{"sourceInterval":[2465,2501]},null,[],["seq",{"sourceInterval":[2465,2487]},["terminal",{"sourceInterval":[2465,2469]},"/*"],["star",{"sourceInterval":[2470,2482]},["seq",{"sourceInterval":[2471,2480]},["not",{"sourceInterval":[2471,2476]},["terminal",{"sourceInterval":[2472,2476]},"*/"]],["app",{"sourceInterval":[2477,2480]},"any",[]]]],["terminal",{"sourceInterval":[2483,2487]},"*/"]]],"comment":["define",{"sourceInterval":[2398,2501]},null,[],["alt",{"sourceInterval":[2412,2501]},["app",{"sourceInterval":[2412,2443]},"comment_singleLine",[]],["app",{"sourceInterval":[2465,2487]},"comment_multiLine",[]]]],"tokens":["define",{"sourceInterval":[2505,2520]},null,[],["star",{"sourceInterval":[2514,2520]},["app",{"sourceInterval":[2514,2519]},"token",[]]]],"token":["define",{"sourceInterval":[2524,2600]},null,[],["alt",{"sourceInterval":[2532,2600]},["app",{"sourceInterval":[2532,2540]},"caseName",[]],["app",{"sourceInterval":[2543,2550]},"comment",[]],["app",{"sourceInterval":[2553,2558]},"ident",[]],["app",{"sourceInterval":[2561,2569]},"operator",[]],["app",{"sourceInterval":[2572,2583]},"punctuation",[]],["app",{"sourceInterval":[2586,2594]},"terminal",[]],["app",{"sourceInterval":[2597,2600]},"any",[]]]],"operator":["define",{"sourceInterval":[2604,2669]},null,[],["alt",{"sourceInterval":[2615,2669]},["terminal",{"sourceInterval":[2615,2619]},"<:"],["terminal",{"sourceInterval":[2622,2625]},"="],["terminal",{"sourceInterval":[2628,2632]},":="],["terminal",{"sourceInterval":[2635,2639]},"+="],["terminal",{"sourceInterval":[2642,2645]},"*"],["terminal",{"sourceInterval":[2648,2651]},"+"],["terminal",{"sourceInterval":[2654,2657]},"?"],["terminal",{"sourceInterval":[2660,2663]},"~"],["terminal",{"sourceInterval":[2666,2669]},"&"]]],"punctuation":["define",{"sourceInterval":[2673,2709]},null,[],["alt",{"sourceInterval":[2687,2709]},["terminal",{"sourceInterval":[2687,2690]},"<"],["terminal",{"sourceInterval":[2693,2696]},">"],["terminal",{"sourceInterval":[2699,2702]},","],["terminal",{"sourceInterval":[2705,2709]},"--"]]]}]);

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const Builder = Builder_1;
const Grammar = Grammar_1;
const Namespace = Namespace_1;
const common = common$l;
const errors = errors$9;
const pexprs = pexprs$6;
const util = util$7;
const version = version$1;
const {makeRecipe} = makeRecipe$5;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

// The metagrammar, i.e. the grammar for Ohm grammars. Initialized at the
// bottom of this file because loading the grammar requires Ohm itself.
let ohmGrammar;

const superSplicePlaceholder = Object.create(pexprs.PExpr.prototype);

const isBuffer = obj =>
  !!obj.constructor &&
  typeof obj.constructor.isBuffer === 'function' &&
  obj.constructor.isBuffer(obj);

// Returns a Grammar instance (i.e., an object with a `match` method) for
// `tree`, which is the concrete syntax tree of a user-written grammar.
// The grammar will be assigned into `namespace` under the name of the grammar
// as specified in the source.
function buildGrammar(match, namespace, optOhmGrammarForTesting) {
  const builder = new Builder();
  let decl;
  let currentRuleName;
  let currentRuleFormals;
  let overriding = false;
  const metaGrammar = optOhmGrammarForTesting || ohmGrammar;

  // A visitor that produces a Grammar instance from the CST.
  const helpers = metaGrammar.createSemantics().addOperation('visit', {
    Grammars(grammarIter) {
      return grammarIter.children.map(c => c.visit());
    },
    Grammar(id, s, _open, rules, _close) {
      const grammarName = id.visit();
      decl = builder.newGrammar(grammarName, namespace);
      s.child(0) && s.child(0).visit();
      rules.children.map(c => c.visit());
      const g = decl.build();
      g.source = this.source.trimmed();
      if (grammarName in namespace) {
        throw errors.duplicateGrammarDeclaration(g, namespace);
      }
      namespace[grammarName] = g;
      return g;
    },

    SuperGrammar(_, n) {
      const superGrammarName = n.visit();
      if (superGrammarName === 'null') {
        decl.withSuperGrammar(null);
      } else {
        if (!namespace || !(superGrammarName in namespace)) {
          throw errors.undeclaredGrammar(superGrammarName, namespace, n.source);
        }
        decl.withSuperGrammar(namespace[superGrammarName]);
      }
    },

    Rule_define(n, fs, d, _, b) {
      currentRuleName = n.visit();
      currentRuleFormals = fs.children.map(c => c.visit())[0] || [];
      // If there is no default start rule yet, set it now. This must be done before visiting
      // the body, because it might contain an inline rule definition.
      if (!decl.defaultStartRule && decl.ensureSuperGrammar() !== Grammar.ProtoBuiltInRules) {
        decl.withDefaultStartRule(currentRuleName);
      }
      const body = b.visit();
      const description = d.children.map(c => c.visit())[0];
      const source = this.source.trimmed();
      return decl.define(currentRuleName, currentRuleFormals, body, description, source);
    },
    Rule_override(n, fs, _, b) {
      currentRuleName = n.visit();
      currentRuleFormals = fs.children.map(c => c.visit())[0] || [];

      const source = this.source.trimmed();
      decl.ensureSuperGrammarRuleForOverriding(currentRuleName, source);

      overriding = true;
      const body = b.visit();
      overriding = false;
      return decl.override(currentRuleName, currentRuleFormals, body, null, source);
    },
    Rule_extend(n, fs, _, b) {
      currentRuleName = n.visit();
      currentRuleFormals = fs.children.map(c => c.visit())[0] || [];
      const body = b.visit();
      const source = this.source.trimmed();
      return decl.extend(currentRuleName, currentRuleFormals, body, null, source);
    },
    RuleBody(_, terms) {
      return builder.alt(...terms.visit()).withSource(this.source);
    },
    OverrideRuleBody(_, terms) {
      const args = terms.visit();

      // Check if the super-splice operator (`...`) appears in the terms.
      const expansionPos = args.indexOf(superSplicePlaceholder);
      if (expansionPos >= 0) {
        const beforeTerms = args.slice(0, expansionPos);
        const afterTerms = args.slice(expansionPos + 1);

        // Ensure it appears no more than once.
        afterTerms.forEach(t => {
          if (t === superSplicePlaceholder) throw errors.multipleSuperSplices(t);
        });

        return new pexprs.Splice(
            decl.superGrammar,
            currentRuleName,
            beforeTerms,
            afterTerms
        ).withSource(this.source);
      } else {
        return builder.alt(...args).withSource(this.source);
      }
    },
    Formals(opointy, fs, cpointy) {
      return fs.visit();
    },

    Params(opointy, ps, cpointy) {
      return ps.visit();
    },

    Alt(seqs) {
      return builder.alt(...seqs.visit()).withSource(this.source);
    },

    TopLevelTerm_inline(b, n) {
      const inlineRuleName = currentRuleName + '_' + n.visit();
      const body = b.visit();
      const source = this.source.trimmed();
      const isNewRuleDeclaration = !(
        decl.superGrammar && decl.superGrammar.rules[inlineRuleName]
      );
      if (overriding && !isNewRuleDeclaration) {
        decl.override(inlineRuleName, currentRuleFormals, body, null, source);
      } else {
        decl.define(inlineRuleName, currentRuleFormals, body, null, source);
      }
      const params = currentRuleFormals.map(formal => builder.app(formal));
      return builder.app(inlineRuleName, params).withSource(body.source);
    },
    OverrideTopLevelTerm_superSplice(_) {
      return superSplicePlaceholder;
    },

    Seq(expr) {
      return builder.seq(...expr.children.map(c => c.visit())).withSource(this.source);
    },

    Iter_star(x, _) {
      return builder.star(x.visit()).withSource(this.source);
    },
    Iter_plus(x, _) {
      return builder.plus(x.visit()).withSource(this.source);
    },
    Iter_opt(x, _) {
      return builder.opt(x.visit()).withSource(this.source);
    },

    Pred_not(_, x) {
      return builder.not(x.visit()).withSource(this.source);
    },
    Pred_lookahead(_, x) {
      return builder.lookahead(x.visit()).withSource(this.source);
    },

    Lex_lex(_, x) {
      return builder.lex(x.visit()).withSource(this.source);
    },

    Base_application(rule, ps) {
      const params = ps.children.map(c => c.visit())[0] || [];
      return builder.app(rule.visit(), params).withSource(this.source);
    },
    Base_range(from, _, to) {
      return builder.range(from.visit(), to.visit()).withSource(this.source);
    },
    Base_terminal(expr) {
      return builder.terminal(expr.visit()).withSource(this.source);
    },
    Base_paren(open, x, close) {
      return x.visit();
    },

    ruleDescr(open, t, close) {
      return t.visit();
    },
    ruleDescrText(_) {
      return this.sourceString.trim();
    },

    caseName(_, space1, n, space2, end) {
      return n.visit();
    },

    name(first, rest) {
      return this.sourceString;
    },
    nameFirst(expr) {},
    nameRest(expr) {},

    terminal(open, cs, close) {
      return cs.children.map(c => c.visit()).join('');
    },

    oneCharTerminal(open, c, close) {
      return c.visit();
    },

    escapeChar(c) {
      try {
        return common.unescapeCodePoint(this.sourceString);
      } catch (err) {
        if (err instanceof RangeError && err.message.startsWith('Invalid code point ')) {
          throw errors.invalidCodePoint(c);
        }
        throw err; // Rethrow
      }
    },

    NonemptyListOf(x, _, xs) {
      return [x.visit()].concat(xs.children.map(c => c.visit()));
    },
    EmptyListOf() {
      return [];
    },

    _terminal() {
      return this.sourceString;
    },
  });
  return helpers(match).visit();
}

function compileAndLoad(source, namespace) {
  const m = ohmGrammar.match(source, 'Grammars');
  if (m.failed()) {
    throw errors.grammarSyntaxError(m);
  }
  return buildGrammar(m, namespace);
}

function grammar(source, optNamespace) {
  const ns = grammars(source, optNamespace);

  // Ensure that the source contained no more than one grammar definition.
  const grammarNames = Object.keys(ns);
  if (grammarNames.length === 0) {
    throw new Error('Missing grammar definition');
  } else if (grammarNames.length > 1) {
    const secondGrammar = ns[grammarNames[1]];
    const interval = secondGrammar.source;
    throw new Error(
        util.getLineAndColumnMessage(interval.sourceString, interval.startIdx) +
        'Found more than one grammar definition -- use ohm.grammars() instead.'
    );
  }
  return ns[grammarNames[0]]; // Return the one and only grammar.
}

function grammars(source, optNamespace) {
  const ns = Namespace.extend(Namespace.asNamespace(optNamespace));
  if (typeof source !== 'string') {
    // For convenience, detect Node.js Buffer objects and automatically call toString().
    if (isBuffer(source)) {
      source = source.toString();
    } else {
      throw new TypeError(
          'Expected string as first argument, got ' + common.unexpectedObjToString(source)
      );
    }
  }
  compileAndLoad(source, ns);
  return ns;
}

function grammarFromScriptElement(optNode) {
  throw new Error(
      'grammarFromScriptElement was removed in Ohm v16.0. See https://ohmjs.org/d/gfs for more info.'
  );
}

function grammarsFromScriptElements(optNodeOrNodeList) {
  throw new Error(
      'grammarsFromScriptElements was removed in Ohm v16.0. See https://ohmjs.org/d/gfs for more info.'
  );
}

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

// Stuff that users should know about
main$1.exports = {
  createNamespace: Namespace.createNamespace,
  grammar,
  grammars,
  grammarFromScriptElement,
  grammarsFromScriptElements,
  makeRecipe,
  ohmGrammar: null, // Initialized below, after Grammar.BuiltInRules.
  pexprs,
  util,
  version,
};

// Stuff for testing, etc.
main$1.exports._buildGrammar = buildGrammar;

// Late initialization for stuff that is bootstrapped.


util.announceBuiltInRules(Grammar.BuiltInRules);

main$1.exports.ohmGrammar = ohmGrammar = ohmGrammar$1;
Grammar.initApplicationParser(ohmGrammar, buildGrammar);

var ohm = main$1.exports;

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const {assert} = common$l;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

// Helpers

function getProp(name, thing, fn) {
  return fn(thing[name]);
}

function mapProp(name, thing, fn) {
  return thing[name].map(fn);
}

// Returns a function that will walk a single property of a node.
// `descriptor` is a string indicating the property name, optionally ending
// with '[]' (e.g., 'children[]').
function getPropWalkFn(descriptor) {
  const parts = descriptor.split(/ ?\[\]/);
  if (parts.length === 2) {
    return mapProp.bind(null, parts[0]);
  }
  return getProp.bind(null, descriptor);
}

function getProps(walkFns, thing, fn) {
  return walkFns.map(walkFn => walkFn(thing, fn));
}

function getWalkFn(shape) {
  if (typeof shape === 'string') {
    return getProps.bind(null, [getPropWalkFn(shape)]);
  } else if (Array.isArray(shape)) {
    return getProps.bind(null, shape.map(getPropWalkFn));
  } else {
    assert(typeof shape === 'function', 'Expected a string, Array, or function');
    assert(shape.length === 2, 'Expected a function of arity 2, got ' + shape.length);
    return shape;
  }
}

function isRestrictedIdentifier(str) {
  return /^[a-zA-Z_][0-9a-zA-Z_]*$/.test(str);
}

function trim(s) {
  return s.trim();
}

function parseSignature(sig) {
  const parts = sig.split(/[()]/).map(trim);
  if (parts.length === 3 && parts[2] === '') {
    const name = parts[0];
    let params = [];
    if (parts[1].length > 0) {
      params = parts[1].split(',').map(trim);
    }
    if (isRestrictedIdentifier(name) && params.every(isRestrictedIdentifier)) {
      return {name, formals: params};
    }
  }
  throw new Error('Invalid operation signature: ' + sig);
}

/*
  A VisitorFamily contains a set of recursive operations that are defined over some kind of
  tree structure. The `config` parameter specifies how to walk the tree:
  - 'getTag' is function which, given a node in the tree, returns the node's 'tag' (type)
  - 'shapes' an object that maps from a tag to a value that describes how to recursively
    evaluate the operation for nodes of that type. The value can be:
    * a string indicating the property name that holds that node's only child
    * an Array of property names (or an empty array indicating a leaf type), or
    * a function taking two arguments (node, fn), and returning an Array which is the result
      of apply `fn` to each of the node's children.
 */
function VisitorFamily(config) {
  this._shapes = config.shapes;
  this._getTag = config.getTag;

  this.Adapter = function(thing, family) {
    this._adaptee = thing;
    this._family = family;
  };
  this.Adapter.prototype.valueOf = function() {
    throw new Error('heeey!');
  };
  this.operations = {};

  this._arities = Object.create(null);
  this._getChildren = Object.create(null);

  Object.keys(this._shapes).forEach(k => {
    const shape = this._shapes[k];
    this._getChildren[k] = getWalkFn(shape);

    // A function means the arity isn't fixed, so don't put an entry in the arity map.
    if (typeof shape !== 'function') {
      this._arities[k] = Array.isArray(shape) ? shape.length : 1;
    }
  });
  this._wrap = thing => new this.Adapter(thing, this);
}

VisitorFamily.prototype.wrap = function(thing) {
  return this._wrap(thing);
};

VisitorFamily.prototype._checkActionDict = function(dict) {
  Object.keys(dict).forEach(k => {
    assert(k in this._getChildren, "Unrecognized action name '" + k + "'");
    const action = dict[k];
    assert(typeof action === 'function', "Key '" + k + "': expected function, got " + action);
    if (k in this._arities) {
      const expected = this._arities[k];
      const actual = dict[k].length;
      assert(
          actual === expected,
          "Action '" + k + "' has the wrong arity: expected " + expected + ', got ' + actual
      );
    }
  });
};

VisitorFamily.prototype.addOperation = function(signature, actions) {
  const sig = parseSignature(signature);
  const {name} = sig;
  this._checkActionDict(actions);
  this.operations[name] = {
    name,
    formals: sig.formals,
    actions,
  };

  const family = this;
  this.Adapter.prototype[name] = function(...args) {
    const tag = family._getTag(this._adaptee);
    assert(tag in family._getChildren, "getTag returned unrecognized tag '" + tag + "'");
    assert(tag in actions, "No action for '" + tag + "' in operation '" + name + "'");

    // Create an "arguments object" from the arguments that were passed to this
    // operation / attribute.
    const argsObj = Object.create(null);
    for (const [i, val] of Object.entries(args)) {
      argsObj[sig.formals[i]] = val;
    }

    const oldArgs = this.args;
    this.args = argsObj;
    const ans = actions[tag].apply(
        this,
        family._getChildren[tag](this._adaptee, family._wrap)
    );
    this.args = oldArgs;
    return ans;
  };
  return this;
};

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var VisitorFamily_1 = VisitorFamily;

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

const defaultOperation = {
  _terminal() {
    return this.sourceString;
  },

  _nonterminal(...children) {
    const {ctorName} = this._node;
    const {mapping} = this.args;

    // without customization
    if (!Object.prototype.hasOwnProperty.call(mapping, ctorName)) {
      // lexical rule
      if (this.isLexical()) {
        return this.sourceString;
      }

      // singular node (e.g. only surrounded by literals or lookaheads)
      const realChildren = children.filter(child => !child.isTerminal());
      if (realChildren.length === 1) {
        return realChildren[0].toAST(mapping);
      }

      // rest: terms with multiple children
    }

    // direct forward
    if (typeof mapping[ctorName] === 'number') {
      return children[mapping[ctorName]].toAST(mapping);
    }

    // named/mapped children or unnamed children ('0', '1', '2', ...)
    const propMap = mapping[ctorName] || children;
    const node = {
      type: ctorName,
    };
    // eslint-disable-next-line guard-for-in
    for (const prop in propMap) {
      const mappedProp = mapping[ctorName] && mapping[ctorName][prop];
      if (typeof mappedProp === 'number') {
        // direct forward
        node[prop] = children[mappedProp].toAST(mapping);
      } else if (
        typeof mappedProp === 'string' ||
        typeof mappedProp === 'boolean' ||
        mappedProp === null
      ) {
        // primitive value
        node[prop] = mappedProp;
      } else if (typeof mappedProp === 'object' && mappedProp instanceof Number) {
        // primitive number (must be unboxed)
        node[prop] = Number(mappedProp);
      } else if (typeof mappedProp === 'function') {
        // computed value
        node[prop] = mappedProp.call(this, children);
      } else if (mappedProp === undefined) {
        if (children[prop] && !children[prop].isTerminal()) {
          node[prop] = children[prop].toAST(mapping);
        } else {
          // delete predefined 'type' properties, like 'type', if explicitely removed
          delete node[prop];
        }
      }
    }
    return node;
  },

  _iter(...children) {
    if (this._node.isOptional()) {
      if (this.numChildren === 0) {
        return null;
      } else {
        return children[0].toAST(this.args.mapping);
      }
    }

    return children.map(function(child) {
      return child.toAST(this.args.mapping);
    }, this);
  },

  NonemptyListOf(first, sep, rest) {
    return [first.toAST(this.args.mapping)].concat(rest.toAST(this.args.mapping));
  },

  EmptyListOf() {
    return [];
  },
};

// Returns a plain JavaScript object that includes an abstract syntax tree (AST)
// for the given match result `res` containg a concrete syntax tree (CST) and grammar.
// The optional `mapping` parameter can be used to customize how the nodes of the CST
// are mapped to the AST (see /doc/extras.md#toastmatchresult-mapping).
function toAST(res, mapping) {
  if (typeof res.failed !== 'function' || res.failed()) {
    throw new Error('toAST() expects a succesful MatchResult as first parameter');
  }

  mapping = Object.assign({}, mapping);
  const operation = Object.assign({}, defaultOperation);
  for (const termName in mapping) {
    if (typeof mapping[termName] === 'function') {
      operation[termName] = mapping[termName];
      delete mapping[termName];
    }
  }
  const g = res._cst.grammar;
  const s = g.createSemantics().addOperation('toAST(mapping)', operation);
  return s(res).toAST(mapping);
}

// Returns a semantics containg the toAST(mapping) operation for the given grammar g.
function semanticsForToAST(g) {
  if (typeof g.createSemantics !== 'function') {
    throw new Error('semanticsToAST() expects a Grammar as parameter');
  }

  return g.createSemantics().addOperation('toAST(mapping)', defaultOperation);
}

var semanticsToAST = {
  helper: toAST,
  semantics: semanticsForToAST,
};

var extras = {
  VisitorFamily: VisitorFamily_1,
  semanticsForToAST: semanticsToAST.semantics,
  toAST: semanticsToAST.helper,
};




/***/ }),

/***/ "./node_modules/ohm-js/extras/VisitorFamily.js":
/*!*****************************************************!*\
  !*** ./node_modules/ohm-js/extras/VisitorFamily.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const {assert} = __webpack_require__(/*! ../src/common */ "./node_modules/ohm-js/src/common.js");

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

// Helpers

function getProp(name, thing, fn) {
  return fn(thing[name]);
}

function mapProp(name, thing, fn) {
  return thing[name].map(fn);
}

// Returns a function that will walk a single property of a node.
// `descriptor` is a string indicating the property name, optionally ending
// with '[]' (e.g., 'children[]').
function getPropWalkFn(descriptor) {
  const parts = descriptor.split(/ ?\[\]/);
  if (parts.length === 2) {
    return mapProp.bind(null, parts[0]);
  }
  return getProp.bind(null, descriptor);
}

function getProps(walkFns, thing, fn) {
  return walkFns.map(walkFn => walkFn(thing, fn));
}

function getWalkFn(shape) {
  if (typeof shape === 'string') {
    return getProps.bind(null, [getPropWalkFn(shape)]);
  } else if (Array.isArray(shape)) {
    return getProps.bind(null, shape.map(getPropWalkFn));
  } else {
    assert(typeof shape === 'function', 'Expected a string, Array, or function');
    assert(shape.length === 2, 'Expected a function of arity 2, got ' + shape.length);
    return shape;
  }
}

function isRestrictedIdentifier(str) {
  return /^[a-zA-Z_][0-9a-zA-Z_]*$/.test(str);
}

function trim(s) {
  return s.trim();
}

function parseSignature(sig) {
  const parts = sig.split(/[()]/).map(trim);
  if (parts.length === 3 && parts[2] === '') {
    const name = parts[0];
    let params = [];
    if (parts[1].length > 0) {
      params = parts[1].split(',').map(trim);
    }
    if (isRestrictedIdentifier(name) && params.every(isRestrictedIdentifier)) {
      return {name, formals: params};
    }
  }
  throw new Error('Invalid operation signature: ' + sig);
}

/*
  A VisitorFamily contains a set of recursive operations that are defined over some kind of
  tree structure. The `config` parameter specifies how to walk the tree:
  - 'getTag' is function which, given a node in the tree, returns the node's 'tag' (type)
  - 'shapes' an object that maps from a tag to a value that describes how to recursively
    evaluate the operation for nodes of that type. The value can be:
    * a string indicating the property name that holds that node's only child
    * an Array of property names (or an empty array indicating a leaf type), or
    * a function taking two arguments (node, fn), and returning an Array which is the result
      of apply `fn` to each of the node's children.
 */
function VisitorFamily(config) {
  this._shapes = config.shapes;
  this._getTag = config.getTag;

  this.Adapter = function(thing, family) {
    this._adaptee = thing;
    this._family = family;
  };
  this.Adapter.prototype.valueOf = function() {
    throw new Error('heeey!');
  };
  this.operations = {};

  this._arities = Object.create(null);
  this._getChildren = Object.create(null);

  Object.keys(this._shapes).forEach(k => {
    const shape = this._shapes[k];
    this._getChildren[k] = getWalkFn(shape);

    // A function means the arity isn't fixed, so don't put an entry in the arity map.
    if (typeof shape !== 'function') {
      this._arities[k] = Array.isArray(shape) ? shape.length : 1;
    }
  });
  this._wrap = thing => new this.Adapter(thing, this);
}

VisitorFamily.prototype.wrap = function(thing) {
  return this._wrap(thing);
};

VisitorFamily.prototype._checkActionDict = function(dict) {
  Object.keys(dict).forEach(k => {
    assert(k in this._getChildren, "Unrecognized action name '" + k + "'");
    const action = dict[k];
    assert(typeof action === 'function', "Key '" + k + "': expected function, got " + action);
    if (k in this._arities) {
      const expected = this._arities[k];
      const actual = dict[k].length;
      assert(
          actual === expected,
          "Action '" + k + "' has the wrong arity: expected " + expected + ', got ' + actual
      );
    }
  });
};

VisitorFamily.prototype.addOperation = function(signature, actions) {
  const sig = parseSignature(signature);
  const {name} = sig;
  this._checkActionDict(actions);
  this.operations[name] = {
    name,
    formals: sig.formals,
    actions,
  };

  const family = this;
  this.Adapter.prototype[name] = function(...args) {
    const tag = family._getTag(this._adaptee);
    assert(tag in family._getChildren, "getTag returned unrecognized tag '" + tag + "'");
    assert(tag in actions, "No action for '" + tag + "' in operation '" + name + "'");

    // Create an "arguments object" from the arguments that were passed to this
    // operation / attribute.
    const argsObj = Object.create(null);
    for (const [i, val] of Object.entries(args)) {
      argsObj[sig.formals[i]] = val;
    }

    const oldArgs = this.args;
    this.args = argsObj;
    const ans = actions[tag].apply(
        this,
        family._getChildren[tag](this._adaptee, family._wrap)
    );
    this.args = oldArgs;
    return ans;
  };
  return this;
};

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

module.exports = VisitorFamily;


/***/ }),

/***/ "./node_modules/ohm-js/extras/index.js":
/*!*********************************************!*\
  !*** ./node_modules/ohm-js/extras/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


module.exports = {
  VisitorFamily: __webpack_require__(/*! ./VisitorFamily */ "./node_modules/ohm-js/extras/VisitorFamily.js"),
  semanticsForToAST: (__webpack_require__(/*! ./semantics-toAST */ "./node_modules/ohm-js/extras/semantics-toAST.js").semantics),
  toAST: (__webpack_require__(/*! ./semantics-toAST */ "./node_modules/ohm-js/extras/semantics-toAST.js").helper),
};


/***/ }),

/***/ "./node_modules/ohm-js/extras/semantics-toAST.js":
/*!*******************************************************!*\
  !*** ./node_modules/ohm-js/extras/semantics-toAST.js ***!
  \*******************************************************/
/***/ ((module) => {

"use strict";


// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

const defaultOperation = {
  _terminal() {
    return this.sourceString;
  },

  _nonterminal(...children) {
    const {ctorName} = this._node;
    const {mapping} = this.args;

    // without customization
    if (!Object.prototype.hasOwnProperty.call(mapping, ctorName)) {
      // lexical rule
      if (this.isLexical()) {
        return this.sourceString;
      }

      // singular node (e.g. only surrounded by literals or lookaheads)
      const realChildren = children.filter(child => !child.isTerminal());
      if (realChildren.length === 1) {
        return realChildren[0].toAST(mapping);
      }

      // rest: terms with multiple children
    }

    // direct forward
    if (typeof mapping[ctorName] === 'number') {
      return children[mapping[ctorName]].toAST(mapping);
    }

    // named/mapped children or unnamed children ('0', '1', '2', ...)
    const propMap = mapping[ctorName] || children;
    const node = {
      type: ctorName,
    };
    // eslint-disable-next-line guard-for-in
    for (const prop in propMap) {
      const mappedProp = mapping[ctorName] && mapping[ctorName][prop];
      if (typeof mappedProp === 'number') {
        // direct forward
        node[prop] = children[mappedProp].toAST(mapping);
      } else if (
        typeof mappedProp === 'string' ||
        typeof mappedProp === 'boolean' ||
        mappedProp === null
      ) {
        // primitive value
        node[prop] = mappedProp;
      } else if (typeof mappedProp === 'object' && mappedProp instanceof Number) {
        // primitive number (must be unboxed)
        node[prop] = Number(mappedProp);
      } else if (typeof mappedProp === 'function') {
        // computed value
        node[prop] = mappedProp.call(this, children);
      } else if (mappedProp === undefined) {
        if (children[prop] && !children[prop].isTerminal()) {
          node[prop] = children[prop].toAST(mapping);
        } else {
          // delete predefined 'type' properties, like 'type', if explicitely removed
          delete node[prop];
        }
      }
    }
    return node;
  },

  _iter(...children) {
    if (this._node.isOptional()) {
      if (this.numChildren === 0) {
        return null;
      } else {
        return children[0].toAST(this.args.mapping);
      }
    }

    return children.map(function(child) {
      return child.toAST(this.args.mapping);
    }, this);
  },

  NonemptyListOf(first, sep, rest) {
    return [first.toAST(this.args.mapping)].concat(rest.toAST(this.args.mapping));
  },

  EmptyListOf() {
    return [];
  },
};

// Returns a plain JavaScript object that includes an abstract syntax tree (AST)
// for the given match result `res` containg a concrete syntax tree (CST) and grammar.
// The optional `mapping` parameter can be used to customize how the nodes of the CST
// are mapped to the AST (see /doc/extras.md#toastmatchresult-mapping).
function toAST(res, mapping) {
  if (typeof res.failed !== 'function' || res.failed()) {
    throw new Error('toAST() expects a succesful MatchResult as first parameter');
  }

  mapping = Object.assign({}, mapping);
  const operation = Object.assign({}, defaultOperation);
  for (const termName in mapping) {
    if (typeof mapping[termName] === 'function') {
      operation[termName] = mapping[termName];
      delete mapping[termName];
    }
  }
  const g = res._cst.grammar;
  const s = g.createSemantics().addOperation('toAST(mapping)', operation);
  return s(res).toAST(mapping);
}

// Returns a semantics containg the toAST(mapping) operation for the given grammar g.
function semanticsForToAST(g) {
  if (typeof g.createSemantics !== 'function') {
    throw new Error('semanticsToAST() expects a Grammar as parameter');
  }

  return g.createSemantics().addOperation('toAST(mapping)', defaultOperation);
}

module.exports = {
  helper: toAST,
  semantics: semanticsForToAST,
};


/***/ }),

/***/ "./node_modules/ohm-js/src/common.js":
/*!*******************************************!*\
  !*** ./node_modules/ohm-js/src/common.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


// --------------------------------------------------------------------
// Private Stuff
// --------------------------------------------------------------------

// Helpers

const escapeStringFor = {};
for (let c = 0; c < 128; c++) {
  escapeStringFor[c] = String.fromCharCode(c);
}
escapeStringFor["'".charCodeAt(0)] = "\\'";
escapeStringFor['"'.charCodeAt(0)] = '\\"';
escapeStringFor['\\'.charCodeAt(0)] = '\\\\';
escapeStringFor['\b'.charCodeAt(0)] = '\\b';
escapeStringFor['\f'.charCodeAt(0)] = '\\f';
escapeStringFor['\n'.charCodeAt(0)] = '\\n';
escapeStringFor['\r'.charCodeAt(0)] = '\\r';
escapeStringFor['\t'.charCodeAt(0)] = '\\t';
escapeStringFor['\u000b'.charCodeAt(0)] = '\\v';

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

exports.abstract = function(optMethodName) {
  const methodName = optMethodName || '';
  return function() {
    throw new Error(
        'this method ' +
        methodName +
        ' is abstract! ' +
        '(it has no implementation in class ' +
        this.constructor.name +
        ')'
    );
  };
};

exports.assert = function(cond, message) {
  if (!cond) {
    throw new Error(message || 'Assertion failed');
  }
};

// Define a lazily-computed, non-enumerable property named `propName`
// on the object `obj`. `getterFn` will be called to compute the value the
// first time the property is accessed.
exports.defineLazyProperty = function(obj, propName, getterFn) {
  let memo;
  Object.defineProperty(obj, propName, {
    get() {
      if (!memo) {
        memo = getterFn.call(this);
      }
      return memo;
    },
  });
};

exports.clone = function(obj) {
  if (obj) {
    return Object.assign({}, obj);
  }
  return obj;
};

exports.repeatFn = function(fn, n) {
  const arr = [];
  while (n-- > 0) {
    arr.push(fn());
  }
  return arr;
};

exports.repeatStr = function(str, n) {
  return new Array(n + 1).join(str);
};

exports.repeat = function(x, n) {
  return exports.repeatFn(() => x, n);
};

exports.getDuplicates = function(array) {
  const duplicates = [];
  for (let idx = 0; idx < array.length; idx++) {
    const x = array[idx];
    if (array.lastIndexOf(x) !== idx && duplicates.indexOf(x) < 0) {
      duplicates.push(x);
    }
  }
  return duplicates;
};

exports.copyWithoutDuplicates = function(array) {
  const noDuplicates = [];
  array.forEach(entry => {
    if (noDuplicates.indexOf(entry) < 0) {
      noDuplicates.push(entry);
    }
  });
  return noDuplicates;
};

exports.isSyntactic = function(ruleName) {
  const firstChar = ruleName[0];
  return firstChar === firstChar.toUpperCase();
};

exports.isLexical = function(ruleName) {
  return !exports.isSyntactic(ruleName);
};

exports.padLeft = function(str, len, optChar) {
  const ch = optChar || ' ';
  if (str.length < len) {
    return exports.repeatStr(ch, len - str.length) + str;
  }
  return str;
};

// StringBuffer

exports.StringBuffer = function() {
  this.strings = [];
};

exports.StringBuffer.prototype.append = function(str) {
  this.strings.push(str);
};

exports.StringBuffer.prototype.contents = function() {
  return this.strings.join('');
};

const escapeUnicode = str => String.fromCodePoint(parseInt(str, 16));

exports.unescapeCodePoint = function(s) {
  if (s.charAt(0) === '\\') {
    switch (s.charAt(1)) {
      case 'b':
        return '\b';
      case 'f':
        return '\f';
      case 'n':
        return '\n';
      case 'r':
        return '\r';
      case 't':
        return '\t';
      case 'v':
        return '\v';
      case 'x':
        return escapeUnicode(s.slice(2, 4));
      case 'u':
        return s.charAt(2) === '{' ?
          escapeUnicode(s.slice(3, -1)) :
          escapeUnicode(s.slice(2, 6));
      default:
        return s.charAt(1);
    }
  } else {
    return s;
  }
};

// Helper for producing a description of an unknown object in a safe way.
// Especially useful for error messages where an unexpected type of object was encountered.
exports.unexpectedObjToString = function(obj) {
  if (obj == null) {
    return String(obj);
  }
  const baseToString = Object.prototype.toString.call(obj);
  try {
    let typeName;
    if (obj.constructor && obj.constructor.name) {
      typeName = obj.constructor.name;
    } else if (baseToString.indexOf('[object ') === 0) {
      typeName = baseToString.slice(8, -1); // Extract e.g. "Array" from "[object Array]".
    } else {
      typeName = typeof obj;
    }
    return typeName + ': ' + JSON.stringify(String(obj));
  } catch (e) {
    return baseToString;
  }
};


/***/ }),

/***/ "prettier":
/*!*************************************************************************************************************!*\
  !*** external {"commonjs":"prettier","commonjs2":"prettier","amd":"prettier/standalone","root":"prettier"} ***!
  \*************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_prettier__;

/***/ }),

/***/ "./node_modules/html-styles/index.json":
/*!*********************************************!*\
  !*** ./node_modules/html-styles/index.json ***!
  \*********************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('[{"selectorText":"[hidden], area, base, basefont, datalist, head, link, meta,\\nnoembed, noframes, param, rp, script, source, style, template, track, title","type":"CSSStyleRule","style":{"display":"none"}},{"selectorText":"embed[hidden]","type":"CSSStyleRule","style":{"display":"inline","height":"0","width":"0"}},{"selectorText":"input[type=hidden i]","type":"CSSStyleRule","style":{"display":"none"}},{"selectorText":"html, body","type":"CSSStyleRule","style":{"display":"block"}},{"selectorText":"address, blockquote, center, div, figure, figcaption, footer, form, header, hr,\\nlegend, listing, main, p, plaintext, pre, xmp","type":"CSSStyleRule","style":{"display":"block"}},{"selectorText":"blockquote, figure, listing, p, plaintext, pre, xmp","type":"CSSStyleRule","style":{"margin-block-start":"1em","margin-block-end":"1em"}},{"selectorText":"blockquote, figure","type":"CSSStyleRule","style":{"margin-inline-start":"40px","margin-inline-end":"40px"}},{"selectorText":"address","type":"CSSStyleRule","style":{"font-style":"italic"}},{"selectorText":"listing, plaintext, pre, xmp","type":"CSSStyleRule","style":{"font-family":"monospace","white-space":"pre"}},{"selectorText":"dialog:not([open])","type":"CSSStyleRule","style":{"display":"none"}},{"selectorText":"dialog","type":"CSSStyleRule","style":{"position":"absolute","left":"0","right":"0","width":"fit-content","height":"fit-content","margin":"auto","border":"solid","padding":"1em","background":"white","color":"black"}},{"selectorText":"dialog::backdrop","type":"CSSStyleRule","style":{"background":"rgba(0,0,0,0.1)"}},{"selectorText":"slot","type":"CSSStyleRule","style":{"display":"contents"}},{"selectorText":"pre[wrap]","type":"CSSStyleRule","style":{"white-space":"pre-wrap"}},{"selectorText":"form","type":"CSSStyleRule","style":{"margin-block-end":"1em"}},{"selectorText":"cite, dfn, em, i, var","type":"CSSStyleRule","style":{"font-style":"italic"}},{"selectorText":"b, strong","type":"CSSStyleRule","style":{"font-weight":"bolder"}},{"selectorText":"code, kbd, samp, tt","type":"CSSStyleRule","style":{"font-family":"monospace"}},{"selectorText":"big","type":"CSSStyleRule","style":{"font-size":"larger"}},{"selectorText":"small","type":"CSSStyleRule","style":{"font-size":"smaller"}},{"selectorText":"sub","type":"CSSStyleRule","style":{"vertical-align":"sub"}},{"selectorText":"sup","type":"CSSStyleRule","style":{"vertical-align":"super"}},{"selectorText":"sub, sup","type":"CSSStyleRule","style":{"line-height":"normal","font-size":"smaller"}},{"selectorText":"ruby","type":"CSSStyleRule","style":{"display":"ruby"}},{"selectorText":"rt","type":"CSSStyleRule","style":{"display":"ruby-text"}},{"selectorText":":link","type":"CSSStyleRule","style":{"color":"#0000EE"}},{"selectorText":":visited","type":"CSSStyleRule","style":{"color":"#551A8B"}},{"selectorText":":link:active, :visited:active","type":"CSSStyleRule","style":{"color":"#FF0000"}},{"selectorText":":link, :visited","type":"CSSStyleRule","style":{"text-decoration":"underline","cursor":"pointer"}},{"selectorText":"a:link[rel~=help], a:visited[rel~=help],\\narea:link[rel~=help], area:visited[rel~=help]","type":"CSSStyleRule","style":{"cursor":"help"}},{"selectorText":":focus","type":"CSSStyleRule","style":{"outline":"auto"}},{"selectorText":"mark","type":"CSSStyleRule","style":{"background":"yellow","color":"black"}},{"selectorText":"abbr[title], acronym[title]","type":"CSSStyleRule","style":{"text-decoration":"dotted underline"}},{"selectorText":"ins, u","type":"CSSStyleRule","style":{"text-decoration":"underline"}},{"selectorText":"del, s, strike","type":"CSSStyleRule","style":{"text-decoration":"line-through"}},{"selectorText":"blink","type":"CSSStyleRule","style":{"text-decoration":"blink"}},{"selectorText":"q::before","type":"CSSStyleRule","style":{"content":"open-quote"}},{"selectorText":"q::after","type":"CSSStyleRule","style":{"content":"close-quote"}},{"selectorText":"br","type":"CSSStyleRule","style":{"display-outside":"newline"}},{"selectorText":"nobr","type":"CSSStyleRule","style":{"white-space":"nowrap"}},{"selectorText":"wbr","type":"CSSStyleRule","style":{"display-outside":"break-opportunity"}},{"selectorText":"nobr wbr","type":"CSSStyleRule","style":{"white-space":"normal"}},{"selectorText":"br[clear=left i]","type":"CSSStyleRule","style":{"clear":"left"}},{"selectorText":"br[clear=right i]","type":"CSSStyleRule","style":{"clear":"right"}},{"selectorText":"br[clear=all i], br[clear=both i]","type":"CSSStyleRule","style":{"clear":"both"}},{"selectorText":"[dir]:dir(ltr), bdi:dir(ltr), input[type=tel i]:dir(ltr)","type":"CSSStyleRule","style":{"direction":"ltr"}},{"selectorText":"[dir]:dir(rtl), bdi:dir(rtl)","type":"CSSStyleRule","style":{"direction":"rtl"}},{"selectorText":"address, blockquote, center, div, figure, figcaption, footer, form, header, hr,\\nlegend, listing, main, p, plaintext, pre, summary, xmp, article, aside, h1, h2,\\nh3, h4, h5, h6, hgroup, nav, section, table, caption, colgroup, col, thead,\\ntbody, tfoot, tr, td, th, dir, dd, dl, dt, ol, ul, li, bdi, output,\\n[dir=ltr i], [dir=rtl i], [dir=auto i]","type":"CSSStyleRule","style":{"unicode-bidi":"isolate"}},{"selectorText":"bdo, bdo[dir]","type":"CSSStyleRule","style":{"unicode-bidi":"isolate-override"}},{"selectorText":"input[dir=auto i][type=search i], input[dir=auto i][type=tel i], input[dir=auto i][type=url i], input[dir=auto i][type=email i], textarea[dir=auto i], pre[dir=auto i]","type":"CSSStyleRule","style":{"unicode-bidi":"plaintext"}},{"selectorText":"address, blockquote, center, div, figure, figcaption, footer, form, header, hr,\\nlegend, listing, main, p, plaintext, pre, summary, xmp, article, aside, h1, h2,\\nh3, h4, h5, h6, hgroup, nav, section, table, caption, colgroup, col, thead,\\ntbody, tfoot, tr, td, th, dir, dd, dl, dt, ol, ul, li, [dir=ltr i],\\n[dir=rtl i], [dir=auto i], *|*","type":"CSSStyleRule","style":{"unicode-bidi":"bidi-override"}},{"selectorText":"input:not([type=submit i]):not([type=reset i]):not([type=button i]),\\ntextarea","type":"CSSStyleRule","style":{"unicode-bidi":"normal"}},{"selectorText":"article, aside, h1, h2, h3, h4, h5, h6, hgroup, nav, section","type":"CSSStyleRule","style":{"display":"block"}},{"selectorText":"h1","type":"CSSStyleRule","style":{"margin-block-start":"0.67em","margin-block-end":"0.67em","font-size":"2.00em","font-weight":"bold"}},{"selectorText":"h2","type":"CSSStyleRule","style":{"margin-block-start":"0.83em","margin-block-end":"0.83em","font-size":"1.50em","font-weight":"bold"}},{"selectorText":"h3","type":"CSSStyleRule","style":{"margin-block-start":"1.00em","margin-block-end":"1.00em","font-size":"1.17em","font-weight":"bold"}},{"selectorText":"h4","type":"CSSStyleRule","style":{"margin-block-start":"1.33em","margin-block-end":"1.33em","font-size":"1.00em","font-weight":"bold"}},{"selectorText":"h5","type":"CSSStyleRule","style":{"margin-block-start":"1.67em","margin-block-end":"1.67em","font-size":"0.83em","font-weight":"bold"}},{"selectorText":"h6","type":"CSSStyleRule","style":{"margin-block-start":"2.33em","margin-block-end":"2.33em","font-size":"0.67em","font-weight":"bold"}},{"selectorText":"x h1","type":"CSSStyleRule","style":{"margin-block-start":"0.83em","margin-block-end":"0.83em","font-size":"1.50em"}},{"selectorText":"x x h1","type":"CSSStyleRule","style":{"margin-block-start":"1.00em","margin-block-end":"1.00em","font-size":"1.17em"}},{"selectorText":"x x x h1","type":"CSSStyleRule","style":{"margin-block-start":"1.33em","margin-block-end":"1.33em","font-size":"1.00em"}},{"selectorText":"x x x x h1","type":"CSSStyleRule","style":{"margin-block-start":"1.67em","margin-block-end":"1.67em","font-size":"0.83em"}},{"selectorText":"x x x x x h1","type":"CSSStyleRule","style":{"margin-block-start":"2.33em","margin-block-end":"2.33em","font-size":"0.67em"}},{"selectorText":"x hgroup > h1 ~ h2","type":"CSSStyleRule","style":{"margin-block-start":"1.00em","margin-block-end":"1.00em","font-size":"1.17em"}},{"selectorText":"x x hgroup > h1 ~ h2","type":"CSSStyleRule","style":{"margin-block-start":"1.33em","margin-block-end":"1.33em","font-size":"1.00em"}},{"selectorText":"x x x hgroup > h1 ~ h2","type":"CSSStyleRule","style":{"margin-block-start":"1.67em","margin-block-end":"1.67em","font-size":"0.83em"}},{"selectorText":"x x x x hgroup > h1 ~ h2","type":"CSSStyleRule","style":{"margin-block-start":"2.33em","margin-block-end":"2.33em","font-size":"0.67em"}},{"selectorText":"x hgroup > h1 ~ h3","type":"CSSStyleRule","style":{"margin-block-start":"1.33em","margin-block-end":"1.33em","font-size":"1.00em"}},{"selectorText":"x x hgroup > h1 ~ h3","type":"CSSStyleRule","style":{"margin-block-start":"1.67em","margin-block-end":"1.67em","font-size":"0.83em"}},{"selectorText":"x x x hgroup > h1 ~ h3","type":"CSSStyleRule","style":{"margin-block-start":"2.33em","margin-block-end":"2.33em","font-size":"0.67em"}},{"selectorText":"x hgroup > h1 ~ h4","type":"CSSStyleRule","style":{"margin-block-start":"1.67em","margin-block-end":"1.67em","font-size":"0.83em"}},{"selectorText":"x x hgroup > h1 ~ h4","type":"CSSStyleRule","style":{"margin-block-start":"2.33em","margin-block-end":"2.33em","font-size":"0.67em"}},{"selectorText":"x hgroup > h1 ~ h5","type":"CSSStyleRule","style":{"margin-block-start":"2.33em","margin-block-end":"2.33em","font-size":"0.67em"}},{"selectorText":"dir, dd, dl, dt, ol, ul","type":"CSSStyleRule","style":{"display":"block"}},{"selectorText":"li","type":"CSSStyleRule","style":{"display":"list-item"}},{"selectorText":"dir, dl, ol, ul","type":"CSSStyleRule","style":{"margin-block-start":"1em","margin-block-end":"1em"}},{"selectorText":"dir dir, dl dir, ol dir, ul dir, dir dl, dl dl, ol dl, ul dl, dir ol, dl ol, ol ol, ul ol, dir ul, dl ul, ol ul, ul ul","type":"CSSStyleRule","style":{"margin-block-start":"0","margin-block-end":"0"}},{"selectorText":"dd","type":"CSSStyleRule","style":{"margin-inline-start":"40px"}},{"selectorText":"dir, ol, ul","type":"CSSStyleRule","style":{"padding-inline-start":"40px"}},{"selectorText":"ol","type":"CSSStyleRule","style":{"list-style-type":"decimal"}},{"selectorText":"dir, ul","type":"CSSStyleRule","style":{"list-style-type":"disc"}},{"selectorText":"dir dir, ol dir, ul dir, dir ul, ol ul, ul ul","type":"CSSStyleRule","style":{"list-style-type":"circle"}},{"selectorText":"dir dir dir, ol dir dir, ul dir dir, dir ol dir, ol ol dir, ul ol dir, dir ul dir, ol ul dir, ul ul dir, dir dir ul, ol dir ul, ul dir ul, dir ol ul, ol ol ul, ul ol ul, dir ul ul, ol ul ul, ul ul ul","type":"CSSStyleRule","style":{"list-style-type":"square"}},{"selectorText":"ol[type=\\"1\\"], li[type=\\"1\\"]","type":"CSSStyleRule","style":{"list-style-type":"decimal"}},{"selectorText":"ol[type=a], li[type=a]","type":"CSSStyleRule","style":{"list-style-type":"lower-alpha"}},{"selectorText":"ol[type=A], li[type=A]","type":"CSSStyleRule","style":{"list-style-type":"upper-alpha"}},{"selectorText":"ol[type=i], li[type=i]","type":"CSSStyleRule","style":{"list-style-type":"lower-roman"}},{"selectorText":"ol[type=I], li[type=I]","type":"CSSStyleRule","style":{"list-style-type":"upper-roman"}},{"selectorText":"ul[type=none i], li[type=none i]","type":"CSSStyleRule","style":{"list-style-type":"none"}},{"selectorText":"ul[type=disc i], li[type=disc i]","type":"CSSStyleRule","style":{"list-style-type":"disc"}},{"selectorText":"ul[type=circle i], li[type=circle i]","type":"CSSStyleRule","style":{"list-style-type":"circle"}},{"selectorText":"ul[type=square i], li[type=square i]","type":"CSSStyleRule","style":{"list-style-type":"square"}},{"selectorText":"table","type":"CSSStyleRule","style":{"display":"table"}},{"selectorText":"caption","type":"CSSStyleRule","style":{"display":"table-caption"}},{"selectorText":"colgroup, colgroup[hidden]","type":"CSSStyleRule","style":{"display":"table-column-group"}},{"selectorText":"col, col[hidden]","type":"CSSStyleRule","style":{"display":"table-column"}},{"selectorText":"thead, thead[hidden]","type":"CSSStyleRule","style":{"display":"table-header-group"}},{"selectorText":"tbody, tbody[hidden]","type":"CSSStyleRule","style":{"display":"table-row-group"}},{"selectorText":"tfoot, tfoot[hidden]","type":"CSSStyleRule","style":{"display":"table-footer-group"}},{"selectorText":"tr, tr[hidden]","type":"CSSStyleRule","style":{"display":"table-row"}},{"selectorText":"td, th, td[hidden], th[hidden]","type":"CSSStyleRule","style":{"display":"table-cell"}},{"selectorText":"colgroup[hidden], col[hidden], thead[hidden], tbody[hidden],\\ntfoot[hidden], tr[hidden], td[hidden], th[hidden]","type":"CSSStyleRule","style":{"visibility":"collapse"}},{"selectorText":"table","type":"CSSStyleRule","style":{"box-sizing":"border-box","border-spacing":"2px","border-collapse":"separate","text-indent":"initial"}},{"selectorText":"td, th","type":"CSSStyleRule","style":{"padding":"1px"}},{"selectorText":"th","type":"CSSStyleRule","style":{"font-weight":"bold"}},{"selectorText":"caption","type":"CSSStyleRule","style":{"text-align":"center"}},{"selectorText":"thead, tbody, tfoot, table > tr","type":"CSSStyleRule","style":{"vertical-align":"middle"}},{"selectorText":"tr, td, th","type":"CSSStyleRule","style":{"vertical-align":"inherit"}},{"selectorText":"table, td, th","type":"CSSStyleRule","style":{"border-color":"gray"}},{"selectorText":"thead, tbody, tfoot, tr","type":"CSSStyleRule","style":{"border-color":"inherit"}},{"selectorText":"table[rules=none i], table[rules=groups i], table[rules=rows i],\\ntable[rules=cols i], table[rules=all i], table[frame=void i],\\ntable[frame=above i], table[frame=below i], table[frame=hsides i],\\ntable[frame=lhs i], table[frame=rhs i], table[frame=vsides i],\\ntable[frame=box i], table[frame=border i],\\ntable[rules=none i] > tr > td, table[rules=none i] > tr > th,\\ntable[rules=groups i] > tr > td, table[rules=groups i] > tr > th,\\ntable[rules=rows i] > tr > td, table[rules=rows i] > tr > th,\\ntable[rules=cols i] > tr > td, table[rules=cols i] > tr > th,\\ntable[rules=all i] > tr > td, table[rules=all i] > tr > th,\\ntable[rules=none i] > thead > tr > td, table[rules=none i] > thead > tr > th,\\ntable[rules=groups i] > thead > tr > td, table[rules=groups i] > thead > tr > th,\\ntable[rules=rows i] > thead > tr > td, table[rules=rows i] > thead > tr > th,\\ntable[rules=cols i] > thead > tr > td, table[rules=cols i] > thead > tr > th,\\ntable[rules=all i] > thead > tr > td, table[rules=all i] > thead > tr > th,\\ntable[rules=none i] > tbody > tr > td, table[rules=none i] > tbody > tr > th,\\ntable[rules=groups i] > tbody > tr > td, table[rules=groups i] > tbody > tr > th,\\ntable[rules=rows i] > tbody > tr > td, table[rules=rows i] > tbody > tr > th,\\ntable[rules=cols i] > tbody > tr > td, table[rules=cols i] > tbody > tr > th,\\ntable[rules=all i] > tbody > tr > td, table[rules=all i] > tbody > tr > th,\\ntable[rules=none i] > tfoot > tr > td, table[rules=none i] > tfoot > tr > th,\\ntable[rules=groups i] > tfoot > tr > td, table[rules=groups i] > tfoot > tr > th,\\ntable[rules=rows i] > tfoot > tr > td, table[rules=rows i] > tfoot > tr > th,\\ntable[rules=cols i] > tfoot > tr > td, table[rules=cols i] > tfoot > tr > th,\\ntable[rules=all i] > tfoot > tr > td, table[rules=all i] > tfoot > tr > th","type":"CSSStyleRule","style":{"border-color":"black"}},{"selectorText":"table[align=left i]","type":"CSSStyleRule","style":{"float":"left"}},{"selectorText":"table[align=right i]","type":"CSSStyleRule","style":{"float":"right"}},{"selectorText":"table[align=center i]","type":"CSSStyleRule","style":{"margin-inline-start":"auto","margin-inline-end":"auto"}},{"selectorText":"thead[align=absmiddle i], tbody[align=absmiddle i], tfoot[align=absmiddle i],\\ntr[align=absmiddle i], td[align=absmiddle i], th[align=absmiddle i]","type":"CSSStyleRule","style":{"text-align":"center"}},{"selectorText":"caption[align=bottom i]","type":"CSSStyleRule","style":{"caption-side":"bottom"}},{"selectorText":"p[align=left i], h1[align=left i], h2[align=left i], h3[align=left i],\\nh4[align=left i], h5[align=left i], h6[align=left i]","type":"CSSStyleRule","style":{"text-align":"left"}},{"selectorText":"p[align=right i], h1[align=right i], h2[align=right i], h3[align=right i],\\nh4[align=right i], h5[align=right i], h6[align=right i]","type":"CSSStyleRule","style":{"text-align":"right"}},{"selectorText":"p[align=center i], h1[align=center i], h2[align=center i], h3[align=center i],\\nh4[align=center i], h5[align=center i], h6[align=center i]","type":"CSSStyleRule","style":{"text-align":"center"}},{"selectorText":"p[align=justify i], h1[align=justify i], h2[align=justify i], h3[align=justify i],\\nh4[align=justify i], h5[align=justify i], h6[align=justify i]","type":"CSSStyleRule","style":{"text-align":"justify"}},{"selectorText":"thead[valign=top i], tbody[valign=top i], tfoot[valign=top i],\\ntr[valign=top i], td[valign=top i], th[valign=top i]","type":"CSSStyleRule","style":{"vertical-align":"top"}},{"selectorText":"thead[valign=middle i], tbody[valign=middle i], tfoot[valign=middle i],\\ntr[valign=middle i], td[valign=middle i], th[valign=middle i]","type":"CSSStyleRule","style":{"vertical-align":"middle"}},{"selectorText":"thead[valign=bottom i], tbody[valign=bottom i], tfoot[valign=bottom i],\\ntr[valign=bottom i], td[valign=bottom i], th[valign=bottom i]","type":"CSSStyleRule","style":{"vertical-align":"bottom"}},{"selectorText":"thead[valign=baseline i], tbody[valign=baseline i], tfoot[valign=baseline i],\\ntr[valign=baseline i], td[valign=baseline i], th[valign=baseline i]","type":"CSSStyleRule","style":{"vertical-align":"baseline"}},{"selectorText":"td[nowrap], th[nowrap]","type":"CSSStyleRule","style":{"white-space":"nowrap"}},{"selectorText":"table[rules=none i], table[rules=groups i], table[rules=rows i],\\ntable[rules=cols i], table[rules=all i]","type":"CSSStyleRule","style":{"border-style":"hidden","border-collapse":"collapse"}},{"selectorText":"table[border]","type":"CSSStyleRule","style":{"border-style":"outset"}},{"selectorText":"table[frame=void i]","type":"CSSStyleRule","style":{"border-style":"hidden"}},{"selectorText":"table[frame=above i]","type":"CSSStyleRule","style":{"border-style":"outset hidden hidden hidden"}},{"selectorText":"table[frame=below i]","type":"CSSStyleRule","style":{"border-style":"hidden hidden outset hidden"}},{"selectorText":"table[frame=hsides i]","type":"CSSStyleRule","style":{"border-style":"outset hidden outset hidden"}},{"selectorText":"table[frame=lhs i]","type":"CSSStyleRule","style":{"border-style":"hidden hidden hidden outset"}},{"selectorText":"table[frame=rhs i]","type":"CSSStyleRule","style":{"border-style":"hidden outset hidden hidden"}},{"selectorText":"table[frame=vsides i]","type":"CSSStyleRule","style":{"border-style":"hidden outset"}},{"selectorText":"table[frame=box i], table[frame=border i]","type":"CSSStyleRule","style":{"border-style":"outset"}},{"selectorText":"table[border] > tr > td, table[border] > tr > th,\\ntable[border] > thead > tr > td, table[border] > thead > tr > th,\\ntable[border] > tbody > tr > td, table[border] > tbody > tr > th,\\ntable[border] > tfoot > tr > td, table[border] > tfoot > tr > th","type":"CSSStyleRule","style":{"border-width":"1px","border-style":"inset"}},{"selectorText":"table[rules=none i] > tr > td, table[rules=none i] > tr > th,\\ntable[rules=none i] > thead > tr > td, table[rules=none i] > thead > tr > th,\\ntable[rules=none i] > tbody > tr > td, table[rules=none i] > tbody > tr > th,\\ntable[rules=none i] > tfoot > tr > td, table[rules=none i] > tfoot > tr > th,\\ntable[rules=groups i] > tr > td, table[rules=groups i] > tr > th,\\ntable[rules=groups i] > thead > tr > td, table[rules=groups i] > thead > tr > th,\\ntable[rules=groups i] > tbody > tr > td, table[rules=groups i] > tbody > tr > th,\\ntable[rules=groups i] > tfoot > tr > td, table[rules=groups i] > tfoot > tr > th,\\ntable[rules=rows i] > tr > td, table[rules=rows i] > tr > th,\\ntable[rules=rows i] > thead > tr > td, table[rules=rows i] > thead > tr > th,\\ntable[rules=rows i] > tbody > tr > td, table[rules=rows i] > tbody > tr > th,\\ntable[rules=rows i] > tfoot > tr > td, table[rules=rows i] > tfoot > tr > th","type":"CSSStyleRule","style":{"border-width":"1px","border-style":"none"}},{"selectorText":"table[rules=cols i] > tr > td, table[rules=cols i] > tr > th,\\ntable[rules=cols i] > thead > tr > td, table[rules=cols i] > thead > tr > th,\\ntable[rules=cols i] > tbody > tr > td, table[rules=cols i] > tbody > tr > th,\\ntable[rules=cols i] > tfoot > tr > td, table[rules=cols i] > tfoot > tr > th","type":"CSSStyleRule","style":{"border-width":"1px","block-start-style":"none","border-inline-end-style":"solid","border-block-end-style":"none","border-inline-start-style":"solid"}},{"selectorText":"table[rules=all i] > tr > td, table[rules=all i] > tr > th,\\ntable[rules=all i] > thead > tr > td, table[rules=all i] > thead > tr > th,\\ntable[rules=all i] > tbody > tr > td, table[rules=all i] > tbody > tr > th,\\ntable[rules=all i] > tfoot > tr > td, table[rules=all i] > tfoot > tr > th","type":"CSSStyleRule","style":{"border-width":"1px","border-style":"solid"}},{"selectorText":"table[rules=groups i] > colgroup","type":"CSSStyleRule","style":{"border-inline-start-width":"1px","border-inline-start-style":"solid","border-inline-end-width":"1px","border-inline-end-style":"solid"}},{"selectorText":"table[rules=groups i] > thead,\\ntable[rules=groups i] > tbody,\\ntable[rules=groups i] > tfoot","type":"CSSStyleRule","style":{"border-block-start-width":"1px","border-block-start-style":"solid","border-block-end-width":"1px","border-block-end-style":"solid"}},{"selectorText":"table[rules=rows i] > tr, table[rules=rows i] > thead > tr,\\ntable[rules=rows i] > tbody > tr, table[rules=rows i] > tfoot > tr","type":"CSSStyleRule","style":{"border-block-start-width":"1px","border-block-start-style":"solid","border-block-end-width":"1px","border-block-end-style":"solid"}},{"selectorText":"table","type":"CSSStyleRule","style":{"font-weight":"initial","font-style":"initial","font-variant":"initial","font-size":"initial","line-height":"initial","white-space":"initial","text-align":"initial"}},{"selectorText":"table > form, thead > form, tbody > form, tfoot > form, tr > form","type":"CSSStyleRule","style":{"display":"none"}},{"selectorText":"input, select, option, optgroup, button, textarea","type":"CSSStyleRule","style":{"text-indent":"initial"}},{"selectorText":"input[type=radio i], input[type=checkbox i], input[type=reset i], input[type=button i], input[type=submit i], input[type=search i], select, button","type":"CSSStyleRule","style":{"box-sizing":"border-box"}},{"selectorText":"textarea","type":"CSSStyleRule","style":{"white-space":"pre-wrap"}},{"selectorText":"input:not([type=image i]), textarea","type":"CSSStyleRule","style":{"box-sizing":"border-box"}},{"selectorText":"hr","type":"CSSStyleRule","style":{"color":"gray","border-style":"inset","border-width":"1px","margin-block-start":"0.5em","margin-inline-end":"auto","margin-block-end":"0.5em","margin-inline-start":"auto"}},{"selectorText":"hr[align=left i]","type":"CSSStyleRule","style":{"margin-left":"0","margin-right":"auto"}},{"selectorText":"hr[align=right i]","type":"CSSStyleRule","style":{"margin-left":"auto","margin-right":"0"}},{"selectorText":"hr[align=center i]","type":"CSSStyleRule","style":{"margin-left":"auto","margin-right":"auto"}},{"selectorText":"hr[color], hr[noshade]","type":"CSSStyleRule","style":{"border-style":"solid"}},{"selectorText":"fieldset","type":"CSSStyleRule","style":{"display":"block","margin-inline-start":"2px","margin-inline-end":"2px","border":"groove 2px ThreeDFace","padding-block-start":"0.35em","padding-inline-end":"0.625em","padding-block-end":"0.75em","padding-inline-start":"0.625em","min-width":"min-content"}},{"selectorText":"legend","type":"CSSStyleRule","style":{"padding-inline-start":"2px","padding-inline-end":"2px"}},{"selectorText":"iframe","type":"CSSStyleRule","style":{"border":"2px inset"}},{"selectorText":"video","type":"CSSStyleRule","style":{"object-fit":"contain"}},{"selectorText":"img[align=left i]","type":"CSSStyleRule","style":{"margin-right":"3px"}},{"selectorText":"img[align=right i]","type":"CSSStyleRule","style":{"margin-left":"3px"}},{"selectorText":"iframe[frameborder=\\"0\\"], iframe[frameborder=no i]","type":"CSSStyleRule","style":{"border":"none"}},{"selectorText":"applet[align=left i], embed[align=left i], iframe[align=left i],\\nimg[align=left i], input[type=image i][align=left i], object[align=left i]","type":"CSSStyleRule","style":{"float":"left"}},{"selectorText":"applet[align=right i], embed[align=right i], iframe[align=right i],\\nimg[align=right i], input[type=image i][align=right i], object[align=right i]","type":"CSSStyleRule","style":{"float":"right"}},{"selectorText":"applet[align=top i], embed[align=top i], iframe[align=top i],\\nimg[align=top i], input[type=image i][align=top i], object[align=top i]","type":"CSSStyleRule","style":{"vertical-align":"top"}},{"selectorText":"applet[align=baseline i], embed[align=baseline i], iframe[align=baseline i],\\nimg[align=baseline i], input[type=image i][align=baseline i], object[align=baseline i]","type":"CSSStyleRule","style":{"vertical-align":"baseline"}},{"selectorText":"applet[align=texttop i], embed[align=texttop i], iframe[align=texttop i],\\nimg[align=texttop i], input[type=image i][align=texttop i], object[align=texttop i]","type":"CSSStyleRule","style":{"vertical-align":"text-top"}},{"selectorText":"applet[align=absmiddle i], embed[align=absmiddle i], iframe[align=absmiddle i],\\nimg[align=absmiddle i], input[type=image i][align=absmiddle i], object[align=absmiddle i],\\napplet[align=abscenter i], embed[align=abscenter i], iframe[align=abscenter i],\\nimg[align=abscenter i], input[type=image i][align=abscenter i], object[align=abscenter i]","type":"CSSStyleRule","style":{"vertical-align":"middle"}},{"selectorText":"applet[align=bottom i], embed[align=bottom i], iframe[align=bottom i],\\nimg[align=bottom i], input[type=image i][align=bottom i],\\nobject[align=bottom i]","type":"CSSStyleRule","style":{"vertical-align":"bottom"}},{"selectorText":"textarea","type":"CSSStyleRule","style":{"white-space":"pre-wrap"}}]');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./dist/index.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlEO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDO0FBQzlDO0FBQ0E7QUFDQSxZQUFZLG1CQUFtQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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VUFBVTtBQUM1QixrQkFBa0IsVUFBVTtBQUM1QixZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU0sT0FBTztBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7QUMxSkE7QUFDQSxjQUFjOztBQUVkO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQ0FBaUMsZ0NBQWdDO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsZ0JBQWdCLFNBQVM7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxvQkFBb0Isb0JBQW9CO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTiw0Q0FBNEM7QUFDNUMsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyx1QkFBdUI7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsT0FBTyxrQkFBa0I7QUFDekI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsU0FBUyxVQUFVO0FBQ25CO0FBQ0EscURBQXFELFNBQVM7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyx1QkFBdUI7QUFDbEM7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9DQUFvQyxTQUFTLE9BQU8sTUFBTSxHQUFHLEtBQUssSUFBSSxTQUFTO0FBQy9FO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLFFBQVE7QUFDakIsU0FBUyxXQUFXOztBQUVwQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsbUJBQW1CO0FBQ3JDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQjtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxHQUFHO0FBQ0gsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0gsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBTyw4QkFBOEI7QUFDckMsT0FBTyxpQkFBaUI7QUFDeEIsT0FBTyxnQ0FBZ0M7O0FBRXZDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQscUJBQXFCOztBQUVoRjtBQUNBLFNBQVMsYUFBYTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsU0FBUyxhQUFhO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsU0FBUyxhQUFhO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsU0FBUyxhQUFhO0FBQ3RCOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxvQkFBb0IseUJBQXlCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9CQUFvQiwyQkFBMkI7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxTQUFTLGFBQWE7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGtCQUFrQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLG1CQUFtQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBUyxhQUFhO0FBQ3RCO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxTQUFTLGFBQWE7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxTQUFTLHNCQUFzQjtBQUMvQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFNBQVMsYUFBYTtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxTQUFTLE1BQU07QUFDZixTQUFTLGFBQWE7O0FBRXRCOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQztBQUMzQyxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxTQUFTLGFBQWE7QUFDdEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTLGFBQWE7O0FBRXRCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxTQUFTLGFBQWE7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0JBQW9CLDJCQUEyQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQjtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLHFDQUFxQztBQUNyQztBQUNBLHVCQUF1QjtBQUN2Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLE9BQU8sdUJBQXVCOztBQUU5QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUM7QUFDekM7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1QkFBdUIsa0JBQWtCO0FBQ3pDO0FBQ0EseUJBQXlCLDRCQUE0QjtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtB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Q0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxXQUFXLHlCQUF5QjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLCtDQUErQyxzQ0FBc0M7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHlCQUF5QjtBQUNwQyxzQkFBc0Isc0NBQXNDO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFdBQVcsTUFBTTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLENBQUM7O0FBRUQ7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGFBQWE7QUFDeEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isa0JBQWtCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLG9CQUFvQixnQkFBZ0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPLGVBQWU7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsZ0NBQWdDO0FBQ3REO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMkJBQTJCO0FBQzNCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGNBQWM7QUFDZDtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxxQ0FBcUM7O0FBRWxEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0Esd0VBQXdFOztBQUV4RTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUCwwQ0FBMEM7QUFDMUMsS0FBSztBQUNMLEdBQUc7QUFDSCxXQUFXLEtBQUs7O0FBRWhCO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLDBCQUEwQjtBQUMxQixRQUFRLEVBQUU7QUFDVjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLFNBQVMsTUFBTTtBQUNmLFNBQVMsU0FBUzs7QUFFbEI7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxVQUFVO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDBCQUEwQixFQUFFLHdDQUF3QyxVQUFVO0FBQzlFO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixFQUFFLG9EQUFvRCxVQUFVO0FBQzFGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsRUFBRSxnQkFBZ0I7QUFDeEU7QUFDQSxVQUFVO0FBQ1YsZ0NBQWdDLFNBQVMsUUFBUSxPQUFPO0FBQ3hEO0FBQ0EsMENBQTBDLEVBQUUseUJBQXlCLFFBQVE7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZELEtBQUssSUFBSSxLQUFLO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFpRTtBQUNqRTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsTUFBTTtBQUNuQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHlCQUF5QjtBQUNqRCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGdCQUFnQjs7QUFFaEI7QUFDQTtBQUNBO0FBQ0EsYUFBYSxNQUFNO0FBQ25CO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtCQUFrQjtBQUNsQjtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQixrQkFBa0I7QUFDbEIsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxhQUFhLE1BQU07QUFDbkI7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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QTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsc0JBQXNCO0FBQ3RCLHFCQUFxQjs7QUFFckI7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOzs7QUFHQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPLFFBQVE7O0FBRWY7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0EsU0FBUyxNQUFNO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCLFdBQVcsU0FBUzs7QUFFcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDRCQUE0QjtBQUM1QixvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWtDOzs7Ozs7Ozs7Ozs7QUM5dE1yQjs7QUFFYjtBQUNBO0FBQ0E7O0FBRUEsT0FBTyxRQUFRLEVBQUUsbUJBQU8sQ0FBQywwREFBZTs7QUFFeEM7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0EsU0FBUyxNQUFNO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTiw0Q0FBNEM7QUFDNUMsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7OztBQzNMQTs7Ozs7Ozs7Ozs7Ozs7Ozs7VUNBQTtVQUNBOztVQUVBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBOztVQUVBO1VBQ0E7O1VBRUE7VUFDQTtVQUNBOzs7OztXQ3RCQTtXQUNBO1dBQ0E7V0FDQTtXQUNBLHlDQUF5Qyx3Q0FBd0M7V0FDakY7V0FDQTtXQUNBOzs7OztXQ1BBOzs7OztXQ0FBO1dBQ0E7V0FDQTtXQUNBLHVEQUF1RCxpQkFBaUI7V0FDeEU7V0FDQSxnREFBZ0QsYUFBYTtXQUM3RDs7Ozs7VUVOQTtVQUNBO1VBQ0E7VUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3ByZXR0aWVyUGx1Z2luTGlxdWlkL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9wcmV0dGllclBsdWdpbkxpcXVpZC8uL2J1aWxkL3NoaW1zL2xpcXVpZC1odG1sLW9obS5qcyIsIndlYnBhY2s6Ly9wcmV0dGllclBsdWdpbkxpcXVpZC8uL2Rpc3QvY29uc3RhbnRzLmV2YWx1YXRlLmpzIiwid2VicGFjazovL3ByZXR0aWVyUGx1Z2luTGlxdWlkLy4vZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9wcmV0dGllclBsdWdpbkxpcXVpZC8uL2Rpc3QvcGFyc2VyL2FzdC5qcyIsIndlYnBhY2s6Ly9wcmV0dGllclBsdWdpbkxpcXVpZC8uL2Rpc3QvcGFyc2VyL2NzdC5qcyIsIndlYnBhY2s6Ly9wcmV0dGllclBsdWdpbkxpcXVpZC8uL2Rpc3QvcGFyc2VyL2Vycm9ycy5qcyIsIndlYnBhY2s6Ly9wcmV0dGllclBsdWdpbkxpcXVpZC8uL2Rpc3QvcGFyc2VyL2dyYW1tYXIuanMiLCJ3ZWJwYWNrOi8vcHJldHRpZXJQbHVnaW5MaXF1aWQvLi9kaXN0L3BhcnNlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9wcmV0dGllclBsdWdpbkxpcXVpZC8uL2Rpc3QvcGFyc2VyL3BhcnNlci5qcyIsIndlYnBhY2s6Ly9wcmV0dGllclBsdWdpbkxpcXVpZC8uL2Rpc3QvcHJpbnRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9wcmV0dGllclBsdWdpbkxpcXVpZC8uL2Rpc3QvcHJpbnRlci9wcmVwcm9jZXNzL2F1Z21lbnQtd2l0aC1jc3MtcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly9wcmV0dGllclBsdWdpbkxpcXVpZC8uL2Rpc3QvcHJpbnRlci9wcmVwcm9jZXNzL2F1Z21lbnQtd2l0aC1mYW1pbHkuanMiLCJ3ZWJwYWNrOi8vcHJldHRpZXJQbHVnaW5MaXF1aWQvLi9kaXN0L3ByaW50ZXIvcHJlcHJvY2Vzcy9hdWdtZW50LXdpdGgtcGFyZW50LmpzIiwid2VicGFjazovL3ByZXR0aWVyUGx1Z2luTGlxdWlkLy4vZGlzdC9wcmludGVyL3ByZXByb2Nlc3MvYXVnbWVudC13aXRoLXNpYmxpbmdzLmpzIiwid2VicGFjazovL3ByZXR0aWVyUGx1Z2luTGlxdWlkLy4vZGlzdC9wcmludGVyL3ByZXByb2Nlc3MvYXVnbWVudC13aXRoLXdoaXRlc3BhY2UtaGVscGVycy5qcyIsIndlYnBhY2s6Ly9wcmV0dGllclBsdWdpbkxpcXVpZC8uL2Rpc3QvcHJpbnRlci9wcmVwcm9jZXNzL2luZGV4LmpzIiwid2VicGFjazovL3ByZXR0aWVyUGx1Z2luTGlxdWlkLy4vZGlzdC9wcmludGVyL3ByaW50LXByZXByb2Nlc3MuanMiLCJ3ZWJwYWNrOi8vcHJldHRpZXJQbHVnaW5MaXF1aWQvLi9kaXN0L3ByaW50ZXIvcHJpbnQvY2hpbGRyZW4uanMiLCJ3ZWJwYWNrOi8vcHJldHRpZXJQbHVnaW5MaXF1aWQvLi9kaXN0L3ByaW50ZXIvcHJpbnQvZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9wcmV0dGllclBsdWdpbkxpcXVpZC8uL2Rpc3QvcHJpbnRlci9wcmludC9saXF1aWQuanMiLCJ3ZWJwYWNrOi8vcHJldHRpZXJQbHVnaW5MaXF1aWQvLi9kaXN0L3ByaW50ZXIvcHJpbnQvdGFnLmpzIiwid2VicGFjazovL3ByZXR0aWVyUGx1Z2luTGlxdWlkLy4vZGlzdC9wcmludGVyL3ByaW50ZXItbGlxdWlkLWh0bWwuanMiLCJ3ZWJwYWNrOi8vcHJldHRpZXJQbHVnaW5MaXF1aWQvLi9kaXN0L3ByaW50ZXIvdXRpbHMvYXJyYXkuanMiLCJ3ZWJwYWNrOi8vcHJldHRpZXJQbHVnaW5MaXF1aWQvLi9kaXN0L3ByaW50ZXIvdXRpbHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcHJldHRpZXJQbHVnaW5MaXF1aWQvLi9kaXN0L3ByaW50ZXIvdXRpbHMvbm9kZS5qcyIsIndlYnBhY2s6Ly9wcmV0dGllclBsdWdpbkxpcXVpZC8uL2Rpc3QvcHJpbnRlci91dGlscy9zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vcHJldHRpZXJQbHVnaW5MaXF1aWQvLi9kaXN0L3R5cGVzLmpzIiwid2VicGFjazovL3ByZXR0aWVyUGx1Z2luTGlxdWlkLy4vZGlzdC91dGlscy5qcyIsIndlYnBhY2s6Ly9wcmV0dGllclBsdWdpbkxpcXVpZC8uL25vZGVfbW9kdWxlcy9odG1sLXN0eWxlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9wcmV0dGllclBsdWdpbkxpcXVpZC8uL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovL3ByZXR0aWVyUGx1Z2luTGlxdWlkLy4vbm9kZV9tb2R1bGVzL2lzb2JqZWN0L2luZGV4LmpzIiwid2VicGFjazovL3ByZXR0aWVyUGx1Z2luTGlxdWlkLy4vbm9kZV9tb2R1bGVzL2xpbmUtY29sdW1uL2xpYi9saW5lLWNvbHVtbi5qcyIsIndlYnBhY2s6Ly9wcmV0dGllclBsdWdpbkxpcXVpZC8uL25vZGVfbW9kdWxlcy9vaG0tanMvZGlzdC9vaG0uZXNtLmpzIiwid2VicGFjazovL3ByZXR0aWVyUGx1Z2luTGlxdWlkLy4vbm9kZV9tb2R1bGVzL29obS1qcy9leHRyYXMvVmlzaXRvckZhbWlseS5qcyIsIndlYnBhY2s6Ly9wcmV0dGllclBsdWdpbkxpcXVpZC8uL25vZGVfbW9kdWxlcy9vaG0tanMvZXh0cmFzL2luZGV4LmpzIiwid2VicGFjazovL3ByZXR0aWVyUGx1Z2luTGlxdWlkLy4vbm9kZV9tb2R1bGVzL29obS1qcy9leHRyYXMvc2VtYW50aWNzLXRvQVNULmpzIiwid2VicGFjazovL3ByZXR0aWVyUGx1Z2luTGlxdWlkLy4vbm9kZV9tb2R1bGVzL29obS1qcy9zcmMvY29tbW9uLmpzIiwid2VicGFjazovL3ByZXR0aWVyUGx1Z2luTGlxdWlkL2V4dGVybmFsIHVtZCB7XCJjb21tb25qc1wiOlwicHJldHRpZXJcIixcImNvbW1vbmpzMlwiOlwicHJldHRpZXJcIixcImFtZFwiOlwicHJldHRpZXIvc3RhbmRhbG9uZVwiLFwicm9vdFwiOlwicHJldHRpZXJcIn0iLCJ3ZWJwYWNrOi8vcHJldHRpZXJQbHVnaW5MaXF1aWQvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vcHJldHRpZXJQbHVnaW5MaXF1aWQvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3ByZXR0aWVyUGx1Z2luTGlxdWlkL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vcHJldHRpZXJQbHVnaW5MaXF1aWQvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9wcmV0dGllclBsdWdpbkxpcXVpZC93ZWJwYWNrL2JlZm9yZS1zdGFydHVwIiwid2VicGFjazovL3ByZXR0aWVyUGx1Z2luTGlxdWlkL3dlYnBhY2svc3RhcnR1cCIsIndlYnBhY2s6Ly9wcmV0dGllclBsdWdpbkxpcXVpZC93ZWJwYWNrL2FmdGVyLXN0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwicHJldHRpZXJcIikpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW1wicHJldHRpZXIvc3RhbmRhbG9uZVwiXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJwcmV0dGllclBsdWdpbkxpcXVpZFwiXSA9IGZhY3RvcnkocmVxdWlyZShcInByZXR0aWVyXCIpKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJwcmV0dGllclBsdWdpbkxpcXVpZFwiXSA9IGZhY3Rvcnkocm9vdFtcInByZXR0aWVyXCJdKTtcbn0pKHRoaXMsIGZ1bmN0aW9uKF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfcHJldHRpZXJfXykge1xucmV0dXJuICIsIm1vZHVsZS5leHBvcnRzID0gU3RyaW5nLnJhd2BMaXF1aWRIVE1MIHtcbiAgTm9kZVxuICAgID0gKEh0bWxOb2RlIHwgbGlxdWlkTm9kZSB8IFRleHROb2RlKSpcblxuICBIdG1sTm9kZSA9XG4gICAgfCBIdG1sQ29tbWVudFxuICAgIHwgSHRtbFJhd1RhZ1xuICAgIHwgSHRtbFZvaWRFbGVtZW50XG4gICAgfCBIdG1sU2VsZkNsb3NpbmdFbGVtZW50XG4gICAgfCBIdG1sVGFnQ2xvc2VcbiAgICB8IEh0bWxUYWdPcGVuXG5cbiAgSHRtbENvbW1lbnQgPSBcIjwhLS1cIiAjKGFueUV4Y2VwdFN0YXI8XCItLT5cIj4gXCItLT5cIilcblxuICAvLyBUaGVzZSBhcmUgYmxhY2sgaG9sZXMsIHdlJ2xsIGlnbm9yZSB3aGF0J3MgaW4gdGhlbVxuICBIdG1sUmF3VGFnID1cbiAgICB8IEh0bWxSYXdUYWdJbXBsPFwic2NyaXB0XCI+XG4gICAgfCBIdG1sUmF3VGFnSW1wbDxcInN0eWxlXCI+XG4gICAgfCBIdG1sUmF3VGFnSW1wbDxcInN2Z1wiPlxuXG4gIEh0bWxSYXdUYWdJbXBsPG5hbWU+ID1cbiAgICAjKFwiPFwiIG5hbWUpIEF0dHJMaXN0IFwiPlwiICMoYW55RXhjZXB0U3RhcjxlbmRUYWc8bmFtZT4+IGVuZFRhZzxuYW1lPilcblxuICBlbmRUYWc8bmFtZT4gPVxuICAgIFwiPC9cIiBuYW1lIHNwYWNlKiBcIj5cIlxuXG4gIEh0bWxWb2lkRWxlbWVudCA9XG4gICAgIyhcIjxcIiB2b2lkRWxlbWVudE5hbWUpIEF0dHJMaXN0IFwiL1wiPyBcIj5cIlxuXG4gIEh0bWxTZWxmQ2xvc2luZ0VsZW1lbnQgPVxuICAgICMoXCI8XCIgdGFnTmFtZU9yTGlxdWlkRHJvcCkgQXR0ckxpc3QgXCIvPlwiXG5cbiAgSHRtbFRhZ09wZW4gPVxuICAgICMoXCI8XCIgdGFnTmFtZU9yTGlxdWlkRHJvcCkgQXR0ckxpc3QgXCI+XCJcblxuICBIdG1sVGFnQ2xvc2UgPVxuICAgICMoXCI8L1wiIHRhZ05hbWVPckxpcXVpZERyb3ApIFwiPlwiXG5cbiAgdGFnTmFtZU9yTGlxdWlkRHJvcCA9XG4gICAgfCB0YWdOYW1lXG4gICAgfCBsaXF1aWREcm9wXG5cbiAgdGFnTmFtZSA9XG4gICAgbGV0dGVyIChhbG51bSB8IFwiLVwiIHwgXCI6XCIpKlxuXG4gIGxpcXVpZFRhZ05hbWUgPVxuICAgIGxldHRlciAoYWxudW0gfCBcIl9cIikqXG5cbiAgQXR0ckxpc3QgPSBBdHRyKlxuXG4gIEF0dHIgPVxuICAgIGxpcXVpZE5vZGUgfCBBdHRyU2luZ2xlUXVvdGVkIHwgQXR0ckRvdWJsZVF1b3RlZCB8IEF0dHJVbnF1b3RlZCB8IGF0dHJFbXB0eVxuXG4gIGF0dHJFbXB0eSA9IGF0dHJOYW1lXG5cbiAgQXR0clVucXVvdGVkID0gYXR0ck5hbWUgXCI9XCIgYXR0clVucXVvdGVkVmFsdWVcbiAgQXR0clNpbmdsZVF1b3RlZCA9IGF0dHJOYW1lIFwiPVwiIFwiJ1wiICMoYXR0clNpbmdsZVF1b3RlZFZhbHVlIFwiJ1wiKVxuICBBdHRyRG91YmxlUXVvdGVkID0gYXR0ck5hbWUgXCI9XCIgXCJcXFwiXCIgIyhhdHRyRG91YmxlUXVvdGVkVmFsdWUgXCJcXFwiXCIpXG5cbiAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jYXR0cmlidXRlcy0yXG4gIGF0dHJOYW1lID0gYW55RXhjZXB0UGx1czwoc3BhY2UgfCBxdW90ZXMgfCBcIj1cIiB8IFwiPlwiIHwgXCIvXCIgfCBcInt7XCIgfCBcInslXCIgfCBjb250cm9scyB8IG5vbmNoYXJhY3RlcnMpPlxuICBhdHRyVW5xdW90ZWRWYWx1ZSA9IChhdHRyVW5xdW90ZWRUZXh0Tm9kZSkqXG4gIGF0dHJTaW5nbGVRdW90ZWRWYWx1ZSA9IChsaXF1aWROb2RlIHwgYXR0clNpbmdsZVF1b3RlZFRleHROb2RlKSpcbiAgYXR0ckRvdWJsZVF1b3RlZFZhbHVlID0gKGxpcXVpZE5vZGUgfCBhdHRyRG91YmxlUXVvdGVkVGV4dE5vZGUpKlxuXG4gIGF0dHJVbnF1b3RlZFRleHROb2RlID0gYW55RXhjZXB0UGx1czwoc3BhY2UgfCBxdW90ZXMgfCBcIj1cIiB8IFwiPFwiIHwgXCI+XCIgfCBcIiR7XCJgXCJ9XCIgfCBcInt7XCIgfCBcInslXCIpPlxuICBhdHRyU2luZ2xlUXVvdGVkVGV4dE5vZGUgPSBhbnlFeGNlcHRQbHVzPChcIidcIiB8IFwie3tcIiB8IFwieyVcIik+XG4gIGF0dHJEb3VibGVRdW90ZWRUZXh0Tm9kZSA9IGFueUV4Y2VwdFBsdXM8KFwiXFxcIlwifCBcInt7XCIgfCBcInslXCIpPlxuXG4gIHF1b3RlcyA9ICBcIidcIiB8IFwiXFxcIlwiXG5cbiAgTGlxdWlkTm9kZSA9IGxpcXVpZE5vZGVcbiAgbGlxdWlkTm9kZSA9IGxpcXVpZFJhd1RhZyB8IGxpcXVpZERyb3AgfCBsaXF1aWRUYWdDbG9zZSB8IGxpcXVpZFRhZ09wZW4gfCBsaXF1aWRUYWcgfCBsaXF1aWRJbmxpbmVDb21tZW50XG5cbiAgbGlxdWlkVGFnT3BlbiA9IFwieyVcIiBcIi1cIj8gc3BhY2UqIGJsb2NrTmFtZSBzcGFjZSogdGFnTWFya3VwIFwiLVwiPyBcIiV9XCJcbiAgbGlxdWlkVGFnQ2xvc2UgPSBcInslXCIgXCItXCI/IHNwYWNlKiBcImVuZFwiIGJsb2NrTmFtZSBzcGFjZSogdGFnTWFya3VwIFwiLVwiPyBcIiV9XCJcbiAgbGlxdWlkVGFnID0gXCJ7JVwiIFwiLVwiPyBzcGFjZSogbGlxdWlkVGFnTmFtZSBzcGFjZT8gdGFnTWFya3VwIFwiLVwiPyBcIiV9XCJcbiAgbGlxdWlkRHJvcCA9IFwie3tcIiBcIi1cIj8gYW55RXhjZXB0U3RhcjwoXCItfX1cIiB8IFwifX1cIik+IFwiLVwiPyBcIn19XCJcbiAgbGlxdWlkSW5saW5lQ29tbWVudCA9IFwieyVcIiBcIi1cIj8gc3BhY2UqIFwiI1wiIHNwYWNlPyB0YWdNYXJrdXAgXCItXCI/IFwiJX1cIlxuXG4gIGxpcXVpZFJhd1RhZyA9XG4gICAgfCBsaXF1aWRSYXdUYWdJbXBsPFwicmF3XCI+XG4gICAgfCBsaXF1aWRSYXdUYWdJbXBsPFwiY29tbWVudFwiPlxuICAgIHwgbGlxdWlkUmF3VGFnSW1wbDxcImphdmFzY3JpcHRcIj5cbiAgICB8IGxpcXVpZFJhd1RhZ0ltcGw8XCJzY2hlbWFcIj5cbiAgICB8IGxpcXVpZFJhd1RhZ0ltcGw8XCJzdHlsZVwiPlxuICBsaXF1aWRSYXdUYWdJbXBsPG5hbWU+ID1cbiAgICBcInslXCIgXCItXCI/IHNwYWNlKiBuYW1lIHNwYWNlKiBcIi1cIj8gXCIlfVwiXG4gICAgYW55RXhjZXB0U3RhcjxsaXF1aWRSYXdUYWdDbG9zZTxuYW1lPj5cbiAgICBcInslXCIgXCItXCI/IHNwYWNlKiBcImVuZFwiIG5hbWUgc3BhY2UqIFwiLVwiPyBcIiV9XCJcbiAgbGlxdWlkUmF3VGFnQ2xvc2U8bmFtZT4gPVxuICAgIFwieyVcIiBcIi1cIj8gc3BhY2UqIFwiZW5kXCIgbmFtZSBzcGFjZSogXCItXCI/IFwiJX1cIlxuXG4gIC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDExL1dELWh0bWwtbWFya3VwLTIwMTEwMTEzL3N5bnRheC5odG1sI3ZvaWQtZWxlbWVudFxuICAvLyBDaGVhdGluZyBhIGJpdCB3aXRoIGJ5IHN0cmV0Y2hpbmcgaXQgdG8gdGhlIGRvY3R5cGVcbiAgdm9pZEVsZW1lbnROYW1lID1cbiAgICB8IGNhc2VJbnNlbnNpdGl2ZTxcIiFkb2N0eXBlXCI+XG4gICAgfCBjYXNlSW5zZW5zaXRpdmU8XCJhcmVhXCI+XG4gICAgfCBjYXNlSW5zZW5zaXRpdmU8XCJiYXNlXCI+XG4gICAgfCBjYXNlSW5zZW5zaXRpdmU8XCJiclwiPlxuICAgIHwgY2FzZUluc2Vuc2l0aXZlPFwiY29sXCI+XG4gICAgfCBjYXNlSW5zZW5zaXRpdmU8XCJjb21tYW5kXCI+XG4gICAgfCBjYXNlSW5zZW5zaXRpdmU8XCJlbWJlZFwiPlxuICAgIHwgY2FzZUluc2Vuc2l0aXZlPFwiaHJcIj5cbiAgICB8IGNhc2VJbnNlbnNpdGl2ZTxcImltZ1wiPlxuICAgIHwgY2FzZUluc2Vuc2l0aXZlPFwiaW5wdXRcIj5cbiAgICB8IGNhc2VJbnNlbnNpdGl2ZTxcImtleWdlblwiPlxuICAgIHwgY2FzZUluc2Vuc2l0aXZlPFwibGlua1wiPlxuICAgIHwgY2FzZUluc2Vuc2l0aXZlPFwibWV0YVwiPlxuICAgIHwgY2FzZUluc2Vuc2l0aXZlPFwicGFyYW1cIj5cbiAgICB8IGNhc2VJbnNlbnNpdGl2ZTxcInNvdXJjZVwiPlxuICAgIHwgY2FzZUluc2Vuc2l0aXZlPFwidHJhY2tcIj5cbiAgICB8IGNhc2VJbnNlbnNpdGl2ZTxcIndiclwiPlxuXG4gIGJsb2NrTmFtZSA9XG4gICAgLy8gU2hvcGlmeSBibG9ja3NcbiAgICB8IFwic3R5bGVcIlxuICAgIHwgXCJmb3JtXCJcbiAgICB8IFwicGFnaW5hdGVcIlxuICAgIC8vIEJhc2UgYmxvY2tzXG4gICAgfCBcImNhcHR1cmVcIlxuICAgIHwgXCJjYXNlXCJcbiAgICB8IFwiZm9yXCJcbiAgICB8IFwiaWZjaGFuZ2VkXCJcbiAgICB8IFwiaWZcIlxuICAgIHwgXCJ1bmxlc3NcIlxuICAgIHwgXCJyYXdcIlxuICAgIHwgXCJ0YWJsZXJvd1wiXG5cbiAgdGFnTWFya3VwID0gYW55RXhjZXB0U3RhcjwoXCItJX1cInwgXCIlfVwiKT5cblxuICBhbnlFeGNlcHQ8bGl0PiA9ICh+IGxpdCBhbnkpXG4gIGFueUV4Y2VwdFN0YXI8bGl0PiA9ICh+IGxpdCBhbnkpKlxuICBhbnlFeGNlcHRQbHVzPGxpdD4gPSAofiBsaXQgYW55KStcbiAgQW55RXhjZXB0PGxpdD4gPSAofiBsaXQgYW55KVxuICBBbnlFeGNlcHRQbHVzPGxpdD4gPSAofiBsaXQgYW55KStcbiAgQW55RXhjZXB0U3RhcjxsaXQ+ID0gKH4gbGl0IGFueSkqXG5cbiAgVGV4dE5vZGUgPSBBbnlFeGNlcHRQbHVzPG9wZW5Db250cm9sPlxuICBvcGVuQ29udHJvbCA9IFwiPFwiIHwgXCJ7e1wiIHwgXCJ7JVwiXG4gIGNvbnRyb2xzID0gXCJcXHV7MDA3Rn1cIi4uXCJcXHV7MDA5Rn1cIlxuICBub25jaGFyYWN0ZXJzID0gXCJcXHV7RkREMH1cIi4uXCJcXHV7RkRFRn1cIlxufVxuYDsiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ1NTX1dISVRFX1NQQUNFX0RFRkFVTFQgPSBleHBvcnRzLkNTU19XSElURV9TUEFDRV9UQUdTID0gZXhwb3J0cy5DU1NfRElTUExBWV9ERUZBVUxUID0gZXhwb3J0cy5DU1NfRElTUExBWV9MSVFVSURfREVGQVVMVCA9IGV4cG9ydHMuQ1NTX0RJU1BMQVlfTElRVUlEX1RBR1MgPSBleHBvcnRzLkNTU19ESVNQTEFZX1RBR1MgPSB2b2lkIDA7XG5jb25zdCBodG1sU3R5bGVzID0gcmVxdWlyZSgnaHRtbC1zdHlsZXMnKTtcbmNvbnN0IGdldENzc1N0eWxlVGFncyA9IChwcm9wZXJ0eSkgPT4gT2JqZWN0LmZyb21FbnRyaWVzKGh0bWxTdHlsZXNcbiAgICAuZmlsdGVyKChodG1sU3R5bGUpID0+IGh0bWxTdHlsZS5zdHlsZVtwcm9wZXJ0eV0pXG4gICAgLmZsYXRNYXAoKGh0bWxTdHlsZSkgPT4gaHRtbFN0eWxlLnNlbGVjdG9yVGV4dFxuICAgIC5zcGxpdCgnLCcpXG4gICAgLm1hcCgoc2VsZWN0b3IpID0+IHNlbGVjdG9yLnRyaW0oKSlcbiAgICAuZmlsdGVyKChzZWxlY3RvcikgPT4gL15bXFxkQS1aYS16XSskLy50ZXN0KHNlbGVjdG9yKSlcbiAgICAubWFwKCh0YWdOYW1lKSA9PiBbdGFnTmFtZSwgaHRtbFN0eWxlLnN0eWxlW3Byb3BlcnR5XV0pKSk7XG5leHBvcnRzLkNTU19ESVNQTEFZX1RBR1MgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGdldENzc1N0eWxlVGFncygnZGlzcGxheScpKSwgeyBidXR0b246ICdpbmxpbmUtYmxvY2snLCB0ZW1wbGF0ZTogJ2lubGluZScsIHNvdXJjZTogJ2Jsb2NrJywgdHJhY2s6ICdibG9jaycsIHNjcmlwdDogJ2Jsb2NrJywgcGFyYW06ICdibG9jaycsIGRldGFpbHM6ICdibG9jaycsIHN1bW1hcnk6ICdibG9jaycsIGRpYWxvZzogJ2Jsb2NrJywgbWV0ZXI6ICdpbmxpbmUtYmxvY2snLCBwcm9ncmVzczogJ2lubGluZS1ibG9jaycsIG9iamVjdDogJ2lubGluZS1ibG9jaycsIHZpZGVvOiAnaW5saW5lLWJsb2NrJywgYXVkaW86ICdpbmxpbmUtYmxvY2snLCBzZWxlY3Q6ICdpbmxpbmUtYmxvY2snLCBvcHRpb246ICdibG9jaycsIG9wdGdyb3VwOiAnYmxvY2snIH0pO1xuZXhwb3J0cy5DU1NfRElTUExBWV9MSVFVSURfVEFHUyA9IHtcbiAgICBpZjogJ2lubGluZScsXG4gICAgdW5sZXNzOiAnaW5saW5lJyxcbiAgICBlbHNlOiAnaW5saW5lJyxcbiAgICBlbHNpZjogJ2lubGluZScsXG4gICAgY2FzZTogJ2lubGluZScsXG4gICAgd2hlbjogJ2lubGluZScsXG4gICAgZm9yOiAnaW5saW5lJyxcbiAgICBjeWNsZTogJ2lubGluZScsXG4gICAgdGFibGVyb3c6ICdibG9jaycsXG4gICAgYnJlYWs6ICdub25lJyxcbiAgICBjb250aW51ZTogJ25vbmUnLFxuICAgIGNvbW1lbnQ6ICdub25lJyxcbiAgICBlY2hvOiAnaW5saW5lJyxcbiAgICBmb3JtOiAnYmxvY2snLFxuICAgIGxheW91dDogJ25vbmUnLFxuICAgIGxpcXVpZDogJ2lubGluZScsXG4gICAgcGFnaW5hdGU6ICdpbmxpbmUnLFxuICAgIHJhdzogJ2lubGluZScsXG4gICAgcmVuZGVyOiAnaW5saW5lJyxcbiAgICBpbmNsdWRlOiAnaW5saW5lJyxcbiAgICBzZWN0aW9uOiAnYmxvY2snLFxuICAgIHN0eWxlOiAnbm9uZScsXG4gICAgYXNzaWduOiAnbm9uZScsXG4gICAgY2FwdHVyZTogJ2lubGluZScsXG4gICAgaW5jcmVtZW50OiAnaW5saW5lJyxcbiAgICBkZWNyZW1lbnQ6ICdpbmxpbmUnLFxufTtcbmV4cG9ydHMuQ1NTX0RJU1BMQVlfTElRVUlEX0RFRkFVTFQgPSAnaW5saW5lJztcbmV4cG9ydHMuQ1NTX0RJU1BMQVlfREVGQVVMVCA9ICdpbmxpbmUnO1xuZXhwb3J0cy5DU1NfV0hJVEVfU1BBQ0VfVEFHUyA9IGdldENzc1N0eWxlVGFncygnd2hpdGUtc3BhY2UnKTtcbmV4cG9ydHMuQ1NTX1dISVRFX1NQQUNFX0RFRkFVTFQgPSAnbm9ybWFsJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVkyOXVjM1JoYm5SekxtVjJZV3gxWVhSbExtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpTGk0dmMzSmpMMk52Ym5OMFlXNTBjeTVsZG1Gc2RXRjBaUzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN1FVRkRRU3hOUVVGTkxGVkJRVlVzUjBGQlVTeFBRVUZQTEVOQlFVTXNZVUZCWVN4RFFVRkRMRU5CUVVNN1FVRkZMME1zVFVGQlRTeGxRVUZsTEVkQlFVY3NRMEZCUXl4UlFVRm5RaXhGUVVGRkxFVkJRVVVzUTBGRE0wTXNUVUZCVFN4RFFVRkRMRmRCUVZjc1EwRkRhRUlzVlVGQlZUdExRVU5RTEUxQlFVMHNRMEZCUXl4RFFVRkRMRk5CUVdNc1JVRkJSU3hGUVVGRkxFTkJRVU1zVTBGQlV5eERRVUZETEV0QlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRenRMUVVOeVJDeFBRVUZQTEVOQlFVTXNRMEZCUXl4VFFVRmpMRVZCUVVVc1JVRkJSU3hEUVVNeFFpeFRRVUZUTEVOQlFVTXNXVUZCV1R0TFFVTnVRaXhMUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZETzB0QlExWXNSMEZCUnl4RFFVRkRMRU5CUVVNc1VVRkJZU3hGUVVGRkxFVkJRVVVzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVNN1MwRkRka01zVFVGQlRTeERRVUZETEVOQlFVTXNVVUZCWVN4RlFVRkZMRVZCUVVVc1EwRkJReXhsUVVGbExFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMHRCUTNwRUxFZEJRVWNzUTBGQlF5eERRVUZETEU5QlFWa3NSVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkJReXhQUVVGUExFVkJRVVVzVTBGQlV5eERRVUZETEV0QlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJReTlFTEVOQlEwb3NRMEZCUXp0QlFVVlRMRkZCUVVFc1owSkJRV2RDTEcxRFFVTjRRaXhsUVVGbExFTkJRVU1zVTBGQlV5eERRVUZETEV0QlJ6ZENMRTFCUVUwc1JVRkJSU3hqUVVGakxFVkJSM1JDTEZGQlFWRXNSVUZCUlN4UlFVRlJMRVZCUTJ4Q0xFMUJRVTBzUlVGQlJTeFBRVUZQTEVWQlEyWXNTMEZCU3l4RlFVRkZMRTlCUVU4c1JVRkRaQ3hOUVVGTkxFVkJRVVVzVDBGQlR5eEZRVU5tTEV0QlFVc3NSVUZCUlN4UFFVRlBMRVZCVFdRc1QwRkJUeXhGUVVGRkxFOUJRVThzUlVGRGFFSXNUMEZCVHl4RlFVRkZMRTlCUVU4c1JVRkRhRUlzVFVGQlRTeEZRVUZGTEU5QlFVOHNSVUZEWml4TFFVRkxMRVZCUVVVc1kwRkJZeXhGUVVOeVFpeFJRVUZSTEVWQlFVVXNZMEZCWXl4RlFVTjRRaXhOUVVGTkxFVkJRVVVzWTBGQll5eEZRVU4wUWl4TFFVRkxMRVZCUVVVc1kwRkJZeXhGUVVOeVFpeExRVUZMTEVWQlFVVXNZMEZCWXl4RlFVTnlRaXhOUVVGTkxFVkJRVVVzWTBGQll5eEZRVU4wUWl4TlFVRk5MRVZCUVVVc1QwRkJUeXhGUVVObUxGRkJRVkVzUlVGQlJTeFBRVUZQTEVsQlEycENPMEZCUlZjc1VVRkJRU3gxUWtGQmRVSXNSMEZCTWtJN1NVRkZOMFFzUlVGQlJTeEZRVUZGTEZGQlFWRTdTVUZEV2l4TlFVRk5MRVZCUVVVc1VVRkJVVHRKUVVOb1FpeEpRVUZKTEVWQlFVVXNVVUZCVVR0SlFVTmtMRXRCUVVzc1JVRkJSU3hSUVVGUk8wbEJRMllzU1VGQlNTeEZRVUZGTEZGQlFWRTdTVUZEWkN4SlFVRkpMRVZCUVVVc1VVRkJVVHRKUVVka0xFZEJRVWNzUlVGQlJTeFJRVUZSTzBsQlEySXNTMEZCU3l4RlFVRkZMRkZCUVZFN1NVRkRaaXhSUVVGUkxFVkJRVVVzVDBGQlR6dEpRVU5xUWl4TFFVRkxMRVZCUVVVc1RVRkJUVHRKUVVOaUxGRkJRVkVzUlVGQlJTeE5RVUZOTzBsQlIyaENMRTlCUVU4c1JVRkJSU3hOUVVGTk8wbEJRMllzU1VGQlNTeEZRVUZGTEZGQlFWRTdTVUZEWkN4SlFVRkpMRVZCUVVVc1QwRkJUenRKUVVOaUxFMUJRVTBzUlVGQlJTeE5RVUZOTzBsQlEyUXNUVUZCVFN4RlFVRkZMRkZCUVZFN1NVRkRhRUlzVVVGQlVTeEZRVUZGTEZGQlFWRTdTVUZEYkVJc1IwRkJSeXhGUVVGRkxGRkJRVkU3U1VGRFlpeE5RVUZOTEVWQlFVVXNVVUZCVVR0SlFVTm9RaXhQUVVGUExFVkJRVVVzVVVGQlVUdEpRVU5xUWl4UFFVRlBMRVZCUVVVc1QwRkJUenRKUVVOb1FpeExRVUZMTEVWQlFVVXNUVUZCVFR0SlFVZGlMRTFCUVUwc1JVRkJSU3hOUVVGTk8wbEJRMlFzVDBGQlR5eEZRVUZGTEZGQlFWRTdTVUZEYWtJc1UwRkJVeXhGUVVGRkxGRkJRVkU3U1VGRGJrSXNVMEZCVXl4RlFVRkZMRkZCUVZFN1EwRkRjRUlzUTBGQlF6dEJRVVZYTEZGQlFVRXNNRUpCUVRCQ0xFZEJRVWNzVVVGQlVTeERRVUZETzBGQlJYUkRMRkZCUVVFc2JVSkJRVzFDTEVkQlFVY3NVVUZCVVN4RFFVRkRPMEZCUXk5Q0xGRkJRVUVzYjBKQlFXOUNMRWRCUXk5Q0xHVkJRV1VzUTBGQlF5eGhRVUZoTEVOQlFVTXNRMEZCUXp0QlFVTndRaXhSUVVGQkxIVkNRVUYxUWl4SFFVRkhMRkZCUVZFc1EwRkJReUo5IiwiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBwYXJzZXJfMSA9IHJlcXVpcmUoXCIuL3BhcnNlclwiKTtcbmNvbnN0IHByaW50ZXJfMSA9IHJlcXVpcmUoXCIuL3ByaW50ZXJcIik7XG5jb25zdCBsYW5ndWFnZXMgPSBbXG4gICAge1xuICAgICAgICBuYW1lOiAnTGlxdWlkSFRNTCcsXG4gICAgICAgIHBhcnNlcnM6IFtwYXJzZXJfMS5saXF1aWRIdG1sTGFuZ3VhZ2VOYW1lXSxcbiAgICAgICAgZXh0ZW5zaW9uczogWycubGlxdWlkJ10sXG4gICAgICAgIHZzY29kZUxhbmd1YWdlSWRzOiBbJ2xpcXVpZCcsICdMaXF1aWQnXSxcbiAgICB9LFxuXTtcbmNvbnN0IG9wdGlvbnMgPSB7XG4gICAgc2luZ2xlTGluZUxpbmtUYWdzOiB7XG4gICAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICAgICAgY2F0ZWdvcnk6ICdIVE1MJyxcbiAgICAgICAgZGVmYXVsdDogZmFsc2UsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnQWx3YXlzIHByaW50IGxpbmsgdGFncyBvbiBhIHNpbmdsZSBsaW5lIHRvIHJlbW92ZSBjbHV0dGVyJyxcbiAgICAgICAgc2luY2U6ICcwLjEuMCcsXG4gICAgfSxcbiAgICBpbmRlbnRTY2hlbWE6IHtcbiAgICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgICAgICBjYXRlZ29yeTogJ0xJUVVJRCcsXG4gICAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ0luZGVudCB0aGUgY29udGVudHMgb2YgdGhlIHslIHNjaGVtYSAlfSB0YWcnLFxuICAgICAgICBzaW5jZTogJzAuMS4wJyxcbiAgICB9LFxufTtcbmNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICAgIHByaW50V2lkdGg6IDEyMCxcbn07XG5jb25zdCBwbHVnaW4gPSB7XG4gICAgbGFuZ3VhZ2VzLFxuICAgIHBhcnNlcnM6IHBhcnNlcl8xLnBhcnNlcnMsXG4gICAgcHJpbnRlcnM6IHByaW50ZXJfMS5wcmludGVycyxcbiAgICBvcHRpb25zLFxuICAgIGRlZmF1bHRPcHRpb25zLFxufTtcbm1vZHVsZS5leHBvcnRzID0gcGx1Z2luO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYVc1a1pYZ3Vhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOXpjbU12YVc1a1pYZ3VkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVUxQkxIRkRRVUV5UkR0QlFVTXpSQ3gxUTBGQmNVTTdRVUZIY2tNc1RVRkJUU3hUUVVGVExFZEJRWE5DTzBsQlEyNURPMUZCUTBVc1NVRkJTU3hGUVVGRkxGbEJRVms3VVVGRGJFSXNUMEZCVHl4RlFVRkZMRU5CUVVNc0swSkJRWE5DTEVOQlFVTTdVVUZEYWtNc1ZVRkJWU3hGUVVGRkxFTkJRVU1zVTBGQlV5eERRVUZETzFGQlEzWkNMR2xDUVVGcFFpeEZRVUZGTEVOQlFVTXNVVUZCVVN4RlFVRkZMRkZCUVZFc1EwRkJRenRMUVVONFF6dERRVU5HTEVOQlFVTTdRVUZGUml4TlFVRk5MRTlCUVU4c1IwRkJiVUk3U1VGRE9VSXNhMEpCUVd0Q0xFVkJRVVU3VVVGRGJFSXNTVUZCU1N4RlFVRkZMRk5CUVZNN1VVRkRaaXhSUVVGUkxFVkJRVVVzVFVGQlRUdFJRVU5vUWl4UFFVRlBMRVZCUVVVc1MwRkJTenRSUVVOa0xGZEJRVmNzUlVGQlJTd3lSRUZCTWtRN1VVRkRlRVVzUzBGQlN5eEZRVUZGTEU5QlFVODdTMEZEWmp0SlFVTkVMRmxCUVZrc1JVRkJSVHRSUVVOYUxFbEJRVWtzUlVGQlJTeFRRVUZUTzFGQlEyWXNVVUZCVVN4RlFVRkZMRkZCUVZFN1VVRkRiRUlzVDBGQlR5eEZRVUZGTEV0QlFVczdVVUZEWkN4WFFVRlhMRVZCUVVVc05rTkJRVFpETzFGQlF6RkVMRXRCUVVzc1JVRkJSU3hQUVVGUE8wdEJRMlk3UTBGRFJpeERRVUZETzBGQlJVWXNUVUZCVFN4alFVRmpMRWRCUVRaQ08wbEJReTlETEZWQlFWVXNSVUZCUlN4SFFVRkhPME5CUTJoQ0xFTkJRVU03UVVGRlJpeE5RVUZOTEUxQlFVMHNSMEZCTWtJN1NVRkRja01zVTBGQlV6dEpRVU5VTEU5QlFVOHNSVUZCVUN4blFrRkJUenRKUVVOUUxGRkJRVkVzUlVGQlVpeHJRa0ZCVVR0SlFVTlNMRTlCUVU4N1NVRkRVQ3hqUVVGak8wTkJRMllzUTBGQlF6dEJRVVZHTEdsQ1FVRlRMRTFCUVUwc1EwRkJReUo5IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLndhbGsgPSBleHBvcnRzLmNzdFRvQXN0ID0gZXhwb3J0cy50b0xpcXVpZEh0bWxBU1QgPSBleHBvcnRzLmlzQnJhbmNoZWRUYWcgPSB2b2lkIDA7XG5jb25zdCBjc3RfMSA9IHJlcXVpcmUoXCIuLi9wYXJzZXIvY3N0XCIpO1xuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuLi90eXBlc1wiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5jb25zdCBlcnJvcnNfMSA9IHJlcXVpcmUoXCIuLi9wYXJzZXIvZXJyb3JzXCIpO1xuZnVuY3Rpb24gaXNCcmFuY2hlZFRhZyhub2RlKSB7XG4gICAgcmV0dXJuIChub2RlLnR5cGUgPT09IHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZFRhZyAmJlxuICAgICAgICBbJ2lmJywgJ2ZvcicsICd1bmxlc3MnLCAnY2FzZSddLmluY2x1ZGVzKG5vZGUubmFtZSkpO1xufVxuZXhwb3J0cy5pc0JyYW5jaGVkVGFnID0gaXNCcmFuY2hlZFRhZztcbmZ1bmN0aW9uIGlzQnJhbmNoVGFnKG5vZGUpIHtcbiAgICByZXR1cm4gKG5vZGUudHlwZSA9PT0gdHlwZXNfMS5Ob2RlVHlwZXMuTGlxdWlkVGFnICYmXG4gICAgICAgIFsnZWxzZScsICdlbHNpZicsICd3aGVuJ10uaW5jbHVkZXMobm9kZS5uYW1lKSk7XG59XG5mdW5jdGlvbiB0b0xpcXVpZEh0bWxBU1QodGV4dCkge1xuICAgIGNvbnN0IGNzdCA9ICgwLCBjc3RfMS50b0xpcXVpZEh0bWxDU1QpKHRleHQpO1xuICAgIGNvbnN0IHJvb3QgPSB7XG4gICAgICAgIHR5cGU6IHR5cGVzXzEuTm9kZVR5cGVzLkRvY3VtZW50LFxuICAgICAgICBzb3VyY2U6IHRleHQsXG4gICAgICAgIGNoaWxkcmVuOiBjc3RUb0FzdChjc3QsIHRleHQpLFxuICAgICAgICBuYW1lOiAnI2RvY3VtZW50JyxcbiAgICAgICAgcG9zaXRpb246IHtcbiAgICAgICAgICAgIHN0YXJ0OiAwLFxuICAgICAgICAgICAgZW5kOiB0ZXh0Lmxlbmd0aCxcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIHJldHVybiByb290O1xufVxuZXhwb3J0cy50b0xpcXVpZEh0bWxBU1QgPSB0b0xpcXVpZEh0bWxBU1Q7XG5jbGFzcyBBU1RCdWlsZGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihzb3VyY2UpIHtcbiAgICAgICAgdGhpcy5hc3QgPSBbXTtcbiAgICAgICAgdGhpcy5jdXJzb3IgPSBbXTtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgfVxuICAgIGdldCBjdXJyZW50KCkge1xuICAgICAgICByZXR1cm4gKDAsIHV0aWxzXzEuZGVlcEdldCkodGhpcy5jdXJzb3IsIHRoaXMuYXN0KTtcbiAgICB9XG4gICAgZ2V0IGN1cnJlbnRQb3NpdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLmN1cnJlbnQgfHwgW10pLmxlbmd0aCAtIDE7XG4gICAgfVxuICAgIGdldCBwYXJlbnQoKSB7XG4gICAgICAgIGlmICh0aGlzLmN1cnNvci5sZW5ndGggPT0gMClcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiAoMCwgdXRpbHNfMS5kZWVwR2V0KSgoMCwgdXRpbHNfMS5kcm9wTGFzdCkoMSwgdGhpcy5jdXJzb3IpLCB0aGlzLmFzdCk7XG4gICAgfVxuICAgIG9wZW4obm9kZSkge1xuICAgICAgICB0aGlzLmN1cnJlbnQucHVzaChub2RlKTtcbiAgICAgICAgdGhpcy5jdXJzb3IucHVzaCh0aGlzLmN1cnJlbnRQb3NpdGlvbik7XG4gICAgICAgIHRoaXMuY3Vyc29yLnB1c2goJ2NoaWxkcmVuJyk7XG4gICAgICAgIGlmIChpc0JyYW5jaGVkVGFnKG5vZGUpKSB7XG4gICAgICAgICAgICB0aGlzLm9wZW4oe1xuICAgICAgICAgICAgICAgIHR5cGU6IHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZEJyYW5jaCxcbiAgICAgICAgICAgICAgICBuYW1lOiBudWxsLFxuICAgICAgICAgICAgICAgIG1hcmt1cDogJycsXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IG5vZGUucG9zaXRpb24uZW5kLFxuICAgICAgICAgICAgICAgICAgICBlbmQ6IG5vZGUucG9zaXRpb24uZW5kLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYmxvY2tTdGFydFBvc2l0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBub2RlLnBvc2l0aW9uLmVuZCxcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBub2RlLnBvc2l0aW9uLmVuZCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXSxcbiAgICAgICAgICAgICAgICB3aGl0ZXNwYWNlU3RhcnQ6ICcnLFxuICAgICAgICAgICAgICAgIHdoaXRlc3BhY2VFbmQ6ICcnLFxuICAgICAgICAgICAgICAgIHNvdXJjZTogdGhpcy5zb3VyY2UsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwdXNoKG5vZGUpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAobm9kZS50eXBlID09PSB0eXBlc18xLk5vZGVUeXBlcy5MaXF1aWRUYWcgJiYgaXNCcmFuY2hUYWcobm9kZSkpIHtcbiAgICAgICAgICAgIHRoaXMuY3Vyc29yLnBvcCgpO1xuICAgICAgICAgICAgdGhpcy5jdXJzb3IucG9wKCk7XG4gICAgICAgICAgICB0aGlzLm9wZW4oe1xuICAgICAgICAgICAgICAgIG5hbWU6IG5vZGUubmFtZSxcbiAgICAgICAgICAgICAgICB0eXBlOiB0eXBlc18xLk5vZGVUeXBlcy5MaXF1aWRCcmFuY2gsXG4gICAgICAgICAgICAgICAgbWFya3VwOiBub2RlLm1hcmt1cCxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogT2JqZWN0LmFzc2lnbih7fSwgbm9kZS5wb3NpdGlvbiksXG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtdLFxuICAgICAgICAgICAgICAgIGJsb2NrU3RhcnRQb3NpdGlvbjogT2JqZWN0LmFzc2lnbih7fSwgbm9kZS5wb3NpdGlvbiksXG4gICAgICAgICAgICAgICAgd2hpdGVzcGFjZVN0YXJ0OiBub2RlLndoaXRlc3BhY2VTdGFydCxcbiAgICAgICAgICAgICAgICB3aGl0ZXNwYWNlRW5kOiBub2RlLndoaXRlc3BhY2VFbmQsXG4gICAgICAgICAgICAgICAgc291cmNlOiB0aGlzLnNvdXJjZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKCgoX2EgPSB0aGlzLnBhcmVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnR5cGUpID09PSB0eXBlc18xLk5vZGVUeXBlcy5MaXF1aWRCcmFuY2gpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudC5wb3NpdGlvbi5lbmQgPSBub2RlLnBvc2l0aW9uLmVuZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY3VycmVudC5wdXNoKG5vZGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNsb3NlKG5vZGUsIG5vZGVUeXBlKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZywgX2g7XG4gICAgICAgIGlmICgoKF9hID0gdGhpcy5wYXJlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50eXBlKSA9PT0gdHlwZXNfMS5Ob2RlVHlwZXMuTGlxdWlkQnJhbmNoKSB7XG4gICAgICAgICAgICB0aGlzLnBhcmVudC5wb3NpdGlvbi5lbmQgPSBub2RlLmxvY1N0YXJ0O1xuICAgICAgICAgICAgdGhpcy5jdXJzb3IucG9wKCk7XG4gICAgICAgICAgICB0aGlzLmN1cnNvci5wb3AoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZ2V0TmFtZSh0aGlzLnBhcmVudCkgIT09IGdldE5hbWUobm9kZSkgfHxcbiAgICAgICAgICAgICgoX2IgPSB0aGlzLnBhcmVudCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnR5cGUpICE9PSBub2RlVHlwZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLkxpcXVpZEhUTUxBU1RQYXJzaW5nRXJyb3IoYEF0dGVtcHRpbmcgdG8gY2xvc2UgJHtub2RlVHlwZX0gJyR7bm9kZS5uYW1lfScgYmVmb3JlICR7KF9jID0gdGhpcy5wYXJlbnQpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy50eXBlfSAnJHsoX2QgPSB0aGlzLnBhcmVudCkgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLm5hbWV9JyB3YXMgY2xvc2VkYCwgdGhpcy5zb3VyY2UsICgoX2YgPSAoX2UgPSB0aGlzLnBhcmVudCkgPT09IG51bGwgfHwgX2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lLnBvc2l0aW9uKSA9PT0gbnVsbCB8fCBfZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Yuc3RhcnQpIHx8IDAsIG5vZGUubG9jRW5kKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBhcmVudC5wb3NpdGlvbi5lbmQgPSBub2RlLmxvY0VuZDtcbiAgICAgICAgdGhpcy5wYXJlbnQuYmxvY2tFbmRQb3NpdGlvbiA9IHBvc2l0aW9uKG5vZGUpO1xuICAgICAgICBpZiAodGhpcy5wYXJlbnQudHlwZSA9PSB0eXBlc18xLk5vZGVUeXBlcy5MaXF1aWRUYWcgJiZcbiAgICAgICAgICAgIG5vZGUudHlwZSA9PSBjc3RfMS5Db25jcmV0ZU5vZGVUeXBlcy5MaXF1aWRUYWdDbG9zZSkge1xuICAgICAgICAgICAgdGhpcy5wYXJlbnQuZGVsaW1pdGVyV2hpdGVzcGFjZVN0YXJ0ID0gKF9nID0gbm9kZS53aGl0ZXNwYWNlU3RhcnQpICE9PSBudWxsICYmIF9nICE9PSB2b2lkIDAgPyBfZyA6ICcnO1xuICAgICAgICAgICAgdGhpcy5wYXJlbnQuZGVsaW1pdGVyV2hpdGVzcGFjZUVuZCA9IChfaCA9IG5vZGUud2hpdGVzcGFjZUVuZCkgIT09IG51bGwgJiYgX2ggIT09IHZvaWQgMCA/IF9oIDogJyc7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jdXJzb3IucG9wKCk7XG4gICAgICAgIHRoaXMuY3Vyc29yLnBvcCgpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldE5hbWUobm9kZSkge1xuICAgIGlmICghbm9kZSlcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgc3dpdGNoIChub2RlLnR5cGUpIHtcbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5IdG1sRWxlbWVudDpcbiAgICAgICAgY2FzZSBjc3RfMS5Db25jcmV0ZU5vZGVUeXBlcy5IdG1sVGFnQ2xvc2U6XG4gICAgICAgICAgICBpZiAodHlwZW9mIG5vZGUubmFtZSA9PT0gJ3N0cmluZycpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGUubmFtZTtcbiAgICAgICAgICAgIHJldHVybiBge3ske25vZGUubmFtZS5tYXJrdXAudHJpbSgpfX19YDtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBub2RlLm5hbWU7XG4gICAgfVxufVxuZnVuY3Rpb24gY3N0VG9Bc3QoY3N0LCBzb3VyY2UpIHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZiwgX2csIF9oO1xuICAgIGNvbnN0IGJ1aWxkZXIgPSBuZXcgQVNUQnVpbGRlcihzb3VyY2UpO1xuICAgIGZvciAoY29uc3Qgbm9kZSBvZiBjc3QpIHtcbiAgICAgICAgc3dpdGNoIChub2RlLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgY3N0XzEuQ29uY3JldGVOb2RlVHlwZXMuVGV4dE5vZGU6IHtcbiAgICAgICAgICAgICAgICBidWlsZGVyLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiB0eXBlc18xLk5vZGVUeXBlcy5UZXh0Tm9kZSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG5vZGUudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBwb3NpdGlvbihub2RlKSxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBjc3RfMS5Db25jcmV0ZU5vZGVUeXBlcy5MaXF1aWREcm9wOiB7XG4gICAgICAgICAgICAgICAgYnVpbGRlci5wdXNoKHRvTGlxdWlkRHJvcChub2RlLCBzb3VyY2UpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgY3N0XzEuQ29uY3JldGVOb2RlVHlwZXMuTGlxdWlkVGFnT3Blbjoge1xuICAgICAgICAgICAgICAgIGJ1aWxkZXIub3Blbih7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZFRhZyxcbiAgICAgICAgICAgICAgICAgICAgbWFya3VwOiBub2RlLm1hcmt1cCxcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uKG5vZGUpLFxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW10sXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IG5vZGUubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgd2hpdGVzcGFjZVN0YXJ0OiAoX2EgPSBub2RlLndoaXRlc3BhY2VTdGFydCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJycsXG4gICAgICAgICAgICAgICAgICAgIHdoaXRlc3BhY2VFbmQ6IChfYiA9IG5vZGUud2hpdGVzcGFjZUVuZCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogJycsXG4gICAgICAgICAgICAgICAgICAgIGJsb2NrU3RhcnRQb3NpdGlvbjogcG9zaXRpb24obm9kZSksXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgY3N0XzEuQ29uY3JldGVOb2RlVHlwZXMuTGlxdWlkVGFnQ2xvc2U6IHtcbiAgICAgICAgICAgICAgICBidWlsZGVyLmNsb3NlKG5vZGUsIHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZFRhZyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIGNzdF8xLkNvbmNyZXRlTm9kZVR5cGVzLkxpcXVpZFRhZzoge1xuICAgICAgICAgICAgICAgIGJ1aWxkZXIucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZFRhZyxcbiAgICAgICAgICAgICAgICAgICAgbWFya3VwOiBub2RlLm1hcmt1cCxcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uKG5vZGUpLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBub2RlLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHdoaXRlc3BhY2VTdGFydDogKF9jID0gbm9kZS53aGl0ZXNwYWNlU3RhcnQpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6ICcnLFxuICAgICAgICAgICAgICAgICAgICB3aGl0ZXNwYWNlRW5kOiAoX2QgPSBub2RlLndoaXRlc3BhY2VFbmQpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6ICcnLFxuICAgICAgICAgICAgICAgICAgICBibG9ja1N0YXJ0UG9zaXRpb246IHBvc2l0aW9uKG5vZGUpLFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2UsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIGNzdF8xLkNvbmNyZXRlTm9kZVR5cGVzLkxpcXVpZFJhd1RhZzoge1xuICAgICAgICAgICAgICAgIGJ1aWxkZXIucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZFJhd1RhZyxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogbm9kZS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiBub2RlLmJvZHksXG4gICAgICAgICAgICAgICAgICAgIHdoaXRlc3BhY2VTdGFydDogKF9lID0gbm9kZS53aGl0ZXNwYWNlU3RhcnQpICE9PSBudWxsICYmIF9lICE9PSB2b2lkIDAgPyBfZSA6ICcnLFxuICAgICAgICAgICAgICAgICAgICB3aGl0ZXNwYWNlRW5kOiAoX2YgPSBub2RlLndoaXRlc3BhY2VFbmQpICE9PSBudWxsICYmIF9mICE9PSB2b2lkIDAgPyBfZiA6ICcnLFxuICAgICAgICAgICAgICAgICAgICBkZWxpbWl0ZXJXaGl0ZXNwYWNlU3RhcnQ6IChfZyA9IG5vZGUuZGVsaW1pdGVyV2hpdGVzcGFjZVN0YXJ0KSAhPT0gbnVsbCAmJiBfZyAhPT0gdm9pZCAwID8gX2cgOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgZGVsaW1pdGVyV2hpdGVzcGFjZUVuZDogKF9oID0gbm9kZS5kZWxpbWl0ZXJXaGl0ZXNwYWNlRW5kKSAhPT0gbnVsbCAmJiBfaCAhPT0gdm9pZCAwID8gX2ggOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uKG5vZGUpLFxuICAgICAgICAgICAgICAgICAgICBibG9ja1N0YXJ0UG9zaXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBub2RlLmJsb2NrU3RhcnRMb2NTdGFydCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogbm9kZS5ibG9ja1N0YXJ0TG9jRW5kLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBibG9ja0VuZFBvc2l0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogbm9kZS5ibG9ja0VuZExvY1N0YXJ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBub2RlLmJsb2NrRW5kTG9jRW5kLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2UsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIGNzdF8xLkNvbmNyZXRlTm9kZVR5cGVzLkh0bWxUYWdPcGVuOiB7XG4gICAgICAgICAgICAgICAgYnVpbGRlci5vcGVuKHRvSHRtbEVsZW1lbnQobm9kZSwgc291cmNlKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIGNzdF8xLkNvbmNyZXRlTm9kZVR5cGVzLkh0bWxUYWdDbG9zZToge1xuICAgICAgICAgICAgICAgIGJ1aWxkZXIuY2xvc2Uobm9kZSwgdHlwZXNfMS5Ob2RlVHlwZXMuSHRtbEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBjc3RfMS5Db25jcmV0ZU5vZGVUeXBlcy5IdG1sVm9pZEVsZW1lbnQ6IHtcbiAgICAgICAgICAgICAgICBidWlsZGVyLnB1c2godG9IdG1sVm9pZEVsZW1lbnQobm9kZSwgc291cmNlKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIGNzdF8xLkNvbmNyZXRlTm9kZVR5cGVzLkh0bWxTZWxmQ2xvc2luZ0VsZW1lbnQ6IHtcbiAgICAgICAgICAgICAgICBidWlsZGVyLnB1c2godG9IdG1sU2VsZkNsb3NpbmdFbGVtZW50KG5vZGUsIHNvdXJjZSkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBjc3RfMS5Db25jcmV0ZU5vZGVUeXBlcy5IdG1sQ29tbWVudDoge1xuICAgICAgICAgICAgICAgIGJ1aWxkZXIucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxDb21tZW50LFxuICAgICAgICAgICAgICAgICAgICBib2R5OiBub2RlLmJvZHksXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBwb3NpdGlvbihub2RlKSxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBjc3RfMS5Db25jcmV0ZU5vZGVUeXBlcy5IdG1sUmF3VGFnOiB7XG4gICAgICAgICAgICAgICAgYnVpbGRlci5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogdHlwZXNfMS5Ob2RlVHlwZXMuSHRtbFJhd05vZGUsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IG5vZGUubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgYm9keTogbm9kZS5ib2R5LFxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB0b0F0dHJpYnV0ZXMobm9kZS5hdHRyTGlzdCB8fCBbXSwgc291cmNlKSxcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uKG5vZGUpLFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgIGJsb2NrU3RhcnRQb3NpdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IG5vZGUuYmxvY2tTdGFydExvY1N0YXJ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBub2RlLmJsb2NrU3RhcnRMb2NFbmQsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGJsb2NrRW5kUG9zaXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBub2RlLmJsb2NrRW5kTG9jU3RhcnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IG5vZGUuYmxvY2tFbmRMb2NFbmQsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIGNzdF8xLkNvbmNyZXRlTm9kZVR5cGVzLkF0dHJFbXB0eToge1xuICAgICAgICAgICAgICAgIGJ1aWxkZXIucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IHR5cGVzXzEuTm9kZVR5cGVzLkF0dHJFbXB0eSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogbm9kZS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogcG9zaXRpb24obm9kZSksXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgY3N0XzEuQ29uY3JldGVOb2RlVHlwZXMuQXR0clNpbmdsZVF1b3RlZDpcbiAgICAgICAgICAgIGNhc2UgY3N0XzEuQ29uY3JldGVOb2RlVHlwZXMuQXR0ckRvdWJsZVF1b3RlZDpcbiAgICAgICAgICAgIGNhc2UgY3N0XzEuQ29uY3JldGVOb2RlVHlwZXMuQXR0clVucXVvdGVkOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYWJzdHJhY3ROb2RlID0ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBub2RlLnR5cGUsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IG5vZGUubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uKG5vZGUpLFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZVBvc2l0aW9uOiB7IHN0YXJ0OiAtMSwgZW5kOiAtMSB9LFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogW10sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRvQXR0cmlidXRlVmFsdWUobm9kZS52YWx1ZSwgc291cmNlKTtcbiAgICAgICAgICAgICAgICBhYnN0cmFjdE5vZGUudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBhYnN0cmFjdE5vZGUuYXR0cmlidXRlUG9zaXRpb24gPSB0b0F0dHJpYnV0ZVBvc2l0aW9uKG5vZGUsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBidWlsZGVyLnB1c2goYWJzdHJhY3ROb2RlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICAoMCwgdXRpbHNfMS5hc3NlcnROZXZlcikobm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGJ1aWxkZXIuYXN0O1xufVxuZXhwb3J0cy5jc3RUb0FzdCA9IGNzdFRvQXN0O1xuZnVuY3Rpb24gdG9BdHRyaWJ1dGVQb3NpdGlvbihub2RlLCB2YWx1ZSkge1xuICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXJ0OiBub2RlLmxvY1N0YXJ0ICsgbm9kZS5uYW1lLmxlbmd0aCArICc9Jy5sZW5ndGggKyAnXCInLmxlbmd0aCxcbiAgICAgICAgICAgIGVuZDogbm9kZS5sb2NTdGFydCArIG5vZGUubmFtZS5sZW5ndGggKyAnPScubGVuZ3RoICsgJ1wiJy5sZW5ndGgsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0OiB2YWx1ZVswXS5wb3NpdGlvbi5zdGFydCxcbiAgICAgICAgZW5kOiB2YWx1ZVt2YWx1ZS5sZW5ndGggLSAxXS5wb3NpdGlvbi5lbmQsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHRvQXR0cmlidXRlVmFsdWUodmFsdWUsIHNvdXJjZSkge1xuICAgIHJldHVybiBjc3RUb0FzdCh2YWx1ZSwgc291cmNlKTtcbn1cbmZ1bmN0aW9uIHRvQXR0cmlidXRlcyhhdHRyTGlzdCwgc291cmNlKSB7XG4gICAgcmV0dXJuIGNzdFRvQXN0KGF0dHJMaXN0LCBzb3VyY2UpO1xufVxuZnVuY3Rpb24gdG9OYW1lKG5hbWUsIHNvdXJjZSkge1xuICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycpXG4gICAgICAgIHJldHVybiBuYW1lO1xuICAgIHJldHVybiB0b0xpcXVpZERyb3AobmFtZSwgc291cmNlKTtcbn1cbmZ1bmN0aW9uIHRvTGlxdWlkRHJvcChub2RlLCBzb3VyY2UpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZERyb3AsXG4gICAgICAgIG1hcmt1cDogbm9kZS5tYXJrdXAsXG4gICAgICAgIHdoaXRlc3BhY2VTdGFydDogKF9hID0gbm9kZS53aGl0ZXNwYWNlU3RhcnQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICcnLFxuICAgICAgICB3aGl0ZXNwYWNlRW5kOiAoX2IgPSBub2RlLndoaXRlc3BhY2VFbmQpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6ICcnLFxuICAgICAgICBwb3NpdGlvbjogcG9zaXRpb24obm9kZSksXG4gICAgICAgIHNvdXJjZSxcbiAgICB9O1xufVxuZnVuY3Rpb24gdG9IdG1sRWxlbWVudChub2RlLCBzb3VyY2UpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiB0eXBlc18xLk5vZGVUeXBlcy5IdG1sRWxlbWVudCxcbiAgICAgICAgbmFtZTogdG9OYW1lKG5vZGUubmFtZSwgc291cmNlKSxcbiAgICAgICAgYXR0cmlidXRlczogdG9BdHRyaWJ1dGVzKG5vZGUuYXR0ckxpc3QgfHwgW10sIHNvdXJjZSksXG4gICAgICAgIHBvc2l0aW9uOiBwb3NpdGlvbihub2RlKSxcbiAgICAgICAgYmxvY2tTdGFydFBvc2l0aW9uOiBwb3NpdGlvbihub2RlKSxcbiAgICAgICAgYmxvY2tFbmRQb3NpdGlvbjogeyBzdGFydDogLTEsIGVuZDogLTEgfSxcbiAgICAgICAgY2hpbGRyZW46IFtdLFxuICAgICAgICBzb3VyY2UsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHRvSHRtbFZvaWRFbGVtZW50KG5vZGUsIHNvdXJjZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxWb2lkRWxlbWVudCxcbiAgICAgICAgbmFtZTogbm9kZS5uYW1lLFxuICAgICAgICBhdHRyaWJ1dGVzOiB0b0F0dHJpYnV0ZXMobm9kZS5hdHRyTGlzdCB8fCBbXSwgc291cmNlKSxcbiAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uKG5vZGUpLFxuICAgICAgICBibG9ja1N0YXJ0UG9zaXRpb246IHBvc2l0aW9uKG5vZGUpLFxuICAgICAgICBzb3VyY2UsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHRvSHRtbFNlbGZDbG9zaW5nRWxlbWVudChub2RlLCBzb3VyY2UpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiB0eXBlc18xLk5vZGVUeXBlcy5IdG1sU2VsZkNsb3NpbmdFbGVtZW50LFxuICAgICAgICBuYW1lOiB0b05hbWUobm9kZS5uYW1lLCBzb3VyY2UpLFxuICAgICAgICBhdHRyaWJ1dGVzOiB0b0F0dHJpYnV0ZXMobm9kZS5hdHRyTGlzdCB8fCBbXSwgc291cmNlKSxcbiAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uKG5vZGUpLFxuICAgICAgICBibG9ja1N0YXJ0UG9zaXRpb246IHBvc2l0aW9uKG5vZGUpLFxuICAgICAgICBzb3VyY2UsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHBvc2l0aW9uKG5vZGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdGFydDogbm9kZS5sb2NTdGFydCxcbiAgICAgICAgZW5kOiBub2RlLmxvY0VuZCxcbiAgICB9O1xufVxuZnVuY3Rpb24gd2Fsayhhc3QsIGZuLCBwYXJlbnROb2RlKSB7XG4gICAgZm9yIChjb25zdCBrZXkgb2YgWydjaGlsZHJlbicsICdhdHRyaWJ1dGVzJ10pIHtcbiAgICAgICAgaWYgKGtleSBpbiBhc3QpIHtcbiAgICAgICAgICAgIGFzdFtrZXldLmZvckVhY2goKG5vZGUpID0+IHdhbGsobm9kZSwgZm4sIGFzdCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICgndmFsdWUnIGluIGFzdCkge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShhc3QudmFsdWUpKSB7XG4gICAgICAgICAgICBhc3QudmFsdWUuZm9yRWFjaCgobm9kZSkgPT4gd2Fsayhub2RlLCBmbiwgYXN0KSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCduYW1lJyBpbiBhc3QpIHtcbiAgICAgICAgaWYgKGFzdC5uYW1lICYmIHR5cGVvZiBhc3QubmFtZSAhPT0gJ3N0cmluZycgJiYgYXN0Lm5hbWUudHlwZSkge1xuICAgICAgICAgICAgZm4oYXN0Lm5hbWUsIGFzdCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm4oYXN0LCBwYXJlbnROb2RlKTtcbn1cbmV4cG9ydHMud2FsayA9IHdhbGs7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lZWE4wTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2lMaTR2TGk0dmMzSmpMM0JoY25ObGNpOWhjM1F1ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN08wRkJRVUVzYzBOQmFVSnpRanRCUVVOMFFpeHRRMEZCT0VNN1FVRkRPVU1zYlVOQlFYbEVPMEZCUTNwRUxEUkRRVUUwUkR0QlFYbExOVVFzVTBGQlowSXNZVUZCWVN4RFFVRkRMRWxCUVc5Q08wbEJRMmhFTEU5QlFVOHNRMEZEVEN4SlFVRkpMRU5CUVVNc1NVRkJTU3hMUVVGTExHbENRVUZUTEVOQlFVTXNVMEZCVXp0UlFVTnFReXhEUVVGRExFbEJRVWtzUlVGQlJTeExRVUZMTEVWQlFVVXNVVUZCVVN4RlFVRkZMRTFCUVUwc1EwRkJReXhEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUTNCRUxFTkJRVU03UVVGRFNpeERRVUZETzBGQlRFUXNjME5CUzBNN1FVRkhSQ3hUUVVGVExGZEJRVmNzUTBGQlF5eEpRVUZ2UWp0SlFVTjJReXhQUVVGUExFTkJRMHdzU1VGQlNTeERRVUZETEVsQlFVa3NTMEZCU3l4cFFrRkJVeXhEUVVGRExGTkJRVk03VVVGRGFrTXNRMEZCUXl4TlFVRk5MRVZCUVVVc1QwRkJUeXhGUVVGRkxFMUJRVTBzUTBGQlF5eERRVUZETEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRemxETEVOQlFVTTdRVUZEU2l4RFFVRkRPMEZCUlVRc1UwRkJaMElzWlVGQlpTeERRVUZETEVsQlFWazdTVUZETVVNc1RVRkJUU3hIUVVGSExFZEJRVWNzU1VGQlFTeHhRa0ZCWlN4RlFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wbEJRMnhETEUxQlFVMHNTVUZCU1N4SFFVRnBRanRSUVVONlFpeEpRVUZKTEVWQlFVVXNhVUpCUVZNc1EwRkJReXhSUVVGUk8xRkJRM2hDTEUxQlFVMHNSVUZCUlN4SlFVRkpPMUZCUTFvc1VVRkJVU3hGUVVGRkxGRkJRVkVzUTBGQlF5eEhRVUZITEVWQlFVVXNTVUZCU1N4RFFVRkRPMUZCUXpkQ0xFbEJRVWtzUlVGQlJTeFhRVUZYTzFGQlEycENMRkZCUVZFc1JVRkJSVHRaUVVOU0xFdEJRVXNzUlVGQlJTeERRVUZETzFsQlExSXNSMEZCUnl4RlFVRkZMRWxCUVVrc1EwRkJReXhOUVVGTk8xTkJRMnBDTzB0QlEwWXNRMEZCUXp0SlFVTkdMRTlCUVU4c1NVRkJTU3hEUVVGRE8wRkJRMlFzUTBGQlF6dEJRV0pFTERCRFFXRkRPMEZCUlVRc1RVRkJUU3hWUVVGVk8wbEJTMlFzV1VGQldTeE5RVUZqTzFGQlEzaENMRWxCUVVrc1EwRkJReXhIUVVGSExFZEJRVWNzUlVGQlJTeERRVUZETzFGQlEyUXNTVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhGUVVGRkxFTkJRVU03VVVGRGFrSXNTVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhOUVVGTkxFTkJRVU03U1VGRGRrSXNRMEZCUXp0SlFVVkVMRWxCUVVrc1QwRkJUenRSUVVOVUxFOUJRVThzU1VGQlFTeGxRVUZQTEVWQlFXMUNMRWxCUVVrc1EwRkJReXhOUVVGTkxFVkJRVVVzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCY1VJc1EwRkJRenRKUVVNNVJTeERRVUZETzBsQlJVUXNTVUZCU1N4bFFVRmxPMUZCUTJwQ0xFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4SlFVRkpMRVZCUVVVc1EwRkJReXhEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVOQlFVTTdTVUZEZWtNc1EwRkJRenRKUVVWRUxFbEJRVWtzVFVGQlRUdFJRVU5TTEVsQlFVa3NTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhOUVVGTkxFbEJRVWtzUTBGQlF6dFpRVUZGTEU5QlFVOHNVMEZCVXl4RFFVRkRPMUZCUXpsRExFOUJRVThzU1VGQlFTeGxRVUZQTEVWQlFUQkNMRWxCUVVFc1owSkJRVkVzUlVGQlF5eERRVUZETEVWQlFVVXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhGUVVGRkxFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0SlFVTTVSU3hEUVVGRE8wbEJSVVFzU1VGQlNTeERRVUZETEVsQlFXOUNPMUZCUTNaQ0xFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8xRkJRM2hDTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eGxRVUZsTEVOQlFVTXNRMEZCUXp0UlFVTjJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRenRSUVVVM1FpeEpRVUZKTEdGQlFXRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSVHRaUVVOMlFpeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRPMmRDUVVOU0xFbEJRVWtzUlVGQlJTeHBRa0ZCVXl4RFFVRkRMRmxCUVZrN1owSkJRelZDTEVsQlFVa3NSVUZCUlN4SlFVRkpPMmRDUVVOV0xFMUJRVTBzUlVGQlJTeEZRVUZGTzJkQ1FVTldMRkZCUVZFc1JVRkJSVHR2UWtGRFVpeExRVUZMTEVWQlFVVXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhIUVVGSE8yOUNRVU40UWl4SFFVRkhMRVZCUVVVc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eEhRVUZITzJsQ1FVTjJRanRuUWtGRFJDeHJRa0ZCYTBJc1JVRkJSVHR2UWtGRGJFSXNTMEZCU3l4RlFVRkZMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zUjBGQlJ6dHZRa0ZEZUVJc1IwRkJSeXhGUVVGRkxFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNSMEZCUnp0cFFrRkRka0k3WjBKQlEwUXNVVUZCVVN4RlFVRkZMRVZCUVVVN1owSkJRMW9zWlVGQlpTeEZRVUZGTEVWQlFVVTdaMEpCUTI1Q0xHRkJRV0VzUlVGQlJTeEZRVUZGTzJkQ1FVTnFRaXhOUVVGTkxFVkJRVVVzU1VGQlNTeERRVUZETEUxQlFVMDdZVUZEY0VJc1EwRkJReXhEUVVGRE8xTkJRMG83U1VGRFNDeERRVUZETzBsQlJVUXNTVUZCU1N4RFFVRkRMRWxCUVc5Q096dFJRVU4yUWl4SlFVRkpMRWxCUVVrc1EwRkJReXhKUVVGSkxFdEJRVXNzYVVKQlFWTXNRMEZCUXl4VFFVRlRMRWxCUVVrc1YwRkJWeXhEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTzFsQlF6RkVMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEVOQlFVTTdXVUZEYkVJc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXp0WlFVTnNRaXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETzJkQ1FVTlNMRWxCUVVrc1JVRkJSU3hKUVVGSkxFTkJRVU1zU1VGQlNUdG5Ra0ZEWml4SlFVRkpMRVZCUVVVc2FVSkJRVk1zUTBGQlF5eFpRVUZaTzJkQ1FVTTFRaXhOUVVGTkxFVkJRVVVzU1VGQlNTeERRVUZETEUxQlFVMDdaMEpCUTI1Q0xGRkJRVkVzYjBKQlFVOHNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJSVHRuUWtGRE9VSXNVVUZCVVN4RlFVRkZMRVZCUVVVN1owSkJRMW9zYTBKQlFXdENMRzlDUVVGUExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVVTdaMEpCUTNoRExHVkJRV1VzUlVGQlJTeEpRVUZKTEVOQlFVTXNaVUZCWlR0blFrRkRja01zWVVGQllTeEZRVUZGTEVsQlFVa3NRMEZCUXl4aFFVRmhPMmRDUVVOcVF5eE5RVUZOTEVWQlFVVXNTVUZCU1N4RFFVRkRMRTFCUVUwN1lVRkRjRUlzUTBGQlF5eERRVUZETzFOQlEwbzdZVUZCVFR0WlFVTk1MRWxCUVVrc1EwRkJRU3hOUVVGQkxFbEJRVWtzUTBGQlF5eE5RVUZOTERCRFFVRkZMRWxCUVVrc1RVRkJTeXhwUWtGQlV5eERRVUZETEZsQlFWa3NSVUZCUlR0blFrRkRhRVFzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc1IwRkJSeXhIUVVGSExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNSMEZCUnl4RFFVRkRPMkZCUXpsRE8xbEJRMFFzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03VTBGRGVrSTdTVUZEU0N4RFFVRkRPMGxCUlVRc1MwRkJTeXhEUVVOSUxFbEJRVzFFTEVWQlEyNUVMRkZCUVhGRU96dFJRVVZ5UkN4SlFVRkpMRU5CUVVFc1RVRkJRU3hKUVVGSkxFTkJRVU1zVFVGQlRTd3dRMEZCUlN4SlFVRkpMRTFCUVVzc2FVSkJRVk1zUTBGQlF5eFpRVUZaTEVWQlFVVTdXVUZEYUVRc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNSMEZCUnl4SFFVRkhMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU03V1VGRGVrTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF6dFpRVU5zUWl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFZEJRVWNzUlVGQlJTeERRVUZETzFOQlEyNUNPMUZCUlVRc1NVRkRSU3hQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4TFFVRkxMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU03V1VGRGRFTXNRMEZCUVN4TlFVRkJMRWxCUVVrc1EwRkJReXhOUVVGTkxEQkRRVUZGTEVsQlFVa3NUVUZCU3l4UlFVRlJMRVZCUXpsQ08xbEJRMEVzVFVGQlRTeEpRVUZKTEd0RFFVRjVRaXhEUVVOcVF5eDFRa0ZCZFVJc1VVRkJVU3hMUVVGTExFbEJRVWtzUTBGQlF5eEpRVUZKTEZsQlFWa3NUVUZCUVN4SlFVRkpMRU5CUVVNc1RVRkJUU3d3UTBGQlJTeEpRVUZKTEV0QlFVc3NUVUZCUVN4SlFVRkpMRU5CUVVNc1RVRkJUU3d3UTBGQlJTeEpRVUZKTEdOQlFXTXNSVUZET1Vjc1NVRkJTU3hEUVVGRExFMUJRVTBzUlVGRFdDeERRVUZCTEUxQlFVRXNUVUZCUVN4SlFVRkpMRU5CUVVNc1RVRkJUU3d3UTBGQlJTeFJRVUZSTERCRFFVRkZMRXRCUVVzc1MwRkJTU3hEUVVGRExFVkJRMnBETEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUTFvc1EwRkJRenRUUVVOSU8xRkJSVVFzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc1IwRkJSeXhIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTTdVVUZEZGtNc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eG5Ra0ZCWjBJc1IwRkJSeXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdVVUZET1VNc1NVRkRSU3hKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFVa3NTVUZCU1N4cFFrRkJVeXhEUVVGRExGTkJRVk03V1VGRGRrTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1NVRkJTU3gxUWtGQmFVSXNRMEZCUXl4alFVRmpMRVZCUXpkRE8xbEJRMEVzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4M1FrRkJkMElzUjBGQlJ5eE5RVUZCTEVsQlFVa3NRMEZCUXl4bFFVRmxMRzFEUVVGSkxFVkJRVVVzUTBGQlF6dFpRVU5zUlN4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExITkNRVUZ6UWl4SFFVRkhMRTFCUVVFc1NVRkJTU3hEUVVGRExHRkJRV0VzYlVOQlFVa3NSVUZCUlN4RFFVRkRPMU5CUXk5RU8xRkJRMFFzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRVZCUVVVc1EwRkJRenRSUVVOc1FpeEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRE8wbEJRM0JDTEVOQlFVTTdRMEZEUmp0QlFVVkVMRk5CUVZNc1QwRkJUeXhEUVVOa0xFbEJRVFJGTzBsQlJUVkZMRWxCUVVrc1EwRkJReXhKUVVGSk8xRkJRVVVzVDBGQlR5eEpRVUZKTEVOQlFVTTdTVUZEZGtJc1VVRkJVU3hKUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTzFGQlEycENMRXRCUVVzc2FVSkJRVk1zUTBGQlF5eFhRVUZYTEVOQlFVTTdVVUZETTBJc1MwRkJTeXgxUWtGQmFVSXNRMEZCUXl4WlFVRlpPMWxCUTJwRExFbEJRVWtzVDBGQlR5eEpRVUZKTEVOQlFVTXNTVUZCU1N4TFFVRkxMRkZCUVZFN1owSkJRVVVzVDBGQlR5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRPMWxCUTNCRUxFOUJRVThzUzBGQlN5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhKUVVGSkxFVkJRVVVzU1VGQlNTeERRVUZETzFGQlF6RkRPMWxCUTBVc1QwRkJUeXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETzB0QlEzQkNPMEZCUTBnc1EwRkJRenRCUVVWRUxGTkJRV2RDTEZGQlFWRXNRMEZEZEVJc1IwRkJORU1zUlVGRE5VTXNUVUZCWXpzN1NVRkZaQ3hOUVVGTkxFOUJRVThzUjBGQlJ5eEpRVUZKTEZWQlFWVXNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenRKUVVWMlF5eExRVUZMTEUxQlFVMHNTVUZCU1N4SlFVRkpMRWRCUVVjc1JVRkJSVHRSUVVOMFFpeFJRVUZSTEVsQlFVa3NRMEZCUXl4SlFVRkpMRVZCUVVVN1dVRkRha0lzUzBGQlN5eDFRa0ZCYVVJc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6dG5Ra0ZETDBJc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF6dHZRa0ZEV0N4SlFVRkpMRVZCUVVVc2FVSkJRVk1zUTBGQlF5eFJRVUZSTzI5Q1FVTjRRaXhMUVVGTExFVkJRVVVzU1VGQlNTeERRVUZETEV0QlFVczdiMEpCUTJwQ0xGRkJRVkVzUlVGQlJTeFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRPMjlDUVVONFFpeE5RVUZOTzJsQ1FVTlFMRU5CUVVNc1EwRkJRenRuUWtGRFNDeE5RVUZOTzJGQlExQTdXVUZGUkN4TFFVRkxMSFZDUVVGcFFpeERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRPMmRDUVVOcVF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhKUVVGSkxFVkJRVVVzVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXp0blFrRkRla01zVFVGQlRUdGhRVU5RTzFsQlJVUXNTMEZCU3l4MVFrRkJhVUlzUTBGQlF5eGhRVUZoTEVOQlFVTXNRMEZCUXp0blFrRkRjRU1zVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXp0dlFrRkRXQ3hKUVVGSkxFVkJRVVVzYVVKQlFWTXNRMEZCUXl4VFFVRlRPMjlDUVVONlFpeE5RVUZOTEVWQlFVVXNTVUZCU1N4RFFVRkRMRTFCUVUwN2IwSkJRMjVDTEZGQlFWRXNSVUZCUlN4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRE8yOUNRVU40UWl4UlFVRlJMRVZCUVVVc1JVRkJSVHR2UWtGRFdpeEpRVUZKTEVWQlFVVXNTVUZCU1N4RFFVRkRMRWxCUVVrN2IwSkJRMllzWlVGQlpTeEZRVUZGTEUxQlFVRXNTVUZCU1N4RFFVRkRMR1ZCUVdVc2JVTkJRVWtzUlVGQlJUdHZRa0ZETTBNc1lVRkJZU3hGUVVGRkxFMUJRVUVzU1VGQlNTeERRVUZETEdGQlFXRXNiVU5CUVVrc1JVRkJSVHR2UWtGRGRrTXNhMEpCUVd0Q0xFVkJRVVVzVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXp0dlFrRkRiRU1zVFVGQlRUdHBRa0ZEVUN4RFFVRkRMRU5CUVVNN1owSkJRMGdzVFVGQlRUdGhRVU5RTzFsQlJVUXNTMEZCU3l4MVFrRkJhVUlzUTBGQlF5eGpRVUZqTEVOQlFVTXNRMEZCUXp0blFrRkRja01zVDBGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRVZCUVVVc2FVSkJRVk1zUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXp0blFrRkRla01zVFVGQlRUdGhRVU5RTzFsQlJVUXNTMEZCU3l4MVFrRkJhVUlzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXp0blFrRkRhRU1zVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXp0dlFrRkRXQ3hKUVVGSkxFVkJRVVVzYVVKQlFWTXNRMEZCUXl4VFFVRlRPMjlDUVVONlFpeE5RVUZOTEVWQlFVVXNTVUZCU1N4RFFVRkRMRTFCUVUwN2IwSkJRMjVDTEZGQlFWRXNSVUZCUlN4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRE8yOUNRVU40UWl4SlFVRkpMRVZCUVVVc1NVRkJTU3hEUVVGRExFbEJRVWs3YjBKQlEyWXNaVUZCWlN4RlFVRkZMRTFCUVVFc1NVRkJTU3hEUVVGRExHVkJRV1VzYlVOQlFVa3NSVUZCUlR0dlFrRkRNME1zWVVGQllTeEZRVUZGTEUxQlFVRXNTVUZCU1N4RFFVRkRMR0ZCUVdFc2JVTkJRVWtzUlVGQlJUdHZRa0ZEZGtNc2EwSkJRV3RDTEVWQlFVVXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJRenR2UWtGRGJFTXNUVUZCVFR0cFFrRkRVQ3hEUVVGRExFTkJRVU03WjBKQlEwZ3NUVUZCVFR0aFFVTlFPMWxCUlVRc1MwRkJTeXgxUWtGQmFVSXNRMEZCUXl4WlFVRlpMRU5CUVVNc1EwRkJRenRuUWtGRGJrTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJRenR2UWtGRFdDeEpRVUZKTEVWQlFVVXNhVUpCUVZNc1EwRkJReXhaUVVGWk8yOUNRVU0xUWl4SlFVRkpMRVZCUVVVc1NVRkJTU3hEUVVGRExFbEJRVWs3YjBKQlEyWXNTVUZCU1N4RlFVRkZMRWxCUVVrc1EwRkJReXhKUVVGSk8yOUNRVU5tTEdWQlFXVXNSVUZCUlN4TlFVRkJMRWxCUVVrc1EwRkJReXhsUVVGbExHMURRVUZKTEVWQlFVVTdiMEpCUXpORExHRkJRV0VzUlVGQlJTeE5RVUZCTEVsQlFVa3NRMEZCUXl4aFFVRmhMRzFEUVVGSkxFVkJRVVU3YjBKQlEzWkRMSGRDUVVGM1FpeEZRVUZGTEUxQlFVRXNTVUZCU1N4RFFVRkRMSGRDUVVGM1FpeHRRMEZCU1N4RlFVRkZPMjlDUVVNM1JDeHpRa0ZCYzBJc1JVRkJSU3hOUVVGQkxFbEJRVWtzUTBGQlF5eHpRa0ZCYzBJc2JVTkJRVWtzUlVGQlJUdHZRa0ZEZWtRc1VVRkJVU3hGUVVGRkxGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTTdiMEpCUTNoQ0xHdENRVUZyUWl4RlFVRkZPM2RDUVVOc1FpeExRVUZMTEVWQlFVVXNTVUZCU1N4RFFVRkRMR3RDUVVGclFqdDNRa0ZET1VJc1IwRkJSeXhGUVVGRkxFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJN2NVSkJRek5DTzI5Q1FVTkVMR2RDUVVGblFpeEZRVUZGTzNkQ1FVTm9RaXhMUVVGTExFVkJRVVVzU1VGQlNTeERRVUZETEdkQ1FVRm5RanQzUWtGRE5VSXNSMEZCUnl4RlFVRkZMRWxCUVVrc1EwRkJReXhqUVVGak8zRkNRVU42UWp0dlFrRkRSQ3hOUVVGTk8ybENRVU5RTEVOQlFVTXNRMEZCUXp0blFrRkRTQ3hOUVVGTk8yRkJRMUE3V1VGRlJDeExRVUZMTEhWQ1FVRnBRaXhEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZETzJkQ1FVTnNReXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEdGQlFXRXNRMEZCUXl4SlFVRkpMRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF6dG5Ra0ZETVVNc1RVRkJUVHRoUVVOUU8xbEJSVVFzUzBGQlN5eDFRa0ZCYVVJc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlF6dG5Ra0ZEYmtNc1QwRkJUeXhEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVWQlFVVXNhVUpCUVZNc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlF6dG5Ra0ZETTBNc1RVRkJUVHRoUVVOUU8xbEJSVVFzUzBGQlN5eDFRa0ZCYVVJc1EwRkJReXhsUVVGbExFTkJRVU1zUTBGQlF6dG5Ra0ZEZEVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhKUVVGSkxFVkJRVVVzVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXp0blFrRkRPVU1zVFVGQlRUdGhRVU5RTzFsQlJVUXNTMEZCU3l4MVFrRkJhVUlzUTBGQlF5eHpRa0ZCYzBJc1EwRkJReXhEUVVGRE8yZENRVU0zUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExIZENRVUYzUWl4RFFVRkRMRWxCUVVrc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETzJkQ1FVTnlSQ3hOUVVGTk8yRkJRMUE3V1VGRlJDeExRVUZMTEhWQ1FVRnBRaXhEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZETzJkQ1FVTnNReXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETzI5Q1FVTllMRWxCUVVrc1JVRkJSU3hwUWtGQlV5eERRVUZETEZkQlFWYzdiMEpCUXpOQ0xFbEJRVWtzUlVGQlJTeEpRVUZKTEVOQlFVTXNTVUZCU1R0dlFrRkRaaXhSUVVGUkxFVkJRVVVzVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXp0dlFrRkRlRUlzVFVGQlRUdHBRa0ZEVUN4RFFVRkRMRU5CUVVNN1owSkJRMGdzVFVGQlRUdGhRVU5RTzFsQlJVUXNTMEZCU3l4MVFrRkJhVUlzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXp0blFrRkRha01zVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXp0dlFrRkRXQ3hKUVVGSkxFVkJRVVVzYVVKQlFWTXNRMEZCUXl4WFFVRlhPMjlDUVVNelFpeEpRVUZKTEVWQlFVVXNTVUZCU1N4RFFVRkRMRWxCUVVrN2IwSkJRMllzU1VGQlNTeEZRVUZGTEVsQlFVa3NRMEZCUXl4SlFVRkpPMjlDUVVObUxGVkJRVlVzUlVGQlJTeFpRVUZaTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1NVRkJTU3hGUVVGRkxFVkJRVVVzVFVGQlRTeERRVUZETzI5Q1FVTnlSQ3hSUVVGUkxFVkJRVVVzVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXp0dlFrRkRlRUlzVFVGQlRUdHZRa0ZEVGl4clFrRkJhMElzUlVGQlJUdDNRa0ZEYkVJc1MwRkJTeXhGUVVGRkxFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJN2QwSkJRemxDTEVkQlFVY3NSVUZCUlN4SlFVRkpMRU5CUVVNc1owSkJRV2RDTzNGQ1FVTXpRanR2UWtGRFJDeG5Ra0ZCWjBJc1JVRkJSVHQzUWtGRGFFSXNTMEZCU3l4RlFVRkZMRWxCUVVrc1EwRkJReXhuUWtGQlowSTdkMEpCUXpWQ0xFZEJRVWNzUlVGQlJTeEpRVUZKTEVOQlFVTXNZMEZCWXp0eFFrRkRla0k3YVVKQlEwWXNRMEZCUXl4RFFVRkRPMmRDUVVOSUxFMUJRVTA3WVVGRFVEdFpRVVZFTEV0QlFVc3NkVUpCUVdsQ0xFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTTdaMEpCUTJoRExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTTdiMEpCUTFnc1NVRkJTU3hGUVVGRkxHbENRVUZUTEVOQlFVTXNVMEZCVXp0dlFrRkRla0lzU1VGQlNTeEZRVUZGTEVsQlFVa3NRMEZCUXl4SlFVRkpPMjlDUVVObUxGRkJRVkVzUlVGQlJTeFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRPMjlDUVVONFFpeE5RVUZOTzJsQ1FVTlFMRU5CUVVNc1EwRkJRenRuUWtGRFNDeE5RVUZOTzJGQlExQTdXVUZGUkN4TFFVRkxMSFZDUVVGcFFpeERRVUZETEdkQ1FVRm5RaXhEUVVGRE8xbEJRM2hETEV0QlFVc3NkVUpCUVdsQ0xFTkJRVU1zWjBKQlFXZENMRU5CUVVNN1dVRkRlRU1zUzBGQlN5eDFRa0ZCYVVJc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlF6dG5Ra0ZEYmtNc1RVRkJUU3haUVVGWkxFZEJRMmhDTzI5Q1FVTkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFTkJRVU1zU1VGSFpUdHZRa0ZETVVJc1NVRkJTU3hGUVVGRkxFbEJRVWtzUTBGQlF5eEpRVUZKTzI5Q1FVTm1MRkZCUVZFc1JVRkJSU3hSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETzI5Q1FVTjRRaXhOUVVGTk8yOUNRVWRPTEdsQ1FVRnBRaXhGUVVGRkxFVkJRVVVzUzBGQlN5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RlFVRkZMRWRCUVVjc1JVRkJSU3hEUVVGRExFTkJRVU1zUlVGQlJUdHZRa0ZEZWtNc1MwRkJTeXhGUVVGRkxFVkJRVVU3YVVKQlExWXNRMEZCUXp0blFrRkRTaXhOUVVGTkxFdEJRVXNzUjBGQlJ5eG5Ra0ZCWjBJc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eEZRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkRPMmRDUVVOdVJDeFpRVUZaTEVOQlFVTXNTMEZCU3l4SFFVRkhMRXRCUVVzc1EwRkJRenRuUWtGRE0wSXNXVUZCV1N4RFFVRkRMR2xDUVVGcFFpeEhRVUZITEcxQ1FVRnRRaXhEUVVGRExFbEJRVWtzUlVGQlJTeExRVUZMTEVOQlFVTXNRMEZCUXp0blFrRkRiRVVzVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1EwRkJRenRuUWtGRE0wSXNUVUZCVFR0aFFVTlFPMWxCUlVRc1QwRkJUeXhEUVVGRExFTkJRVU03WjBKQlExQXNTVUZCUVN4dFFrRkJWeXhGUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzJGQlEyNUNPMU5CUTBZN1MwRkRSanRKUVVWRUxFOUJRVThzVDBGQlR5eERRVUZETEVkQlFVY3NRMEZCUXp0QlFVTnlRaXhEUVVGRE8wRkJNMHRFTERSQ1FUSkxRenRCUVVWRUxGTkJRVk1zYlVKQlFXMUNMRU5CUXpGQ0xFbEJSM2RDTEVWQlEzaENMRXRCUVdkRE8wbEJSV2hETEVsQlFVa3NTMEZCU3l4RFFVRkRMRTFCUVUwc1MwRkJTeXhEUVVGRExFVkJRVVU3VVVGSGRFSXNUMEZCVHp0WlFVTk1MRXRCUVVzc1JVRkJSU3hKUVVGSkxFTkJRVU1zVVVGQlVTeEhRVUZITEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hIUVVGSExFZEJRVWNzUTBGQlF5eE5RVUZOTEVkQlFVY3NSMEZCUnl4RFFVRkRMRTFCUVUwN1dVRkxha1VzUjBGQlJ5eEZRVUZGTEVsQlFVa3NRMEZCUXl4UlFVRlJMRWRCUVVjc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVkQlFVY3NSMEZCUnl4RFFVRkRMRTFCUVUwc1IwRkJSeXhIUVVGSExFTkJRVU1zVFVGQlRUdFRRVXRvUlN4RFFVRkRPMHRCUTBnN1NVRkZSQ3hQUVVGUE8xRkJRMHdzUzBGQlN5eEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhSUVVGUkxFTkJRVU1zUzBGQlN6dFJRVU01UWl4SFFVRkhMRVZCUVVVc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZOTEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1VVRkJVU3hEUVVGRExFZEJRVWM3UzBGRE1VTXNRMEZCUXp0QlFVTktMRU5CUVVNN1FVRkZSQ3hUUVVGVExHZENRVUZuUWl4RFFVTjJRaXhMUVVGblJDeEZRVU5vUkN4TlFVRmpPMGxCUldRc1QwRkJUeXhSUVVGUkxFTkJRVU1zUzBGQlN5eEZRVUZGTEUxQlFVMHNRMEZCT0VJc1EwRkJRenRCUVVNNVJDeERRVUZETzBGQlJVUXNVMEZCVXl4WlFVRlpMRU5CUTI1Q0xGRkJRV2xETEVWQlEycERMRTFCUVdNN1NVRkZaQ3hQUVVGUExGRkJRVkVzUTBGQlF5eFJRVUZSTEVWQlFVVXNUVUZCVFN4RFFVRnZRaXhEUVVGRE8wRkJRM1pFTEVOQlFVTTdRVUZGUkN4VFFVRlRMRTFCUVUwc1EwRkJReXhKUVVGcFF5eEZRVUZGTEUxQlFXTTdTVUZETDBRc1NVRkJTU3hQUVVGUExFbEJRVWtzUzBGQlN5eFJRVUZSTzFGQlFVVXNUMEZCVHl4SlFVRkpMRU5CUVVNN1NVRkRNVU1zVDBGQlR5eFpRVUZaTEVOQlFVTXNTVUZCU1N4RlFVRkZMRTFCUVUwc1EwRkJReXhEUVVGRE8wRkJRM0JETEVOQlFVTTdRVUZGUkN4VFFVRlRMRmxCUVZrc1EwRkJReXhKUVVGM1FpeEZRVUZGTEUxQlFXTTdPMGxCUXpWRUxFOUJRVTg3VVVGRFRDeEpRVUZKTEVWQlFVVXNhVUpCUVZNc1EwRkJReXhWUVVGVk8xRkJRekZDTEUxQlFVMHNSVUZCUlN4SlFVRkpMRU5CUVVNc1RVRkJUVHRSUVVOdVFpeGxRVUZsTEVWQlFVVXNUVUZCUVN4SlFVRkpMRU5CUVVNc1pVRkJaU3h0UTBGQlNTeEZRVUZGTzFGQlF6TkRMR0ZCUVdFc1JVRkJSU3hOUVVGQkxFbEJRVWtzUTBGQlF5eGhRVUZoTEcxRFFVRkpMRVZCUVVVN1VVRkRka01zVVVGQlVTeEZRVUZGTEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNN1VVRkRlRUlzVFVGQlRUdExRVU5RTEVOQlFVTTdRVUZEU2l4RFFVRkRPMEZCUlVRc1UwRkJVeXhoUVVGaExFTkJRVU1zU1VGQmVVSXNSVUZCUlN4TlFVRmpPMGxCUXpsRUxFOUJRVTg3VVVGRFRDeEpRVUZKTEVWQlFVVXNhVUpCUVZNc1EwRkJReXhYUVVGWE8xRkJRek5DTEVsQlFVa3NSVUZCUlN4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJTeE5RVUZOTEVOQlFVTTdVVUZETDBJc1ZVRkJWU3hGUVVGRkxGbEJRVmtzUTBGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4SlFVRkpMRVZCUVVVc1JVRkJSU3hOUVVGTkxFTkJRVU03VVVGRGNrUXNVVUZCVVN4RlFVRkZMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU03VVVGRGVFSXNhMEpCUVd0Q0xFVkJRVVVzVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXp0UlFVTnNReXhuUWtGQlowSXNSVUZCUlN4RlFVRkZMRXRCUVVzc1JVRkJSU3hEUVVGRExFTkJRVU1zUlVGQlJTeEhRVUZITEVWQlFVVXNRMEZCUXl4RFFVRkRMRVZCUVVVN1VVRkRlRU1zVVVGQlVTeEZRVUZGTEVWQlFVVTdVVUZEV2l4TlFVRk5PMHRCUTFBc1EwRkJRenRCUVVOS0xFTkJRVU03UVVGRlJDeFRRVUZUTEdsQ1FVRnBRaXhEUVVONFFpeEpRVUUyUWl4RlFVTTNRaXhOUVVGak8wbEJSV1FzVDBGQlR6dFJRVU5NTEVsQlFVa3NSVUZCUlN4cFFrRkJVeXhEUVVGRExHVkJRV1U3VVVGREwwSXNTVUZCU1N4RlFVRkZMRWxCUVVrc1EwRkJReXhKUVVGSk8xRkJRMllzVlVGQlZTeEZRVUZGTEZsQlFWa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hKUVVGSkxFVkJRVVVzUlVGQlJTeE5RVUZOTEVOQlFVTTdVVUZEY2tRc1VVRkJVU3hGUVVGRkxGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTTdVVUZEZUVJc2EwSkJRV3RDTEVWQlFVVXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJRenRSUVVOc1F5eE5RVUZOTzB0QlExQXNRMEZCUXp0QlFVTktMRU5CUVVNN1FVRkZSQ3hUUVVGVExIZENRVUYzUWl4RFFVTXZRaXhKUVVGdlF5eEZRVU53UXl4TlFVRmpPMGxCUldRc1QwRkJUenRSUVVOTUxFbEJRVWtzUlVGQlJTeHBRa0ZCVXl4RFFVRkRMSE5DUVVGelFqdFJRVU4wUXl4SlFVRkpMRVZCUVVVc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVWQlFVVXNUVUZCVFN4RFFVRkRPMUZCUXk5Q0xGVkJRVlVzUlVGQlJTeFpRVUZaTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1NVRkJTU3hGUVVGRkxFVkJRVVVzVFVGQlRTeERRVUZETzFGQlEzSkVMRkZCUVZFc1JVRkJSU3hSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETzFGQlEzaENMR3RDUVVGclFpeEZRVUZGTEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNN1VVRkRiRU1zVFVGQlRUdExRVU5RTEVOQlFVTTdRVUZEU2l4RFFVRkRPMEZCUlVRc1UwRkJVeXhSUVVGUkxFTkJRMllzU1VGQmIwUTdTVUZGY0VRc1QwRkJUenRSUVVOTUxFdEJRVXNzUlVGQlJTeEpRVUZKTEVOQlFVTXNVVUZCVVR0UlFVTndRaXhIUVVGSExFVkJRVVVzU1VGQlNTeERRVUZETEUxQlFVMDdTMEZEYWtJc1EwRkJRenRCUVVOS0xFTkJRVU03UVVGRlJDeFRRVUZuUWl4SlFVRkpMRU5CUTJ4Q0xFZEJRVzFDTEVWQlEyNUNMRVZCUVhsRkxFVkJRM3BGTEZWQlFUSkNPMGxCUlROQ0xFdEJRVXNzVFVGQlRTeEhRVUZITEVsQlFVa3NRMEZCUXl4VlFVRlZMRVZCUVVVc1dVRkJXU3hEUVVGRExFVkJRVVU3VVVGRE5VTXNTVUZCU1N4SFFVRkhMRWxCUVVrc1IwRkJSeXhGUVVGRk8xbEJRMklzUjBGQlZ5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFbEJRVzlDTEVWQlFVVXNSVUZCUlN4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVVzUlVGQlJTeEZRVUZGTEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNN1UwRkRNVVU3UzBGRFJqdEpRVVZFTEVsQlFVa3NUMEZCVHl4SlFVRkpMRWRCUVVjc1JVRkJSVHRSUVVOc1FpeEpRVUZKTEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExFdEJRVXNzUTBGQlF5eEZRVUZGTzFsQlF6VkNMRWRCUVVjc1EwRkJReXhMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTXNTVUZCU1N4RlFVRkZMRVZCUVVVc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTEVWQlFVVXNSVUZCUlN4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRE8xTkJRMnhFTzB0QlEwWTdTVUZGUkN4SlFVRkpMRTFCUVUwc1NVRkJTU3hIUVVGSExFVkJRVVU3VVVGRGFrSXNTVUZCU1N4SFFVRkhMRU5CUVVNc1NVRkJTU3hKUVVGSkxFOUJRVThzUjBGQlJ5eERRVUZETEVsQlFVa3NTMEZCU3l4UlFVRlJMRWxCUVVrc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVWQlFVVTdXVUZETjBRc1JVRkJSU3hEUVVGRExFZEJRVWNzUTBGQlF5eEpRVUZKTEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVNN1UwRkRia0k3UzBGRFJqdEpRVVZFTEVWQlFVVXNRMEZCUXl4SFFVRkhMRVZCUVVVc1ZVRkJWU3hEUVVGRExFTkJRVU03UVVGRGRFSXNRMEZCUXp0QlFYaENSQ3h2UWtGM1FrTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRvTGlxdWlkSHRtbENTVCA9IGV4cG9ydHMuQ29uY3JldGVOb2RlVHlwZXMgPSB2b2lkIDA7XG5jb25zdCBleHRyYXNfMSA9IHJlcXVpcmUoXCJvaG0tanMvZXh0cmFzXCIpO1xuY29uc3QgZ3JhbW1hcl8xID0gcmVxdWlyZShcIi4uL3BhcnNlci9ncmFtbWFyXCIpO1xuY29uc3QgZXJyb3JzXzEgPSByZXF1aXJlKFwiLi4vcGFyc2VyL2Vycm9yc1wiKTtcbnZhciBDb25jcmV0ZU5vZGVUeXBlcztcbihmdW5jdGlvbiAoQ29uY3JldGVOb2RlVHlwZXMpIHtcbiAgICBDb25jcmV0ZU5vZGVUeXBlc1tcIkh0bWxDb21tZW50XCJdID0gXCJIdG1sQ29tbWVudFwiO1xuICAgIENvbmNyZXRlTm9kZVR5cGVzW1wiSHRtbFJhd1RhZ1wiXSA9IFwiSHRtbFJhd1RhZ1wiO1xuICAgIENvbmNyZXRlTm9kZVR5cGVzW1wiSHRtbFZvaWRFbGVtZW50XCJdID0gXCJIdG1sVm9pZEVsZW1lbnRcIjtcbiAgICBDb25jcmV0ZU5vZGVUeXBlc1tcIkh0bWxTZWxmQ2xvc2luZ0VsZW1lbnRcIl0gPSBcIkh0bWxTZWxmQ2xvc2luZ0VsZW1lbnRcIjtcbiAgICBDb25jcmV0ZU5vZGVUeXBlc1tcIkh0bWxUYWdPcGVuXCJdID0gXCJIdG1sVGFnT3BlblwiO1xuICAgIENvbmNyZXRlTm9kZVR5cGVzW1wiSHRtbFRhZ0Nsb3NlXCJdID0gXCJIdG1sVGFnQ2xvc2VcIjtcbiAgICBDb25jcmV0ZU5vZGVUeXBlc1tcIkF0dHJTaW5nbGVRdW90ZWRcIl0gPSBcIkF0dHJTaW5nbGVRdW90ZWRcIjtcbiAgICBDb25jcmV0ZU5vZGVUeXBlc1tcIkF0dHJEb3VibGVRdW90ZWRcIl0gPSBcIkF0dHJEb3VibGVRdW90ZWRcIjtcbiAgICBDb25jcmV0ZU5vZGVUeXBlc1tcIkF0dHJVbnF1b3RlZFwiXSA9IFwiQXR0clVucXVvdGVkXCI7XG4gICAgQ29uY3JldGVOb2RlVHlwZXNbXCJBdHRyRW1wdHlcIl0gPSBcIkF0dHJFbXB0eVwiO1xuICAgIENvbmNyZXRlTm9kZVR5cGVzW1wiTGlxdWlkRHJvcFwiXSA9IFwiTGlxdWlkRHJvcFwiO1xuICAgIENvbmNyZXRlTm9kZVR5cGVzW1wiTGlxdWlkUmF3VGFnXCJdID0gXCJMaXF1aWRSYXdUYWdcIjtcbiAgICBDb25jcmV0ZU5vZGVUeXBlc1tcIkxpcXVpZFRhZ1wiXSA9IFwiTGlxdWlkVGFnXCI7XG4gICAgQ29uY3JldGVOb2RlVHlwZXNbXCJMaXF1aWRUYWdPcGVuXCJdID0gXCJMaXF1aWRUYWdPcGVuXCI7XG4gICAgQ29uY3JldGVOb2RlVHlwZXNbXCJMaXF1aWRUYWdDbG9zZVwiXSA9IFwiTGlxdWlkVGFnQ2xvc2VcIjtcbiAgICBDb25jcmV0ZU5vZGVUeXBlc1tcIlRleHROb2RlXCJdID0gXCJUZXh0Tm9kZVwiO1xufSkoQ29uY3JldGVOb2RlVHlwZXMgPSBleHBvcnRzLkNvbmNyZXRlTm9kZVR5cGVzIHx8IChleHBvcnRzLkNvbmNyZXRlTm9kZVR5cGVzID0ge30pKTtcbmNvbnN0IG1hcmt1cCA9IChpKSA9PiAodG9rZW5zKSA9PiB0b2tlbnNbaV0uc291cmNlU3RyaW5nLnRyaW0oKTtcbmZ1bmN0aW9uIHRvTGlxdWlkSHRtbENTVCh0ZXh0KSB7XG4gICAgY29uc3QgbG9jU3RhcnQgPSAodG9rZW5zKSA9PiB0b2tlbnNbMF0uc291cmNlLnN0YXJ0SWR4O1xuICAgIGNvbnN0IGxvY0VuZCA9ICh0b2tlbnMpID0+IHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV0uc291cmNlLmVuZElkeDtcbiAgICBjb25zdCB0ZXh0Tm9kZSA9IHtcbiAgICAgICAgdHlwZTogQ29uY3JldGVOb2RlVHlwZXMuVGV4dE5vZGUsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2VTdHJpbmc7XG4gICAgICAgIH0sXG4gICAgICAgIGxvY1N0YXJ0LFxuICAgICAgICBsb2NFbmQsXG4gICAgfTtcbiAgICBjb25zdCByZXMgPSBncmFtbWFyXzEubGlxdWlkSHRtbEdyYW1tYXIubWF0Y2godGV4dCk7XG4gICAgaWYgKHJlcy5mYWlsZWQoKSkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuTGlxdWlkSFRNTENTVFBhcnNpbmdFcnJvcihyZXMpO1xuICAgIH1cbiAgICBjb25zdCBvaG1BU1QgPSAoMCwgZXh0cmFzXzEudG9BU1QpKHJlcywge1xuICAgICAgICBIdG1sQ29tbWVudDoge1xuICAgICAgICAgICAgYm9keTogbWFya3VwKDEpLFxuICAgICAgICAgICAgbG9jU3RhcnQsXG4gICAgICAgICAgICBsb2NFbmQsXG4gICAgICAgIH0sXG4gICAgICAgIEh0bWxSYXdUYWdJbXBsOiB7XG4gICAgICAgICAgICB0eXBlOiAnSHRtbFJhd1RhZycsXG4gICAgICAgICAgICBuYW1lOiAxLFxuICAgICAgICAgICAgYXR0ckxpc3Q6IDIsXG4gICAgICAgICAgICBib2R5OiA0LFxuICAgICAgICAgICAgbG9jU3RhcnQsXG4gICAgICAgICAgICBsb2NFbmQsXG4gICAgICAgICAgICBibG9ja1N0YXJ0TG9jU3RhcnQ6ICh0b2tlbnMpID0+IHRva2Vuc1swXS5zb3VyY2Uuc3RhcnRJZHgsXG4gICAgICAgICAgICBibG9ja1N0YXJ0TG9jRW5kOiAodG9rZW5zKSA9PiB0b2tlbnNbM10uc291cmNlLmVuZElkeCxcbiAgICAgICAgICAgIGJsb2NrRW5kTG9jU3RhcnQ6ICh0b2tlbnMpID0+IHRva2Vuc1s1XS5zb3VyY2Uuc3RhcnRJZHgsXG4gICAgICAgICAgICBibG9ja0VuZExvY0VuZDogKHRva2VucykgPT4gdG9rZW5zWzVdLnNvdXJjZS5lbmRJZHgsXG4gICAgICAgIH0sXG4gICAgICAgIEh0bWxWb2lkRWxlbWVudDoge1xuICAgICAgICAgICAgbmFtZTogMSxcbiAgICAgICAgICAgIGF0dHJMaXN0OiAyLFxuICAgICAgICAgICAgbG9jU3RhcnQsXG4gICAgICAgICAgICBsb2NFbmQsXG4gICAgICAgIH0sXG4gICAgICAgIEh0bWxTZWxmQ2xvc2luZ0VsZW1lbnQ6IHtcbiAgICAgICAgICAgIG5hbWU6IDEsXG4gICAgICAgICAgICBhdHRyTGlzdDogMixcbiAgICAgICAgICAgIGxvY1N0YXJ0LFxuICAgICAgICAgICAgbG9jRW5kLFxuICAgICAgICB9LFxuICAgICAgICBIdG1sVGFnT3Blbjoge1xuICAgICAgICAgICAgbmFtZTogMSxcbiAgICAgICAgICAgIGF0dHJMaXN0OiAyLFxuICAgICAgICAgICAgbG9jU3RhcnQsXG4gICAgICAgICAgICBsb2NFbmQsXG4gICAgICAgIH0sXG4gICAgICAgIEh0bWxUYWdDbG9zZToge1xuICAgICAgICAgICAgbmFtZTogMSxcbiAgICAgICAgICAgIGxvY1N0YXJ0LFxuICAgICAgICAgICAgbG9jRW5kLFxuICAgICAgICB9LFxuICAgICAgICB0YWdOYW1lT3JMaXF1aWREcm9wOiAwLFxuICAgICAgICBBdHRyVW5xdW90ZWQ6IHtcbiAgICAgICAgICAgIG5hbWU6IDAsXG4gICAgICAgICAgICB2YWx1ZTogMixcbiAgICAgICAgICAgIGxvY1N0YXJ0LFxuICAgICAgICAgICAgbG9jRW5kLFxuICAgICAgICB9LFxuICAgICAgICBBdHRyU2luZ2xlUXVvdGVkOiB7XG4gICAgICAgICAgICBuYW1lOiAwLFxuICAgICAgICAgICAgdmFsdWU6IDMsXG4gICAgICAgICAgICBsb2NTdGFydCxcbiAgICAgICAgICAgIGxvY0VuZCxcbiAgICAgICAgfSxcbiAgICAgICAgQXR0ckRvdWJsZVF1b3RlZDoge1xuICAgICAgICAgICAgbmFtZTogMCxcbiAgICAgICAgICAgIHZhbHVlOiAzLFxuICAgICAgICAgICAgbG9jU3RhcnQsXG4gICAgICAgICAgICBsb2NFbmQsXG4gICAgICAgIH0sXG4gICAgICAgIGF0dHJFbXB0eToge1xuICAgICAgICAgICAgdHlwZTogQ29uY3JldGVOb2RlVHlwZXMuQXR0ckVtcHR5LFxuICAgICAgICAgICAgbmFtZTogMCxcbiAgICAgICAgICAgIGxvY1N0YXJ0LFxuICAgICAgICAgICAgbG9jRW5kLFxuICAgICAgICB9LFxuICAgICAgICBhdHRyRG91YmxlUXVvdGVkVmFsdWU6IDAsXG4gICAgICAgIGF0dHJTaW5nbGVRdW90ZWRWYWx1ZTogMCxcbiAgICAgICAgYXR0clVucXVvdGVkVmFsdWU6IDAsXG4gICAgICAgIGF0dHJEb3VibGVRdW90ZWRUZXh0Tm9kZTogdGV4dE5vZGUsXG4gICAgICAgIGF0dHJTaW5nbGVRdW90ZWRUZXh0Tm9kZTogdGV4dE5vZGUsXG4gICAgICAgIGF0dHJVbnF1b3RlZFRleHROb2RlOiB0ZXh0Tm9kZSxcbiAgICAgICAgbGlxdWlkTm9kZTogMCxcbiAgICAgICAgbGlxdWlkUmF3VGFnOiAwLFxuICAgICAgICBsaXF1aWRSYXdUYWdJbXBsOiB7XG4gICAgICAgICAgICB0eXBlOiBDb25jcmV0ZU5vZGVUeXBlcy5MaXF1aWRSYXdUYWcsXG4gICAgICAgICAgICBuYW1lOiAzLFxuICAgICAgICAgICAgYm9keTogNyxcbiAgICAgICAgICAgIHdoaXRlc3BhY2VTdGFydDogMSxcbiAgICAgICAgICAgIHdoaXRlc3BhY2VFbmQ6IDUsXG4gICAgICAgICAgICBkZWxpbWl0ZXJXaGl0ZXNwYWNlU3RhcnQ6IDksXG4gICAgICAgICAgICBkZWxpbWl0ZXJXaGl0ZXNwYWNlRW5kOiAxNCxcbiAgICAgICAgICAgIGxvY1N0YXJ0LFxuICAgICAgICAgICAgbG9jRW5kLFxuICAgICAgICAgICAgYmxvY2tTdGFydExvY1N0YXJ0OiAodG9rZW5zKSA9PiB0b2tlbnNbMF0uc291cmNlLnN0YXJ0SWR4LFxuICAgICAgICAgICAgYmxvY2tTdGFydExvY0VuZDogKHRva2VucykgPT4gdG9rZW5zWzZdLnNvdXJjZS5lbmRJZHgsXG4gICAgICAgICAgICBibG9ja0VuZExvY1N0YXJ0OiAodG9rZW5zKSA9PiB0b2tlbnNbOF0uc291cmNlLnN0YXJ0SWR4LFxuICAgICAgICAgICAgYmxvY2tFbmRMb2NFbmQ6ICh0b2tlbnMpID0+IHRva2Vuc1sxNV0uc291cmNlLmVuZElkeCxcbiAgICAgICAgfSxcbiAgICAgICAgbGlxdWlkVGFnT3Blbjoge1xuICAgICAgICAgICAgdHlwZTogQ29uY3JldGVOb2RlVHlwZXMuTGlxdWlkVGFnT3BlbixcbiAgICAgICAgICAgIG5hbWU6IDMsXG4gICAgICAgICAgICBtYXJrdXA6IG1hcmt1cCg1KSxcbiAgICAgICAgICAgIHdoaXRlc3BhY2VTdGFydDogMSxcbiAgICAgICAgICAgIHdoaXRlc3BhY2VFbmQ6IDYsXG4gICAgICAgICAgICBsb2NTdGFydCxcbiAgICAgICAgICAgIGxvY0VuZCxcbiAgICAgICAgfSxcbiAgICAgICAgbGlxdWlkVGFnQ2xvc2U6IHtcbiAgICAgICAgICAgIHR5cGU6IENvbmNyZXRlTm9kZVR5cGVzLkxpcXVpZFRhZ0Nsb3NlLFxuICAgICAgICAgICAgbmFtZTogNCxcbiAgICAgICAgICAgIHdoaXRlc3BhY2VTdGFydDogMSxcbiAgICAgICAgICAgIHdoaXRlc3BhY2VFbmQ6IDcsXG4gICAgICAgICAgICBsb2NTdGFydCxcbiAgICAgICAgICAgIGxvY0VuZCxcbiAgICAgICAgfSxcbiAgICAgICAgbGlxdWlkVGFnOiB7XG4gICAgICAgICAgICB0eXBlOiBDb25jcmV0ZU5vZGVUeXBlcy5MaXF1aWRUYWcsXG4gICAgICAgICAgICBuYW1lOiAzLFxuICAgICAgICAgICAgbWFya3VwOiBtYXJrdXAoNSksXG4gICAgICAgICAgICB3aGl0ZXNwYWNlU3RhcnQ6IDEsXG4gICAgICAgICAgICB3aGl0ZXNwYWNlRW5kOiA2LFxuICAgICAgICAgICAgbG9jU3RhcnQsXG4gICAgICAgICAgICBsb2NFbmQsXG4gICAgICAgIH0sXG4gICAgICAgIGxpcXVpZERyb3A6IHtcbiAgICAgICAgICAgIHR5cGU6IENvbmNyZXRlTm9kZVR5cGVzLkxpcXVpZERyb3AsXG4gICAgICAgICAgICBtYXJrdXA6IG1hcmt1cCgyKSxcbiAgICAgICAgICAgIHdoaXRlc3BhY2VTdGFydDogMSxcbiAgICAgICAgICAgIHdoaXRlc3BhY2VFbmQ6IDMsXG4gICAgICAgICAgICBsb2NTdGFydCxcbiAgICAgICAgICAgIGxvY0VuZCxcbiAgICAgICAgfSxcbiAgICAgICAgbGlxdWlkSW5saW5lQ29tbWVudDoge1xuICAgICAgICAgICAgdHlwZTogQ29uY3JldGVOb2RlVHlwZXMuTGlxdWlkVGFnLFxuICAgICAgICAgICAgbmFtZTogMyxcbiAgICAgICAgICAgIG1hcmt1cDogbWFya3VwKDUpLFxuICAgICAgICAgICAgd2hpdGVzcGFjZVN0YXJ0OiAxLFxuICAgICAgICAgICAgd2hpdGVzcGFjZUVuZDogNixcbiAgICAgICAgICAgIGxvY1N0YXJ0LFxuICAgICAgICAgICAgbG9jRW5kLFxuICAgICAgICB9LFxuICAgICAgICBUZXh0Tm9kZTogdGV4dE5vZGUsXG4gICAgfSk7XG4gICAgcmV0dXJuIG9obUFTVDtcbn1cbmV4cG9ydHMudG9MaXF1aWRIdG1sQ1NUID0gdG9MaXF1aWRIdG1sQ1NUO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWTNOMExtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpTGk0dkxpNHZjM0pqTDNCaGNuTmxjaTlqYzNRdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPMEZCUTBFc01FTkJRWE5ETzBGQlEzUkRMRGhEUVVGeFJEdEJRVU55UkN3MFEwRkJORVE3UVVGRk5VUXNTVUZCV1N4cFFrRnBRbGc3UVVGcVFrUXNWMEZCV1N4cFFrRkJhVUk3U1VGRE0wSXNaMFJCUVRKQ0xFTkJRVUU3U1VGRE0wSXNPRU5CUVhsQ0xFTkJRVUU3U1VGRGVrSXNkMFJCUVcxRExFTkJRVUU3U1VGRGJrTXNjMFZCUVdsRUxFTkJRVUU3U1VGRGFrUXNaMFJCUVRKQ0xFTkJRVUU3U1VGRE0wSXNhMFJCUVRaQ0xFTkJRVUU3U1VGRE4wSXNNRVJCUVhGRExFTkJRVUU3U1VGRGNrTXNNRVJCUVhGRExFTkJRVUU3U1VGRGNrTXNhMFJCUVRaQ0xFTkJRVUU3U1VGRE4wSXNORU5CUVhWQ0xFTkJRVUU3U1VGRGRrSXNPRU5CUVhsQ0xFTkJRVUU3U1VGRGVrSXNhMFJCUVRaQ0xFTkJRVUU3U1VGRE4wSXNORU5CUVhWQ0xFTkJRVUU3U1VGRGRrSXNiMFJCUVN0Q0xFTkJRVUU3U1VGREwwSXNjMFJCUVdsRExFTkJRVUU3U1VGRGFrTXNNRU5CUVhGQ0xFTkJRVUU3UVVGRGRrSXNRMEZCUXl4RlFXcENWeXhwUWtGQmFVSXNSMEZCYWtJc2VVSkJRV2xDTEV0QlFXcENMSGxDUVVGcFFpeFJRV2xDTlVJN1FVRnRTVVFzVFVGQlRTeE5RVUZOTEVkQlFVY3NRMEZCUXl4RFFVRlRMRVZCUVVVc1JVRkJSU3hEUVVGRExFTkJRVU1zVFVGQlZ5eEZRVUZGTEVWQlFVVXNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zV1VGQldTeERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkRPMEZCUlRkRkxGTkJRV2RDTEdWQlFXVXNRMEZCUXl4SlFVRlpPMGxCUXpGRExFMUJRVTBzVVVGQlVTeEhRVUZITEVOQlFVTXNUVUZCVnl4RlFVRkZMRVZCUVVVc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNUVUZCVFN4RFFVRkRMRkZCUVZFc1EwRkJRenRKUVVNMVJDeE5RVUZOTEUxQlFVMHNSMEZCUnl4RFFVRkRMRTFCUVZjc1JVRkJSU3hGUVVGRkxFTkJRVU1zVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4TlFVRk5MRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXp0SlFVTjRSU3hOUVVGTkxGRkJRVkVzUjBGQlJ6dFJRVU5tTEVsQlFVa3NSVUZCUlN4cFFrRkJhVUlzUTBGQlF5eFJRVUZSTzFGQlEyaERMRXRCUVVzc1JVRkJSVHRaUVVOTUxFOUJRVkVzU1VGQldTeERRVUZETEZsQlFWa3NRMEZCUXp0UlFVTndReXhEUVVGRE8xRkJRMFFzVVVGQlVUdFJRVU5TTEUxQlFVMDdTMEZEVUN4RFFVRkRPMGxCUTBZc1RVRkJUU3hIUVVGSExFZEJRVWNzTWtKQlFXbENMRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBsQlJURkRMRWxCUVVrc1IwRkJSeXhEUVVGRExFMUJRVTBzUlVGQlJTeEZRVUZGTzFGQlEyaENMRTFCUVUwc1NVRkJTU3hyUTBGQmVVSXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRMUVVNeFF6dEpRVVZFTEUxQlFVMHNUVUZCVFN4SFFVRkhMRWxCUVVFc1kwRkJTeXhGUVVGRExFZEJRVWNzUlVGQlJUdFJRVU40UWl4WFFVRlhMRVZCUVVVN1dVRkRXQ3hKUVVGSkxFVkJRVVVzVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTm1MRkZCUVZFN1dVRkRVaXhOUVVGTk8xTkJRMUE3VVVGRlJDeGpRVUZqTEVWQlFVVTdXVUZEWkN4SlFVRkpMRVZCUVVVc1dVRkJXVHRaUVVOc1FpeEpRVUZKTEVWQlFVVXNRMEZCUXp0WlFVTlFMRkZCUVZFc1JVRkJSU3hEUVVGRE8xbEJRMWdzU1VGQlNTeEZRVUZGTEVOQlFVTTdXVUZEVUN4UlFVRlJPMWxCUTFJc1RVRkJUVHRaUVVOT0xHdENRVUZyUWl4RlFVRkZMRU5CUVVNc1RVRkJWeXhGUVVGRkxFVkJRVVVzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRExGRkJRVkU3V1VGRE9VUXNaMEpCUVdkQ0xFVkJRVVVzUTBGQlF5eE5RVUZYTEVWQlFVVXNSVUZCUlN4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eE5RVUZOTEVOQlFVTXNUVUZCVFR0WlFVTXhSQ3huUWtGQlowSXNSVUZCUlN4RFFVRkRMRTFCUVZjc1JVRkJSU3hGUVVGRkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJReXhSUVVGUk8xbEJRelZFTEdOQlFXTXNSVUZCUlN4RFFVRkRMRTFCUVZjc1JVRkJSU3hGUVVGRkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJReXhOUVVGTk8xTkJRM3BFTzFGQlJVUXNaVUZCWlN4RlFVRkZPMWxCUTJZc1NVRkJTU3hGUVVGRkxFTkJRVU03V1VGRFVDeFJRVUZSTEVWQlFVVXNRMEZCUXp0WlFVTllMRkZCUVZFN1dVRkRVaXhOUVVGTk8xTkJRMUE3VVVGRlJDeHpRa0ZCYzBJc1JVRkJSVHRaUVVOMFFpeEpRVUZKTEVWQlFVVXNRMEZCUXp0WlFVTlFMRkZCUVZFc1JVRkJSU3hEUVVGRE8xbEJRMWdzVVVGQlVUdFpRVU5TTEUxQlFVMDdVMEZEVUR0UlFVVkVMRmRCUVZjc1JVRkJSVHRaUVVOWUxFbEJRVWtzUlVGQlJTeERRVUZETzFsQlExQXNVVUZCVVN4RlFVRkZMRU5CUVVNN1dVRkRXQ3hSUVVGUk8xbEJRMUlzVFVGQlRUdFRRVU5RTzFGQlJVUXNXVUZCV1N4RlFVRkZPMWxCUTFvc1NVRkJTU3hGUVVGRkxFTkJRVU03V1VGRFVDeFJRVUZSTzFsQlExSXNUVUZCVFR0VFFVTlFPMUZCUlVRc2JVSkJRVzFDTEVWQlFVVXNRMEZCUXp0UlFVVjBRaXhaUVVGWkxFVkJRVVU3V1VGRFdpeEpRVUZKTEVWQlFVVXNRMEZCUXp0WlFVTlFMRXRCUVVzc1JVRkJSU3hEUVVGRE8xbEJRMUlzVVVGQlVUdFpRVU5TTEUxQlFVMDdVMEZEVUR0UlFVVkVMR2RDUVVGblFpeEZRVUZGTzFsQlEyaENMRWxCUVVrc1JVRkJSU3hEUVVGRE8xbEJRMUFzUzBGQlN5eEZRVUZGTEVOQlFVTTdXVUZEVWl4UlFVRlJPMWxCUTFJc1RVRkJUVHRUUVVOUU8xRkJSVVFzWjBKQlFXZENMRVZCUVVVN1dVRkRhRUlzU1VGQlNTeEZRVUZGTEVOQlFVTTdXVUZEVUN4TFFVRkxMRVZCUVVVc1EwRkJRenRaUVVOU0xGRkJRVkU3V1VGRFVpeE5RVUZOTzFOQlExQTdVVUZGUkN4VFFVRlRMRVZCUVVVN1dVRkRWQ3hKUVVGSkxFVkJRVVVzYVVKQlFXbENMRU5CUVVNc1UwRkJVenRaUVVOcVF5eEpRVUZKTEVWQlFVVXNRMEZCUXp0WlFVTlFMRkZCUVZFN1dVRkRVaXhOUVVGTk8xTkJRMUE3VVVGRlJDeHhRa0ZCY1VJc1JVRkJSU3hEUVVGRE8xRkJRM2hDTEhGQ1FVRnhRaXhGUVVGRkxFTkJRVU03VVVGRGVFSXNhVUpCUVdsQ0xFVkJRVVVzUTBGQlF6dFJRVU53UWl4M1FrRkJkMElzUlVGQlJTeFJRVUZSTzFGQlEyeERMSGRDUVVGM1FpeEZRVUZGTEZGQlFWRTdVVUZEYkVNc2IwSkJRVzlDTEVWQlFVVXNVVUZCVVR0UlFVTTVRaXhWUVVGVkxFVkJRVVVzUTBGQlF6dFJRVU5pTEZsQlFWa3NSVUZCUlN4RFFVRkRPMUZCUTJZc1owSkJRV2RDTEVWQlFVVTdXVUZEYUVJc1NVRkJTU3hGUVVGRkxHbENRVUZwUWl4RFFVRkRMRmxCUVZrN1dVRkRjRU1zU1VGQlNTeEZRVUZGTEVOQlFVTTdXVUZEVUN4SlFVRkpMRVZCUVVVc1EwRkJRenRaUVVOUUxHVkJRV1VzUlVGQlJTeERRVUZETzFsQlEyeENMR0ZCUVdFc1JVRkJSU3hEUVVGRE8xbEJRMmhDTEhkQ1FVRjNRaXhGUVVGRkxFTkJRVU03V1VGRE0wSXNjMEpCUVhOQ0xFVkJRVVVzUlVGQlJUdFpRVU14UWl4UlFVRlJPMWxCUTFJc1RVRkJUVHRaUVVOT0xHdENRVUZyUWl4RlFVRkZMRU5CUVVNc1RVRkJWeXhGUVVGRkxFVkJRVVVzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRExGRkJRVkU3V1VGRE9VUXNaMEpCUVdkQ0xFVkJRVVVzUTBGQlF5eE5RVUZYTEVWQlFVVXNSVUZCUlN4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eE5RVUZOTEVOQlFVTXNUVUZCVFR0WlFVTXhSQ3huUWtGQlowSXNSVUZCUlN4RFFVRkRMRTFCUVZjc1JVRkJSU3hGUVVGRkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJReXhSUVVGUk8xbEJRelZFTEdOQlFXTXNSVUZCUlN4RFFVRkRMRTFCUVZjc1JVRkJSU3hGUVVGRkxFTkJRVU1zVFVGQlRTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJReXhOUVVGTk8xTkJRekZFTzFGQlJVUXNZVUZCWVN4RlFVRkZPMWxCUTJJc1NVRkJTU3hGUVVGRkxHbENRVUZwUWl4RFFVRkRMR0ZCUVdFN1dVRkRja01zU1VGQlNTeEZRVUZGTEVOQlFVTTdXVUZEVUN4TlFVRk5MRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU5xUWl4bFFVRmxMRVZCUVVVc1EwRkJRenRaUVVOc1FpeGhRVUZoTEVWQlFVVXNRMEZCUXp0WlFVTm9RaXhSUVVGUk8xbEJRMUlzVFVGQlRUdFRRVU5RTzFGQlJVUXNZMEZCWXl4RlFVRkZPMWxCUTJRc1NVRkJTU3hGUVVGRkxHbENRVUZwUWl4RFFVRkRMR05CUVdNN1dVRkRkRU1zU1VGQlNTeEZRVUZGTEVOQlFVTTdXVUZEVUN4bFFVRmxMRVZCUVVVc1EwRkJRenRaUVVOc1FpeGhRVUZoTEVWQlFVVXNRMEZCUXp0WlFVTm9RaXhSUVVGUk8xbEJRMUlzVFVGQlRUdFRRVU5RTzFGQlJVUXNVMEZCVXl4RlFVRkZPMWxCUTFRc1NVRkJTU3hGUVVGRkxHbENRVUZwUWl4RFFVRkRMRk5CUVZNN1dVRkRha01zU1VGQlNTeEZRVUZGTEVOQlFVTTdXVUZEVUN4TlFVRk5MRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU5xUWl4bFFVRmxMRVZCUVVVc1EwRkJRenRaUVVOc1FpeGhRVUZoTEVWQlFVVXNRMEZCUXp0WlFVTm9RaXhSUVVGUk8xbEJRMUlzVFVGQlRUdFRRVU5RTzFGQlJVUXNWVUZCVlN4RlFVRkZPMWxCUTFZc1NVRkJTU3hGUVVGRkxHbENRVUZwUWl4RFFVRkRMRlZCUVZVN1dVRkRiRU1zVFVGQlRTeEZRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRha0lzWlVGQlpTeEZRVUZGTEVOQlFVTTdXVUZEYkVJc1lVRkJZU3hGUVVGRkxFTkJRVU03V1VGRGFFSXNVVUZCVVR0WlFVTlNMRTFCUVUwN1UwRkRVRHRSUVVWRUxHMUNRVUZ0UWl4RlFVRkZPMWxCUTI1Q0xFbEJRVWtzUlVGQlJTeHBRa0ZCYVVJc1EwRkJReXhUUVVGVE8xbEJRMnBETEVsQlFVa3NSVUZCUlN4RFFVRkRPMWxCUTFBc1RVRkJUU3hGUVVGRkxFMUJRVTBzUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEYWtJc1pVRkJaU3hGUVVGRkxFTkJRVU03V1VGRGJFSXNZVUZCWVN4RlFVRkZMRU5CUVVNN1dVRkRhRUlzVVVGQlVUdFpRVU5TTEUxQlFVMDdVMEZEVUR0UlFVVkVMRkZCUVZFc1JVRkJSU3hSUVVGUk8wdEJRMjVDTEVOQlFVTXNRMEZCUXp0SlFVVklMRTlCUVU4c1RVRkJkVUlzUTBGQlF6dEJRVU5xUXl4RFFVRkRPMEZCTVV0RUxEQkRRVEJMUXlKOSIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5MaXF1aWRIVE1MQVNUUGFyc2luZ0Vycm9yID0gZXhwb3J0cy5MaXF1aWRIVE1MQ1NUUGFyc2luZ0Vycm9yID0gdm9pZCAwO1xuY29uc3QgbGluZV9jb2x1bW5fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwibGluZS1jb2x1bW5cIikpO1xuY2xhc3MgTGlxdWlkSFRNTENTVFBhcnNpbmdFcnJvciBleHRlbmRzIFN5bnRheEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihvaG0pIHtcbiAgICAgICAgc3VwZXIob2htLnNob3J0TWVzc2FnZSk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdMaXF1aWRIVE1MUGFyc2luZ0Vycm9yJztcbiAgICAgICAgY29uc3QgaW5wdXQgPSBvaG0uaW5wdXQ7XG4gICAgICAgIGNvbnN0IGVycm9yUG9zID0gb2htLl9yaWdodG1vc3RGYWlsdXJlUG9zaXRpb247XG4gICAgICAgIGNvbnN0IGxpbmVDb2wgPSAoMCwgbGluZV9jb2x1bW5fMS5kZWZhdWx0KShpbnB1dCkuZnJvbUluZGV4KE1hdGgubWluKGVycm9yUG9zLCBpbnB1dC5sZW5ndGggLSAxKSk7XG4gICAgICAgIGlmIChsaW5lQ29sKSB7XG4gICAgICAgICAgICB0aGlzLmxvYyA9IHtcbiAgICAgICAgICAgICAgICBzdGFydDoge1xuICAgICAgICAgICAgICAgICAgICBsaW5lOiBsaW5lQ29sLmxpbmUsXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbjogbGluZUNvbC5jb2wsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbmQ6IHtcbiAgICAgICAgICAgICAgICAgICAgbGluZTogbGluZUNvbC5saW5lLFxuICAgICAgICAgICAgICAgICAgICBjb2x1bW46IGxpbmVDb2wuY29sLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5MaXF1aWRIVE1MQ1NUUGFyc2luZ0Vycm9yID0gTGlxdWlkSFRNTENTVFBhcnNpbmdFcnJvcjtcbmNsYXNzIExpcXVpZEhUTUxBU1RQYXJzaW5nRXJyb3IgZXh0ZW5kcyBTeW50YXhFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgc291cmNlLCBzdGFydEluZGV4LCBlbmRJbmRleCkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ0xpcXVpZEhUTUxQYXJzaW5nRXJyb3InO1xuICAgICAgICBjb25zdCBsYyA9ICgwLCBsaW5lX2NvbHVtbl8xLmRlZmF1bHQpKHNvdXJjZSk7XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gbGMuZnJvbUluZGV4KHN0YXJ0SW5kZXgpO1xuICAgICAgICBjb25zdCBlbmQgPSBsYy5mcm9tSW5kZXgoTWF0aC5taW4oZW5kSW5kZXgsIHNvdXJjZS5sZW5ndGggLSAxKSk7XG4gICAgICAgIHRoaXMubG9jID0ge1xuICAgICAgICAgICAgc3RhcnQ6IHtcbiAgICAgICAgICAgICAgICBsaW5lOiBzdGFydC5saW5lLFxuICAgICAgICAgICAgICAgIGNvbHVtbjogc3RhcnQuY29sLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVuZDoge1xuICAgICAgICAgICAgICAgIGxpbmU6IGVuZC5saW5lLFxuICAgICAgICAgICAgICAgIGNvbHVtbjogZW5kLmNvbCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0cy5MaXF1aWRIVE1MQVNUUGFyc2luZ0Vycm9yID0gTGlxdWlkSFRNTEFTVFBhcnNpbmdFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVpYSnliM0p6TG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2lMaTR2TGk0dmMzSmpMM0JoY25ObGNpOWxjbkp2Y25NdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPenM3TzBGQlEwRXNPRVJCUVhGRE8wRkJUM0pETEUxQlFXRXNlVUpCUVRCQ0xGTkJRVkVzVjBGQlZ6dEpRVWQ0UkN4WlFVRlpMRWRCUVdkQ08xRkJRekZDTEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVU03VVVGRGVFSXNTVUZCU1N4RFFVRkRMRWxCUVVrc1IwRkJSeXgzUWtGQmQwSXNRMEZCUXp0UlFVVnlReXhOUVVGTkxFdEJRVXNzUjBGQlNTeEhRVUZYTEVOQlFVTXNTMEZCU3l4RFFVRkRPMUZCUTJwRExFMUJRVTBzVVVGQlVTeEhRVUZKTEVkQlFWY3NRMEZCUXl4NVFrRkJlVUlzUTBGQlF6dFJRVU40UkN4TlFVRk5MRTlCUVU4c1IwRkJSeXhKUVVGQkxIRkNRVUZWTEVWQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1UwRkJVeXhEUVVONlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRkZCUVZFc1JVRkJSU3hMUVVGTExFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVTnlReXhEUVVGRE8xRkJTMFlzU1VGQlNTeFBRVUZQTEVWQlFVVTdXVUZEV0N4SlFVRkpMRU5CUVVNc1IwRkJSeXhIUVVGSE8yZENRVU5VTEV0QlFVc3NSVUZCUlR0dlFrRkRUQ3hKUVVGSkxFVkJRVVVzVDBGQlR5eERRVUZETEVsQlFVazdiMEpCUTJ4Q0xFMUJRVTBzUlVGQlJTeFBRVUZQTEVOQlFVTXNSMEZCUnp0cFFrRkRjRUk3WjBKQlEwUXNSMEZCUnl4RlFVRkZPMjlDUVVOSUxFbEJRVWtzUlVGQlJTeFBRVUZQTEVOQlFVTXNTVUZCU1R0dlFrRkRiRUlzVFVGQlRTeEZRVUZGTEU5QlFVOHNRMEZCUXl4SFFVRkhPMmxDUVVOd1FqdGhRVU5HTEVOQlFVTTdVMEZEU0R0SlFVTklMRU5CUVVNN1EwRkRSanRCUVRkQ1JDdzRSRUUyUWtNN1FVRkZSQ3hOUVVGaExIbENRVUV3UWl4VFFVRlJMRmRCUVZjN1NVRkhlRVFzV1VGRFJTeFBRVUZsTEVWQlEyWXNUVUZCWXl4RlFVTmtMRlZCUVd0Q0xFVkJRMnhDTEZGQlFXZENPMUZCUldoQ0xFdEJRVXNzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXp0UlFVTm1MRWxCUVVrc1EwRkJReXhKUVVGSkxFZEJRVWNzZDBKQlFYZENMRU5CUVVNN1VVRkZja01zVFVGQlRTeEZRVUZGTEVkQlFVY3NTVUZCUVN4eFFrRkJWU3hGUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETzFGQlF6bENMRTFCUVUwc1MwRkJTeXhIUVVGSExFVkJRVVVzUTBGQlF5eFRRVUZUTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNN1VVRkRka01zVFVGQlRTeEhRVUZITEVkQlFVY3NSVUZCUlN4RFFVRkRMRk5CUVZNc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEZGQlFWRXNSVUZCUlN4TlFVRk5MRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdVVUZMYUVVc1NVRkJTU3hEUVVGRExFZEJRVWNzUjBGQlJ6dFpRVU5VTEV0QlFVc3NSVUZCUlR0blFrRkRUQ3hKUVVGSkxFVkJRVVVzUzBGQlRTeERRVUZETEVsQlFVazdaMEpCUTJwQ0xFMUJRVTBzUlVGQlJTeExRVUZOTEVOQlFVTXNSMEZCUnp0aFFVTnVRanRaUVVORUxFZEJRVWNzUlVGQlJUdG5Ra0ZEU0N4SlFVRkpMRVZCUVVVc1IwRkJTU3hEUVVGRExFbEJRVWs3WjBKQlEyWXNUVUZCVFN4RlFVRkZMRWRCUVVrc1EwRkJReXhIUVVGSE8yRkJRMnBDTzFOQlEwWXNRMEZCUXp0SlFVTktMRU5CUVVNN1EwRkRSanRCUVRsQ1JDdzRSRUU0UWtNaWZRPT0iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVk9JRF9FTEVNRU5UUyA9IGV4cG9ydHMuQkxPQ0tTID0gZXhwb3J0cy5saXF1aWRIdG1sR3JhbW1hciA9IHZvaWQgMDtcbmNvbnN0IG9obV9qc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJvaG0tanNcIikpO1xuZXhwb3J0cy5saXF1aWRIdG1sR3JhbW1hciA9IG9obV9qc18xLmRlZmF1bHQuZ3JhbW1hcihyZXF1aXJlKCcuLi8uLi9ncmFtbWFyL2xpcXVpZC1odG1sLm9obS5qcycpKTtcbmV4cG9ydHMuQkxPQ0tTID0gZXhwb3J0cy5saXF1aWRIdG1sR3JhbW1hci5ydWxlcy5ibG9ja05hbWUuYm9keS50ZXJtcy5tYXAoKHgpID0+IHgub2JqKTtcbmV4cG9ydHMuVk9JRF9FTEVNRU5UUyA9IGV4cG9ydHMubGlxdWlkSHRtbEdyYW1tYXIucnVsZXMudm9pZEVsZW1lbnROYW1lLmJvZHkudGVybXMubWFwKCh4KSA9PiB4LmFyZ3NbMF0ub2JqKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVozSmhiVzFoY2k1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUwzTnlZeTl3WVhKelpYSXZaM0poYlcxaGNpNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN1FVRkJRU3h2UkVGQmVVSTdRVUZGV2l4UlFVRkJMR2xDUVVGcFFpeEhRVUZITEdkQ1FVRkhMRU5CUVVNc1QwRkJUeXhEUVVNeFF5eFBRVUZQTEVOQlFVTXNhME5CUVd0RExFTkJRVU1zUTBGRE5VTXNRMEZCUXp0QlFVZFhMRkZCUVVFc1RVRkJUU3hIUVVGSkxIbENRVUZwUWl4RFFVRkRMRXRCUVdFc1EwRkJReXhUUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUXpkRkxFTkJRVU1zUTBGQlRTeEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVOT0xFTkJRVU03UVVGSFJDeFJRVUZCTEdGQlFXRXNSMEZEZUVJc2VVSkJRV2xDTEVOQlFVTXNTMEZEYmtJc1EwRkJReXhsUVVGbExFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGTkxFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZoTEVOQlFVTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucGFyc2VycyA9IGV4cG9ydHMubGlxdWlkSHRtbEFzdEZvcm1hdCA9IGV4cG9ydHMubGlxdWlkSHRtbExhbmd1YWdlTmFtZSA9IHZvaWQgMDtcbmNvbnN0IHBhcnNlcl8xID0gcmVxdWlyZShcIi4uL3BhcnNlci9wYXJzZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJsaXF1aWRIdG1sQXN0Rm9ybWF0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwYXJzZXJfMS5saXF1aWRIdG1sQXN0Rm9ybWF0OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwibGlxdWlkSHRtbExhbmd1YWdlTmFtZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcGFyc2VyXzEubGlxdWlkSHRtbExhbmd1YWdlTmFtZTsgfSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi4vcGFyc2VyL2FzdFwiKSwgZXhwb3J0cyk7XG5leHBvcnRzLnBhcnNlcnMgPSB7XG4gICAgW3BhcnNlcl8xLmxpcXVpZEh0bWxMYW5ndWFnZU5hbWVdOiBwYXJzZXJfMS5saXF1aWRIdG1sUGFyc2VyLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXNWtaWGd1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk5emNtTXZjR0Z5YzJWeUwybHVaR1Y0TG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096czdPenM3T3pzN096czdRVUZCUVN3MFEwRkxlVUk3UVVGSlVTeHZSMEZPTDBJc05FSkJRVzFDTEU5QlRTdENPMEZCUVRORExIVkhRVXhRTEN0Q1FVRnpRaXhQUVV0UE8wRkJSaTlDTEN0RFFVRTJRanRCUVVsb1FpeFJRVUZCTEU5QlFVOHNSMEZCV1R0SlFVTTVRaXhEUVVGRExDdENRVUZ6UWl4RFFVRkRMRVZCUVVVc2VVSkJRV2RDTzBOQlF6TkRMRU5CUVVNaWZRPT0iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubGlxdWlkSHRtbFBhcnNlciA9IGV4cG9ydHMubGlxdWlkSHRtbExhbmd1YWdlTmFtZSA9IGV4cG9ydHMubGlxdWlkSHRtbEFzdEZvcm1hdCA9IHZvaWQgMDtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5jb25zdCBhc3RfMSA9IHJlcXVpcmUoXCIuLi9wYXJzZXIvYXN0XCIpO1xuZnVuY3Rpb24gcGFyc2UodGV4dCwgX3BhcnNlcnMsIF9vcHRzKSB7XG4gICAgcmV0dXJuICgwLCBhc3RfMS50b0xpcXVpZEh0bWxBU1QpKHRleHQpO1xufVxuZXhwb3J0cy5saXF1aWRIdG1sQXN0Rm9ybWF0ID0gJ2xpcXVpZC1odG1sLWFzdCc7XG5leHBvcnRzLmxpcXVpZEh0bWxMYW5ndWFnZU5hbWUgPSAnbGlxdWlkLWh0bWwnO1xuZXhwb3J0cy5saXF1aWRIdG1sUGFyc2VyID0ge1xuICAgIHBhcnNlLFxuICAgIGFzdEZvcm1hdDogZXhwb3J0cy5saXF1aWRIdG1sQXN0Rm9ybWF0LFxuICAgIGxvY1N0YXJ0OiB1dGlsc18xLmxvY1N0YXJ0LFxuICAgIGxvY0VuZDogdXRpbHNfMS5sb2NFbmQsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pY0dGeWMyVnlMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaUxpNHZMaTR2YzNKakwzQmhjbk5sY2k5d1lYSnpaWEl1ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN08wRkJRMEVzYlVOQlFUSkRPMEZCUXpORExITkRRVUVyUkR0QlFVVXZSQ3hUUVVGVExFdEJRVXNzUTBGRFdpeEpRVUZaTEVWQlExb3NVVUZCYVVJc1JVRkRha0lzUzBGQmIwTTdTVUZGY0VNc1QwRkJUeXhKUVVGQkxIRkNRVUZsTEVWQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1FVRkRMMElzUTBGQlF6dEJRVVZaTEZGQlFVRXNiVUpCUVcxQ0xFZEJRVWNzYVVKQlFXbENMRU5CUVVNN1FVRkZlRU1zVVVGQlFTeHpRa0ZCYzBJc1IwRkJSeXhoUVVGaExFTkJRVU03UVVGRmRrTXNVVUZCUVN4blFrRkJaMElzUjBGQk1rSTdTVUZEZEVRc1MwRkJTenRKUVVOTUxGTkJRVk1zUlVGQlJTd3lRa0ZCYlVJN1NVRkRPVUlzVVVGQlVTeEZRVUZTTEdkQ1FVRlJPMGxCUTFJc1RVRkJUU3hGUVVGT0xHTkJRVTA3UTBGRFVDeERRVUZESW4wPSIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wcmludGVycyA9IHZvaWQgMDtcbmNvbnN0IHByaW50ZXJfbGlxdWlkX2h0bWxfMSA9IHJlcXVpcmUoXCIuLi9wcmludGVyL3ByaW50ZXItbGlxdWlkLWh0bWxcIik7XG5jb25zdCBwYXJzZXJfMSA9IHJlcXVpcmUoXCIuLi9wYXJzZXJcIik7XG5leHBvcnRzLnByaW50ZXJzID0ge1xuICAgIFtwYXJzZXJfMS5saXF1aWRIdG1sQXN0Rm9ybWF0XTogcHJpbnRlcl9saXF1aWRfaHRtbF8xLnByaW50ZXJMaXF1aWRIdG1sLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXNWtaWGd1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk5emNtTXZjSEpwYm5SbGNpOXBibVJsZUM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdRVUZCUVN4MVJVRkJhMFU3UVVGRGJFVXNjVU5CUVN0RE8wRkJSV3hETEZGQlFVRXNVVUZCVVN4SFFVRkhPMGxCUTNSQ0xFTkJRVU1zTkVKQlFXMUNMRU5CUVVNc1JVRkJSU3gxUTBGQmFVSTdRMEZEZWtNc1EwRkJReUo5IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmF1Z21lbnRXaXRoQ1NTUHJvcGVydGllcyA9IHZvaWQgMDtcbmNvbnN0IGNvbnN0YW50c19ldmFsdWF0ZV8xID0gcmVxdWlyZShcIi4uLy4uL2NvbnN0YW50cy5ldmFsdWF0ZVwiKTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi4vLi4vdHlwZXNcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzXCIpO1xuZnVuY3Rpb24gZ2V0Q3NzRGlzcGxheShub2RlLCBvcHRpb25zKSB7XG4gICAgaWYgKG5vZGUucHJldiAmJiBub2RlLnByZXYudHlwZSA9PT0gdHlwZXNfMS5Ob2RlVHlwZXMuSHRtbENvbW1lbnQpIHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBub2RlLnByZXYuYm9keS5tYXRjaCgvXlxccypkaXNwbGF5OlxccyooW2Etel0rKVxccyokLyk7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgcmV0dXJuIG1hdGNoWzFdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN3aXRjaCAobm9kZS50eXBlKSB7XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuSHRtbEVsZW1lbnQ6XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuSHRtbFZvaWRFbGVtZW50OlxuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxTZWxmQ2xvc2luZ0VsZW1lbnQ6XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuSHRtbFJhd05vZGU6IHtcbiAgICAgICAgICAgIHN3aXRjaCAob3B0aW9ucy5odG1sV2hpdGVzcGFjZVNlbnNpdGl2aXR5KSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnc3RyaWN0JzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdpbmxpbmUnO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2lnbm9yZSc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnYmxvY2snO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgodHlwZW9mIG5vZGUubmFtZSA9PT0gJ3N0cmluZycgJiYgY29uc3RhbnRzX2V2YWx1YXRlXzEuQ1NTX0RJU1BMQVlfVEFHU1tub2RlLm5hbWVdKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3RhbnRzX2V2YWx1YXRlXzEuQ1NTX0RJU1BMQVlfREVGQVVMVCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuVGV4dE5vZGU6XG4gICAgICAgICAgICByZXR1cm4gJ2lubGluZSc7XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuTGlxdWlkVGFnOlxuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZFJhd1RhZzpcbiAgICAgICAgICAgIHN3aXRjaCAob3B0aW9ucy5odG1sV2hpdGVzcGFjZVNlbnNpdGl2aXR5KSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnc3RyaWN0JzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdpbmxpbmUnO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2lnbm9yZSc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnYmxvY2snO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChjb25zdGFudHNfZXZhbHVhdGVfMS5DU1NfRElTUExBWV9MSVFVSURfVEFHU1tub2RlLm5hbWVdIHx8IGNvbnN0YW50c19ldmFsdWF0ZV8xLkNTU19ESVNQTEFZX0xJUVVJRF9ERUZBVUxUKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuTGlxdWlkQnJhbmNoOlxuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZERyb3A6XG4gICAgICAgICAgICByZXR1cm4gJ2lubGluZSc7XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuQXR0ckRvdWJsZVF1b3RlZDpcbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5BdHRyU2luZ2xlUXVvdGVkOlxuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkF0dHJVbnF1b3RlZDpcbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5BdHRyRW1wdHk6XG4gICAgICAgICAgICByZXR1cm4gJ2lubGluZSc7XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuSHRtbENvbW1lbnQ6XG4gICAgICAgICAgICByZXR1cm4gJ2Jsb2NrJztcbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5Eb2N1bWVudDpcbiAgICAgICAgICAgIHJldHVybiAnYmxvY2snO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuICgwLCB1dGlsc18xLmFzc2VydE5ldmVyKShub2RlKTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXROb2RlQ3NzU3R5bGVXaGl0ZVNwYWNlKG5vZGUpIHtcbiAgICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxFbGVtZW50OlxuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxWb2lkRWxlbWVudDpcbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5IdG1sU2VsZkNsb3NpbmdFbGVtZW50OlxuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxSYXdOb2RlOiB7XG4gICAgICAgICAgICByZXR1cm4gKCh0eXBlb2Ygbm9kZS5uYW1lID09PSAnc3RyaW5nJyAmJiBjb25zdGFudHNfZXZhbHVhdGVfMS5DU1NfV0hJVEVfU1BBQ0VfVEFHU1tub2RlLm5hbWVdKSB8fFxuICAgICAgICAgICAgICAgIGNvbnN0YW50c19ldmFsdWF0ZV8xLkNTU19XSElURV9TUEFDRV9ERUZBVUxUKTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLlRleHROb2RlOlxuICAgICAgICAgICAgcmV0dXJuIGNvbnN0YW50c19ldmFsdWF0ZV8xLkNTU19XSElURV9TUEFDRV9ERUZBVUxUO1xuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZFJhd1RhZzpcbiAgICAgICAgICAgIHJldHVybiAncHJlJztcbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5MaXF1aWRUYWc6XG4gICAgICAgICAgICByZXR1cm4gY29uc3RhbnRzX2V2YWx1YXRlXzEuQ1NTX1dISVRFX1NQQUNFX0RFRkFVTFQ7XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuTGlxdWlkQnJhbmNoOlxuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZERyb3A6XG4gICAgICAgICAgICByZXR1cm4gY29uc3RhbnRzX2V2YWx1YXRlXzEuQ1NTX1dISVRFX1NQQUNFX0RFRkFVTFQ7XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuQXR0ckRvdWJsZVF1b3RlZDpcbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5BdHRyU2luZ2xlUXVvdGVkOlxuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkF0dHJVbnF1b3RlZDpcbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5BdHRyRW1wdHk6XG4gICAgICAgICAgICByZXR1cm4gY29uc3RhbnRzX2V2YWx1YXRlXzEuQ1NTX1dISVRFX1NQQUNFX0RFRkFVTFQ7XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuSHRtbENvbW1lbnQ6XG4gICAgICAgICAgICByZXR1cm4gY29uc3RhbnRzX2V2YWx1YXRlXzEuQ1NTX1dISVRFX1NQQUNFX0RFRkFVTFQ7XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuRG9jdW1lbnQ6XG4gICAgICAgICAgICByZXR1cm4gY29uc3RhbnRzX2V2YWx1YXRlXzEuQ1NTX1dISVRFX1NQQUNFX0RFRkFVTFQ7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gKDAsIHV0aWxzXzEuYXNzZXJ0TmV2ZXIpKG5vZGUpO1xuICAgIH1cbn1cbmNvbnN0IGF1Z21lbnRXaXRoQ1NTUHJvcGVydGllcyA9IChvcHRpb25zLCBub2RlKSA9PiB7XG4gICAgY29uc3QgYXVnbWVudGF0aW9ucyA9IHtcbiAgICAgICAgY3NzRGlzcGxheTogZ2V0Q3NzRGlzcGxheShub2RlLCBvcHRpb25zKSxcbiAgICAgICAgY3NzV2hpdGVzcGFjZTogZ2V0Tm9kZUNzc1N0eWxlV2hpdGVTcGFjZShub2RlKSxcbiAgICB9O1xuICAgIE9iamVjdC5hc3NpZ24obm9kZSwgYXVnbWVudGF0aW9ucyk7XG59O1xuZXhwb3J0cy5hdWdtZW50V2l0aENTU1Byb3BlcnRpZXMgPSBhdWdtZW50V2l0aENTU1Byb3BlcnRpZXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lZWFZuYldWdWRDMTNhWFJvTFdOemN5MXdjbTl3WlhKMGFXVnpMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaUxpNHZMaTR2TGk0dmMzSmpMM0J5YVc1MFpYSXZjSEpsY0hKdlkyVnpjeTloZFdkdFpXNTBMWGRwZEdndFkzTnpMWEJ5YjNCbGNuUnBaWE11ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN08wRkJRVUVzTmtSQlR6aENPMEZCUXpsQ0xHMURRVTlwUWp0QlFVTnFRaXh0UTBGQmMwTTdRVUZGZEVNc1UwRkJVeXhoUVVGaExFTkJRM0JDTEVsQlFXbERMRVZCUTJwRExFOUJRVFJDTzBsQlJUVkNMRWxCUVVrc1NVRkJTU3hEUVVGRExFbEJRVWtzU1VGQlNTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1MwRkJTeXhwUWtGQlV5eERRVUZETEZkQlFWY3NSVUZCUlR0UlFVVjZSQ3hOUVVGTkxFdEJRVXNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zTmtKQlFUWkNMRU5CUVVNc1EwRkJRenRSUVVOc1JTeEpRVUZKTEV0QlFVc3NSVUZCUlR0WlFVTlVMRTlCUVU4c1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFOQlEycENPMHRCUTBZN1NVRkZSQ3hSUVVGUkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVWQlFVVTdVVUZEYWtJc1MwRkJTeXhwUWtGQlV5eERRVUZETEZkQlFWY3NRMEZCUXp0UlFVTXpRaXhMUVVGTExHbENRVUZUTEVOQlFVTXNaVUZCWlN4RFFVRkRPMUZCUXk5Q0xFdEJRVXNzYVVKQlFWTXNRMEZCUXl4elFrRkJjMElzUTBGQlF6dFJRVU4wUXl4TFFVRkxMR2xDUVVGVExFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVTTdXVUZETVVJc1VVRkJVU3hQUVVGUExFTkJRVU1zZVVKQlFYbENMRVZCUVVVN1owSkJRM3BETEV0QlFVc3NVVUZCVVR0dlFrRkRXQ3hQUVVGUExGRkJRVkVzUTBGQlF6dG5Ra0ZEYkVJc1MwRkJTeXhSUVVGUk8yOUNRVU5ZTEU5QlFVOHNUMEZCVHl4RFFVRkRPMmRDUVVOcVFpeFBRVUZQTEVOQlFVTXNRMEZCUXp0dlFrRkRVQ3hQUVVGUExFTkJRMHdzUTBGQlF5eFBRVUZQTEVsQlFVa3NRMEZCUXl4SlFVRkpMRXRCUVVzc1VVRkJVU3hKUVVGSkxIRkRRVUZuUWl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dDNRa0ZET1VRc2QwTkJRVzFDTEVOQlEzQkNMRU5CUVVNN2FVSkJRMGc3WVVGRFJqdFRRVU5HTzFGQlJVUXNTMEZCU3l4cFFrRkJVeXhEUVVGRExGRkJRVkU3V1VGRGNrSXNUMEZCVHl4UlFVRlJMRU5CUVVNN1VVRkZiRUlzUzBGQlN5eHBRa0ZCVXl4RFFVRkRMRk5CUVZNc1EwRkJRenRSUVVONlFpeExRVUZMTEdsQ1FVRlRMRU5CUVVNc1dVRkJXVHRaUVVONlFpeFJRVUZSTEU5QlFVOHNRMEZCUXl4NVFrRkJlVUlzUlVGQlJUdG5Ra0ZEZWtNc1MwRkJTeXhSUVVGUk8yOUNRVU5ZTEU5QlFVOHNVVUZCVVN4RFFVRkRPMmRDUVVOc1FpeExRVUZMTEZGQlFWRTdiMEpCUTFnc1QwRkJUeXhQUVVGUExFTkJRVU03WjBKQlEycENMRTlCUVU4c1EwRkJReXhEUVVGRE8yOUNRVU5RTEU5QlFVOHNRMEZEVEN3MFEwRkJkVUlzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc0swTkJRVEJDTEVOQlEycEZMRU5CUVVNN2FVSkJRMGc3WVVGRFJqdFJRVVZJTEV0QlFVc3NhVUpCUVZNc1EwRkJReXhaUVVGWkxFTkJRVU03VVVGRE5VSXNTMEZCU3l4cFFrRkJVeXhEUVVGRExGVkJRVlU3V1VGRGRrSXNUMEZCVHl4UlFVRlJMRU5CUVVNN1VVRkZiRUlzUzBGQlN5eHBRa0ZCVXl4RFFVRkRMR2RDUVVGblFpeERRVUZETzFGQlEyaERMRXRCUVVzc2FVSkJRVk1zUTBGQlF5eG5Ra0ZCWjBJc1EwRkJRenRSUVVOb1F5eExRVUZMTEdsQ1FVRlRMRU5CUVVNc1dVRkJXU3hEUVVGRE8xRkJRelZDTEV0QlFVc3NhVUpCUVZNc1EwRkJReXhUUVVGVE8xbEJRM1JDTEU5QlFVOHNVVUZCVVN4RFFVRkRPMUZCUld4Q0xFdEJRVXNzYVVKQlFWTXNRMEZCUXl4WFFVRlhPMWxCUTNoQ0xFOUJRVThzVDBGQlR5eERRVUZETzFGQlJXcENMRXRCUVVzc2FVSkJRVk1zUTBGQlF5eFJRVUZSTzFsQlEzSkNMRTlCUVU4c1QwRkJUeXhEUVVGRE8xRkJSV3BDTzFsQlEwVXNUMEZCVHl4SlFVRkJMRzFDUVVGWExFVkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdTMEZETlVJN1FVRkRTQ3hEUVVGRE8wRkJSVVFzVTBGQlV5eDVRa0ZCZVVJc1EwRkJReXhKUVVGcFF6dEpRVU5zUlN4UlFVRlJMRWxCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVU3VVVGRGFrSXNTMEZCU3l4cFFrRkJVeXhEUVVGRExGZEJRVmNzUTBGQlF6dFJRVU16UWl4TFFVRkxMR2xDUVVGVExFTkJRVU1zWlVGQlpTeERRVUZETzFGQlF5OUNMRXRCUVVzc2FVSkJRVk1zUTBGQlF5eHpRa0ZCYzBJc1EwRkJRenRSUVVOMFF5eExRVUZMTEdsQ1FVRlRMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU03V1VGRE1VSXNUMEZCVHl4RFFVTk1MRU5CUVVNc1QwRkJUeXhKUVVGSkxFTkJRVU1zU1VGQlNTeExRVUZMTEZGQlFWRXNTVUZCU1N4NVEwRkJiMElzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1owSkJRMnhGTERSRFFVRjFRaXhEUVVONFFpeERRVUZETzFOQlEwZzdVVUZGUkN4TFFVRkxMR2xDUVVGVExFTkJRVU1zVVVGQlVUdFpRVU55UWl4UFFVRlBMRFJEUVVGMVFpeERRVUZETzFGQlJXcERMRXRCUVVzc2FVSkJRVk1zUTBGQlF5eFpRVUZaTzFsQlEzcENMRTlCUVU4c1MwRkJTeXhEUVVGRE8xRkJSV1lzUzBGQlN5eHBRa0ZCVXl4RFFVRkRMRk5CUVZNN1dVRkRkRUlzVDBGQlR5dzBRMEZCZFVJc1EwRkJRenRSUVVWcVF5eExRVUZMTEdsQ1FVRlRMRU5CUVVNc1dVRkJXU3hEUVVGRE8xRkJRelZDTEV0QlFVc3NhVUpCUVZNc1EwRkJReXhWUVVGVk8xbEJRM1pDTEU5QlFVOHNORU5CUVhWQ0xFTkJRVU03VVVGRmFrTXNTMEZCU3l4cFFrRkJVeXhEUVVGRExHZENRVUZuUWl4RFFVRkRPMUZCUTJoRExFdEJRVXNzYVVKQlFWTXNRMEZCUXl4blFrRkJaMElzUTBGQlF6dFJRVU5vUXl4TFFVRkxMR2xDUVVGVExFTkJRVU1zV1VGQldTeERRVUZETzFGQlF6VkNMRXRCUVVzc2FVSkJRVk1zUTBGQlF5eFRRVUZUTzFsQlEzUkNMRTlCUVU4c05FTkJRWFZDTEVOQlFVTTdVVUZGYWtNc1MwRkJTeXhwUWtGQlV5eERRVUZETEZkQlFWYzdXVUZEZUVJc1QwRkJUeXcwUTBGQmRVSXNRMEZCUXp0UlFVVnFReXhMUVVGTExHbENRVUZUTEVOQlFVTXNVVUZCVVR0WlFVTnlRaXhQUVVGUExEUkRRVUYxUWl4RFFVRkRPMUZCUldwRE8xbEJRMFVzVDBGQlR5eEpRVUZCTEcxQ1FVRlhMRVZCUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UzBGRE5VSTdRVUZEU0N4RFFVRkRPMEZCUlUwc1RVRkJUU3gzUWtGQmQwSXNSMEZCTUVJc1EwRkROMFFzVDBGQlR5eEZRVU5RTEVsQlFVa3NSVUZEU2l4RlFVRkZPMGxCUTBZc1RVRkJUU3hoUVVGaExFZEJRWE5DTzFGQlEzWkRMRlZCUVZVc1JVRkJSU3hoUVVGaExFTkJRVU1zU1VGQlNTeEZRVUZGTEU5QlFVOHNRMEZCUXp0UlFVTjRReXhoUVVGaExFVkJRVVVzZVVKQlFYbENMRU5CUVVNc1NVRkJTU3hEUVVGRE8wdEJReTlETEVOQlFVTTdTVUZGUml4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzUlVGQlJTeGhRVUZoTEVOQlFVTXNRMEZCUXp0QlFVTnlReXhEUVVGRExFTkJRVU03UVVGV1Z5eFJRVUZCTEhkQ1FVRjNRaXcwUWtGVmJrTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmF1Z21lbnRXaXRoRmFtaWx5ID0gdm9pZCAwO1xuY29uc3QgYXVnbWVudFdpdGhGYW1pbHkgPSAoX29wdGlvbnMsIG5vZGUpID0+IHtcbiAgICBjb25zdCBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4gfHwgW107XG4gICAgY29uc3QgYXVnbWVudGF0aW9ucyA9IHtcbiAgICAgICAgZmlyc3RDaGlsZDogY2hpbGRyZW5bMF0sXG4gICAgICAgIGxhc3RDaGlsZDogY2hpbGRyZW5bY2hpbGRyZW4ubGVuZ3RoIC0gMV0sXG4gICAgfTtcbiAgICBPYmplY3QuYXNzaWduKG5vZGUsIGF1Z21lbnRhdGlvbnMpO1xufTtcbmV4cG9ydHMuYXVnbWVudFdpdGhGYW1pbHkgPSBhdWdtZW50V2l0aEZhbWlseTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVlYVm5iV1Z1ZEMxM2FYUm9MV1poYldsc2VTNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1TDNOeVl5OXdjbWx1ZEdWeUwzQnlaWEJ5YjJObGMzTXZZWFZuYldWdWRDMTNhWFJvTFdaaGJXbHNlUzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN1FVRkZUeXhOUVVGTkxHbENRVUZwUWl4SFFVRm5RaXhEUVVGRExGRkJRVkVzUlVGQlJTeEpRVUZKTEVWQlFVVXNSVUZCUlR0SlFVTXZSQ3hOUVVGTkxGRkJRVkVzUjBGQmMwSXNTVUZCV1N4RFFVRkRMRkZCUVZFc1NVRkJTU3hGUVVGRkxFTkJRVU03U1VGRGFFVXNUVUZCVFN4aFFVRmhMRWRCUVdVN1VVRkRhRU1zVlVGQlZTeEZRVUZGTEZGQlFWRXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRka0lzVTBGQlV5eEZRVUZGTEZGQlFWRXNRMEZCUXl4UlFVRlJMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU1zUTBGQlF6dExRVU42UXl4RFFVRkRPMGxCUlVZc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVWQlFVVXNZVUZCWVN4RFFVRkRMRU5CUVVNN1FVRkRja01zUTBGQlF5eERRVUZETzBGQlVsY3NVVUZCUVN4cFFrRkJhVUlzY1VKQlVUVkNJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmF1Z21lbnRXaXRoUGFyZW50ID0gdm9pZCAwO1xuY29uc3QgYXVnbWVudFdpdGhQYXJlbnQgPSAoX29wdGlvbnMsIG5vZGUsIHBhcmVudE5vZGUpID0+IHtcbiAgICBjb25zdCBhdWdtZW50YXRpb25zID0ge1xuICAgICAgICBwYXJlbnROb2RlOiBwYXJlbnROb2RlLFxuICAgIH07XG4gICAgT2JqZWN0LmFzc2lnbihub2RlLCBhdWdtZW50YXRpb25zKTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobm9kZSwgJ3Jhd1NvdXJjZScsIHtcbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc291cmNlLnNsaWNlKHRoaXMucG9zaXRpb24uc3RhcnQsIHRoaXMucG9zaXRpb24uZW5kKTtcbiAgICAgICAgfSxcbiAgICB9KTtcbn07XG5leHBvcnRzLmF1Z21lbnRXaXRoUGFyZW50ID0gYXVnbWVudFdpdGhQYXJlbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lZWFZuYldWdWRDMTNhWFJvTFhCaGNtVnVkQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUwzTnlZeTl3Y21sdWRHVnlMM0J5WlhCeWIyTmxjM012WVhWbmJXVnVkQzEzYVhSb0xYQmhjbVZ1ZEM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdRVUZGVHl4TlFVRk5MR2xDUVVGcFFpeEhRVUZuUWl4RFFVRkRMRkZCUVZFc1JVRkJSU3hKUVVGSkxFVkJRVVVzVlVGQlZTeEZRVUZGTEVWQlFVVTdTVUZETTBVc1RVRkJUU3hoUVVGaExFZEJRV1U3VVVGRGFFTXNWVUZCVlN4RlFVRkZMRlZCUVc5RE8wdEJRMnBFTEVOQlFVTTdTVUZGUml4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzUlVGQlJTeGhRVUZoTEVOQlFVTXNRMEZCUXp0SlFVbHVReXhOUVVGTkxFTkJRVU1zWTBGQll5eERRVUZETEVsQlFVa3NSVUZCUlN4WFFVRlhMRVZCUVVVN1VVRkRka01zUjBGQlJ6dFpRVU5FTEU5QlFVOHNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4TFFVRkxMRVZCUVVVc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0UlFVTnVSU3hEUVVGRE8wdEJRMFlzUTBGQlF5eERRVUZETzBGQlEwd3NRMEZCUXl4RFFVRkRPMEZCWkZjc1VVRkJRU3hwUWtGQmFVSXNjVUpCWXpWQ0luMD0iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYXVnbWVudFdpdGhTaWJsaW5ncyA9IGV4cG9ydHMubmV4dCA9IGV4cG9ydHMucHJldiA9IHZvaWQgMDtcbmNvbnN0IENPTExFQ1RJT05fS0VZUyA9IFsnY2hpbGRyZW4nLCAnYXR0cmlidXRlcycsICd2YWx1ZSddO1xuZnVuY3Rpb24gcHJldihub2RlKSB7XG4gICAgaWYgKCFub2RlLnBhcmVudE5vZGUpXG4gICAgICAgIHJldHVybjtcbiAgICBjb25zdCBjb2xsZWN0aW9uID0gcGFyZW50Q29sbGVjdGlvbihub2RlKTtcbiAgICByZXR1cm4gY29sbGVjdGlvbltjb2xsZWN0aW9uLmluZGV4T2Yobm9kZSkgLSAxXTtcbn1cbmV4cG9ydHMucHJldiA9IHByZXY7XG5mdW5jdGlvbiBuZXh0KG5vZGUpIHtcbiAgICBpZiAoIW5vZGUucGFyZW50Tm9kZSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IGNvbGxlY3Rpb24gPSBwYXJlbnRDb2xsZWN0aW9uKG5vZGUpO1xuICAgIHJldHVybiBjb2xsZWN0aW9uW2NvbGxlY3Rpb24uaW5kZXhPZihub2RlKSArIDFdO1xufVxuZXhwb3J0cy5uZXh0ID0gbmV4dDtcbmZ1bmN0aW9uIHBhcmVudENvbGxlY3Rpb24obm9kZSkge1xuICAgIGlmICghbm9kZS5wYXJlbnROb2RlIHx8XG4gICAgICAgICgnbmFtZScgaW4gbm9kZS5wYXJlbnROb2RlICYmIG5vZGUucGFyZW50Tm9kZS5uYW1lID09PSBub2RlKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IG9mIENPTExFQ1RJT05fS0VZUykge1xuICAgICAgICBpZiAoa2V5IGluIG5vZGUucGFyZW50Tm9kZSAmJlxuICAgICAgICAgICAgQXJyYXkuaXNBcnJheShub2RlLnBhcmVudE5vZGVba2V5XSkpIHtcbiAgICAgICAgICAgIGlmIChub2RlLnBhcmVudE5vZGVba2V5XS5pbmRleE9mKG5vZGUpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBub2RlLnBhcmVudE5vZGVba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBmaW5kIHBhcmVudCBjb2xsZWN0aW9uIG9mIG5vZGUnKTtcbn1cbmNvbnN0IGF1Z21lbnRXaXRoU2libGluZ3MgPSAoX29wdGlvbnMsIG5vZGUpID0+IHtcbiAgICBjb25zdCBhdWdtZW50YXRpb25zID0ge1xuICAgICAgICBuZXh0OiBuZXh0KG5vZGUpLFxuICAgICAgICBwcmV2OiBwcmV2KG5vZGUpLFxuICAgIH07XG4gICAgT2JqZWN0LmFzc2lnbihub2RlLCBhdWdtZW50YXRpb25zKTtcbn07XG5leHBvcnRzLmF1Z21lbnRXaXRoU2libGluZ3MgPSBhdWdtZW50V2l0aFNpYmxpbmdzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWVhWbmJXVnVkQzEzYVhSb0xYTnBZbXhwYm1kekxtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpTGk0dkxpNHZMaTR2YzNKakwzQnlhVzUwWlhJdmNISmxjSEp2WTJWemN5OWhkV2R0Wlc1MExYZHBkR2d0YzJsaWJHbHVaM011ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN08wRkJVVUVzVFVGQlRTeGxRVUZsTEVkQlFVY3NRMEZCUXl4VlFVRlZMRVZCUVVVc1dVRkJXU3hGUVVGRkxFOUJRVThzUTBGQlF5eERRVUZETzBGQlJUVkVMRk5CUVdkQ0xFbEJRVWtzUTBGQlF5eEpRVUVyUWp0SlFVTnNSQ3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEZWQlFWVTdVVUZCUlN4UFFVRlBPMGxCUXpkQ0xFMUJRVTBzVlVGQlZTeEhRVUZITEdkQ1FVRm5RaXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBsQlF6RkRMRTlCUVU4c1ZVRkJWU3hEUVVGRExGVkJRVlVzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRGJFUXNRMEZCUXp0QlFVcEVMRzlDUVVsRE8wRkJSVVFzVTBGQlowSXNTVUZCU1N4RFFVRkRMRWxCUVN0Q08wbEJRMnhFTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWVHRSUVVGRkxFOUJRVTg3U1VGRE4wSXNUVUZCVFN4VlFVRlZMRWRCUVVjc1owSkJRV2RDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1NVRkRNVU1zVDBGQlR5eFZRVUZWTEVOQlFVTXNWVUZCVlN4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTnNSQ3hEUVVGRE8wRkJTa1FzYjBKQlNVTTdRVUZGUkN4VFFVRlRMR2RDUVVGblFpeERRVU4yUWl4SlFVRXJRanRKUVVVdlFpeEpRVU5GTEVOQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVZVN1VVRkRhRUlzUTBGQlF5eE5RVUZOTEVsQlFVa3NTVUZCU1N4RFFVRkRMRlZCUVZVc1NVRkJTU3hKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEVsQlFVa3NTMEZCU3l4SlFVRkpMRU5CUVVNc1JVRkROVVE3VVVGRFFTeFBRVUZQTEVWQlFVVXNRMEZCUXp0TFFVTllPMGxCUlVRc1MwRkJTeXhOUVVGTkxFZEJRVWNzU1VGQlNTeGxRVUZsTEVWQlFVVTdVVUZGYWtNc1NVRkRSU3hIUVVGSExFbEJRVWtzU1VGQlNTeERRVUZETEZWQlFWVTdXVUZEZEVJc1MwRkJTeXhEUVVGRExFOUJRVThzUTBGQlJTeEpRVUZaTEVOQlFVTXNWVUZCVlN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFVkJRelZETzFsQlEwRXNTVUZCU3l4SlFVRlpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUlVGQlJUdG5Ra0ZEZEVRc1QwRkJVU3hKUVVGWkxFTkJRVU1zVlVGQlZTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMkZCUTNSRE8xTkJRMFk3UzBGRFJqdEpRVVZFTEUxQlFVMHNTVUZCU1N4TFFVRkxMRU5CUVVNc01FTkJRVEJETEVOQlFVTXNRMEZCUXp0QlFVTTVSQ3hEUVVGRE8wRkJSVTBzVFVGQlRTeHRRa0ZCYlVJc1IwRkJkMElzUTBGQlF5eFJRVUZSTEVWQlFVVXNTVUZCU1N4RlFVRkZMRVZCUVVVN1NVRkRla1VzVFVGQlRTeGhRVUZoTEVkQlFXbENPMUZCUTJ4RExFbEJRVWtzUlVGQlJTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRXJRanRSUVVNNVF5eEpRVUZKTEVWQlFVVXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJLMEk3UzBGREwwTXNRMEZCUXp0SlFVVkdMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zU1VGQlNTeEZRVUZGTEdGQlFXRXNRMEZCUXl4RFFVRkRPMEZCUTNKRExFTkJRVU1zUTBGQlF6dEJRVkJYTEZGQlFVRXNiVUpCUVcxQ0xIVkNRVTg1UWlKOSIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc1RyaW1taW5nSW5uZXJSaWdodCA9IGV4cG9ydHMuaXNUcmltbWluZ0lubmVyTGVmdCA9IGV4cG9ydHMuaXNUcmltbWluZ091dGVyTGVmdCA9IGV4cG9ydHMuaXNUcmltbWluZ091dGVyUmlnaHQgPSBleHBvcnRzLmlzUGFyZW50Tm9kZSA9IGV4cG9ydHMuaXNIdG1sTm9kZSA9IGV4cG9ydHMuYXVnbWVudFdpdGhXaGl0ZXNwYWNlSGVscGVycyA9IHZvaWQgMDtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi4vLi4vdHlwZXNcIik7XG5jb25zdCBjb25zdGFudHNfZXZhbHVhdGVfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb25zdGFudHMuZXZhbHVhdGVcIik7XG5jb25zdCBwYXJzZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi9wYXJzZXJcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uLy4uL3ByaW50ZXIvdXRpbHNcIik7XG5jb25zdCBhdWdtZW50V2l0aFdoaXRlc3BhY2VIZWxwZXJzID0gKF9vcHRpb25zLCBub2RlKSA9PiB7XG4gICAgY29uc3QgYXVnbWVudGF0aW9ucyA9IHtcbiAgICAgICAgaXNEYW5nbGluZ1doaXRlc3BhY2VTZW5zaXRpdmU6IGlzRGFuZ2xpbmdXaGl0ZXNwYWNlU2Vuc2l0aXZlTm9kZShub2RlKSxcbiAgICAgICAgaXNJbmRlbnRhdGlvblNlbnNpdGl2ZTogaXNJbmRlbnRhdGlvblNlbnNpdGl2ZU5vZGUobm9kZSksXG4gICAgICAgIGlzV2hpdGVzcGFjZVNlbnNpdGl2ZTogaXNXaGl0ZXNwYWNlU2Vuc2l0aXZlTm9kZShub2RlKSxcbiAgICAgICAgaXNMZWFkaW5nV2hpdGVzcGFjZVNlbnNpdGl2ZTogaXNMZWFkaW5nV2hpdGVzcGFjZVNlbnNpdGl2ZU5vZGUobm9kZSkgJiZcbiAgICAgICAgICAgICghbm9kZS5wcmV2IHx8IGlzVHJhaWxpbmdXaGl0ZXNwYWNlU2Vuc2l0aXZlTm9kZShub2RlLnByZXYpKSxcbiAgICAgICAgaXNUcmFpbGluZ1doaXRlc3BhY2VTZW5zaXRpdmU6IGlzVHJhaWxpbmdXaGl0ZXNwYWNlU2Vuc2l0aXZlTm9kZShub2RlKSAmJlxuICAgICAgICAgICAgKCFub2RlLm5leHQgfHwgaXNMZWFkaW5nV2hpdGVzcGFjZVNlbnNpdGl2ZU5vZGUobm9kZS5uZXh0KSksXG4gICAgICAgIGhhc0xlYWRpbmdXaGl0ZXNwYWNlOiBoYXNMZWFkaW5nV2hpdGVzcGFjZShub2RlKSxcbiAgICAgICAgaGFzVHJhaWxpbmdXaGl0ZXNwYWNlOiBoYXNUcmFpbGluZ1doaXRlc3BhY2Uobm9kZSksXG4gICAgICAgIGhhc0RhbmdsaW5nV2hpdGVzcGFjZTogaGFzRGFuZ2xpbmdXaGl0ZXNwYWNlKG5vZGUpLFxuICAgIH07XG4gICAgT2JqZWN0LmFzc2lnbihub2RlLCBhdWdtZW50YXRpb25zKTtcbn07XG5leHBvcnRzLmF1Z21lbnRXaXRoV2hpdGVzcGFjZUhlbHBlcnMgPSBhdWdtZW50V2l0aFdoaXRlc3BhY2VIZWxwZXJzO1xuZnVuY3Rpb24gaXNEYW5nbGluZ1doaXRlc3BhY2VTZW5zaXRpdmVOb2RlKG5vZGUpIHtcbiAgICByZXR1cm4gKGlzRGFuZ2xpbmdTcGFjZVNlbnNpdGl2ZUNzc0Rpc3BsYXkobm9kZS5jc3NEaXNwbGF5KSAmJlxuICAgICAgICAhKDAsIHV0aWxzXzEuaXNTY3JpcHRMaWtlVGFnKShub2RlKSAmJlxuICAgICAgICAhaXNUcmltbWluZ0lubmVyTGVmdChub2RlKSAmJlxuICAgICAgICAhaXNUcmltbWluZ0lubmVyUmlnaHQobm9kZSkpO1xufVxuZnVuY3Rpb24gaXNXaGl0ZXNwYWNlU2Vuc2l0aXZlTm9kZShub2RlKSB7XG4gICAgcmV0dXJuIChpc0luZGVudGF0aW9uU2Vuc2l0aXZlTm9kZShub2RlKSk7XG59XG5mdW5jdGlvbiBpc0luZGVudGF0aW9uU2Vuc2l0aXZlTm9kZShub2RlKSB7XG4gICAgcmV0dXJuIGdldE5vZGVDc3NTdHlsZVdoaXRlU3BhY2Uobm9kZSkuc3RhcnRzV2l0aCgncHJlJyk7XG59XG5mdW5jdGlvbiBpc0xlYWRpbmdXaGl0ZXNwYWNlU2Vuc2l0aXZlTm9kZShub2RlKSB7XG4gICAgaWYgKCFub2RlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGlzVHJpbW1pbmdPdXRlckxlZnQobm9kZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAobm9kZS5wcmV2ICYmIGlzVHJpbW1pbmdPdXRlclJpZ2h0KG5vZGUucHJldikpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoIW5vZGUucGFyZW50Tm9kZSB8fCBub2RlLnBhcmVudE5vZGUuY3NzRGlzcGxheSA9PT0gJ25vbmUnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCgwLCB1dGlsc18xLmlzUHJlTGlrZU5vZGUpKG5vZGUucGFyZW50Tm9kZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICgoMCwgdXRpbHNfMS5pc1NjcmlwdExpa2VUYWcpKG5vZGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFub2RlLnByZXYgJiYgKG5vZGUucGFyZW50Tm9kZS50eXBlID09PSB0eXBlc18xLk5vZGVUeXBlcy5Eb2N1bWVudFxuICAgICAgICB8fCAoMCwgdXRpbHNfMS5pc1ByZUxpa2VOb2RlKShub2RlKVxuICAgICAgICB8fCAoMCwgdXRpbHNfMS5pc1NjcmlwdExpa2VUYWcpKG5vZGUucGFyZW50Tm9kZSlcbiAgICAgICAgfHwgIWlzSW5uZXJMZWZ0U3BhY2VTZW5zaXRpdmVDc3NEaXNwbGF5KG5vZGUucGFyZW50Tm9kZS5jc3NEaXNwbGF5KVxuICAgICAgICB8fCBpc1RyaW1taW5nSW5uZXJMZWZ0KG5vZGUucGFyZW50Tm9kZSkpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKG5vZGUucHJldiAmJlxuICAgICAgICAhaXNPdXRlclJpZ2h0V2hpdGVzcGFjZVNlbnNpdGl2ZUNzc0Rpc3BsYXkobm9kZS5wcmV2LmNzc0Rpc3BsYXkpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFpc091dGVyTGVmdFdoaXRlc3BhY2VTZW5zaXRpdmVDc3NEaXNwbGF5KG5vZGUuY3NzRGlzcGxheSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGlzVHJhaWxpbmdXaGl0ZXNwYWNlU2Vuc2l0aXZlTm9kZShub2RlKSB7XG4gICAgaWYgKGlzVHJpbW1pbmdPdXRlclJpZ2h0KG5vZGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKG5vZGUubmV4dCAmJiBpc1RyaW1taW5nT3V0ZXJMZWZ0KG5vZGUubmV4dCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoIW5vZGUucGFyZW50Tm9kZSB8fCBub2RlLnBhcmVudE5vZGUuY3NzRGlzcGxheSA9PT0gJ25vbmUnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCgwLCB1dGlsc18xLmlzUHJlTGlrZU5vZGUpKG5vZGUucGFyZW50Tm9kZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICgoMCwgdXRpbHNfMS5pc1NjcmlwdExpa2VUYWcpKG5vZGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGlzSHRtbE5vZGUobm9kZSkgJiYgdHlwZW9mIG5vZGUubmFtZSA9PT0gJ3N0cmluZycgJiYgbm9kZS5uYW1lID09PSAnYnInKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFub2RlLm5leHQgJiYgKG5vZGUucGFyZW50Tm9kZS50eXBlID09PSB0eXBlc18xLk5vZGVUeXBlcy5Eb2N1bWVudFxuICAgICAgICB8fCAoMCwgdXRpbHNfMS5pc1ByZUxpa2VOb2RlKShub2RlKVxuICAgICAgICB8fCAoMCwgdXRpbHNfMS5pc1NjcmlwdExpa2VUYWcpKG5vZGUucGFyZW50Tm9kZSlcbiAgICAgICAgfHwgIWlzSW5uZXJSaWdodFdoaXRlc3BhY2VTZW5zaXRpdmVDc3NEaXNwbGF5KG5vZGUucGFyZW50Tm9kZS5jc3NEaXNwbGF5KVxuICAgICAgICB8fCBpc1RyaW1taW5nSW5uZXJSaWdodChub2RlLnBhcmVudE5vZGUpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChub2RlLm5leHQgJiZcbiAgICAgICAgIWlzT3V0ZXJMZWZ0V2hpdGVzcGFjZVNlbnNpdGl2ZUNzc0Rpc3BsYXkobm9kZS5uZXh0LmNzc0Rpc3BsYXkpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFpc091dGVyUmlnaHRXaGl0ZXNwYWNlU2Vuc2l0aXZlQ3NzRGlzcGxheShub2RlLmNzc0Rpc3BsYXkpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBoYXNEYW5nbGluZ1doaXRlc3BhY2Uobm9kZSkge1xuICAgIGlmICghaXNQYXJlbnROb2RlKG5vZGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZWxzZSBpZiAobm9kZS50eXBlID09PSB0eXBlc18xLk5vZGVUeXBlcy5Eb2N1bWVudCkge1xuICAgICAgICByZXR1cm4gbm9kZS5jaGlsZHJlbi5sZW5ndGggPT09IDAgJiYgbm9kZS5zb3VyY2UubGVuZ3RoID4gMDtcbiAgICB9XG4gICAgZWxzZSBpZiAoIW5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBlbHNlIGlmIChub2RlLnR5cGUgPT09IHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZFRhZyAmJlxuICAgICAgICAoMCwgcGFyc2VyXzEuaXNCcmFuY2hlZFRhZykobm9kZSkgJiZcbiAgICAgICAgbm9kZS5jaGlsZHJlbi5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIGhhc0RhbmdsaW5nV2hpdGVzcGFjZShub2RlLmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICBlbHNlIGlmIChub2RlLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gKDAsIHV0aWxzXzEuaXNXaGl0ZXNwYWNlKShub2RlLnNvdXJjZSwgbm9kZS5ibG9ja1N0YXJ0UG9zaXRpb24uZW5kKTtcbn1cbmZ1bmN0aW9uIGhhc0xlYWRpbmdXaGl0ZXNwYWNlKG5vZGUpIHtcbiAgICBpZiAobm9kZS50eXBlID09PSB0eXBlc18xLk5vZGVUeXBlcy5MaXF1aWRCcmFuY2ggJiYgIW5vZGUucHJldikge1xuICAgICAgICByZXR1cm4gbm9kZS5maXJzdENoaWxkXG4gICAgICAgICAgICA/IGhhc0xlYWRpbmdXaGl0ZXNwYWNlKG5vZGUuZmlyc3RDaGlsZClcbiAgICAgICAgICAgIDogaGFzRGFuZ2xpbmdXaGl0ZXNwYWNlKG5vZGUpO1xuICAgIH1cbiAgICByZXR1cm4gKDAsIHV0aWxzXzEuaXNXaGl0ZXNwYWNlKShub2RlLnNvdXJjZSwgbm9kZS5wb3NpdGlvbi5zdGFydCAtIDEpO1xufVxuZnVuY3Rpb24gaGFzVHJhaWxpbmdXaGl0ZXNwYWNlKG5vZGUpIHtcbiAgICBpZiAobm9kZS50eXBlID09PSB0eXBlc18xLk5vZGVUeXBlcy5MaXF1aWRCcmFuY2gpIHtcbiAgICAgICAgcmV0dXJuIG5vZGUubGFzdENoaWxkXG4gICAgICAgICAgICA/IGhhc1RyYWlsaW5nV2hpdGVzcGFjZShub2RlLmxhc3RDaGlsZClcbiAgICAgICAgICAgIDogaGFzRGFuZ2xpbmdXaGl0ZXNwYWNlKG5vZGUpO1xuICAgIH1cbiAgICByZXR1cm4gKDAsIHV0aWxzXzEuaXNXaGl0ZXNwYWNlKShub2RlLnNvdXJjZSwgbm9kZS5wb3NpdGlvbi5lbmQpO1xufVxuZnVuY3Rpb24gaXNIdG1sTm9kZShub2RlKSB7XG4gICAgcmV0dXJuIHR5cGVzXzEuSHRtbE5vZGVUeXBlcy5pbmNsdWRlcyhub2RlLnR5cGUpO1xufVxuZXhwb3J0cy5pc0h0bWxOb2RlID0gaXNIdG1sTm9kZTtcbmZ1bmN0aW9uIGlzUGFyZW50Tm9kZShub2RlKSB7XG4gICAgcmV0dXJuICdjaGlsZHJlbicgaW4gbm9kZTtcbn1cbmV4cG9ydHMuaXNQYXJlbnROb2RlID0gaXNQYXJlbnROb2RlO1xuZnVuY3Rpb24gaXNUcmltbWluZ091dGVyUmlnaHQobm9kZSkge1xuICAgIHZhciBfYTtcbiAgICBpZiAoIW5vZGUpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZFJhd1RhZzpcbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5MaXF1aWRUYWc6XG4gICAgICAgICAgICByZXR1cm4gKChfYSA9IG5vZGUuZGVsaW1pdGVyV2hpdGVzcGFjZUVuZCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogbm9kZS53aGl0ZXNwYWNlRW5kKSA9PT0gJy0nO1xuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZEJyYW5jaDpcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5MaXF1aWREcm9wOlxuICAgICAgICAgICAgcmV0dXJuIG5vZGUud2hpdGVzcGFjZUVuZCA9PT0gJy0nO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbmV4cG9ydHMuaXNUcmltbWluZ091dGVyUmlnaHQgPSBpc1RyaW1taW5nT3V0ZXJSaWdodDtcbmZ1bmN0aW9uIGlzVHJpbW1pbmdPdXRlckxlZnQobm9kZSkge1xuICAgIGlmICghbm9kZSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHN3aXRjaCAobm9kZS50eXBlKSB7XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuTGlxdWlkUmF3VGFnOlxuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZFRhZzpcbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5MaXF1aWRCcmFuY2g6XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuTGlxdWlkRHJvcDpcbiAgICAgICAgICAgIHJldHVybiBub2RlLndoaXRlc3BhY2VTdGFydCA9PT0gJy0nO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbmV4cG9ydHMuaXNUcmltbWluZ091dGVyTGVmdCA9IGlzVHJpbW1pbmdPdXRlckxlZnQ7XG5mdW5jdGlvbiBpc1RyaW1taW5nSW5uZXJMZWZ0KG5vZGUpIHtcbiAgICBpZiAoIW5vZGUpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZFJhd1RhZzpcbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5MaXF1aWRUYWc6XG4gICAgICAgICAgICBpZiAobm9kZS5kZWxpbWl0ZXJXaGl0ZXNwYWNlRW5kID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIG5vZGUud2hpdGVzcGFjZUVuZCA9PT0gJy0nO1xuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZEJyYW5jaDpcbiAgICAgICAgICAgIGlmICghbm9kZS5wYXJlbnROb2RlIHx8IG5vZGUucGFyZW50Tm9kZS50eXBlICE9PSB0eXBlc18xLk5vZGVUeXBlcy5MaXF1aWRUYWcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIW5vZGUucHJldikge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc1RyaW1taW5nSW5uZXJMZWZ0KG5vZGUucGFyZW50Tm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbm9kZS53aGl0ZXNwYWNlRW5kID09PSAnLSc7XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuTGlxdWlkRHJvcDpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5leHBvcnRzLmlzVHJpbW1pbmdJbm5lckxlZnQgPSBpc1RyaW1taW5nSW5uZXJMZWZ0O1xuZnVuY3Rpb24gaXNUcmltbWluZ0lubmVyUmlnaHQobm9kZSkge1xuICAgIGlmICghbm9kZSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHN3aXRjaCAobm9kZS50eXBlKSB7XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuTGlxdWlkUmF3VGFnOlxuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZFRhZzpcbiAgICAgICAgICAgIGlmIChub2RlLmRlbGltaXRlcldoaXRlc3BhY2VTdGFydCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiBub2RlLmRlbGltaXRlcldoaXRlc3BhY2VTdGFydCA9PT0gJy0nO1xuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZEJyYW5jaDpcbiAgICAgICAgICAgIGlmICghbm9kZS5wYXJlbnROb2RlIHx8IG5vZGUucGFyZW50Tm9kZS50eXBlICE9PSB0eXBlc18xLk5vZGVUeXBlcy5MaXF1aWRUYWcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIW5vZGUubmV4dCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc1RyaW1taW5nSW5uZXJSaWdodChub2RlLnBhcmVudE5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGlzVHJpbW1pbmdPdXRlckxlZnQobm9kZS5uZXh0KTtcbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5MaXF1aWREcm9wOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbmV4cG9ydHMuaXNUcmltbWluZ0lubmVyUmlnaHQgPSBpc1RyaW1taW5nSW5uZXJSaWdodDtcbmZ1bmN0aW9uIGlzQmxvY2tMaWtlQ3NzRGlzcGxheShjc3NEaXNwbGF5KSB7XG4gICAgcmV0dXJuIChjc3NEaXNwbGF5ID09PSAnYmxvY2snIHx8XG4gICAgICAgIGNzc0Rpc3BsYXkgPT09ICdsaXN0LWl0ZW0nIHx8XG4gICAgICAgIGNzc0Rpc3BsYXkuc3RhcnRzV2l0aCgndGFibGUnKSk7XG59XG5mdW5jdGlvbiBpc0lubmVyTGVmdFNwYWNlU2Vuc2l0aXZlQ3NzRGlzcGxheShjc3NEaXNwbGF5KSB7XG4gICAgcmV0dXJuICFpc0Jsb2NrTGlrZUNzc0Rpc3BsYXkoY3NzRGlzcGxheSkgJiYgY3NzRGlzcGxheSAhPT0gJ2lubGluZS1ibG9jayc7XG59XG5mdW5jdGlvbiBpc0lubmVyUmlnaHRXaGl0ZXNwYWNlU2Vuc2l0aXZlQ3NzRGlzcGxheShjc3NEaXNwbGF5KSB7XG4gICAgcmV0dXJuICFpc0Jsb2NrTGlrZUNzc0Rpc3BsYXkoY3NzRGlzcGxheSkgJiYgY3NzRGlzcGxheSAhPT0gJ2lubGluZS1ibG9jayc7XG59XG5mdW5jdGlvbiBpc091dGVyTGVmdFdoaXRlc3BhY2VTZW5zaXRpdmVDc3NEaXNwbGF5KGNzc0Rpc3BsYXkpIHtcbiAgICByZXR1cm4gIWlzQmxvY2tMaWtlQ3NzRGlzcGxheShjc3NEaXNwbGF5KTtcbn1cbmZ1bmN0aW9uIGlzT3V0ZXJSaWdodFdoaXRlc3BhY2VTZW5zaXRpdmVDc3NEaXNwbGF5KGNzc0Rpc3BsYXkpIHtcbiAgICByZXR1cm4gIWlzQmxvY2tMaWtlQ3NzRGlzcGxheShjc3NEaXNwbGF5KTtcbn1cbmZ1bmN0aW9uIGlzRGFuZ2xpbmdTcGFjZVNlbnNpdGl2ZUNzc0Rpc3BsYXkoY3NzRGlzcGxheSkge1xuICAgIHJldHVybiAhaXNCbG9ja0xpa2VDc3NEaXNwbGF5KGNzc0Rpc3BsYXkpICYmIGNzc0Rpc3BsYXkgIT09ICdpbmxpbmUtYmxvY2snO1xufVxuZnVuY3Rpb24gZ2V0Tm9kZUNzc1N0eWxlV2hpdGVTcGFjZShub2RlKSB7XG4gICAgcmV0dXJuICgoaXNIdG1sTm9kZShub2RlKSAmJlxuICAgICAgICB0eXBlb2Ygbm9kZS5uYW1lID09PSAnc3RyaW5nJyAmJlxuICAgICAgICBjb25zdGFudHNfZXZhbHVhdGVfMS5DU1NfV0hJVEVfU1BBQ0VfVEFHU1tub2RlLm5hbWVdKSB8fFxuICAgICAgICBjb25zdGFudHNfZXZhbHVhdGVfMS5DU1NfV0hJVEVfU1BBQ0VfREVGQVVMVCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lZWFZuYldWdWRDMTNhWFJvTFhkb2FYUmxjM0JoWTJVdGFHVnNjR1Z5Y3k1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMM055WXk5d2NtbHVkR1Z5TDNCeVpYQnliMk5sYzNNdllYVm5iV1Z1ZEMxM2FYUm9MWGRvYVhSbGMzQmhZMlV0YUdWc2NHVnljeTUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN1FVRkZRU3h0UTBGQkswUTdRVUZETDBRc05rUkJSemhDTzBGQlV6bENMSEZEUVVGNVF6dEJRVU42UXl3eVEwRkJLMFU3UVVGUmVFVXNUVUZCVFN3MFFrRkJORUlzUjBGQmJVTXNRMEZETVVVc1VVRkJVU3hGUVVOU0xFbEJRVWtzUlVGRFNpeEZRVUZGTzBsQlEwWXNUVUZCVFN4aFFVRmhMRWRCUVRCQ08xRkJRek5ETERaQ1FVRTJRaXhGUVVGRkxHbERRVUZwUXl4RFFVRkRMRWxCUVVrc1EwRkJRenRSUVVOMFJTeHpRa0ZCYzBJc1JVRkJSU3d3UWtGQk1FSXNRMEZCUXl4SlFVRkpMRU5CUVVNN1VVRkRlRVFzY1VKQlFYRkNMRVZCUVVVc2VVSkJRWGxDTEVOQlFVTXNTVUZCU1N4RFFVRkRPMUZCUlhSRUxEUkNRVUUwUWl4RlFVTXhRaXhuUTBGQlowTXNRMEZCUXl4SlFVRkpMRU5CUVVNN1dVRkRkRU1zUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRWxCUVVrc2FVTkJRV2xETEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8xRkJSVGxFTERaQ1FVRTJRaXhGUVVNelFpeHBRMEZCYVVNc1EwRkJReXhKUVVGSkxFTkJRVU03V1VGRGRrTXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFbEJRVWtzWjBOQlFXZERMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzFGQlF6ZEVMRzlDUVVGdlFpeEZRVUZGTEc5Q1FVRnZRaXhEUVVGRExFbEJRVWtzUTBGQlF6dFJRVU5vUkN4eFFrRkJjVUlzUlVGQlJTeHhRa0ZCY1VJc1EwRkJReXhKUVVGSkxFTkJRVU03VVVGRGJFUXNjVUpCUVhGQ0xFVkJRVVVzY1VKQlFYRkNMRU5CUVVNc1NVRkJTU3hEUVVGRE8wdEJRMjVFTEVOQlFVTTdTVUZGUml4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzUlVGQlJTeGhRVUZoTEVOQlFVTXNRMEZCUXp0QlFVTnlReXhEUVVGRExFTkJRVU03UVVGMFFsY3NVVUZCUVN3MFFrRkJORUlzWjBOQmMwSjJRenRCUVZsR0xGTkJRVk1zYVVOQlFXbERMRU5CUVVNc1NVRkJjMEk3U1VGREwwUXNUMEZCVHl4RFFVTk1MR3REUVVGclF5eERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNN1VVRkRia1FzUTBGQlF5eEpRVUZCTEhWQ1FVRmxMRVZCUVVNc1NVRkJTU3hEUVVGRE8xRkJRM1JDTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zU1VGQlNTeERRVUZETzFGQlF6RkNMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUXpWQ0xFTkJRVU03UVVGRFNpeERRVUZETzBGQlkwUXNVMEZCVXl4NVFrRkJlVUlzUTBGQlF5eEpRVUZ6UWp0SlFVTjJSQ3hQUVVGUExFTkJSVXdzTUVKQlFUQkNMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRMnBETEVOQlFVTTdRVUZEU2l4RFFVRkRPMEZCVlVRc1UwRkJVeXd3UWtGQk1FSXNRMEZCUXl4SlFVRnpRanRKUVVONFJDeFBRVUZQTEhsQ1FVRjVRaXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEZWQlFWVXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRCUVVNelJDeERRVUZETzBGQlQwUXNVMEZCVXl4blEwRkJaME1zUTBGQlF5eEpRVUZ6UWp0SlFVTTVSQ3hKUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTzFGQlExUXNUMEZCVHl4TFFVRkxMRU5CUVVNN1MwRkRaRHRKUVVkRUxFbEJRVWtzYlVKQlFXMUNMRU5CUVVNc1NVRkJTU3hEUVVGRExFVkJRVVU3VVVGRE4wSXNUMEZCVHl4TFFVRkxMRU5CUVVNN1MwRkRaRHRKUVVkRUxFbEJRVWtzU1VGQlNTeERRVUZETEVsQlFVa3NTVUZCU1N4dlFrRkJiMElzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVN1VVRkRhRVFzVDBGQlR5eExRVUZMTEVOQlFVTTdTMEZEWkR0SlFVZEVMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlZTeEpRVUZKTEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1ZVRkJWU3hMUVVGTExFMUJRVTBzUlVGQlJUdFJRVU0zUkN4UFFVRlBMRXRCUVVzc1EwRkJRenRMUVVOa08wbEJTVVFzU1VGQlNTeEpRVUZCTEhGQ1FVRmhMRVZCUVVNc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eEZRVUZGTzFGQlEyeERMRTlCUVU4c1NVRkJTU3hEUVVGRE8wdEJRMkk3U1VGSFJDeEpRVUZKTEVsQlFVRXNkVUpCUVdVc1JVRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJUdFJRVU42UWl4UFFVRlBMRXRCUVVzc1EwRkJRenRMUVVOa08wbEJXVVFzU1VGRFJTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRWxCUVVrc1EwRkRXaXhKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEVsQlFVa3NTMEZCU3l4cFFrRkJVeXhEUVVGRExGRkJRVkU3VjBGRGVFTXNTVUZCUVN4eFFrRkJZU3hGUVVGRExFbEJRVWtzUTBGQlF6dFhRVU51UWl4SlFVRkJMSFZDUVVGbExFVkJRVU1zU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXp0WFFVTm9ReXhEUVVGRExHMURRVUZ0UXl4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zVlVGQlZTeERRVUZETzFkQlEyaEZMRzFDUVVGdFFpeERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkRlRU1zUlVGRFJEdFJRVU5CTEU5QlFVOHNTMEZCU3l4RFFVRkRPMHRCUTJRN1NVRlBSQ3hKUVVORkxFbEJRVWtzUTBGQlF5eEpRVUZKTzFGQlExUXNRMEZCUXl4NVEwRkJlVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhGUVVOb1JUdFJRVU5CTEU5QlFVOHNTMEZCU3l4RFFVRkRPMHRCUTJRN1NVRlBSQ3hKUVVGSkxFTkJRVU1zZDBOQlFYZERMRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eEZRVUZGTzFGQlF6bEVMRTlCUVU4c1MwRkJTeXhEUVVGRE8wdEJRMlE3U1VGRlJDeFBRVUZQTEVsQlFVa3NRMEZCUXp0QlFVTmtMRU5CUVVNN1FVRjNRa1FzVTBGQlV5eHBRMEZCYVVNc1EwRkJReXhKUVVGelFqdEpRVVV2UkN4SlFVRkpMRzlDUVVGdlFpeERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZPMUZCUXpsQ0xFOUJRVThzUzBGQlN5eERRVUZETzB0QlEyUTdTVUZIUkN4SlFVRkpMRWxCUVVrc1EwRkJReXhKUVVGSkxFbEJRVWtzYlVKQlFXMUNMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTzFGQlF5OURMRTlCUVU4c1MwRkJTeXhEUVVGRE8wdEJRMlE3U1VGSlJDeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVZVc1NVRkJTU3hKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEZWQlFWVXNTMEZCU3l4TlFVRk5MRVZCUVVVN1VVRkROMFFzVDBGQlR5eExRVUZMTEVOQlFVTTdTMEZEWkR0SlFVbEVMRWxCUVVrc1NVRkJRU3h4UWtGQllTeEZRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1JVRkJSVHRSUVVOc1F5eFBRVUZQTEVsQlFVa3NRMEZCUXp0TFFVTmlPMGxCUjBRc1NVRkJTU3hKUVVGQkxIVkNRVUZsTEVWQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVN1VVRkRla0lzVDBGQlR5eExRVUZMTEVOQlFVTTdTMEZEWkR0SlFVbEVMRWxCUVVrc1ZVRkJWU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEU5QlFVOHNTVUZCU1N4RFFVRkRMRWxCUVVrc1MwRkJTeXhSUVVGUkxFbEJRVWtzU1VGQlNTeERRVUZETEVsQlFVa3NTMEZCU3l4SlFVRkpMRVZCUVVVN1VVRkRNMFVzVDBGQlR5eExRVUZMTEVOQlFVTTdTMEZEWkR0SlFXTkVMRWxCUTBVc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeEpRVUZKTEVOQlExb3NTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhKUVVGSkxFdEJRVXNzYVVKQlFWTXNRMEZCUXl4UlFVRlJPMWRCUTNoRExFbEJRVUVzY1VKQlFXRXNSVUZCUXl4SlFVRkpMRU5CUVVNN1YwRkRia0lzU1VGQlFTeDFRa0ZCWlN4RlFVRkRMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU03VjBGRGFFTXNRMEZCUXl4NVEwRkJlVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRlZCUVZVc1EwRkJRenRYUVVOMFJTeHZRa0ZCYjBJc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEVOQlEzcERMRVZCUTBRN1VVRkRRU3hQUVVGUExFdEJRVXNzUTBGQlF6dExRVU5rTzBsQlZVUXNTVUZEUlN4SlFVRkpMRU5CUVVNc1NVRkJTVHRSUVVOVUxFTkJRVU1zZDBOQlFYZERMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNSVUZETDBRN1VVRkRRU3hQUVVGUExFdEJRVXNzUTBGQlF6dExRVU5rTzBsQlUwUXNTVUZCU1N4RFFVRkRMSGxEUVVGNVF5eERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1JVRkJSVHRSUVVNdlJDeFBRVUZQTEV0QlFVc3NRMEZCUXp0TFFVTmtPMGxCUjBRc1QwRkJUeXhKUVVGSkxFTkJRVU03UVVGRFpDeERRVUZETzBGQlUwUXNVMEZCVXl4eFFrRkJjVUlzUTBGQlF5eEpRVUZ6UWp0SlFVTnVSQ3hKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZPMUZCUTNaQ0xFOUJRVThzUzBGQlN5eERRVUZETzB0QlEyUTdVMEZCVFN4SlFVRkpMRWxCUVVrc1EwRkJReXhKUVVGSkxFdEJRVXNzYVVKQlFWTXNRMEZCUXl4UlFVRlJMRVZCUVVVN1VVRkRNME1zVDBGQlR5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRTFCUVUwc1MwRkJTeXhEUVVGRExFbEJRVWtzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4TlFVRk5MRWRCUVVjc1EwRkJReXhEUVVGRE8wdEJRemRFTzFOQlFVMHNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFVkJRVVU3VVVGRGVrSXNUMEZCVHl4TFFVRkxMRU5CUVVNN1MwRkRaRHRUUVVGTkxFbEJRMHdzU1VGQlNTeERRVUZETEVsQlFVa3NTMEZCU3l4cFFrRkJVeXhEUVVGRExGTkJRVk03VVVGRGFrTXNTVUZCUVN4elFrRkJZU3hGUVVGRExFbEJRVWtzUTBGQlF6dFJRVU51UWl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFMUJRVTBzUzBGQlN5eERRVUZETEVWQlF6RkNPMUZCUTBFc1QwRkJUeXh4UWtGQmNVSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWeXhEUVVGRExFTkJRVU03UzBGRGFFUTdVMEZCVFN4SlFVRkpMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNSVUZCUlR0UlFVTnVReXhQUVVGUExFdEJRVXNzUTBGQlF6dExRVU5rTzBsQlEwUXNUMEZCVHl4SlFVRkJMRzlDUVVGWkxFVkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNSVUZCUlN4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1FVRkRhRVVzUTBGQlF6dEJRVVZFTEZOQlFWTXNiMEpCUVc5Q0xFTkJRVU1zU1VGQmMwSTdTVUZGYkVRc1NVRkJTU3hKUVVGSkxFTkJRVU1zU1VGQlNTeExRVUZMTEdsQ1FVRlRMRU5CUVVNc1dVRkJXU3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NSVUZCUlR0UlFVTjBSQ3hQUVVGUExFbEJRVWtzUTBGQlF5eFZRVUZWTzFsQlEzQkNMRU5CUVVNc1EwRkJReXh2UWtGQmIwSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRE8xbEJRM1pETEVOQlFVTXNRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0TFFVTnFRenRKUVVORUxFOUJRVThzU1VGQlFTeHZRa0ZCV1N4RlFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFVkJRVVVzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4TFFVRkxMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRE5VUXNRMEZCUXp0QlFVVkVMRk5CUVZNc2NVSkJRWEZDTEVOQlFVTXNTVUZCYzBJN1NVRkRia1FzU1VGQlNTeEpRVUZKTEVOQlFVTXNTVUZCU1N4TFFVRkxMR2xDUVVGVExFTkJRVU1zV1VGQldTeEZRVUZGTzFGQlEzaERMRTlCUVU4c1NVRkJTU3hEUVVGRExGTkJRVk03V1VGRGJrSXNRMEZCUXl4RFFVRkRMSEZDUVVGeFFpeERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNN1dVRkRka01zUTBGQlF5eERRVUZETEhGQ1FVRnhRaXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzB0QlEycERPMGxCUTBRc1QwRkJUeXhKUVVGQkxHOUNRVUZaTEVWQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1JVRkJSU3hKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMEZCUTNSRUxFTkJRVU03UVVGWFJDeFRRVUZuUWl4VlFVRlZMRU5CUVVNc1NVRkJjMEk3U1VGREwwTXNUMEZCVHl4eFFrRkJZU3hEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCVnl4RFFVRkRMRU5CUVVNN1FVRkRiRVFzUTBGQlF6dEJRVVpFTEdkRFFVVkRPMEZCUlVRc1UwRkJaMElzV1VGQldTeERRVUZETEVsQlFYTkNPMGxCUTJwRUxFOUJRVThzVlVGQlZTeEpRVUZKTEVsQlFVa3NRMEZCUXp0QlFVTTFRaXhEUVVGRE8wRkJSa1FzYjBOQlJVTTdRVUZGUkN4VFFVRm5RaXh2UWtGQmIwSXNRMEZEYkVNc1NVRkJhME03TzBsQlJXeERMRWxCUVVrc1EwRkJReXhKUVVGSk8xRkJRVVVzVDBGQlR5eExRVUZMTEVOQlFVTTdTVUZEZUVJc1VVRkJVU3hKUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTzFGQlEycENMRXRCUVVzc2FVSkJRVk1zUTBGQlF5eFpRVUZaTEVOQlFVTTdVVUZETlVJc1MwRkJTeXhwUWtGQlV5eERRVUZETEZOQlFWTTdXVUZEZEVJc1QwRkJUeXhEUVVGRExFMUJRVUVzU1VGQlNTeERRVUZETEhOQ1FVRnpRaXh0UTBGQlNTeEpRVUZKTEVOQlFVTXNZVUZCWVN4RFFVRkRMRXRCUVVzc1IwRkJSeXhEUVVGRE8xRkJRM0pGTEV0QlFVc3NhVUpCUVZNc1EwRkJReXhaUVVGWk8xbEJRM3BDTEU5QlFVOHNTMEZCU3l4RFFVRkRPMUZCUTJZc1MwRkJTeXhwUWtGQlV5eERRVUZETEZWQlFWVTdXVUZEZGtJc1QwRkJUeXhKUVVGSkxFTkJRVU1zWVVGQllTeExRVUZMTEVkQlFVY3NRMEZCUXp0UlFVTndRenRaUVVORkxFOUJRVThzUzBGQlN5eERRVUZETzB0QlEyaENPMEZCUTBnc1EwRkJRenRCUVdaRUxHOUVRV1ZETzBGQlJVUXNVMEZCWjBJc2JVSkJRVzFDTEVOQlEycERMRWxCUVd0RE8wbEJSV3hETEVsQlFVa3NRMEZCUXl4SlFVRkpPMUZCUVVVc1QwRkJUeXhMUVVGTExFTkJRVU03U1VGRGVFSXNVVUZCVVN4SlFVRkpMRU5CUVVNc1NVRkJTU3hGUVVGRk8xRkJRMnBDTEV0QlFVc3NhVUpCUVZNc1EwRkJReXhaUVVGWkxFTkJRVU03VVVGRE5VSXNTMEZCU3l4cFFrRkJVeXhEUVVGRExGTkJRVk1zUTBGQlF6dFJRVU42UWl4TFFVRkxMR2xDUVVGVExFTkJRVU1zV1VGQldTeERRVUZETzFGQlF6VkNMRXRCUVVzc2FVSkJRVk1zUTBGQlF5eFZRVUZWTzFsQlEzWkNMRTlCUVU4c1NVRkJTU3hEUVVGRExHVkJRV1VzUzBGQlN5eEhRVUZITEVOQlFVTTdVVUZEZEVNN1dVRkRSU3hQUVVGUExFdEJRVXNzUTBGQlF6dExRVU5vUWp0QlFVTklMRU5CUVVNN1FVRmlSQ3hyUkVGaFF6dEJRVVZFTEZOQlFXZENMRzFDUVVGdFFpeERRVU5xUXl4SlFVRnJRenRKUVVWc1F5eEpRVUZKTEVOQlFVTXNTVUZCU1R0UlFVRkZMRTlCUVU4c1MwRkJTeXhEUVVGRE8wbEJRM2hDTEZGQlFWRXNTVUZCU1N4RFFVRkRMRWxCUVVrc1JVRkJSVHRSUVVOcVFpeExRVUZMTEdsQ1FVRlRMRU5CUVVNc1dVRkJXU3hEUVVGRE8xRkJRelZDTEV0QlFVc3NhVUpCUVZNc1EwRkJReXhUUVVGVE8xbEJRM1JDTEVsQlFVa3NTVUZCU1N4RFFVRkRMSE5DUVVGelFpeExRVUZMTEZOQlFWTTdaMEpCUVVVc1QwRkJUeXhMUVVGTExFTkJRVU03V1VGRE5VUXNUMEZCVHl4SlFVRkpMRU5CUVVNc1lVRkJZU3hMUVVGTExFZEJRVWNzUTBGQlF6dFJRVU53UXl4TFFVRkxMR2xDUVVGVExFTkJRVU1zV1VGQldUdFpRVVY2UWl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVlVzU1VGQlNTeEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRWxCUVVrc1MwRkJTeXhwUWtGQlV5eERRVUZETEZOQlFWTXNSVUZCUlR0blFrRkRjRVVzVDBGQlR5eExRVUZMTEVOQlFVTTdZVUZEWkR0WlFVZEVMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTzJkQ1FVTmtMRTlCUVU4c2JVSkJRVzFDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRE8yRkJRemRETzFsQlIwUXNUMEZCVHl4SlFVRkpMRU5CUVVNc1lVRkJZU3hMUVVGTExFZEJRVWNzUTBGQlF6dFJRVU53UXl4TFFVRkxMR2xDUVVGVExFTkJRVU1zVlVGQlZTeERRVUZETzFGQlF6RkNPMWxCUTBVc1QwRkJUeXhMUVVGTExFTkJRVU03UzBGRGFFSTdRVUZEU0N4RFFVRkRPMEZCTVVKRUxHdEVRVEJDUXp0QlFVVkVMRk5CUVdkQ0xHOUNRVUZ2UWl4RFFVTnNReXhKUVVGclF6dEpRVVZzUXl4SlFVRkpMRU5CUVVNc1NVRkJTVHRSUVVGRkxFOUJRVThzUzBGQlN5eERRVUZETzBsQlEzaENMRkZCUVZFc1NVRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJUdFJRVU5xUWl4TFFVRkxMR2xDUVVGVExFTkJRVU1zV1VGQldTeERRVUZETzFGQlF6VkNMRXRCUVVzc2FVSkJRVk1zUTBGQlF5eFRRVUZUTzFsQlEzUkNMRWxCUVVrc1NVRkJTU3hEUVVGRExIZENRVUYzUWl4TFFVRkxMRk5CUVZNN1owSkJRVVVzVDBGQlR5eExRVUZMTEVOQlFVTTdXVUZET1VRc1QwRkJUeXhKUVVGSkxFTkJRVU1zZDBKQlFYZENMRXRCUVVzc1IwRkJSeXhEUVVGRE8xRkJReTlETEV0QlFVc3NhVUpCUVZNc1EwRkJReXhaUVVGWk8xbEJSWHBDTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hKUVVGSkxFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNTVUZCU1N4TFFVRkxMR2xDUVVGVExFTkJRVU1zVTBGQlV5eEZRVUZGTzJkQ1FVTndSU3hQUVVGUExFdEJRVXNzUTBGQlF6dGhRVU5rTzFsQlIwUXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVU3WjBKQlEyUXNUMEZCVHl4dlFrRkJiMElzUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNN1lVRkRPVU03V1VGSFJDeFBRVUZQTEcxQ1FVRnRRaXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0UlFVTjRReXhMUVVGTExHbENRVUZUTEVOQlFVTXNWVUZCVlN4RFFVRkRPMUZCUXpGQ08xbEJRMFVzVDBGQlR5eExRVUZMTEVOQlFVTTdTMEZEYUVJN1FVRkRTQ3hEUVVGRE8wRkJNVUpFTEc5RVFUQkNRenRCUVVWRUxGTkJRVk1zY1VKQlFYRkNMRU5CUVVNc1ZVRkJhMEk3U1VGREwwTXNUMEZCVHl4RFFVTk1MRlZCUVZVc1MwRkJTeXhQUVVGUE8xRkJRM1JDTEZWQlFWVXNTMEZCU3l4WFFVRlhPMUZCUXpGQ0xGVkJRVlVzUTBGQlF5eFZRVUZWTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUXk5Q0xFTkJRVU03UVVGRFNpeERRVUZETzBGQlJVUXNVMEZCVXl4dFEwRkJiVU1zUTBGQlF5eFZRVUZyUWp0SlFVTTNSQ3hQUVVGUExFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc1ZVRkJWU3hEUVVGRExFbEJRVWtzVlVGQlZTeExRVUZMTEdOQlFXTXNRMEZCUXp0QlFVTTNSU3hEUVVGRE8wRkJSVVFzVTBGQlV5eDVRMEZCZVVNc1EwRkJReXhWUVVGclFqdEpRVU51UlN4UFFVRlBMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTXNWVUZCVlN4RFFVRkRMRWxCUVVrc1ZVRkJWU3hMUVVGTExHTkJRV01zUTBGQlF6dEJRVU0zUlN4RFFVRkRPMEZCUlVRc1UwRkJVeXgzUTBGQmQwTXNRMEZCUXl4VlFVRnJRanRKUVVOc1JTeFBRVUZQTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTTdRVUZETlVNc1EwRkJRenRCUVVWRUxGTkJRVk1zZVVOQlFYbERMRU5CUVVNc1ZVRkJhMEk3U1VGRGJrVXNUMEZCVHl4RFFVRkRMSEZDUVVGeFFpeERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRPMEZCUXpWRExFTkJRVU03UVVGRlJDeFRRVUZUTEd0RFFVRnJReXhEUVVGRExGVkJRV3RDTzBsQlF6VkVMRTlCUVU4c1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4VlFVRlZMRU5CUVVNc1NVRkJTU3hWUVVGVkxFdEJRVXNzWTBGQll5eERRVUZETzBGQlF6ZEZMRU5CUVVNN1FVRkZSQ3hUUVVGVExIbENRVUY1UWl4RFFVRkRMRWxCUVhOQ08wbEJRM1pFTEU5QlFVOHNRMEZEVEN4RFFVRkRMRlZCUVZVc1EwRkJReXhKUVVGSkxFTkJRVU03VVVGRFppeFBRVUZQTEVsQlFVa3NRMEZCUXl4SlFVRkpMRXRCUVVzc1VVRkJVVHRSUVVNM1FpeDVRMEZCYjBJc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdVVUZEYkVNc05FTkJRWFZDTEVOQlEzaENMRU5CUVVNN1FVRkRTaXhEUVVGREluMD0iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQVVHTUVOVEFUSU9OX1BJUEVMSU5FID0gdm9pZCAwO1xuY29uc3QgYXVnbWVudF93aXRoX2Nzc19wcm9wZXJ0aWVzXzEgPSByZXF1aXJlKFwiLi4vLi4vcHJpbnRlci9wcmVwcm9jZXNzL2F1Z21lbnQtd2l0aC1jc3MtcHJvcGVydGllc1wiKTtcbmNvbnN0IGF1Z21lbnRfd2l0aF9wYXJlbnRfMSA9IHJlcXVpcmUoXCIuLi8uLi9wcmludGVyL3ByZXByb2Nlc3MvYXVnbWVudC13aXRoLXBhcmVudFwiKTtcbmNvbnN0IGF1Z21lbnRfd2l0aF9zaWJsaW5nc18xID0gcmVxdWlyZShcIi4uLy4uL3ByaW50ZXIvcHJlcHJvY2Vzcy9hdWdtZW50LXdpdGgtc2libGluZ3NcIik7XG5jb25zdCBhdWdtZW50X3dpdGhfd2hpdGVzcGFjZV9oZWxwZXJzXzEgPSByZXF1aXJlKFwiLi4vLi4vcHJpbnRlci9wcmVwcm9jZXNzL2F1Z21lbnQtd2l0aC13aGl0ZXNwYWNlLWhlbHBlcnNcIik7XG5jb25zdCBhdWdtZW50X3dpdGhfZmFtaWx5XzEgPSByZXF1aXJlKFwiLi4vLi4vcHJpbnRlci9wcmVwcm9jZXNzL2F1Z21lbnQtd2l0aC1mYW1pbHlcIik7XG5leHBvcnRzLkFVR01FTlRBVElPTl9QSVBFTElORSA9IFtcbiAgICBhdWdtZW50X3dpdGhfcGFyZW50XzEuYXVnbWVudFdpdGhQYXJlbnQsXG4gICAgYXVnbWVudF93aXRoX3NpYmxpbmdzXzEuYXVnbWVudFdpdGhTaWJsaW5ncyxcbiAgICBhdWdtZW50X3dpdGhfZmFtaWx5XzEuYXVnbWVudFdpdGhGYW1pbHksXG4gICAgYXVnbWVudF93aXRoX2Nzc19wcm9wZXJ0aWVzXzEuYXVnbWVudFdpdGhDU1NQcm9wZXJ0aWVzLFxuICAgIGF1Z21lbnRfd2l0aF93aGl0ZXNwYWNlX2hlbHBlcnNfMS5hdWdtZW50V2l0aFdoaXRlc3BhY2VIZWxwZXJzLFxuXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXNWtaWGd1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk4dUxpOXpjbU12Y0hKcGJuUmxjaTl3Y21Wd2NtOWpaWE56TDJsdVpHVjRMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3T3p0QlFVRkJMR3RIUVVFMFJqdEJRVU0xUml4clJrRkJOa1U3UVVGRE4wVXNjMFpCUVdsR08wRkJRMnBHTERCSFFVRnZSenRCUVVOd1J5eHJSa0ZCTmtVN1FVRkZhRVVzVVVGQlFTeHhRa0ZCY1VJc1IwRkJSenRKUVVOdVF5eDFRMEZCYVVJN1NVRkRha0lzTWtOQlFXMUNPMGxCUTI1Q0xIVkRRVUZwUWp0SlFVTnFRaXh6UkVGQmQwSTdTVUZEZUVJc09FUkJRVFJDTzBOQlF6ZENMRU5CUVVNaWZRPT0iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wcmVwcm9jZXNzID0gdm9pZCAwO1xuY29uc3QgQVNUID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuLi9wYXJzZXIvYXN0XCIpKTtcbmNvbnN0IHByZXByb2Nlc3NfMSA9IHJlcXVpcmUoXCIuLi9wcmludGVyL3ByZXByb2Nlc3NcIik7XG5mdW5jdGlvbiBwcmVwcm9jZXNzKGFzdCwgb3B0aW9ucykge1xuICAgIGNvbnN0IGF1Z21lbnRhdGlvblBpcGVsaW5lID0gcHJlcHJvY2Vzc18xLkFVR01FTlRBVElPTl9QSVBFTElORS5tYXAoKGZuKSA9PiBmbi5iaW5kKG51bGwsIG9wdGlvbnMpKTtcbiAgICBmb3IgKGNvbnN0IGF1Z21lbnRhdGlvbiBvZiBhdWdtZW50YXRpb25QaXBlbGluZSkge1xuICAgICAgICBBU1Qud2Fsayhhc3QsIGF1Z21lbnRhdGlvbik7XG4gICAgfVxuICAgIHJldHVybiBhc3Q7XG59XG5leHBvcnRzLnByZXByb2Nlc3MgPSBwcmVwcm9jZXNzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pY0hKcGJuUXRjSEpsY0hKdlkyVnpjeTVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYklpNHVMeTR1TDNOeVl5OXdjbWx1ZEdWeUwzQnlhVzUwTFhCeVpYQnliMk5sYzNNdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUVVGQkxHdEVRVUZ2UXp0QlFVVndReXh4UkVGQk5rUTdRVUZKTjBRc1UwRkJaMElzVlVGQlZTeERRVU40UWl4SFFVRnhRaXhGUVVOeVFpeFBRVUUwUWp0SlFVVTFRaXhOUVVGTkxHOUNRVUZ2UWl4SFFVRkhMR3REUVVGeFFpeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRVZCUVVVc1JVRkJSU3hGUVVGRkxFTkJRelZFTEVWQlFVVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hGUVVGRkxFOUJRVThzUTBGQlF5eERRVU4yUWl4RFFVRkRPMGxCUlVZc1MwRkJTeXhOUVVGTkxGbEJRVmtzU1VGQlNTeHZRa0ZCYjBJc1JVRkJSVHRSUVVNdlF5eEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1JVRkJSU3haUVVGdFFpeERRVUZETEVOQlFVTTdTMEZEY0VNN1NVRkZSQ3hQUVVGUExFZEJRVzFDTEVOQlFVTTdRVUZETjBJc1EwRkJRenRCUVdKRUxHZERRV0ZESW4wPSIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wcmludENoaWxkcmVuID0gdm9pZCAwO1xuY29uc3QgcHJldHRpZXJfMSA9IHJlcXVpcmUoXCJwcmV0dGllclwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vdXRpbHNcIik7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4uLy4uL3R5cGVzXCIpO1xuY29uc3QgdXRpbHNfMiA9IHJlcXVpcmUoXCIuLi8uLi9wcmludGVyL3V0aWxzXCIpO1xuY29uc3QgdGFnXzEgPSByZXF1aXJlKFwiLi4vLi4vcHJpbnRlci9wcmludC90YWdcIik7XG5jb25zdCB7IGJ1aWxkZXJzOiB7IGJyZWFrUGFyZW50LCBncm91cCwgaWZCcmVhaywgbGluZSwgc29mdGxpbmUsIGhhcmRsaW5lIH0sIH0gPSBwcmV0dGllcl8xLmRvYztcbmNvbnN0IHsgcmVwbGFjZVRleHRFbmRPZkxpbmUgfSA9IHByZXR0aWVyXzEuZG9jLnV0aWxzO1xuZnVuY3Rpb24gcHJpbnRDaGlsZChjaGlsZFBhdGgsIG9wdGlvbnMsIHByaW50LCBhcmdzKSB7XG4gICAgY29uc3QgY2hpbGQgPSBjaGlsZFBhdGguZ2V0VmFsdWUoKTtcbiAgICBpZiAoKDAsIHV0aWxzXzIuaGFzUHJldHRpZXJJZ25vcmUpKGNoaWxkKSkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgKDAsIHRhZ18xLnByaW50T3BlbmluZ1RhZ1ByZWZpeCkoY2hpbGQsIG9wdGlvbnMpLFxuICAgICAgICAgICAgLi4ucmVwbGFjZVRleHRFbmRPZkxpbmUob3B0aW9ucy5vcmlnaW5hbFRleHQuc2xpY2UoKDAsIHV0aWxzXzEubG9jU3RhcnQpKGNoaWxkKSArXG4gICAgICAgICAgICAgICAgKGNoaWxkLnByZXYgJiYgKDAsIHRhZ18xLm5lZWRzVG9Cb3Jyb3dOZXh0T3BlbmluZ1RhZ1N0YXJ0TWFya2VyKShjaGlsZC5wcmV2KVxuICAgICAgICAgICAgICAgICAgICA/ICgwLCB0YWdfMS5wcmludE9wZW5pbmdUYWdTdGFydE1hcmtlcikoY2hpbGQpLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICA6IDApLCAoMCwgdXRpbHNfMS5sb2NFbmQpKGNoaWxkKSAtXG4gICAgICAgICAgICAgICAgKGNoaWxkLm5leHQgJiYgKDAsIHRhZ18xLm5lZWRzVG9Cb3Jyb3dQcmV2Q2xvc2luZ1RhZ0VuZE1hcmtlcikoY2hpbGQubmV4dClcbiAgICAgICAgICAgICAgICAgICAgPyAoMCwgdGFnXzEucHJpbnRDbG9zaW5nVGFnRW5kTWFya2VyKShjaGlsZCwgb3B0aW9ucykubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgIDogMCkpKSxcbiAgICAgICAgICAgICgwLCB0YWdfMS5wcmludENsb3NpbmdUYWdTdWZmaXgpKGNoaWxkLCBvcHRpb25zKSxcbiAgICAgICAgXTtcbiAgICB9XG4gICAgcmV0dXJuIHByaW50KGNoaWxkUGF0aCwgYXJncyk7XG59XG5mdW5jdGlvbiBwcmludEJldHdlZW5MaW5lKHByZXZOb2RlLCBuZXh0Tm9kZSkge1xuICAgIGlmICghcHJldk5vZGUgfHwgIW5leHROb2RlKVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgY29uc3Qgc3BhY2VCZXR3ZWVuTGluZXNJc0hhbmRsZWRTb21ld2hlcmVFbHNlID0gKCgwLCB0YWdfMS5uZWVkc1RvQm9ycm93TmV4dE9wZW5pbmdUYWdTdGFydE1hcmtlcikocHJldk5vZGUpICYmXG4gICAgICAgICgoMCwgdXRpbHNfMi5oYXNQcmV0dGllcklnbm9yZSkobmV4dE5vZGUpIHx8XG4gICAgICAgICAgICBuZXh0Tm9kZS5maXJzdENoaWxkIHx8XG4gICAgICAgICAgICAoMCwgdXRpbHNfMi5oYXNOb0Nsb3NlTWFya2VyKShuZXh0Tm9kZSkgfHxcbiAgICAgICAgICAgIChuZXh0Tm9kZS50eXBlID09PSB0eXBlc18xLk5vZGVUeXBlcy5IdG1sRWxlbWVudCAmJlxuICAgICAgICAgICAgICAgIG5leHROb2RlLmF0dHJpYnV0ZXMubGVuZ3RoID4gMCkpKSB8fFxuICAgICAgICAocHJldk5vZGUudHlwZSA9PT0gdHlwZXNfMS5Ob2RlVHlwZXMuSHRtbEVsZW1lbnQgJiZcbiAgICAgICAgICAgICgwLCB1dGlsc18yLmhhc05vQ2xvc2VNYXJrZXIpKHByZXZOb2RlKSAmJlxuICAgICAgICAgICAgKDAsIHRhZ18xLm5lZWRzVG9Cb3Jyb3dQcmV2Q2xvc2luZ1RhZ0VuZE1hcmtlcikobmV4dE5vZGUpKTtcbiAgICBpZiAoc3BhY2VCZXR3ZWVuTGluZXNJc0hhbmRsZWRTb21ld2hlcmVFbHNlKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgY29uc3Qgc2hvdWxkVXNlSGFyZGxpbmUgPSAhbmV4dE5vZGUuaXNMZWFkaW5nV2hpdGVzcGFjZVNlbnNpdGl2ZSB8fFxuICAgICAgICAoMCwgdXRpbHNfMi5wcmVmZXJIYXJkbGluZUFzTGVhZGluZ1NwYWNlcykobmV4dE5vZGUpIHx8XG4gICAgICAgICgoMCwgdGFnXzEubmVlZHNUb0JvcnJvd1ByZXZDbG9zaW5nVGFnRW5kTWFya2VyKShuZXh0Tm9kZSkgJiZcbiAgICAgICAgICAgIHByZXZOb2RlLmxhc3RDaGlsZCAmJlxuICAgICAgICAgICAgKDAsIHRhZ18xLm5lZWRzVG9Cb3Jyb3dQYXJlbnRDbG9zaW5nVGFnU3RhcnRNYXJrZXIpKHByZXZOb2RlLmxhc3RDaGlsZCkgJiZcbiAgICAgICAgICAgIHByZXZOb2RlLmxhc3RDaGlsZC5sYXN0Q2hpbGQgJiZcbiAgICAgICAgICAgICgwLCB0YWdfMS5uZWVkc1RvQm9ycm93UGFyZW50Q2xvc2luZ1RhZ1N0YXJ0TWFya2VyKShwcmV2Tm9kZS5sYXN0Q2hpbGQubGFzdENoaWxkKSk7XG4gICAgaWYgKHNob3VsZFVzZUhhcmRsaW5lKSB7XG4gICAgICAgIHJldHVybiBoYXJkbGluZTtcbiAgICB9XG4gICAgcmV0dXJuIG5leHROb2RlLmhhc0xlYWRpbmdXaGl0ZXNwYWNlID8gbGluZSA6IHNvZnRsaW5lO1xufVxuZnVuY3Rpb24gcHJpbnRDaGlsZHJlbihwYXRoLCBvcHRpb25zLCBwcmludCwgYXJncykge1xuICAgIGNvbnN0IG5vZGUgPSBwYXRoLmdldFZhbHVlKCk7XG4gICAgaWYgKCFub2RlLmNoaWxkcmVuKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYXR0ZW1wdGluZyB0byB1c2UgcHJpbnRDaGlsZHJlbiBvbiBzb21ldGhpbmcgd2l0aG91dCBjaGlsZHJlbicpO1xuICAgIH1cbiAgICBpZiAoKDAsIHV0aWxzXzIuZm9yY2VCcmVha0NoaWxkcmVuKShub2RlKSkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgYnJlYWtQYXJlbnQsXG4gICAgICAgICAgICAuLi5wYXRoLm1hcCgoY2hpbGRQYXRoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGROb2RlID0gY2hpbGRQYXRoLmdldFZhbHVlKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJldkJldHdlZW5MaW5lID0gcHJpbnRCZXR3ZWVuTGluZShjaGlsZE5vZGUucHJldiwgY2hpbGROb2RlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICAhcHJldkJldHdlZW5MaW5lXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICA6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2QmV0d2VlbkxpbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIHV0aWxzXzIuZm9yY2VOZXh0RW1wdHlMaW5lKShjaGlsZE5vZGUucHJldikgPyBoYXJkbGluZSA6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgcHJpbnRDaGlsZChjaGlsZFBhdGgsIG9wdGlvbnMsIHByaW50LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZWFkaW5nU3BhY2VHcm91cElkOiB1dGlsc18yLkZPUkNFX0JSRUFLX0dST1VQX0lELFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhaWxpbmdTcGFjZUdyb3VwSWQ6IHV0aWxzXzIuRk9SQ0VfQlJFQUtfR1JPVVBfSUQsXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9LCAnY2hpbGRyZW4nKSxcbiAgICAgICAgXTtcbiAgICB9XG4gICAgY29uc3QgbGVhZGluZ1NwYWNlR3JvdXBJZHMgPSBub2RlLmNoaWxkcmVuLm1hcCgoXywgaSkgPT4gU3ltYm9sKGBsZWFkaW5nLSR7aX1gKSk7XG4gICAgY29uc3QgdHJhaWxpbmdTcGFjZUdyb3VwSWRzID0gbm9kZS5jaGlsZHJlbi5tYXAoKF8sIGkpID0+IFN5bWJvbChgdHJhaWxpbmctJHtpfWApKTtcbiAgICBjb25zdCB3aGl0ZXNwYWNlQmV0d2Vlbk5vZGUgPSBwYXRoLm1hcCgoY2hpbGRQYXRoLCBjaGlsZEluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IGNoaWxkTm9kZSA9IGNoaWxkUGF0aC5nZXRWYWx1ZSgpO1xuICAgICAgICBjb25zdCBsZWFkaW5nSGFyZGxpbmVzID0gW107XG4gICAgICAgIGNvbnN0IGxlYWRpbmdXaGl0ZXNwYWNlID0gW107XG4gICAgICAgIGNvbnN0IGxlYWRpbmdEZXBlbmRlbnRXaGl0ZXNwYWNlID0gW107XG4gICAgICAgIGNvbnN0IHRyYWlsaW5nV2hpdGVzcGFjZSA9IFtdO1xuICAgICAgICBjb25zdCB0cmFpbGluZ0hhcmRsaW5lcyA9IFtdO1xuICAgICAgICBjb25zdCBwcmV2QmV0d2VlbkxpbmUgPSBwcmludEJldHdlZW5MaW5lKGNoaWxkTm9kZS5wcmV2LCBjaGlsZE5vZGUpO1xuICAgICAgICBjb25zdCBuZXh0QmV0d2VlbkxpbmUgPSBwcmludEJldHdlZW5MaW5lKGNoaWxkTm9kZSwgY2hpbGROb2RlLm5leHQpO1xuICAgICAgICBpZiAoKDAsIHV0aWxzXzIuaXNUZXh0TGlrZU5vZGUpKGNoaWxkTm9kZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbGVhZGluZ0hhcmRsaW5lcyxcbiAgICAgICAgICAgICAgICBsZWFkaW5nV2hpdGVzcGFjZSxcbiAgICAgICAgICAgICAgICBsZWFkaW5nRGVwZW5kZW50V2hpdGVzcGFjZSxcbiAgICAgICAgICAgICAgICB0cmFpbGluZ1doaXRlc3BhY2UsXG4gICAgICAgICAgICAgICAgdHJhaWxpbmdIYXJkbGluZXMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcmV2QmV0d2VlbkxpbmUpIHtcbiAgICAgICAgICAgIGlmICgoMCwgdXRpbHNfMi5mb3JjZU5leHRFbXB0eUxpbmUpKGNoaWxkTm9kZS5wcmV2KSkge1xuICAgICAgICAgICAgICAgIGxlYWRpbmdIYXJkbGluZXMucHVzaChoYXJkbGluZSwgaGFyZGxpbmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocHJldkJldHdlZW5MaW5lID09PSBoYXJkbGluZSkge1xuICAgICAgICAgICAgICAgIGxlYWRpbmdIYXJkbGluZXMucHVzaChoYXJkbGluZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoKDAsIHV0aWxzXzIuaXNUZXh0TGlrZU5vZGUpKGNoaWxkTm9kZS5wcmV2KSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoKDAsIHV0aWxzXzIuaXNMaXF1aWROb2RlKShjaGlsZE5vZGUpICYmIHByZXZCZXR3ZWVuTGluZSA9PT0gc29mdGxpbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlYWRpbmdEZXBlbmRlbnRXaGl0ZXNwYWNlLnB1c2gocHJldkJldHdlZW5MaW5lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlYWRpbmdXaGl0ZXNwYWNlLnB1c2gocHJldkJldHdlZW5MaW5lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbGVhZGluZ1doaXRlc3BhY2UucHVzaChpZkJyZWFrKCcnLCBzb2Z0bGluZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBJZDogdHJhaWxpbmdTcGFjZUdyb3VwSWRzW2NoaWxkSW5kZXggLSAxXSxcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobmV4dEJldHdlZW5MaW5lKSB7XG4gICAgICAgICAgICBpZiAoKDAsIHV0aWxzXzIuZm9yY2VOZXh0RW1wdHlMaW5lKShjaGlsZE5vZGUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCgwLCB1dGlsc18yLmlzVGV4dExpa2VOb2RlKShjaGlsZE5vZGUubmV4dCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJhaWxpbmdIYXJkbGluZXMucHVzaChoYXJkbGluZSwgaGFyZGxpbmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG5leHRCZXR3ZWVuTGluZSA9PT0gaGFyZGxpbmUpIHtcbiAgICAgICAgICAgICAgICBpZiAoKDAsIHV0aWxzXzIuaXNUZXh0TGlrZU5vZGUpKGNoaWxkTm9kZS5uZXh0KSkge1xuICAgICAgICAgICAgICAgICAgICB0cmFpbGluZ0hhcmRsaW5lcy5wdXNoKGhhcmRsaW5lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0cmFpbGluZ1doaXRlc3BhY2UucHVzaChuZXh0QmV0d2VlbkxpbmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsZWFkaW5nSGFyZGxpbmVzLFxuICAgICAgICAgICAgbGVhZGluZ1doaXRlc3BhY2UsXG4gICAgICAgICAgICBsZWFkaW5nRGVwZW5kZW50V2hpdGVzcGFjZSxcbiAgICAgICAgICAgIHRyYWlsaW5nV2hpdGVzcGFjZSxcbiAgICAgICAgICAgIHRyYWlsaW5nSGFyZGxpbmVzLFxuICAgICAgICB9O1xuICAgIH0sICdjaGlsZHJlbicpO1xuICAgIHJldHVybiBwYXRoLm1hcCgoY2hpbGRQYXRoLCBjaGlsZEluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHsgbGVhZGluZ0hhcmRsaW5lcywgbGVhZGluZ1doaXRlc3BhY2UsIGxlYWRpbmdEZXBlbmRlbnRXaGl0ZXNwYWNlLCB0cmFpbGluZ1doaXRlc3BhY2UsIHRyYWlsaW5nSGFyZGxpbmVzLCB9ID0gd2hpdGVzcGFjZUJldHdlZW5Ob2RlW2NoaWxkSW5kZXhdO1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgLi4ubGVhZGluZ0hhcmRsaW5lcyxcbiAgICAgICAgICAgIGdyb3VwKFtcbiAgICAgICAgICAgICAgICAuLi5sZWFkaW5nV2hpdGVzcGFjZSxcbiAgICAgICAgICAgICAgICBncm91cChbXG4gICAgICAgICAgICAgICAgICAgIC4uLmxlYWRpbmdEZXBlbmRlbnRXaGl0ZXNwYWNlLFxuICAgICAgICAgICAgICAgICAgICBwcmludENoaWxkKGNoaWxkUGF0aCwgb3B0aW9ucywgcHJpbnQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlYWRpbmdTcGFjZUdyb3VwSWQ6IGxlYWRpbmdTcGFjZUdyb3VwSWQod2hpdGVzcGFjZUJldHdlZW5Ob2RlLCBjaGlsZEluZGV4KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWlsaW5nU3BhY2VHcm91cElkOiB0cmFpbGluZ1NwYWNlR3JvdXBJZCh3aGl0ZXNwYWNlQmV0d2Vlbk5vZGUsIGNoaWxkSW5kZXgpLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgLi4udHJhaWxpbmdXaGl0ZXNwYWNlLFxuICAgICAgICAgICAgICAgIF0sIHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHRyYWlsaW5nU3BhY2VHcm91cElkc1tjaGlsZEluZGV4XSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIF0sIHtcbiAgICAgICAgICAgICAgICBpZDogbGVhZGluZ1NwYWNlR3JvdXBJZHNbY2hpbGRJbmRleF0sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIC4uLnRyYWlsaW5nSGFyZGxpbmVzLFxuICAgICAgICBdO1xuICAgIH0sICdjaGlsZHJlbicpO1xuICAgIGZ1bmN0aW9uIGxlYWRpbmdTcGFjZUdyb3VwSWQod2hpdGVzcGFjZUJldHdlZW5Ob2RlLCBpbmRleCkge1xuICAgICAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBhcmdzLmxlYWRpbmdTcGFjZUdyb3VwSWQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJldiA9IHdoaXRlc3BhY2VCZXR3ZWVuTm9kZVtpbmRleCAtIDFdO1xuICAgICAgICBjb25zdCBjdXJyID0gd2hpdGVzcGFjZUJldHdlZW5Ob2RlW2luZGV4XTtcbiAgICAgICAgY29uc3QgZ3JvdXBJZHMgPSBbXTtcbiAgICAgICAgaWYgKCEoMCwgdXRpbHNfMi5pc0VtcHR5KShwcmV2LnRyYWlsaW5nSGFyZGxpbmVzKSB8fCAhKDAsIHV0aWxzXzIuaXNFbXB0eSkoY3Vyci5sZWFkaW5nSGFyZGxpbmVzKSkge1xuICAgICAgICAgICAgcmV0dXJuIHV0aWxzXzIuRk9SQ0VfQlJFQUtfR1JPVVBfSUQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEoMCwgdXRpbHNfMi5pc0VtcHR5KShwcmV2LnRyYWlsaW5nV2hpdGVzcGFjZSkpIHtcbiAgICAgICAgICAgIGdyb3VwSWRzLnB1c2godHJhaWxpbmdTcGFjZUdyb3VwSWRzW2luZGV4IC0gMV0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghKDAsIHV0aWxzXzIuaXNFbXB0eSkoY3Vyci5sZWFkaW5nV2hpdGVzcGFjZSkpIHtcbiAgICAgICAgICAgIGdyb3VwSWRzLnB1c2gobGVhZGluZ1NwYWNlR3JvdXBJZHNbaW5kZXhdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoISgwLCB1dGlsc18yLmlzRW1wdHkpKGN1cnIubGVhZGluZ0RlcGVuZGVudFdoaXRlc3BhY2UpKSB7XG4gICAgICAgICAgICBncm91cElkcy5wdXNoKHRyYWlsaW5nU3BhY2VHcm91cElkc1tpbmRleF0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoMCwgdXRpbHNfMi5pc0VtcHR5KShncm91cElkcykpIHtcbiAgICAgICAgICAgIGdyb3VwSWRzLnB1c2godXRpbHNfMi5GT1JDRV9GTEFUX0dST1VQX0lEKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZ3JvdXBJZHM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRyYWlsaW5nU3BhY2VHcm91cElkKHdoaXRlc3BhY2VCZXR3ZWVuTm9kZSwgaW5kZXgpIHtcbiAgICAgICAgaWYgKGluZGV4ID09PSB3aGl0ZXNwYWNlQmV0d2Vlbk5vZGUubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIGFyZ3MudHJhaWxpbmdTcGFjZUdyb3VwSWQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY3VyciA9IHdoaXRlc3BhY2VCZXR3ZWVuTm9kZVtpbmRleF07XG4gICAgICAgIGNvbnN0IG5leHQgPSB3aGl0ZXNwYWNlQmV0d2Vlbk5vZGVbaW5kZXggKyAxXTtcbiAgICAgICAgY29uc3QgZ3JvdXBJZHMgPSBbXTtcbiAgICAgICAgaWYgKCEoMCwgdXRpbHNfMi5pc0VtcHR5KShjdXJyLnRyYWlsaW5nSGFyZGxpbmVzKSB8fCAhKDAsIHV0aWxzXzIuaXNFbXB0eSkobmV4dC5sZWFkaW5nSGFyZGxpbmVzKSkge1xuICAgICAgICAgICAgcmV0dXJuIHV0aWxzXzIuRk9SQ0VfQlJFQUtfR1JPVVBfSUQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEoMCwgdXRpbHNfMi5pc0VtcHR5KShjdXJyLnRyYWlsaW5nV2hpdGVzcGFjZSkpIHtcbiAgICAgICAgICAgIGdyb3VwSWRzLnB1c2godHJhaWxpbmdTcGFjZUdyb3VwSWRzW2luZGV4XSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCgwLCB1dGlsc18yLmlzRW1wdHkpKGdyb3VwSWRzKSkge1xuICAgICAgICAgICAgZ3JvdXBJZHMucHVzaCh1dGlsc18yLkZPUkNFX0ZMQVRfR1JPVVBfSUQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBncm91cElkcztcbiAgICB9XG59XG5leHBvcnRzLnByaW50Q2hpbGRyZW4gPSBwcmludENoaWxkcmVuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWTJocGJHUnlaVzR1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk4dUxpOXpjbU12Y0hKcGJuUmxjaTl3Y21sdWRDOWphR2xzWkhKbGJpNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenM3UVVGQlFTeDFRMEZCZDBNN1FVRkRlRU1zYlVOQlFUSkRPMEZCUXpORExHMURRVTlwUWp0QlFVTnFRaXd5UTBGWGVVSTdRVUZEZWtJc05rTkJVVFpDTzBGQlJUZENMRTFCUVUwc1JVRkRTaXhSUVVGUkxFVkJRVVVzUlVGQlJTeFhRVUZYTEVWQlFVVXNTMEZCU3l4RlFVRkZMRTlCUVU4c1JVRkJSU3hKUVVGSkxFVkJRVVVzVVVGQlVTeEZRVUZGTEZGQlFWRXNSVUZCUlN4SFFVTndSU3hIUVVGSExHTkJRVWNzUTBGQlF6dEJRVU5TTEUxQlFVMHNSVUZCUlN4dlFrRkJiMElzUlVGQlJTeEhRVUZITEdOQlFVY3NRMEZCUXl4TFFVRlpMRU5CUVVNN1FVRkZiRVFzVTBGQlV5eFZRVUZWTEVOQlEycENMRk5CUVhkQ0xFVkJRM2hDTEU5QlFUUkNMRVZCUXpWQ0xFdEJRVzlDTEVWQlEzQkNMRWxCUVhWQ08wbEJSWFpDTEUxQlFVMHNTMEZCU3l4SFFVRkhMRk5CUVZNc1EwRkJReXhSUVVGUkxFVkJRVVVzUTBGQlF6dEpRVVZ1UXl4SlFVRkpMRWxCUVVFc2VVSkJRV2xDTEVWQlFVTXNTMEZCU3l4RFFVRkRMRVZCUVVVN1VVRkROVUlzVDBGQlR6dFpRVU5NTEVsQlFVRXNNa0pCUVhGQ0xFVkJRVU1zUzBGQlN5eEZRVUZGTEU5QlFVOHNRMEZCUXp0WlFVTnlReXhIUVVGSExHOUNRVUZ2UWl4RFFVTnlRaXhQUVVGUExFTkJRVU1zV1VGQldTeERRVUZETEV0QlFVc3NRMEZEZUVJc1NVRkJRU3huUWtGQlVTeEZRVUZETEV0QlFVc3NRMEZCUXp0blFrRkRZaXhEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVsQlFVa3NTVUZCUVN3MFEwRkJjME1zUlVGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRPMjlDUVVNdlJDeERRVUZETEVOQlFVTXNTVUZCUVN4blEwRkJNRUlzUlVGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4TlFVRk5PMjlDUVVNeFF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUTFJc1NVRkJRU3hqUVVGTkxFVkJRVU1zUzBGQlN5eERRVUZETzJkQ1FVTllMRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzU1VGQlNTeEpRVUZCTERCRFFVRnZReXhGUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTTdiMEpCUXpkRUxFTkJRVU1zUTBGQlF5eEpRVUZCTERoQ1FVRjNRaXhGUVVGRExFdEJRVXNzUlVGQlJTeFBRVUZQTEVOQlFVTXNRMEZCUXl4TlFVRk5PMjlDUVVOcVJDeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUTFRc1EwRkRSanRaUVVORUxFbEJRVUVzTWtKQlFYRkNMRVZCUVVNc1MwRkJTeXhGUVVGRkxFOUJRVThzUTBGQlF6dFRRVU4wUXl4RFFVRkRPMHRCUTBnN1NVRkZSQ3hQUVVGUExFdEJRVXNzUTBGQlF5eFRRVUZUTEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNN1FVRkRhRU1zUTBGQlF6dEJRVVZFTEZOQlFWTXNaMEpCUVdkQ0xFTkJRM1pDTEZGQlFXOURMRVZCUTNCRExGRkJRVzlETzBsQlJYQkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFbEJRVWtzUTBGQlF5eFJRVUZSTzFGQlFVVXNUMEZCVHl4RlFVRkZMRU5CUVVNN1NVRkZkRU1zVFVGQlRTeDFRMEZCZFVNc1IwRkRNME1zUTBGQlF5eEpRVUZCTERSRFFVRnpReXhGUVVGRExGRkJRVkVzUTBGQlF6dFJRVU12UXl4RFFVRkRMRWxCUVVFc2VVSkJRV2xDTEVWQlFVTXNVVUZCVVN4RFFVRkRPMWxCVFRGQ0xGRkJRVkVzUTBGQlF5eFZRVUZWTzFsQlRXNUNMRWxCUVVFc2QwSkJRV2RDTEVWQlFVTXNVVUZCVVN4RFFVRkRPMWxCVFRGQ0xFTkJRVU1zVVVGQlVTeERRVUZETEVsQlFVa3NTMEZCU3l4cFFrRkJVeXhEUVVGRExGZEJRVmM3WjBKQlEzUkRMRkZCUVZFc1EwRkJReXhWUVVGVkxFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRlBka01zUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4TFFVRkxMR2xDUVVGVExFTkJRVU1zVjBGQlZ6dFpRVU4wUXl4SlFVRkJMSGRDUVVGblFpeEZRVUZETEZGQlFWRXNRMEZCUXp0WlFVTXhRaXhKUVVGQkxEQkRRVUZ2UXl4RlFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRmNFUXNTVUZCU1N4MVEwRkJkVU1zUlVGQlJUdFJRVU16UXl4UFFVRlBMRVZCUVVVc1EwRkJRenRMUVVOWU8wbEJSVVFzVFVGQlRTeHBRa0ZCYVVJc1IwRkRja0lzUTBGQlF5eFJRVUZSTEVOQlFVTXNORUpCUVRSQ08xRkJRM1JETEVsQlFVRXNjVU5CUVRaQ0xFVkJRVU1zVVVGQlVTeERRVUZETzFGQlQzWkRMRU5CUVVNc1NVRkJRU3d3UTBGQmIwTXNSVUZCUXl4UlFVRlJMRU5CUVVNN1dVRkROME1zVVVGQlVTeERRVUZETEZOQlFWTTdXVUZEYkVJc1NVRkJRU3c0UTBGQmQwTXNSVUZCUXl4UlFVRlJMRU5CUVVNc1UwRkJVeXhEUVVGRE8xbEJRelZFTEZGQlFWRXNRMEZCUXl4VFFVRlRMRU5CUVVNc1UwRkJVenRaUVVNMVFpeEpRVUZCTERoRFFVRjNReXhGUVVGRExGRkJRVkVzUTBGQlF5eFRRVUZUTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVVMVJTeEpRVUZKTEdsQ1FVRnBRaXhGUVVGRk8xRkJRM0pDTEU5QlFVOHNVVUZCVVN4RFFVRkRPMHRCUTJwQ08wbEJSVVFzVDBGQlR5eFJRVUZSTEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1VVRkJVU3hEUVVGRE8wRkJRM3BFTEVOQlFVTTdRVUYzUTBRc1UwRkJaMElzWVVGQllTeERRVU16UWl4SlFVRXdRaXhGUVVNeFFpeFBRVUUwUWl4RlFVTTFRaXhMUVVGdlFpeEZRVU53UWl4SlFVRjFRanRKUVVWMlFpeE5RVUZOTEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNc1VVRkJVU3hGUVVGRkxFTkJRVU03U1VGRk4wSXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFVkJRVVU3VVVGRGJFSXNUVUZCVFN4SlFVRkpMRXRCUVVzc1EwRkRZaXdyUkVGQkswUXNRMEZEYUVVc1EwRkJRenRMUVVOSU8wbEJSVVFzU1VGQlNTeEpRVUZCTERCQ1FVRnJRaXhGUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTzFGQlF6VkNMRTlCUVU4N1dVRkRUQ3hYUVVGWE8xbEJSVmdzUjBGQlJ5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1UwRkJVeXhGUVVGRkxFVkJRVVU3WjBKQlEzaENMRTFCUVUwc1UwRkJVeXhIUVVGSExGTkJRVk1zUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUXp0blFrRkRka01zVFVGQlRTeGxRVUZsTEVkQlFVY3NaMEpCUVdkQ0xFTkJRVU1zVTBGQlV5eERRVUZETEVsQlFVa3NSVUZCUlN4VFFVRlRMRU5CUVVNc1EwRkJRenRuUWtGRGNFVXNUMEZCVHp0dlFrRkRUQ3hEUVVGRExHVkJRV1U3ZDBKQlEyUXNRMEZCUXl4RFFVRkRMRVZCUVVVN2QwSkJRMG9zUTBGQlF5eERRVUZET3pSQ1FVTkZMR1ZCUVdVN05FSkJRMllzU1VGQlFTd3dRa0ZCYTBJc1JVRkJReXhUUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJUdDVRa0ZEYmtRN2IwSkJRMHdzVlVGQlZTeERRVUZETEZOQlFWTXNSVUZCUlN4UFFVRlBMRVZCUVVVc1MwRkJTeXhGUVVGRk8zZENRVU53UXl4dFFrRkJiVUlzUlVGQlJTdzBRa0ZCYjBJN2QwSkJRM3BETEc5Q1FVRnZRaXhGUVVGRkxEUkNRVUZ2UWp0eFFrRkRNME1zUTBGQlF6dHBRa0ZEU0N4RFFVRkRPMWxCUTBvc1EwRkJReXhGUVVGRkxGVkJRVlVzUTBGQlF6dFRRVU5tTEVOQlFVTTdTMEZEU0R0SlFVVkVMRTFCUVUwc2IwSkJRVzlDTEVkQlFVY3NTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRVZCUVVVc1EwRkRkRVFzVFVGQlRTeERRVUZETEZkQlFWY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkRka0lzUTBGQlF6dEpRVU5HTEUxQlFVMHNjVUpCUVhGQ0xFZEJRVWNzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZEZGtRc1RVRkJUU3hEUVVGRExGbEJRVmtzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZEZUVJc1EwRkJRenRKUVcxQ1JpeE5RVUZOTEhGQ1FVRnhRaXhIUVVGSExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlEzQkRMRU5CUTBVc1UwRkJhME1zUlVGRGJFTXNWVUZCYTBJc1JVRkRTeXhGUVVGRk8xRkJRM3BDTEUxQlFVMHNVMEZCVXl4SFFVRkhMRk5CUVZNc1EwRkJReXhSUVVGUkxFVkJRVVVzUTBGQlF6dFJRVVYyUXl4TlFVRk5MR2RDUVVGblFpeEhRVUZ6UWl4RlFVRkZMRU5CUVVNN1VVRkRMME1zVFVGQlRTeHBRa0ZCYVVJc1IwRkJhVUlzUlVGQlJTeERRVUZETzFGQlF6TkRMRTFCUVUwc01FSkJRVEJDTEVkQlFUUkNMRVZCUVVVc1EwRkJRenRSUVVNdlJDeE5RVUZOTEd0Q1FVRnJRaXhIUVVGcFFpeEZRVUZGTEVOQlFVTTdVVUZETlVNc1RVRkJUU3hwUWtGQmFVSXNSMEZCYzBJc1JVRkJSU3hEUVVGRE8xRkJSV2hFTEUxQlFVMHNaVUZCWlN4SFFVRkhMR2RDUVVGblFpeERRVUZETEZOQlFWTXNRMEZCUXl4SlFVRkpMRVZCUVVVc1UwRkJVeXhEUVVGRExFTkJRVU03VVVGRGNFVXNUVUZCVFN4bFFVRmxMRWRCUVVjc1owSkJRV2RDTEVOQlFVTXNVMEZCVXl4RlFVRkZMRk5CUVZNc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dFJRVVZ3UlN4SlFVRkpMRWxCUVVFc2MwSkJRV01zUlVGQlF5eFRRVUZUTEVOQlFVTXNSVUZCUlR0WlFVTTNRaXhQUVVGUE8yZENRVU5NTEdkQ1FVRm5RanRuUWtGRGFFSXNhVUpCUVdsQ08yZENRVU5xUWl3d1FrRkJNRUk3WjBKQlF6RkNMR3RDUVVGclFqdG5Ra0ZEYkVJc2FVSkJRV2xDTzJGQlEyeENMRU5CUVVNN1UwRkRTRHRSUVVWRUxFbEJRVWtzWlVGQlpTeEZRVUZGTzFsQlEyNUNMRWxCUVVrc1NVRkJRU3d3UWtGQmEwSXNSVUZCUXl4VFFVRlRMRU5CUVVNc1NVRkJTU3hEUVVGRExFVkJRVVU3WjBKQlEzUkRMR2RDUVVGblFpeERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRVZCUVVVc1VVRkJVU3hEUVVGRExFTkJRVU03WVVGRE0wTTdhVUpCUVUwc1NVRkJTU3hsUVVGbExFdEJRVXNzVVVGQlVTeEZRVUZGTzJkQ1FVTjJReXhuUWtGQlowSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU03WVVGRGFrTTdhVUpCUVUwN1owSkJRMHdzU1VGQlNTeEpRVUZCTEhOQ1FVRmpMRVZCUVVNc1UwRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTzI5Q1FVTnNReXhKUVVGSkxFbEJRVUVzYjBKQlFWa3NSVUZCUXl4VFFVRlRMRU5CUVVNc1NVRkJTU3hsUVVGbExFdEJRVXNzVVVGQlVTeEZRVUZGTzNkQ1FVTXpSQ3d3UWtGQk1FSXNRMEZCUXl4SlFVRkpMRU5CUXpkQ0xHVkJRV3RETEVOQlEyNURMRU5CUVVNN2NVSkJRMGc3ZVVKQlFVMDdkMEpCUTB3c2FVSkJRV2xDTEVOQlFVTXNTVUZCU1N4RFFVRkRMR1ZCUVc5RExFTkJRVU1zUTBGQlF6dHhRa0ZET1VRN2FVSkJRMFk3Y1VKQlFVMDdiMEpCUzB3c2FVSkJRV2xDTEVOQlFVTXNTVUZCU1N4RFFVTndRaXhQUVVGUExFTkJRVU1zUlVGQlJTeEZRVUZGTEZGQlFWRXNSVUZCUlR0M1FrRkRjRUlzVDBGQlR5eEZRVUZGTEhGQ1FVRnhRaXhEUVVGRExGVkJRVlVzUjBGQlJ5eERRVUZETEVOQlFVTTdjVUpCUXk5RExFTkJRVU1zUTBGRFNDeERRVUZETzJsQ1FVTklPMkZCUTBZN1UwRkRSanRSUVVWRUxFbEJRVWtzWlVGQlpTeEZRVUZGTzFsQlEyNUNMRWxCUVVrc1NVRkJRU3d3UWtGQmEwSXNSVUZCUXl4VFFVRlRMRU5CUVVNc1JVRkJSVHRuUWtGRGFrTXNTVUZCU1N4SlFVRkJMSE5DUVVGakxFVkJRVU1zVTBGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZPMjlDUVVOc1F5eHBRa0ZCYVVJc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeEZRVUZGTEZGQlFWRXNRMEZCUXl4RFFVRkRPMmxDUVVNMVF6dGhRVU5HTzJsQ1FVRk5MRWxCUVVrc1pVRkJaU3hMUVVGTExGRkJRVkVzUlVGQlJUdG5Ra0ZEZGtNc1NVRkJTU3hKUVVGQkxITkNRVUZqTEVWQlFVTXNVMEZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRk8yOUNRVU5zUXl4cFFrRkJhVUlzUTBGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN2FVSkJRMnhETzJGQlJVWTdhVUpCUVUwN1owSkJSMHdzYTBKQlFXdENMRU5CUVVNc1NVRkJTU3hEUVVGRExHVkJRVzlETEVOQlFVTXNRMEZCUXp0aFFVTXZSRHRUUVVOR08xRkJSVVFzVDBGQlR6dFpRVU5NTEdkQ1FVRm5RanRaUVVOb1FpeHBRa0ZCYVVJN1dVRkRha0lzTUVKQlFUQkNPMWxCUXpGQ0xHdENRVUZyUWp0WlFVTnNRaXhwUWtGQmFVSTdVMEZEVHl4RFFVRkRPMGxCUXpkQ0xFTkJRVU1zUlVGRFJDeFZRVUZWTEVOQlExZ3NRMEZCUXp0SlFVVkdMRTlCUVU4c1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEZOQlFWTXNSVUZCUlN4VlFVRlZMRVZCUVVVc1JVRkJSVHRSUVVONFF5eE5RVUZOTEVWQlEwb3NaMEpCUVdkQ0xFVkJRMmhDTEdsQ1FVRnBRaXhGUVVOcVFpd3dRa0ZCTUVJc1JVRkRNVUlzYTBKQlFXdENMRVZCUTJ4Q0xHbENRVUZwUWl4SFFVTnNRaXhIUVVGSExIRkNRVUZ4UWl4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRE8xRkJSWFJETEU5QlFVODdXVUZEVEN4SFFVRkhMR2RDUVVGblFqdFpRVU51UWl4TFFVRkxMRU5CUTBnN1owSkJRMFVzUjBGQlJ5eHBRa0ZCYVVJN1owSkJRM0JDTEV0QlFVc3NRMEZEU0R0dlFrRkRSU3hIUVVGSExEQkNRVUV3UWp0dlFrRkROMElzVlVGQlZTeERRVUZETEZOQlFWTXNSVUZCUlN4UFFVRlBMRVZCUVVVc1MwRkJTeXhGUVVGRk8zZENRVU53UXl4dFFrRkJiVUlzUlVGQlJTeHRRa0ZCYlVJc1EwRkRkRU1zY1VKQlFYRkNMRVZCUTNKQ0xGVkJRVlVzUTBGRFdEdDNRa0ZEUkN4dlFrRkJiMElzUlVGQlJTeHZRa0ZCYjBJc1EwRkRlRU1zY1VKQlFYRkNMRVZCUTNKQ0xGVkJRVlVzUTBGRFdEdHhRa0ZEUml4RFFVRkRPMjlDUVVOR0xFZEJRVWNzYTBKQlFXdENPMmxDUVVOMFFpeEZRVU5FTzI5Q1FVTkZMRVZCUVVVc1JVRkJSU3h4UWtGQmNVSXNRMEZCUXl4VlFVRlZMRU5CUVVNN2FVSkJRM1JETEVOQlEwWTdZVUZEUml4RlFVTkVPMmRDUVVORkxFVkJRVVVzUlVGQlJTeHZRa0ZCYjBJc1EwRkJReXhWUVVGVkxFTkJRVU03WVVGRGNrTXNRMEZEUmp0WlFVTkVMRWRCUVVjc2FVSkJRV2xDTzFOQlEzSkNMRU5CUVVNN1NVRkRTaXhEUVVGRExFVkJRVVVzVlVGQlZTeERRVUZETEVOQlFVTTdTVUZGWml4VFFVRlRMRzFDUVVGdFFpeERRVU14UWl4eFFrRkJPRU1zUlVGRE9VTXNTMEZCWVR0UlFVVmlMRWxCUVVrc1MwRkJTeXhMUVVGTExFTkJRVU1zUlVGQlJUdFpRVU5tTEU5QlFVOHNTVUZCU1N4RFFVRkRMRzFDUVVGdFFpeERRVUZETzFOQlEycERPMUZCUlVRc1RVRkJUU3hKUVVGSkxFZEJRVWNzY1VKQlFYRkNMRU5CUVVNc1MwRkJTeXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETzFGQlF6bERMRTFCUVUwc1NVRkJTU3hIUVVGSExIRkNRVUZ4UWl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8xRkJRekZETEUxQlFVMHNVVUZCVVN4SFFVRkhMRVZCUVVVc1EwRkJRenRSUVVWd1FpeEpRVUZKTEVOQlFVTXNTVUZCUVN4bFFVRlBMRVZCUVVNc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGQkxHVkJRVThzUlVGQlF5eEpRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zUlVGQlJUdFpRVU4yUlN4UFFVRlBMRFJDUVVGdlFpeERRVUZETzFOQlF6ZENPMUZCUlVRc1NVRkJTU3hEUVVGRExFbEJRVUVzWlVGQlR5eEZRVUZETEVsQlFVa3NRMEZCUXl4clFrRkJhMElzUTBGQlF5eEZRVUZGTzFsQlEzSkRMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc1MwRkJTeXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdVMEZEYWtRN1VVRkZSQ3hKUVVGSkxFTkJRVU1zU1VGQlFTeGxRVUZQTEVWQlFVTXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEVWQlFVVTdXVUZEY0VNc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eHZRa0ZCYjBJc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETzFOQlF6VkRPMUZCUlVRc1NVRkJTU3hEUVVGRExFbEJRVUVzWlVGQlR5eEZRVUZETEVsQlFVa3NRMEZCUXl3d1FrRkJNRUlzUTBGQlF5eEZRVUZGTzFsQlF6ZERMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF6dFRRVU0zUXp0UlFVVkVMRWxCUVVrc1NVRkJRU3hsUVVGUExFVkJRVU1zVVVGQlVTeERRVUZETEVWQlFVVTdXVUZEY2tJc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5d3lRa0ZCYlVJc1EwRkJReXhEUVVGRE8xTkJRM0JETzFGQlJVUXNUMEZCVHl4UlFVRlJMRU5CUVVNN1NVRkRiRUlzUTBGQlF6dEpRVVZFTEZOQlFWTXNiMEpCUVc5Q0xFTkJRek5DTEhGQ1FVRTRReXhGUVVNNVF5eExRVUZoTzFGQlJXSXNTVUZCU1N4TFFVRkxMRXRCUVVzc2NVSkJRWEZDTEVOQlFVTXNUVUZCVFN4SFFVRkhMRU5CUVVNc1JVRkJSVHRaUVVNNVF5eFBRVUZQTEVsQlFVa3NRMEZCUXl4dlFrRkJiMElzUTBGQlF6dFRRVU5zUXp0UlFVVkVMRTFCUVUwc1NVRkJTU3hIUVVGSExIRkNRVUZ4UWl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8xRkJRekZETEUxQlFVMHNTVUZCU1N4SFFVRkhMSEZDUVVGeFFpeERRVUZETEV0QlFVc3NSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVNNVF5eE5RVUZOTEZGQlFWRXNSMEZCUnl4RlFVRkZMRU5CUVVNN1VVRkZjRUlzU1VGQlNTeERRVUZETEVsQlFVRXNaVUZCVHl4RlFVRkRMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJRU3hsUVVGUExFVkJRVU1zU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFVkJRVVU3V1VGRGRrVXNUMEZCVHl3MFFrRkJiMElzUTBGQlF6dFRRVU0zUWp0UlFVVkVMRWxCUVVrc1EwRkJReXhKUVVGQkxHVkJRVThzUlVGQlF5eEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zUlVGQlJUdFpRVU55UXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExIRkNRVUZ4UWl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU03VTBGRE4wTTdVVUZGUkN4SlFVRkpMRWxCUVVFc1pVRkJUeXhGUVVGRExGRkJRVkVzUTBGQlF5eEZRVUZGTzFsQlEzSkNMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zTWtKQlFXMUNMRU5CUVVNc1EwRkJRenRUUVVOd1F6dFJRVVZFTEU5QlFVOHNVVUZCVVN4RFFVRkRPMGxCUTJ4Q0xFTkJRVU03UVVGRFNDeERRVUZETzBGQmRGQkVMSE5EUVhOUVF5SjkiLCIndXNlIHN0cmljdCc7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnByaW50RWxlbWVudCA9IHZvaWQgMDtcbmNvbnN0IHByZXR0aWVyXzEgPSByZXF1aXJlKFwicHJldHRpZXJcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uLy4uL3ByaW50ZXIvdXRpbHNcIik7XG5jb25zdCB0YWdfMSA9IHJlcXVpcmUoXCIuLi8uLi9wcmludGVyL3ByaW50L3RhZ1wiKTtcbmNvbnN0IGNoaWxkcmVuXzEgPSByZXF1aXJlKFwiLi4vLi4vcHJpbnRlci9wcmludC9jaGlsZHJlblwiKTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi4vLi4vdHlwZXNcIik7XG5jb25zdCB7IGJ1aWxkZXJzOiB7IGJyZWFrUGFyZW50LCBkZWRlbnRUb1Jvb3QsIGdyb3VwLCBpbmRlbnQsIGxpbmUsIHNvZnRsaW5lIH0sIH0gPSBwcmV0dGllcl8xLmRvYztcbmNvbnN0IHsgcmVwbGFjZVRleHRFbmRPZkxpbmUgfSA9IHByZXR0aWVyXzEuZG9jLnV0aWxzO1xuZnVuY3Rpb24gcHJpbnRFbGVtZW50KHBhdGgsIG9wdGlvbnMsIHByaW50KSB7XG4gICAgY29uc3Qgbm9kZSA9IHBhdGguZ2V0VmFsdWUoKTtcbiAgICBpZiAoKDAsIHV0aWxzXzEuaGFzTm9DbG9zZU1hcmtlcikobm9kZSkpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIGdyb3VwKCgwLCB0YWdfMS5wcmludE9wZW5pbmdUYWcpKHBhdGgsIG9wdGlvbnMsIHByaW50KSksXG4gICAgICAgICAgICAuLi4oMCwgdGFnXzEucHJpbnRDbG9zaW5nVGFnKShub2RlLCBvcHRpb25zKSxcbiAgICAgICAgICAgICgwLCB0YWdfMS5wcmludENsb3NpbmdUYWdTdWZmaXgpKG5vZGUsIG9wdGlvbnMpLFxuICAgICAgICBdO1xuICAgIH1cbiAgICBpZiAoKDAsIHV0aWxzXzEuc2hvdWxkUHJlc2VydmVDb250ZW50KShub2RlLCBvcHRpb25zKSB8fFxuICAgICAgICBub2RlLnR5cGUgPT09IHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxSYXdOb2RlKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAoMCwgdGFnXzEucHJpbnRPcGVuaW5nVGFnUHJlZml4KShub2RlLCBvcHRpb25zKSxcbiAgICAgICAgICAgIGdyb3VwKCgwLCB0YWdfMS5wcmludE9wZW5pbmdUYWcpKHBhdGgsIG9wdGlvbnMsIHByaW50KSksXG4gICAgICAgICAgICAuLi5yZXBsYWNlVGV4dEVuZE9mTGluZSgoMCwgdGFnXzEuZ2V0Tm9kZUNvbnRlbnQpKG5vZGUsIG9wdGlvbnMpKSxcbiAgICAgICAgICAgIC4uLigwLCB0YWdfMS5wcmludENsb3NpbmdUYWcpKG5vZGUsIG9wdGlvbnMpLFxuICAgICAgICAgICAgKDAsIHRhZ18xLnByaW50Q2xvc2luZ1RhZ1N1ZmZpeCkobm9kZSwgb3B0aW9ucyksXG4gICAgICAgIF07XG4gICAgfVxuICAgIGNvbnN0IGF0dHJHcm91cElkID0gU3ltYm9sKCdlbGVtZW50LWF0dHItZ3JvdXAtaWQnKTtcbiAgICBjb25zdCBlbGVtZW50R3JvdXBJZCA9IFN5bWJvbCgnZWxlbWVudC1ncm91cC1pZCcpO1xuICAgIGNvbnN0IHByaW50VGFnID0gKGRvYykgPT4gZ3JvdXAoW1xuICAgICAgICBncm91cCgoMCwgdGFnXzEucHJpbnRPcGVuaW5nVGFnKShwYXRoLCBvcHRpb25zLCBwcmludCksIHsgaWQ6IGF0dHJHcm91cElkIH0pLFxuICAgICAgICBkb2MsXG4gICAgICAgICgwLCB0YWdfMS5wcmludENsb3NpbmdUYWcpKG5vZGUsIG9wdGlvbnMpLFxuICAgIF0sIHsgaWQ6IGVsZW1lbnRHcm91cElkIH0pO1xuICAgIGNvbnN0IHByaW50TGluZUJlZm9yZUNoaWxkcmVuID0gKCkgPT4ge1xuICAgICAgICBpZiAobm9kZS5maXJzdENoaWxkLmhhc0xlYWRpbmdXaGl0ZXNwYWNlICYmXG4gICAgICAgICAgICBub2RlLmZpcnN0Q2hpbGQuaXNMZWFkaW5nV2hpdGVzcGFjZVNlbnNpdGl2ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGxpbmU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vZGUuZmlyc3RDaGlsZC50eXBlID09PSB0eXBlc18xLk5vZGVUeXBlcy5UZXh0Tm9kZSAmJlxuICAgICAgICAgICAgbm9kZS5pc1doaXRlc3BhY2VTZW5zaXRpdmUgJiZcbiAgICAgICAgICAgIG5vZGUuaXNJbmRlbnRhdGlvblNlbnNpdGl2ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGRlZGVudFRvUm9vdChzb2Z0bGluZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNvZnRsaW5lO1xuICAgIH07XG4gICAgY29uc3QgcHJpbnRMaW5lQWZ0ZXJDaGlsZHJlbiA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgbmVlZHNUb0JvcnJvdyA9IG5vZGUubmV4dFxuICAgICAgICAgICAgPyAoMCwgdGFnXzEubmVlZHNUb0JvcnJvd1ByZXZDbG9zaW5nVGFnRW5kTWFya2VyKShub2RlLm5leHQpXG4gICAgICAgICAgICA6ICgwLCB0YWdfMS5uZWVkc1RvQm9ycm93TGFzdENoaWxkQ2xvc2luZ1RhZ0VuZE1hcmtlcikobm9kZS5wYXJlbnROb2RlKTtcbiAgICAgICAgaWYgKG5lZWRzVG9Cb3Jyb3cpIHtcbiAgICAgICAgICAgIGlmIChub2RlLmxhc3RDaGlsZC5oYXNUcmFpbGluZ1doaXRlc3BhY2UgJiZcbiAgICAgICAgICAgICAgICBub2RlLmxhc3RDaGlsZC5pc1RyYWlsaW5nV2hpdGVzcGFjZVNlbnNpdGl2ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnICc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vZGUubGFzdENoaWxkLmhhc1RyYWlsaW5nV2hpdGVzcGFjZSAmJlxuICAgICAgICAgICAgbm9kZS5sYXN0Q2hpbGQuaXNUcmFpbGluZ1doaXRlc3BhY2VTZW5zaXRpdmUpIHtcbiAgICAgICAgICAgIHJldHVybiBsaW5lO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzb2Z0bGluZTtcbiAgICB9O1xuICAgIGlmIChub2RlLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gcHJpbnRUYWcobm9kZS5oYXNEYW5nbGluZ1doaXRlc3BhY2UgJiYgbm9kZS5pc0RhbmdsaW5nV2hpdGVzcGFjZVNlbnNpdGl2ZVxuICAgICAgICAgICAgPyBsaW5lXG4gICAgICAgICAgICA6ICcnKTtcbiAgICB9XG4gICAgcmV0dXJuIHByaW50VGFnKFtcbiAgICAgICAgKDAsIHV0aWxzXzEuZm9yY2VCcmVha0NvbnRlbnQpKG5vZGUpID8gYnJlYWtQYXJlbnQgOiAnJyxcbiAgICAgICAgaW5kZW50KFtcbiAgICAgICAgICAgIHByaW50TGluZUJlZm9yZUNoaWxkcmVuKCksXG4gICAgICAgICAgICAoMCwgY2hpbGRyZW5fMS5wcmludENoaWxkcmVuKShwYXRoLCBvcHRpb25zLCBwcmludCwge1xuICAgICAgICAgICAgICAgIGxlYWRpbmdTcGFjZUdyb3VwSWQ6IGVsZW1lbnRHcm91cElkLFxuICAgICAgICAgICAgICAgIHRyYWlsaW5nU3BhY2VHcm91cElkOiBlbGVtZW50R3JvdXBJZCxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICBdKSxcbiAgICAgICAgcHJpbnRMaW5lQWZ0ZXJDaGlsZHJlbigpLFxuICAgIF0pO1xufVxuZXhwb3J0cy5wcmludEVsZW1lbnQgPSBwcmludEVsZW1lbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2laV3hsYldWdWRDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1TDNOeVl5OXdjbWx1ZEdWeUwzQnlhVzUwTDJWc1pXMWxiblF1ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNXVUZCV1N4RFFVRkRPenM3UVVGRllpeDFRMEZCTmtNN1FVRkROME1zTWtOQlNYbENPMEZCUTNwQ0xEWkRRVkUyUWp0QlFVTTNRaXgxUkVGQmVVUTdRVUZEZWtRc2JVTkJUV2xDTzBGQlJXcENMRTFCUVUwc1JVRkRTaXhSUVVGUkxFVkJRVVVzUlVGQlJTeFhRVUZYTEVWQlFVVXNXVUZCV1N4RlFVRkZMRXRCUVVzc1JVRkJSU3hOUVVGTkxFVkJRVVVzU1VGQlNTeEZRVUZGTEZGQlFWRXNSVUZCUlN4SFFVTjJSU3hIUVVGSExHTkJRVWNzUTBGQlF6dEJRVU5TTEUxQlFVMHNSVUZCUlN4dlFrRkJiMElzUlVGQlJTeEhRVUZITEdOQlFVY3NRMEZCUXl4TFFVRlpMRU5CUVVNN1FVRkZiRVFzVTBGQlowSXNXVUZCV1N4RFFVTXhRaXhKUVVFMlF5eEZRVU0zUXl4UFFVRTBRaXhGUVVNMVFpeExRVUZ2UWp0SlFVVndRaXhOUVVGTkxFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RlFVRkZMRU5CUVVNN1NVRkZOMElzU1VGQlNTeEpRVUZCTEhkQ1FVRm5RaXhGUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTzFGQlJURkNMRTlCUVU4N1dVRkRUQ3hMUVVGTExFTkJRVU1zU1VGQlFTeHhRa0ZCWlN4RlFVRkRMRWxCUVVrc1JVRkJSU3hQUVVGUExFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVTTdXVUZETlVNc1IwRkJSeXhKUVVGQkxIRkNRVUZsTEVWQlFVTXNTVUZCU1N4RlFVRkZMRTlCUVU4c1EwRkJRenRaUVVOcVF5eEpRVUZCTERKQ1FVRnhRaXhGUVVGRExFbEJRVWtzUlVGQlJTeFBRVUZQTEVOQlFVTTdVMEZEY2tNc1EwRkJRenRMUVVOSU8wbEJSVVFzU1VGRFJTeEpRVUZCTERaQ1FVRnhRaXhGUVVGRExFbEJRVWtzUlVGQlJTeFBRVUZQTEVOQlFVTTdVVUZEY0VNc1NVRkJTU3hEUVVGRExFbEJRVWtzUzBGQlN5eHBRa0ZCVXl4RFFVRkRMRmRCUVZjc1JVRkRia003VVVGRFFTeFBRVUZQTzFsQlEwd3NTVUZCUVN3eVFrRkJjVUlzUlVGQlF5eEpRVUZKTEVWQlFVVXNUMEZCVHl4RFFVRkRPMWxCUTNCRExFdEJRVXNzUTBGQlF5eEpRVUZCTEhGQ1FVRmxMRVZCUVVNc1NVRkJTU3hGUVVGRkxFOUJRVThzUlVGQlJTeExRVUZMTEVOQlFVTXNRMEZCUXp0WlFVTTFReXhIUVVGSExHOUNRVUZ2UWl4RFFVRkRMRWxCUVVFc2IwSkJRV01zUlVGQlF5eEpRVUZKTEVWQlFVVXNUMEZCVHl4RFFVRkRMRU5CUVVNN1dVRkRkRVFzUjBGQlJ5eEpRVUZCTEhGQ1FVRmxMRVZCUVVNc1NVRkJTU3hGUVVGRkxFOUJRVThzUTBGQlF6dFpRVU5xUXl4SlFVRkJMREpDUVVGeFFpeEZRVUZETEVsQlFVa3NSVUZCUlN4UFFVRlBMRU5CUVVNN1UwRkRja01zUTBGQlF6dExRVU5JTzBsQlJVUXNUVUZCVFN4WFFVRlhMRWRCUVVjc1RVRkJUU3hEUVVGRExIVkNRVUYxUWl4RFFVRkRMRU5CUVVNN1NVRkRjRVFzVFVGQlRTeGpRVUZqTEVkQlFVY3NUVUZCVFN4RFFVRkRMR3RDUVVGclFpeERRVUZETEVOQlFVTTdTVUZGYkVRc1RVRkJUU3hSUVVGUkxFZEJRVWNzUTBGQlF5eEhRVUZSTEVWQlFVVXNSVUZCUlN4RFFVTTFRaXhMUVVGTExFTkJRMGc3VVVGRFJTeExRVUZMTEVOQlFVTXNTVUZCUVN4eFFrRkJaU3hGUVVGRExFbEJRVWtzUlVGQlJTeFBRVUZQTEVWQlFVVXNTMEZCU3l4RFFVRkRMRVZCUVVVc1JVRkJSU3hGUVVGRkxFVkJRVVVzVjBGQlZ5eEZRVUZGTEVOQlFVTTdVVUZEYWtVc1IwRkJSenRSUVVOSUxFbEJRVUVzY1VKQlFXVXNSVUZCUXl4SlFVRkpMRVZCUVVVc1QwRkJUeXhEUVVGRE8wdEJReTlDTEVWQlEwUXNSVUZCUlN4RlFVRkZMRVZCUVVVc1kwRkJZeXhGUVVGRkxFTkJRM1pDTEVOQlFVTTdTVUZGU2l4TlFVRk5MSFZDUVVGMVFpeEhRVUZITEVkQlFVY3NSVUZCUlR0UlFVTnVReXhKUVVORkxFbEJRVWtzUTBGQlF5eFZRVUZYTEVOQlFVTXNiMEpCUVc5Q08xbEJRM0pETEVsQlFVa3NRMEZCUXl4VlFVRlhMRU5CUVVNc05FSkJRVFJDTEVWQlF6ZERPMWxCUTBFc1QwRkJUeXhKUVVGSkxFTkJRVU03VTBGRFlqdFJRVVZFTEVsQlEwVXNTVUZCU1N4RFFVRkRMRlZCUVZjc1EwRkJReXhKUVVGSkxFdEJRVXNzYVVKQlFWTXNRMEZCUXl4UlFVRlJPMWxCUXpWRExFbEJRVWtzUTBGQlF5eHhRa0ZCY1VJN1dVRkRNVUlzU1VGQlNTeERRVUZETEhOQ1FVRnpRaXhGUVVNelFqdFpRVU5CTEU5QlFVOHNXVUZCV1N4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8xTkJReTlDTzFGQlEwUXNUMEZCVHl4UlFVRlJMRU5CUVVNN1NVRkRiRUlzUTBGQlF5eERRVUZETzBsQlJVWXNUVUZCVFN4elFrRkJjMElzUjBGQlJ5eEhRVUZITEVWQlFVVTdVVUZEYkVNc1RVRkJUU3hoUVVGaExFZEJRVWNzU1VGQlNTeERRVUZETEVsQlFVazdXVUZETjBJc1EwRkJReXhEUVVGRExFbEJRVUVzTUVOQlFXOURMRVZCUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF6dFpRVU5xUkN4RFFVRkRMRU5CUVVNc1NVRkJRU3dyUTBGQmVVTXNSVUZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWeXhEUVVGRExFTkJRVU03VVVGRGFFVXNTVUZCU1N4aFFVRmhMRVZCUVVVN1dVRkRha0lzU1VGRFJTeEpRVUZKTEVOQlFVTXNVMEZCVlN4RFFVRkRMSEZDUVVGeFFqdG5Ra0ZEY2tNc1NVRkJTU3hEUVVGRExGTkJRVlVzUTBGQlF5dzJRa0ZCTmtJc1JVRkROME03WjBKQlEwRXNUMEZCVHl4SFFVRkhMRU5CUVVNN1lVRkRXanRaUVVORUxFOUJRVThzUlVGQlJTeERRVUZETzFOQlExZzdVVUZEUkN4SlFVTkZMRWxCUVVrc1EwRkJReXhUUVVGVkxFTkJRVU1zY1VKQlFYRkNPMWxCUTNKRExFbEJRVWtzUTBGQlF5eFRRVUZWTEVOQlFVTXNOa0pCUVRaQ0xFVkJRemRETzFsQlEwRXNUMEZCVHl4SlFVRkpMRU5CUVVNN1UwRkRZanRSUVVORUxFOUJRVThzVVVGQlVTeERRVUZETzBsQlEyeENMRU5CUVVNc1EwRkJRenRKUVVWR0xFbEJRVWtzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4TlFVRk5MRXRCUVVzc1EwRkJReXhGUVVGRk8xRkJRemxDTEU5QlFVOHNVVUZCVVN4RFFVTmlMRWxCUVVrc1EwRkJReXh4UWtGQmNVSXNTVUZCU1N4SlFVRkpMRU5CUVVNc05rSkJRVFpDTzFsQlF6bEVMRU5CUVVNc1EwRkJReXhKUVVGSk8xbEJRMDRzUTBGQlF5eERRVUZETEVWQlFVVXNRMEZEVUN4RFFVRkRPMHRCUTBnN1NVRkZSQ3hQUVVGUExGRkJRVkVzUTBGQlF6dFJRVU5rTEVsQlFVRXNlVUpCUVdsQ0xFVkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJUdFJRVU14UXl4TlFVRk5MRU5CUVVNN1dVRkRUQ3gxUWtGQmRVSXNSVUZCUlR0WlFVTjZRaXhKUVVGQkxIZENRVUZoTEVWQlFVTXNTVUZCTkVJc1JVRkJSU3hQUVVGUExFVkJRVVVzUzBGQlN5eEZRVUZGTzJkQ1FVTXhSQ3h0UWtGQmJVSXNSVUZCUlN4alFVRmpPMmRDUVVOdVF5eHZRa0ZCYjBJc1JVRkJSU3hqUVVGak8yRkJRM0pETEVOQlFVTTdVMEZEU0N4RFFVRkRPMUZCUTBZc2MwSkJRWE5DTEVWQlFVVTdTMEZEZWtJc1EwRkJReXhEUVVGRE8wRkJRMHdzUTBGQlF6dEJRWEpIUkN4dlEwRnhSME1pZlE9PSIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wcmludExpcXVpZEJyYW5jaCA9IGV4cG9ydHMucHJpbnRMaXF1aWRUYWcgPSBleHBvcnRzLnByaW50TGlxdWlkQmxvY2tFbmQgPSBleHBvcnRzLnByaW50TGlxdWlkQmxvY2tTdGFydCA9IGV4cG9ydHMucHJpbnRMaXF1aWREcm9wID0gdm9pZCAwO1xuY29uc3QgcHJldHRpZXJfMSA9IHJlcXVpcmUoXCJwcmV0dGllclwiKTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi4vLi4vdHlwZXNcIik7XG5jb25zdCBhc3RfMSA9IHJlcXVpcmUoXCIuLi8uLi9wYXJzZXIvYXN0XCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlsc1wiKTtcbmNvbnN0IHV0aWxzXzIgPSByZXF1aXJlKFwiLi4vLi4vcHJpbnRlci91dGlsc1wiKTtcbmNvbnN0IGNoaWxkcmVuXzEgPSByZXF1aXJlKFwiLi4vLi4vcHJpbnRlci9wcmludC9jaGlsZHJlblwiKTtcbmNvbnN0IExJUVVJRF9UQUdTX1RIQVRfQUxXQVlTX0JSRUFLID0gWydmb3InLCAnY2FzZSddO1xuY29uc3QgeyBidWlsZGVycyB9ID0gcHJldHRpZXJfMS5kb2M7XG5jb25zdCB7IGdyb3VwLCBoYXJkbGluZSwgaWZCcmVhaywgaW5kZW50LCBqb2luLCBsaW5lLCBzb2Z0bGluZSB9ID0gYnVpbGRlcnM7XG5mdW5jdGlvbiBwcmludExpcXVpZERyb3AocGF0aCwgX29wdGlvbnMsIF9wcmludCwgeyBsZWFkaW5nU3BhY2VHcm91cElkLCB0cmFpbGluZ1NwYWNlR3JvdXBJZCB9KSB7XG4gICAgY29uc3Qgbm9kZSA9IHBhdGguZ2V0VmFsdWUoKTtcbiAgICBjb25zdCB3aGl0ZXNwYWNlU3RhcnQgPSAoMCwgdXRpbHNfMi5nZXRXaGl0ZXNwYWNlVHJpbSkobm9kZS53aGl0ZXNwYWNlU3RhcnQsICgwLCB1dGlsc18yLmhhc01lYW5pbmdmdWxMYWNrT2ZMZWFkaW5nV2hpdGVzcGFjZSkobm9kZSksIGxlYWRpbmdTcGFjZUdyb3VwSWQpO1xuICAgIGNvbnN0IHdoaXRlc3BhY2VFbmQgPSAoMCwgdXRpbHNfMi5nZXRXaGl0ZXNwYWNlVHJpbSkobm9kZS53aGl0ZXNwYWNlRW5kLCAoMCwgdXRpbHNfMi5oYXNNZWFuaW5nZnVsTGFja09mVHJhaWxpbmdXaGl0ZXNwYWNlKShub2RlKSwgdHJhaWxpbmdTcGFjZUdyb3VwSWQpO1xuICAgIGNvbnN0IGxpbmVzID0gKDAsIHV0aWxzXzIubWFya3VwTGluZXMpKG5vZGUpO1xuICAgIGlmIChsaW5lcy5sZW5ndGggPiAxKSB7XG4gICAgICAgIHJldHVybiBncm91cChbXG4gICAgICAgICAgICAne3snLFxuICAgICAgICAgICAgd2hpdGVzcGFjZVN0YXJ0LFxuICAgICAgICAgICAgaW5kZW50KFtoYXJkbGluZSwgam9pbihoYXJkbGluZSwgbGluZXMubWFwKHV0aWxzXzIudHJpbSkpXSksXG4gICAgICAgICAgICBoYXJkbGluZSxcbiAgICAgICAgICAgIHdoaXRlc3BhY2VFbmQsXG4gICAgICAgICAgICAnfX0nLFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgcmV0dXJuIGdyb3VwKFtcbiAgICAgICAgJ3t7JyxcbiAgICAgICAgd2hpdGVzcGFjZVN0YXJ0LFxuICAgICAgICAnICcsXG4gICAgICAgIG5vZGUubWFya3VwLFxuICAgICAgICAnICcsXG4gICAgICAgIHdoaXRlc3BhY2VFbmQsXG4gICAgICAgICd9fScsXG4gICAgXSk7XG59XG5leHBvcnRzLnByaW50TGlxdWlkRHJvcCA9IHByaW50TGlxdWlkRHJvcDtcbmZ1bmN0aW9uIHByaW50TGlxdWlkQmxvY2tTdGFydChwYXRoLCBsZWFkaW5nU3BhY2VHcm91cElkLCB0cmFpbGluZ1NwYWNlR3JvdXBJZCkge1xuICAgIGNvbnN0IG5vZGUgPSBwYXRoLmdldFZhbHVlKCk7XG4gICAgaWYgKCFub2RlLm5hbWUpXG4gICAgICAgIHJldHVybiAnJztcbiAgICBjb25zdCBsaW5lcyA9ICgwLCB1dGlsc18yLm1hcmt1cExpbmVzKShub2RlKTtcbiAgICBjb25zdCB3aGl0ZXNwYWNlU3RhcnQgPSAoMCwgdXRpbHNfMi5nZXRXaGl0ZXNwYWNlVHJpbSkobm9kZS53aGl0ZXNwYWNlU3RhcnQsIG5lZWRzQmxvY2tTdGFydExlYWRpbmdXaGl0ZXNwYWNlU3RyaXBwaW5nT25CcmVhayhub2RlKSwgbGVhZGluZ1NwYWNlR3JvdXBJZCk7XG4gICAgY29uc3Qgd2hpdGVzcGFjZUVuZCA9ICgwLCB1dGlsc18yLmdldFdoaXRlc3BhY2VUcmltKShub2RlLndoaXRlc3BhY2VFbmQsIG5lZWRzQmxvY2tTdGFydFRyYWlsaW5nV2hpdGVzcGFjZVN0cmlwcGluZ09uQnJlYWsobm9kZSksIHRyYWlsaW5nU3BhY2VHcm91cElkKTtcbiAgICBpZiAobm9kZS5uYW1lID09PSAnbGlxdWlkJykge1xuICAgICAgICByZXR1cm4gZ3JvdXAoW1xuICAgICAgICAgICAgJ3slJyxcbiAgICAgICAgICAgIHdoaXRlc3BhY2VTdGFydCxcbiAgICAgICAgICAgICcgJyxcbiAgICAgICAgICAgIG5vZGUubmFtZSxcbiAgICAgICAgICAgIGluZGVudChbaGFyZGxpbmUsIGpvaW4oaGFyZGxpbmUsICgwLCB1dGlsc18yLnJlaW5kZW50KShsaW5lcywgdHJ1ZSkpXSksXG4gICAgICAgICAgICBoYXJkbGluZSxcbiAgICAgICAgICAgIHdoaXRlc3BhY2VFbmQsXG4gICAgICAgICAgICAnJX0nLFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgaWYgKGxpbmVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgcmV0dXJuIGdyb3VwKFtcbiAgICAgICAgICAgICd7JScsXG4gICAgICAgICAgICB3aGl0ZXNwYWNlU3RhcnQsXG4gICAgICAgICAgICBpbmRlbnQoW2hhcmRsaW5lLCBub2RlLm5hbWUsICcgJywgam9pbihoYXJkbGluZSwgbGluZXMubWFwKHV0aWxzXzIudHJpbSkpXSksXG4gICAgICAgICAgICBoYXJkbGluZSxcbiAgICAgICAgICAgIHdoaXRlc3BhY2VFbmQsXG4gICAgICAgICAgICAnJX0nLFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgY29uc3QgbWFya3VwID0gbm9kZS5tYXJrdXA7XG4gICAgcmV0dXJuIGdyb3VwKFtcbiAgICAgICAgJ3slJyxcbiAgICAgICAgd2hpdGVzcGFjZVN0YXJ0LFxuICAgICAgICAnICcsXG4gICAgICAgIG5vZGUubmFtZSxcbiAgICAgICAgbWFya3VwID8gYCAke21hcmt1cH1gIDogJycsXG4gICAgICAgICcgJyxcbiAgICAgICAgd2hpdGVzcGFjZUVuZCxcbiAgICAgICAgJyV9JyxcbiAgICBdKTtcbn1cbmV4cG9ydHMucHJpbnRMaXF1aWRCbG9ja1N0YXJ0ID0gcHJpbnRMaXF1aWRCbG9ja1N0YXJ0O1xuZnVuY3Rpb24gcHJpbnRMaXF1aWRCbG9ja0VuZChwYXRoLCBsZWFkaW5nU3BhY2VHcm91cElkLCB0cmFpbGluZ1NwYWNlR3JvdXBJZCkge1xuICAgIHZhciBfYSwgX2I7XG4gICAgY29uc3Qgbm9kZSA9IHBhdGguZ2V0VmFsdWUoKTtcbiAgICBpZiAoIW5vZGUuY2hpbGRyZW4gfHwgIW5vZGUuYmxvY2tFbmRQb3NpdGlvbilcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIGNvbnN0IHdoaXRlc3BhY2VTdGFydCA9ICgwLCB1dGlsc18yLmdldFdoaXRlc3BhY2VUcmltKSgoX2EgPSBub2RlLmRlbGltaXRlcldoaXRlc3BhY2VTdGFydCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJycsIG5lZWRzQmxvY2tFbmRMZWFkaW5nV2hpdGVzcGFjZVN0cmlwcGluZ09uQnJlYWsobm9kZSksIGxlYWRpbmdTcGFjZUdyb3VwSWQpO1xuICAgIGNvbnN0IHdoaXRlc3BhY2VFbmQgPSAoMCwgdXRpbHNfMi5nZXRXaGl0ZXNwYWNlVHJpbSkoKF9iID0gbm9kZS5kZWxpbWl0ZXJXaGl0ZXNwYWNlRW5kKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAnJywgKDAsIHV0aWxzXzIuaGFzTWVhbmluZ2Z1bExhY2tPZlRyYWlsaW5nV2hpdGVzcGFjZSkobm9kZSksIHRyYWlsaW5nU3BhY2VHcm91cElkKTtcbiAgICByZXR1cm4gZ3JvdXAoW1xuICAgICAgICAneyUnLFxuICAgICAgICB3aGl0ZXNwYWNlU3RhcnQsXG4gICAgICAgIGAgZW5kJHtub2RlLm5hbWV9IGAsXG4gICAgICAgIHdoaXRlc3BhY2VFbmQsXG4gICAgICAgICclfScsXG4gICAgXSk7XG59XG5leHBvcnRzLnByaW50TGlxdWlkQmxvY2tFbmQgPSBwcmludExpcXVpZEJsb2NrRW5kO1xuZnVuY3Rpb24gcHJpbnRMaXF1aWRUYWcocGF0aCwgb3B0aW9ucywgcHJpbnQsIHsgbGVhZGluZ1NwYWNlR3JvdXBJZCwgdHJhaWxpbmdTcGFjZUdyb3VwSWQgfSA9IHt9KSB7XG4gICAgY29uc3Qgbm9kZSA9IHBhdGguZ2V0VmFsdWUoKTtcbiAgICBpZiAoIW5vZGUuY2hpbGRyZW4gfHwgIW5vZGUuYmxvY2tFbmRQb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gcHJpbnRMaXF1aWRCbG9ja1N0YXJ0KHBhdGgsIGxlYWRpbmdTcGFjZUdyb3VwSWQsIHRyYWlsaW5nU3BhY2VHcm91cElkKTtcbiAgICB9XG4gICAgY29uc3QgdGFnR3JvdXBJZCA9IFN5bWJvbCgndGFnLWdyb3VwJyk7XG4gICAgY29uc3QgYmxvY2tTdGFydCA9IHByaW50TGlxdWlkQmxvY2tTdGFydChwYXRoLCBsZWFkaW5nU3BhY2VHcm91cElkLCB0YWdHcm91cElkKTtcbiAgICBjb25zdCBibG9ja0VuZCA9IHByaW50TGlxdWlkQmxvY2tFbmQocGF0aCwgdGFnR3JvdXBJZCwgdHJhaWxpbmdTcGFjZUdyb3VwSWQpO1xuICAgIGxldCBib2R5ID0gW107XG4gICAgaWYgKCgwLCBhc3RfMS5pc0JyYW5jaGVkVGFnKShub2RlKSkge1xuICAgICAgICBib2R5ID0gY2xlYW5Eb2MocGF0aC5tYXAoKHApID0+IHByaW50KHAsIHtcbiAgICAgICAgICAgIGxlYWRpbmdTcGFjZUdyb3VwSWQ6IHRhZ0dyb3VwSWQsXG4gICAgICAgICAgICB0cmFpbGluZ1NwYWNlR3JvdXBJZDogdGFnR3JvdXBJZCxcbiAgICAgICAgfSksICdjaGlsZHJlbicpKTtcbiAgICAgICAgaWYgKG5vZGUubmFtZSA9PT0gJ2Nhc2UnKVxuICAgICAgICAgICAgYm9keSA9IGluZGVudChib2R5KTtcbiAgICB9XG4gICAgZWxzZSBpZiAobm9kZS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgIGJvZHkgPSBpbmRlbnQoW1xuICAgICAgICAgICAgaW5uZXJMZWFkaW5nV2hpdGVzcGFjZShub2RlKSxcbiAgICAgICAgICAgICgwLCBjaGlsZHJlbl8xLnByaW50Q2hpbGRyZW4pKHBhdGgsIG9wdGlvbnMsIHByaW50LCB7XG4gICAgICAgICAgICAgICAgbGVhZGluZ1NwYWNlR3JvdXBJZDogdGFnR3JvdXBJZCxcbiAgICAgICAgICAgICAgICB0cmFpbGluZ1NwYWNlR3JvdXBJZDogdGFnR3JvdXBJZCxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgcmV0dXJuIGdyb3VwKFtibG9ja1N0YXJ0LCBib2R5LCBpbm5lclRyYWlsaW5nV2hpdGVzcGFjZShub2RlKSwgYmxvY2tFbmRdLCB7XG4gICAgICAgIGlkOiB0YWdHcm91cElkLFxuICAgICAgICBzaG91bGRCcmVhazogTElRVUlEX1RBR1NfVEhBVF9BTFdBWVNfQlJFQUsuaW5jbHVkZXMobm9kZS5uYW1lKSB8fFxuICAgICAgICAgICAgKDAsIHV0aWxzXzIub3JpZ2luYWxseUhhZExpbmVCcmVha3MpKHBhdGgsIG9wdGlvbnMpIHx8XG4gICAgICAgICAgICBpc0F0dHJpYnV0ZU5vZGUobm9kZSkgfHxcbiAgICAgICAgICAgICgwLCB1dGlsc18yLmlzRGVlcGx5TmVzdGVkKShub2RlKSxcbiAgICB9KTtcbn1cbmV4cG9ydHMucHJpbnRMaXF1aWRUYWcgPSBwcmludExpcXVpZFRhZztcbmZ1bmN0aW9uIGlzQXR0cmlidXRlTm9kZShub2RlKSB7XG4gICAgcmV0dXJuICgoMCwgdXRpbHNfMi5pc0h0bWxOb2RlKShub2RlLnBhcmVudE5vZGUpICYmXG4gICAgICAgIG5vZGUucGFyZW50Tm9kZS5hdHRyaWJ1dGVzLmluZGV4T2Yobm9kZSkgIT09IC0xKTtcbn1cbmZ1bmN0aW9uIGlubmVyTGVhZGluZ1doaXRlc3BhY2Uobm9kZSkge1xuICAgIGlmICghbm9kZS5maXJzdENoaWxkKSB7XG4gICAgICAgIGlmIChub2RlLmlzRGFuZ2xpbmdXaGl0ZXNwYWNlU2Vuc2l0aXZlICYmIG5vZGUuaGFzRGFuZ2xpbmdXaGl0ZXNwYWNlKSB7XG4gICAgICAgICAgICByZXR1cm4gbGluZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAobm9kZS5maXJzdENoaWxkLmhhc0xlYWRpbmdXaGl0ZXNwYWNlICYmXG4gICAgICAgIG5vZGUuZmlyc3RDaGlsZC5pc0xlYWRpbmdXaGl0ZXNwYWNlU2Vuc2l0aXZlKSB7XG4gICAgICAgIHJldHVybiBsaW5lO1xuICAgIH1cbiAgICByZXR1cm4gc29mdGxpbmU7XG59XG5mdW5jdGlvbiBpbm5lclRyYWlsaW5nV2hpdGVzcGFjZShub2RlKSB7XG4gICAgaWYgKG5vZGUudHlwZSA9PT0gdHlwZXNfMS5Ob2RlVHlwZXMuTGlxdWlkQnJhbmNoIHx8XG4gICAgICAgICFub2RlLmJsb2NrRW5kUG9zaXRpb24gfHxcbiAgICAgICAgIW5vZGUubGFzdENoaWxkKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgaWYgKG5vZGUubGFzdENoaWxkLmhhc1RyYWlsaW5nV2hpdGVzcGFjZSAmJlxuICAgICAgICBub2RlLmxhc3RDaGlsZC5pc1RyYWlsaW5nV2hpdGVzcGFjZVNlbnNpdGl2ZSkge1xuICAgICAgICByZXR1cm4gbGluZTtcbiAgICB9XG4gICAgcmV0dXJuIHNvZnRsaW5lO1xufVxuZnVuY3Rpb24gcHJpbnRMaXF1aWREZWZhdWx0QnJhbmNoKHBhdGgsIG9wdGlvbnMsIHByaW50LCBhcmdzKSB7XG4gICAgY29uc3QgYnJhbmNoID0gcGF0aC5nZXRWYWx1ZSgpO1xuICAgIGNvbnN0IHBhcmVudE5vZGUgPSBwYXRoLmdldFBhcmVudE5vZGUoKTtcbiAgICBjb25zdCBzaG91bGRDb2xsYXBzZVNwYWNlID0gKDAsIHV0aWxzXzIuaXNFbXB0eSkoYnJhbmNoLmNoaWxkcmVuKSAmJiBwYXJlbnROb2RlLmNoaWxkcmVuLmxlbmd0aCA9PT0gMTtcbiAgICBpZiAoc2hvdWxkQ29sbGFwc2VTcGFjZSlcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIGNvbnN0IGlzQnJhbmNoRW1wdHlXaXRob3V0U3BhY2UgPSAoMCwgdXRpbHNfMi5pc0VtcHR5KShicmFuY2guY2hpbGRyZW4pICYmICFicmFuY2guaGFzRGFuZ2xpbmdXaGl0ZXNwYWNlO1xuICAgIGlmIChpc0JyYW5jaEVtcHR5V2l0aG91dFNwYWNlKVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgaWYgKGJyYW5jaC5oYXNEYW5nbGluZ1doaXRlc3BhY2UpIHtcbiAgICAgICAgcmV0dXJuIGlmQnJlYWsoJycsICcgJyk7XG4gICAgfVxuICAgIHJldHVybiBpbmRlbnQoW1xuICAgICAgICBpbm5lckxlYWRpbmdXaGl0ZXNwYWNlKHBhcmVudE5vZGUpLFxuICAgICAgICAoMCwgY2hpbGRyZW5fMS5wcmludENoaWxkcmVuKShwYXRoLCBvcHRpb25zLCBwcmludCwgYXJncyksXG4gICAgXSk7XG59XG5mdW5jdGlvbiBwcmludExpcXVpZEJyYW5jaChwYXRoLCBvcHRpb25zLCBwcmludCwgYXJncykge1xuICAgIGNvbnN0IGJyYW5jaCA9IHBhdGguZ2V0VmFsdWUoKTtcbiAgICBjb25zdCBpc0RlZmF1bHRCcmFuY2ggPSAhYnJhbmNoLm5hbWU7XG4gICAgaWYgKGlzRGVmYXVsdEJyYW5jaCkge1xuICAgICAgICByZXR1cm4gcHJpbnRMaXF1aWREZWZhdWx0QnJhbmNoKHBhdGgsIG9wdGlvbnMsIHByaW50LCBhcmdzKTtcbiAgICB9XG4gICAgY29uc3QgbGVmdFNpYmxpbmcgPSBicmFuY2gucHJldjtcbiAgICBjb25zdCBzaG91bGRDb2xsYXBzZVNwYWNlID0gbGVmdFNpYmxpbmcgJiYgKDAsIHV0aWxzXzIuaXNFbXB0eSkobGVmdFNpYmxpbmcuY2hpbGRyZW4pO1xuICAgIGNvbnN0IG91dGVyTGVhZGluZ1doaXRlc3BhY2UgPSBicmFuY2guaGFzTGVhZGluZ1doaXRlc3BhY2UgJiYgIXNob3VsZENvbGxhcHNlU3BhY2UgPyBsaW5lIDogc29mdGxpbmU7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgb3V0ZXJMZWFkaW5nV2hpdGVzcGFjZSxcbiAgICAgICAgcHJpbnRMaXF1aWRCbG9ja1N0YXJ0KHBhdGgsIGFyZ3MubGVhZGluZ1NwYWNlR3JvdXBJZCwgYXJncy50cmFpbGluZ1NwYWNlR3JvdXBJZCksXG4gICAgICAgIGluZGVudChbXG4gICAgICAgICAgICBpbm5lckxlYWRpbmdXaGl0ZXNwYWNlKGJyYW5jaCksXG4gICAgICAgICAgICAoMCwgY2hpbGRyZW5fMS5wcmludENoaWxkcmVuKShwYXRoLCBvcHRpb25zLCBwcmludCwgYXJncyksXG4gICAgICAgIF0pLFxuICAgIF07XG59XG5leHBvcnRzLnByaW50TGlxdWlkQnJhbmNoID0gcHJpbnRMaXF1aWRCcmFuY2g7XG5mdW5jdGlvbiBuZWVkc0Jsb2NrU3RhcnRMZWFkaW5nV2hpdGVzcGFjZVN0cmlwcGluZ09uQnJlYWsobm9kZSkge1xuICAgIHN3aXRjaCAobm9kZS50eXBlKSB7XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuTGlxdWlkVGFnOiB7XG4gICAgICAgICAgICByZXR1cm4gKCFpc0F0dHJpYnV0ZU5vZGUobm9kZSkgJiYgKDAsIHV0aWxzXzIuaGFzTWVhbmluZ2Z1bExhY2tPZkxlYWRpbmdXaGl0ZXNwYWNlKShub2RlKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5MaXF1aWRCcmFuY2g6IHtcbiAgICAgICAgICAgIHJldHVybiAoIWlzQXR0cmlidXRlTm9kZShub2RlLnBhcmVudE5vZGUpICYmXG4gICAgICAgICAgICAgICAgKDAsIHV0aWxzXzIuaGFzTWVhbmluZ2Z1bExhY2tPZkxlYWRpbmdXaGl0ZXNwYWNlKShub2RlKSk7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgcmV0dXJuICgwLCB1dGlsc18xLmFzc2VydE5ldmVyKShub2RlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIG5lZWRzQmxvY2tTdGFydFRyYWlsaW5nV2hpdGVzcGFjZVN0cmlwcGluZ09uQnJlYWsobm9kZSkge1xuICAgIHN3aXRjaCAobm9kZS50eXBlKSB7XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuTGlxdWlkVGFnOiB7XG4gICAgICAgICAgICBpZiAoKDAsIGFzdF8xLmlzQnJhbmNoZWRUYWcpKG5vZGUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5lZWRzQmxvY2tTdGFydExlYWRpbmdXaGl0ZXNwYWNlU3RyaXBwaW5nT25CcmVhayhub2RlLmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFub2RlLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgwLCB1dGlsc18yLmhhc01lYW5pbmdmdWxMYWNrT2ZUcmFpbGluZ1doaXRlc3BhY2UpKG5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICgwLCB1dGlsc18yLmlzRW1wdHkpKG5vZGUuY2hpbGRyZW4pXG4gICAgICAgICAgICAgICAgPyAoMCwgdXRpbHNfMi5oYXNNZWFuaW5nZnVsTGFja09mRGFuZ2xpbmdXaGl0ZXNwYWNlKShub2RlKVxuICAgICAgICAgICAgICAgIDogKDAsIHV0aWxzXzIuaGFzTWVhbmluZ2Z1bExhY2tPZkxlYWRpbmdXaGl0ZXNwYWNlKShub2RlLmZpcnN0Q2hpbGQpO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuTGlxdWlkQnJhbmNoOiB7XG4gICAgICAgICAgICBpZiAoaXNBdHRyaWJ1dGVOb2RlKG5vZGUucGFyZW50Tm9kZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbm9kZS5maXJzdENoaWxkXG4gICAgICAgICAgICAgICAgPyAoMCwgdXRpbHNfMi5oYXNNZWFuaW5nZnVsTGFja09mTGVhZGluZ1doaXRlc3BhY2UpKG5vZGUuZmlyc3RDaGlsZClcbiAgICAgICAgICAgICAgICA6ICgwLCB1dGlsc18yLmhhc01lYW5pbmdmdWxMYWNrT2ZEYW5nbGluZ1doaXRlc3BhY2UpKG5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIHJldHVybiAoMCwgdXRpbHNfMS5hc3NlcnROZXZlcikobm9kZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBuZWVkc0Jsb2NrRW5kTGVhZGluZ1doaXRlc3BhY2VTdHJpcHBpbmdPbkJyZWFrKG5vZGUpIHtcbiAgICBpZiAoIW5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTaG91bGQgb25seSBjYWxsIG5lZWRzQmxvY2tFbmRMZWFkaW5nV2hpdGVzcGFjZVN0cmlwcGluZ09uQnJlYWsgZm9yIHRhZ3MgdGhhdCBoYXZlIGNsb3NpbmcgdGFncycpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc0F0dHJpYnV0ZU5vZGUobm9kZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBlbHNlIGlmICgoMCwgYXN0XzEuaXNCcmFuY2hlZFRhZykobm9kZSkpIHtcbiAgICAgICAgcmV0dXJuICgwLCB1dGlsc18yLmhhc01lYW5pbmdmdWxMYWNrT2ZUcmFpbGluZ1doaXRlc3BhY2UpKG5vZGUubGFzdENoaWxkKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoKDAsIHV0aWxzXzIuaXNFbXB0eSkobm9kZS5jaGlsZHJlbikpIHtcbiAgICAgICAgcmV0dXJuICgwLCB1dGlsc18yLmhhc01lYW5pbmdmdWxMYWNrT2ZEYW5nbGluZ1doaXRlc3BhY2UpKG5vZGUpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuICgwLCB1dGlsc18yLmhhc01lYW5pbmdmdWxMYWNrT2ZUcmFpbGluZ1doaXRlc3BhY2UpKG5vZGUubGFzdENoaWxkKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjbGVhbkRvYyhkb2MpIHtcbiAgICByZXR1cm4gZG9jLmZpbHRlcigoeCkgPT4geCAhPT0gJycpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYkdseGRXbGtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaUxpNHZMaTR2TGk0dmMzSmpMM0J5YVc1MFpYSXZjSEpwYm5RdmJHbHhkV2xrTG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096dEJRVUZCTEhWRFFVRTJRenRCUVVNM1F5eHRRMEZUYVVJN1FVRkRha0lzYzBOQlFUWkRPMEZCUXpkRExHMURRVUZ6UXp0QlFVVjBReXd5UTBGWmVVSTdRVUZGZWtJc2RVUkJRWGxFTzBGQlJYcEVMRTFCUVUwc05rSkJRVFpDTEVkQlFVY3NRMEZCUXl4TFFVRkxMRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVU03UVVGRmRFUXNUVUZCVFN4RlFVRkZMRkZCUVZFc1JVRkJSU3hIUVVGSExHTkJRVWNzUTBGQlF6dEJRVU42UWl4TlFVRk5MRVZCUVVVc1MwRkJTeXhGUVVGRkxGRkJRVkVzUlVGQlJTeFBRVUZQTEVWQlFVVXNUVUZCVFN4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzVVVGQlVTeEZRVUZGTEVkQlFVY3NVVUZCVVN4RFFVRkRPMEZCUlRWRkxGTkJRV2RDTEdWQlFXVXNRMEZETjBJc1NVRkJiVUlzUlVGRGJrSXNVVUZCTmtJc1JVRkROMElzVFVGQmNVSXNSVUZEY2tJc1JVRkJSU3h0UWtGQmJVSXNSVUZCUlN4dlFrRkJiMElzUlVGQmNVSTdTVUZGYUVVc1RVRkJUU3hKUVVGSkxFZEJRV1VzU1VGQlNTeERRVUZETEZGQlFWRXNSVUZCWjBJc1EwRkJRenRKUVVOMlJDeE5RVUZOTEdWQlFXVXNSMEZCUnl4SlFVRkJMSGxDUVVGcFFpeEZRVU4yUXl4SlFVRkpMRU5CUVVNc1pVRkJaU3hGUVVOd1FpeEpRVUZCTERSRFFVRnZReXhGUVVGRExFbEJRVWtzUTBGQlF5eEZRVU14UXl4dFFrRkJiVUlzUTBGRGNFSXNRMEZCUXp0SlFVTkdMRTFCUVUwc1lVRkJZU3hIUVVGSExFbEJRVUVzZVVKQlFXbENMRVZCUTNKRExFbEJRVWtzUTBGQlF5eGhRVUZoTEVWQlEyeENMRWxCUVVFc05rTkJRWEZETEVWQlFVTXNTVUZCU1N4RFFVRkRMRVZCUXpORExHOUNRVUZ2UWl4RFFVTnlRaXhEUVVGRE8wbEJSMFlzVFVGQlRTeExRVUZMTEVkQlFVY3NTVUZCUVN4dFFrRkJWeXhGUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBsQlEyaERMRWxCUVVrc1MwRkJTeXhEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVWQlFVVTdVVUZEY0VJc1QwRkJUeXhMUVVGTExFTkJRVU03V1VGRFdDeEpRVUZKTzFsQlEwb3NaVUZCWlR0WlFVTm1MRTFCUVUwc1EwRkJReXhEUVVGRExGRkJRVkVzUlVGQlJTeEpRVUZKTEVOQlFVTXNVVUZCVVN4RlFVRkZMRXRCUVVzc1EwRkJReXhIUVVGSExFTkJRVU1zV1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTI1RUxGRkJRVkU3V1VGRFVpeGhRVUZoTzFsQlEySXNTVUZCU1R0VFFVTk1MRU5CUVVNc1EwRkJRenRMUVVOS08wbEJSVVFzVDBGQlR5eExRVUZMTEVOQlFVTTdVVUZEV0N4SlFVRkpPMUZCUTBvc1pVRkJaVHRSUVVObUxFZEJRVWM3VVVGRFNDeEpRVUZKTEVOQlFVTXNUVUZCVFR0UlFVTllMRWRCUVVjN1VVRkRTQ3hoUVVGaE8xRkJRMklzU1VGQlNUdExRVU5NTEVOQlFVTXNRMEZCUXp0QlFVTk1MRU5CUVVNN1FVRjRRMFFzTUVOQmQwTkRPMEZCUlVRc1UwRkJaMElzY1VKQlFYRkNMRU5CUTI1RExFbEJRWFZETEVWQlEzWkRMRzFDUVVGclJDeEZRVU5zUkN4dlFrRkJiVVE3U1VGRmJrUXNUVUZCVFN4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRExGRkJRVkVzUlVGQlJTeERRVUZETzBsQlF6ZENMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNUdFJRVUZGTEU5QlFVOHNSVUZCUlN4RFFVRkRPMGxCUlRGQ0xFMUJRVTBzUzBGQlN5eEhRVUZITEVsQlFVRXNiVUpCUVZjc1JVRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dEpRVVZvUXl4TlFVRk5MR1ZCUVdVc1IwRkJSeXhKUVVGQkxIbENRVUZwUWl4RlFVTjJReXhKUVVGSkxFTkJRVU1zWlVGQlpTeEZRVU53UWl4blJFRkJaMFFzUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZEZEVRc2JVSkJRVzFDTEVOQlEzQkNMRU5CUVVNN1NVRkRSaXhOUVVGTkxHRkJRV0VzUjBGQlJ5eEpRVUZCTEhsQ1FVRnBRaXhGUVVOeVF5eEpRVUZKTEVOQlFVTXNZVUZCWVN4RlFVTnNRaXhwUkVGQmFVUXNRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkRka1FzYjBKQlFXOUNMRU5CUTNKQ0xFTkJRVU03U1VGRlJpeEpRVUZKTEVsQlFVa3NRMEZCUXl4SlFVRkpMRXRCUVVzc1VVRkJVU3hGUVVGRk8xRkJRekZDTEU5QlFVOHNTMEZCU3l4RFFVRkRPMWxCUTFnc1NVRkJTVHRaUVVOS0xHVkJRV1U3V1VGRFppeEhRVUZITzFsQlEwZ3NTVUZCU1N4RFFVRkRMRWxCUVVrN1dVRkRWQ3hOUVVGTkxFTkJRVU1zUTBGQlF5eFJRVUZSTEVWQlFVVXNTVUZCU1N4RFFVRkRMRkZCUVZFc1JVRkJSU3hKUVVGQkxHZENRVUZSTEVWQlFVTXNTMEZCU3l4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU42UkN4UlFVRlJPMWxCUTFJc1lVRkJZVHRaUVVOaUxFbEJRVWs3VTBGRFRDeERRVUZETEVOQlFVTTdTMEZEU2p0SlFVVkVMRWxCUVVrc1MwRkJTeXhEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVWQlFVVTdVVUZEY0VJc1QwRkJUeXhMUVVGTExFTkJRVU03V1VGRFdDeEpRVUZKTzFsQlEwb3NaVUZCWlR0WlFVTm1MRTFCUVUwc1EwRkJReXhEUVVGRExGRkJRVkVzUlVGQlJTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RlFVRkZMRWRCUVVjc1JVRkJSU3hKUVVGSkxFTkJRVU1zVVVGQlVTeEZRVUZGTEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUVVNc1dVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEyNUZMRkZCUVZFN1dVRkRVaXhoUVVGaE8xbEJRMklzU1VGQlNUdFRRVU5NTEVOQlFVTXNRMEZCUXp0TFFVTktPMGxCUlVRc1RVRkJUU3hOUVVGTkxFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXp0SlFVTXpRaXhQUVVGUExFdEJRVXNzUTBGQlF6dFJRVU5ZTEVsQlFVazdVVUZEU2l4bFFVRmxPMUZCUTJZc1IwRkJSenRSUVVOSUxFbEJRVWtzUTBGQlF5eEpRVUZKTzFGQlExUXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhKUVVGSkxFMUJRVTBzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZPMUZCUXpGQ0xFZEJRVWM3VVVGRFNDeGhRVUZoTzFGQlEySXNTVUZCU1R0TFFVTk1MRU5CUVVNc1EwRkJRenRCUVVOTUxFTkJRVU03UVVGNFJFUXNjMFJCZDBSRE8wRkJSVVFzVTBGQlowSXNiVUpCUVcxQ0xFTkJRMnBETEVsQlFYZENMRVZCUTNoQ0xHMUNRVUZyUkN4RlFVTnNSQ3h2UWtGQmJVUTdPMGxCUlc1RUxFMUJRVTBzU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXl4UlFVRlJMRVZCUVVVc1EwRkJRenRKUVVNM1FpeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJN1VVRkJSU3hQUVVGUExFVkJRVVVzUTBGQlF6dEpRVU40UkN4TlFVRk5MR1ZCUVdVc1IwRkJSeXhKUVVGQkxIbENRVUZwUWl4RlFVTjJReXhOUVVGQkxFbEJRVWtzUTBGQlF5eDNRa0ZCZDBJc2JVTkJRVWtzUlVGQlJTeEZRVU51UXl3NFEwRkJPRU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZEY0VRc2JVSkJRVzFDTEVOQlEzQkNMRU5CUVVNN1NVRkRSaXhOUVVGTkxHRkJRV0VzUjBGQlJ5eEpRVUZCTEhsQ1FVRnBRaXhGUVVOeVF5eE5RVUZCTEVsQlFVa3NRMEZCUXl4elFrRkJjMElzYlVOQlFVa3NSVUZCUlN4RlFVTnFReXhKUVVGQkxEWkRRVUZ4UXl4RlFVRkRMRWxCUVVrc1EwRkJReXhGUVVNelF5eHZRa0ZCYjBJc1EwRkRja0lzUTBGQlF6dEpRVU5HTEU5QlFVOHNTMEZCU3l4RFFVRkRPMUZCUTFnc1NVRkJTVHRSUVVOS0xHVkJRV1U3VVVGRFppeFBRVUZQTEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjN1VVRkRia0lzWVVGQllUdFJRVU5pTEVsQlFVazdTMEZEVEN4RFFVRkRMRU5CUVVNN1FVRkRUQ3hEUVVGRE8wRkJlRUpFTEd0RVFYZENRenRCUVVWRUxGTkJRV2RDTEdOQlFXTXNRMEZETlVJc1NVRkJkMElzUlVGRGVFSXNUMEZCTkVJc1JVRkROVUlzUzBGQmIwSXNSVUZEY0VJc1JVRkJSU3h0UWtGQmJVSXNSVUZCUlN4dlFrRkJiMElzUzBGQmQwSXNSVUZCUlR0SlFVVnlSU3hOUVVGTkxFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RlFVRkZMRU5CUVVNN1NVRkROMElzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zWjBKQlFXZENMRVZCUVVVN1VVRkROVU1zVDBGQlR5eHhRa0ZCY1VJc1EwRkRNVUlzU1VGQlNTeEZRVU5LTEcxQ1FVRnRRaXhGUVVOdVFpeHZRa0ZCYjBJc1EwRkRja0lzUTBGQlF6dExRVU5JTzBsQlEwUXNUVUZCVFN4VlFVRlZMRWRCUVVjc1RVRkJUU3hEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZETzBsQlEzWkRMRTFCUVUwc1ZVRkJWU3hIUVVGSExIRkNRVUZ4UWl4RFFVTjBReXhKUVVGSkxFVkJRMG9zYlVKQlFXMUNMRVZCUTI1Q0xGVkJRVlVzUTBGRFdDeERRVUZETzBsQlEwWXNUVUZCVFN4UlFVRlJMRWRCUVVjc2JVSkJRVzFDTEVOQlFVTXNTVUZCU1N4RlFVRkZMRlZCUVZVc1JVRkJSU3h2UWtGQmIwSXNRMEZCUXl4RFFVRkRPMGxCUlRkRkxFbEJRVWtzU1VGQlNTeEhRVUZSTEVWQlFVVXNRMEZCUXp0SlFVVnVRaXhKUVVGSkxFbEJRVUVzYlVKQlFXRXNSVUZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSVHRSUVVOMlFpeEpRVUZKTEVkQlFVY3NVVUZCVVN4RFFVTmlMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRMDRzUTBGQlF5eERRVUZETEVWQlFVVXNSVUZCUlN4RFFVTktMRXRCUVVzc1EwRkJReXhEUVVGRExFVkJRVVU3V1VGRFVDeHRRa0ZCYlVJc1JVRkJSU3hWUVVGVk8xbEJReTlDTEc5Q1FVRnZRaXhGUVVGRkxGVkJRVlU3VTBGRGFrTXNRMEZCUXl4RlFVTktMRlZCUVZVc1EwRkRXQ3hEUVVOR0xFTkJRVU03VVVGRFJpeEpRVUZKTEVsQlFVa3NRMEZCUXl4SlFVRkpMRXRCUVVzc1RVRkJUVHRaUVVGRkxFbEJRVWtzUjBGQlJ5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1MwRkRMME03VTBGQlRTeEpRVUZKTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU1zUlVGQlJUdFJRVU51UXl4SlFVRkpMRWRCUVVjc1RVRkJUU3hEUVVGRE8xbEJRMW9zYzBKQlFYTkNMRU5CUVVNc1NVRkJTU3hEUVVGRE8xbEJRelZDTEVsQlFVRXNkMEpCUVdFc1JVRkJReXhKUVVGSkxFVkJRVVVzVDBGQlR5eEZRVUZGTEV0QlFVc3NSVUZCUlR0blFrRkRiRU1zYlVKQlFXMUNMRVZCUVVVc1ZVRkJWVHRuUWtGREwwSXNiMEpCUVc5Q0xFVkJRVVVzVlVGQlZUdGhRVU5xUXl4RFFVRkRPMU5CUTBnc1EwRkJReXhEUVVGRE8wdEJRMG83U1VGRlJDeFBRVUZQTEV0QlFVc3NRMEZCUXl4RFFVRkRMRlZCUVZVc1JVRkJSU3hKUVVGSkxFVkJRVVVzZFVKQlFYVkNMRU5CUVVNc1NVRkJTU3hEUVVGRExFVkJRVVVzVVVGQlVTeERRVUZETEVWQlFVVTdVVUZEZUVVc1JVRkJSU3hGUVVGRkxGVkJRVlU3VVVGRFpDeFhRVUZYTEVWQlExUXNOa0pCUVRaQ0xFTkJRVU1zVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNN1dVRkRha1FzU1VGQlFTd3JRa0ZCZFVJc1JVRkJReXhKUVVGSkxFVkJRVVVzVDBGQlR5eERRVUZETzFsQlEzUkRMR1ZCUVdVc1EwRkJReXhKUVVGSkxFTkJRVU03V1VGRGNrSXNTVUZCUVN4elFrRkJZeXhGUVVGRExFbEJRVWtzUTBGQlF6dExRVU4yUWl4RFFVRkRMRU5CUVVNN1FVRkRUQ3hEUVVGRE8wRkJkRVJFTEhkRFFYTkVRenRCUVVWRUxGTkJRVk1zWlVGQlpTeERRVUZETEVsQlFXVTdTVUZEZEVNc1QwRkJUeXhEUVVOTUxFbEJRVUVzYTBKQlFWVXNSVUZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRE8xRkJRek5DTEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1ZVRkJWU3hEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkRhRVFzUTBGQlF6dEJRVU5LTEVOQlFVTTdRVUZGUkN4VFFVRlRMSE5DUVVGelFpeERRVUZETEVsQlFUaENPMGxCUXpWRUxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RlFVRkZPMUZCUTNCQ0xFbEJRVWtzU1VGQlNTeERRVUZETERaQ1FVRTJRaXhKUVVGSkxFbEJRVWtzUTBGQlF5eHhRa0ZCY1VJc1JVRkJSVHRaUVVOd1JTeFBRVUZQTEVsQlFVa3NRMEZCUXp0VFFVTmlPMkZCUVUwN1dVRkRUQ3hQUVVGUExFVkJRVVVzUTBGQlF6dFRRVU5ZTzB0QlEwWTdTVUZGUkN4SlFVTkZMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zYjBKQlFXOUNPMUZCUTNCRExFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNORUpCUVRSQ0xFVkJRelZETzFGQlEwRXNUMEZCVHl4SlFVRkpMRU5CUVVNN1MwRkRZanRKUVVWRUxFOUJRVThzVVVGQlVTeERRVUZETzBGQlEyeENMRU5CUVVNN1FVRkZSQ3hUUVVGVExIVkNRVUYxUWl4RFFVRkRMRWxCUVRoQ08wbEJRemRFTEVsQlEwVXNTVUZCU1N4RFFVRkRMRWxCUVVrc1MwRkJTeXhwUWtGQlV5eERRVUZETEZsQlFWazdVVUZEY0VNc1EwRkJReXhKUVVGSkxFTkJRVU1zWjBKQlFXZENPMUZCUTNSQ0xFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTXNSVUZEWmp0UlFVTkJMRTlCUVU4c1JVRkJSU3hEUVVGRE8wdEJRMWc3U1VGRlJDeEpRVU5GTEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc2NVSkJRWEZDTzFGQlEzQkRMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zTmtKQlFUWkNMRVZCUXpWRE8xRkJRMEVzVDBGQlR5eEpRVUZKTEVOQlFVTTdTMEZEWWp0SlFVVkVMRTlCUVU4c1VVRkJVU3hEUVVGRE8wRkJRMnhDTEVOQlFVTTdRVUZGUkN4VFFVRlRMSGRDUVVGM1FpeERRVU12UWl4SlFVRXlRaXhGUVVNelFpeFBRVUUwUWl4RlFVTTFRaXhMUVVGdlFpeEZRVU53UWl4SlFVRjFRanRKUVVWMlFpeE5RVUZOTEUxQlFVMHNSMEZCUnl4SlFVRkpMRU5CUVVNc1VVRkJVU3hGUVVGRkxFTkJRVU03U1VGREwwSXNUVUZCVFN4VlFVRlZMRWRCUVdNc1NVRkJTU3hEUVVGRExHRkJRV0VzUlVGQlV5eERRVUZETzBsQlRURkVMRTFCUVUwc2JVSkJRVzFDTEVkQlEzWkNMRWxCUVVFc1pVRkJUeXhGUVVGRExFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4VlFVRlZMRU5CUVVNc1VVRkJVeXhEUVVGRExFMUJRVTBzUzBGQlN5eERRVUZETEVOQlFVTTdTVUZEYUVVc1NVRkJTU3h0UWtGQmJVSTdVVUZCUlN4UFFVRlBMRVZCUVVVc1EwRkJRenRKUVUxdVF5eE5RVUZOTEhsQ1FVRjVRaXhIUVVNM1FpeEpRVUZCTEdWQlFVOHNSVUZCUXl4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU03U1VGRE5VUXNTVUZCU1N4NVFrRkJlVUk3VVVGQlJTeFBRVUZQTEVWQlFVVXNRMEZCUXp0SlFVMTZReXhKUVVGSkxFMUJRVTBzUTBGQlF5eHhRa0ZCY1VJc1JVRkJSVHRSUVVOb1F5eFBRVUZQTEU5QlFVOHNRMEZCUXl4RlFVRkZMRVZCUVVVc1IwRkJSeXhEUVVGRExFTkJRVU03UzBGRGVrSTdTVUZKUkN4UFFVRlBMRTFCUVUwc1EwRkJRenRSUVVOYUxITkNRVUZ6UWl4RFFVRkRMRlZCUVZVc1EwRkJRenRSUVVOc1F5eEpRVUZCTEhkQ1FVRmhMRVZCUVVNc1NVRkJTU3hGUVVGRkxFOUJRVThzUlVGQlJTeExRVUZMTEVWQlFVVXNTVUZCU1N4RFFVRkRPMHRCUXpGRExFTkJRVU1zUTBGQlF6dEJRVU5NTEVOQlFVTTdRVUZGUkN4VFFVRm5RaXhwUWtGQmFVSXNRMEZETDBJc1NVRkJNa0lzUlVGRE0wSXNUMEZCTkVJc1JVRkROVUlzUzBGQmIwSXNSVUZEY0VJc1NVRkJkVUk3U1VGRmRrSXNUVUZCVFN4TlFVRk5MRWRCUVVjc1NVRkJTU3hEUVVGRExGRkJRVkVzUlVGQlJTeERRVUZETzBsQlF5OUNMRTFCUVUwc1pVRkJaU3hIUVVGSExFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXp0SlFVVnlReXhKUVVGSkxHVkJRV1VzUlVGQlJUdFJRVU51UWl4UFFVRlBMSGRDUVVGM1FpeERRVUZETEVsQlFVa3NSVUZCUlN4UFFVRlBMRVZCUVVVc1MwRkJTeXhGUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZETzB0QlF6ZEVPMGxCUlVRc1RVRkJUU3hYUVVGWExFZEJRVWNzVFVGQlRTeERRVUZETEVsQlFXZERMRU5CUVVNN1NVRkpOVVFzVFVGQlRTeHRRa0ZCYlVJc1IwRkJSeXhYUVVGWExFbEJRVWtzU1VGQlFTeGxRVUZQTEVWQlFVTXNWMEZCVnl4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8wbEJRM3BGTEUxQlFVMHNjMEpCUVhOQ0xFZEJRekZDTEUxQlFVMHNRMEZCUXl4dlFrRkJiMElzU1VGQlNTeERRVUZETEcxQ1FVRnRRaXhEUVVGRExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRkZCUVZFc1EwRkJRenRKUVVWNFJTeFBRVUZQTzFGQlEwd3NjMEpCUVhOQ08xRkJRM1JDTEhGQ1FVRnhRaXhEUVVOdVFpeEpRVUUyUWl4RlFVTTNRaXhKUVVGSkxFTkJRVU1zYlVKQlFXMUNMRVZCUTNoQ0xFbEJRVWtzUTBGQlF5eHZRa0ZCYjBJc1EwRkRNVUk3VVVGRFJDeE5RVUZOTEVOQlFVTTdXVUZEVEN4elFrRkJjMElzUTBGQlF5eE5RVUZOTEVOQlFVTTdXVUZET1VJc1NVRkJRU3gzUWtGQllTeEZRVUZETEVsQlFVa3NSVUZCUlN4UFFVRlBMRVZCUVVVc1MwRkJTeXhGUVVGRkxFbEJRVWtzUTBGQlF6dFRRVU14UXl4RFFVRkRPMHRCUTBnc1EwRkJRenRCUVVOS0xFTkJRVU03UVVGcVEwUXNPRU5CYVVORE8wRkJSVVFzVTBGQlV5eG5SRUZCWjBRc1EwRkRka1FzU1VGQk9FSTdTVUZGT1VJc1VVRkJVU3hKUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTzFGQlEycENMRXRCUVVzc2FVSkJRVk1zUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXp0WlFVTjRRaXhQUVVGUExFTkJRMHdzUTBGQlF5eGxRVUZsTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1NVRkJRU3cwUTBGQmIwTXNSVUZCUXl4SlFVRkpMRU5CUVVNc1EwRkRja1VzUTBGQlF6dFRRVU5JTzFGQlEwUXNTMEZCU3l4cFFrRkJVeXhEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZETzFsQlF6TkNMRTlCUVU4c1EwRkRUQ3hEUVVGRExHVkJRV1VzUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCZDBJc1EwRkJRenRuUWtGREwwTXNTVUZCUVN3MFEwRkJiME1zUlVGQlF5eEpRVUZKTEVOQlFVTXNRMEZETTBNc1EwRkJRenRUUVVOSU8xRkJRMFFzVDBGQlR5eERRVUZETEVOQlFVTTdXVUZEVUN4UFFVRlBMRWxCUVVFc2JVSkJRVmNzUlVGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0VFFVTXhRanRMUVVOR08wRkJRMGdzUTBGQlF6dEJRVVZFTEZOQlFWTXNhVVJCUVdsRUxFTkJRM2hFTEVsQlFUaENPMGxCUlRsQ0xGRkJRVkVzU1VGQlNTeERRVUZETEVsQlFVa3NSVUZCUlR0UlFVTnFRaXhMUVVGTExHbENRVUZUTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNN1dVRkRlRUlzU1VGQlNTeEpRVUZCTEcxQ1FVRmhMRVZCUVVNc1NVRkJTU3hEUVVGRExFVkJRVVU3WjBKQlEzWkNMRTlCUVU4c1owUkJRV2RFTEVOQlEzSkVMRWxCUVVrc1EwRkJReXhWUVVFeVFpeERRVU5xUXl4RFFVRkRPMkZCUTBnN1dVRkZSQ3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNSVUZCUlR0blFrRkRiRUlzVDBGQlR5eEpRVUZCTERaRFFVRnhReXhGUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzJGQlEzQkVPMWxCUlVRc1QwRkJUeXhKUVVGQkxHVkJRVThzUlVGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRPMmRDUVVNelFpeERRVUZETEVOQlFVTXNTVUZCUVN3MlEwRkJjVU1zUlVGQlF5eEpRVUZKTEVOQlFVTTdaMEpCUXpkRExFTkJRVU1zUTBGQlF5eEpRVUZCTERSRFFVRnZReXhGUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZYTEVOQlFVTXNRMEZCUXp0VFFVTTFSRHRSUVVWRUxFdEJRVXNzYVVKQlFWTXNRMEZCUXl4WlFVRlpMRU5CUVVNc1EwRkJRenRaUVVNelFpeEpRVUZKTEdWQlFXVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJkMElzUTBGQlF5eEZRVUZGTzJkQ1FVTnNSQ3hQUVVGUExFdEJRVXNzUTBGQlF6dGhRVU5rTzFsQlJVUXNUMEZCVHl4SlFVRkpMRU5CUVVNc1ZVRkJWVHRuUWtGRGNFSXNRMEZCUXl4RFFVRkRMRWxCUVVFc05FTkJRVzlETEVWQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJRenRuUWtGRGRrUXNRMEZCUXl4RFFVRkRMRWxCUVVFc05rTkJRWEZETEVWQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1UwRkRha1E3VVVGRlJDeFBRVUZQTEVOQlFVTXNRMEZCUXp0WlFVTlFMRTlCUVU4c1NVRkJRU3h0UWtGQlZ5eEZRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMU5CUXpGQ08wdEJRMFk3UVVGRFNDeERRVUZETzBGQlJVUXNVMEZCVXl3NFEwRkJPRU1zUTBGQlF5eEpRVUZsTzBsQlEzSkZMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeEZRVUZGTzFGQlEyeENMRTFCUVUwc1NVRkJTU3hMUVVGTExFTkJRMklzYVVkQlFXbEhMRU5CUTJ4SExFTkJRVU03UzBGRFNEdFRRVUZOTEVsQlFVa3NaVUZCWlN4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRk8xRkJRMmhETEU5QlFVOHNTMEZCU3l4RFFVRkRPMHRCUTJRN1UwRkJUU3hKUVVGSkxFbEJRVUVzYlVKQlFXRXNSVUZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSVHRSUVVNNVFpeFBRVUZQTEVsQlFVRXNOa05CUVhGRExFVkJRVU1zU1VGQlNTeERRVUZETEZOQlFWVXNRMEZCUXl4RFFVRkRPMHRCUXk5RU8xTkJRVTBzU1VGQlNTeEpRVUZCTEdWQlFVOHNSVUZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFVkJRVVU3VVVGRGFrTXNUMEZCVHl4SlFVRkJMRFpEUVVGeFF5eEZRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMHRCUTNCRU8xTkJRVTA3VVVGRFRDeFBRVUZQTEVsQlFVRXNOa05CUVhGRExFVkJRVU1zU1VGQlNTeERRVUZETEZOQlFWVXNRMEZCUXl4RFFVRkRPMHRCUXk5RU8wRkJRMGdzUTBGQlF6dEJRVVZFTEZOQlFWTXNVVUZCVVN4RFFVRkRMRWRCUVZVN1NVRkRNVUlzVDBGQlR5eEhRVUZITEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETEV0QlFVc3NSVUZCUlN4RFFVRkRMRU5CUVVNN1FVRkRja01zUTBGQlF5SjkiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0Tm9kZUNvbnRlbnQgPSBleHBvcnRzLnByaW50T3BlbmluZ1RhZ0VuZE1hcmtlciA9IGV4cG9ydHMucHJpbnRPcGVuaW5nVGFnU3RhcnRNYXJrZXIgPSBleHBvcnRzLnByaW50T3BlbmluZ1RhZ1ByZWZpeCA9IGV4cG9ydHMucHJpbnRPcGVuaW5nVGFnU3RhcnQgPSBleHBvcnRzLnByaW50T3BlbmluZ1RhZyA9IGV4cG9ydHMubmVlZHNUb0JvcnJvd1BhcmVudE9wZW5pbmdUYWdFbmRNYXJrZXIgPSBleHBvcnRzLm5lZWRzVG9Cb3Jyb3dOZXh0T3BlbmluZ1RhZ1N0YXJ0TWFya2VyID0gZXhwb3J0cy5uZWVkc1RvQm9ycm93UGFyZW50Q2xvc2luZ1RhZ1N0YXJ0TWFya2VyID0gZXhwb3J0cy5uZWVkc1RvQm9ycm93TGFzdENoaWxkQ2xvc2luZ1RhZ0VuZE1hcmtlciA9IGV4cG9ydHMubmVlZHNUb0JvcnJvd1ByZXZDbG9zaW5nVGFnRW5kTWFya2VyID0gZXhwb3J0cy5wcmludENsb3NpbmdUYWdFbmRNYXJrZXIgPSBleHBvcnRzLnByaW50Q2xvc2luZ1RhZ1N0YXJ0TWFya2VyID0gZXhwb3J0cy5wcmludENsb3NpbmdUYWdTdWZmaXggPSBleHBvcnRzLnByaW50Q2xvc2luZ1RhZ0VuZCA9IGV4cG9ydHMucHJpbnRDbG9zaW5nVGFnU3RhcnQgPSBleHBvcnRzLnByaW50Q2xvc2luZ1RhZyA9IHZvaWQgMDtcbmNvbnN0IHByZXR0aWVyXzEgPSByZXF1aXJlKFwicHJldHRpZXJcIik7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4uLy4uL3R5cGVzXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi9wcmludGVyL3V0aWxzXCIpO1xuY29uc3QgeyBidWlsZGVyczogeyBicmVha1BhcmVudCwgaW5kZW50LCBqb2luLCBsaW5lLCBzb2Z0bGluZSwgaGFyZGxpbmUgfSwgfSA9IHByZXR0aWVyXzEuZG9jO1xuY29uc3QgeyByZXBsYWNlVGV4dEVuZE9mTGluZSB9ID0gcHJldHRpZXJfMS5kb2MudXRpbHM7XG5mdW5jdGlvbiBwcmludENsb3NpbmdUYWcobm9kZSwgb3B0aW9ucykge1xuICAgIHJldHVybiBbXG4gICAgICAgICgwLCB1dGlsc18xLmhhc05vQ2xvc2VNYXJrZXIpKG5vZGUpID8gJycgOiBwcmludENsb3NpbmdUYWdTdGFydChub2RlLCBvcHRpb25zKSxcbiAgICAgICAgcHJpbnRDbG9zaW5nVGFnRW5kKG5vZGUsIG9wdGlvbnMpLFxuICAgIF07XG59XG5leHBvcnRzLnByaW50Q2xvc2luZ1RhZyA9IHByaW50Q2xvc2luZ1RhZztcbmZ1bmN0aW9uIHByaW50Q2xvc2luZ1RhZ1N0YXJ0KG5vZGUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbm9kZS5sYXN0Q2hpbGQgJiZcbiAgICAgICAgbmVlZHNUb0JvcnJvd1BhcmVudENsb3NpbmdUYWdTdGFydE1hcmtlcihub2RlLmxhc3RDaGlsZClcbiAgICAgICAgPyAnJ1xuICAgICAgICA6IFtcbiAgICAgICAgICAgIHByaW50Q2xvc2luZ1RhZ1ByZWZpeChub2RlLCBvcHRpb25zKSxcbiAgICAgICAgICAgIHByaW50Q2xvc2luZ1RhZ1N0YXJ0TWFya2VyKG5vZGUsIG9wdGlvbnMpLFxuICAgICAgICBdO1xufVxuZXhwb3J0cy5wcmludENsb3NpbmdUYWdTdGFydCA9IHByaW50Q2xvc2luZ1RhZ1N0YXJ0O1xuZnVuY3Rpb24gcHJpbnRDbG9zaW5nVGFnRW5kKG5vZGUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gKG5vZGUubmV4dFxuICAgICAgICA/IG5lZWRzVG9Cb3Jyb3dQcmV2Q2xvc2luZ1RhZ0VuZE1hcmtlcihub2RlLm5leHQpXG4gICAgICAgIDogbmVlZHNUb0JvcnJvd0xhc3RDaGlsZENsb3NpbmdUYWdFbmRNYXJrZXIobm9kZS5wYXJlbnROb2RlKSlcbiAgICAgICAgPyAnJ1xuICAgICAgICA6IFtcbiAgICAgICAgICAgIHByaW50Q2xvc2luZ1RhZ0VuZE1hcmtlcihub2RlLCBvcHRpb25zKSxcbiAgICAgICAgICAgIHByaW50Q2xvc2luZ1RhZ1N1ZmZpeChub2RlLCBvcHRpb25zKSxcbiAgICAgICAgXTtcbn1cbmV4cG9ydHMucHJpbnRDbG9zaW5nVGFnRW5kID0gcHJpbnRDbG9zaW5nVGFnRW5kO1xuZnVuY3Rpb24gcHJpbnRDbG9zaW5nVGFnUHJlZml4KG5vZGUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmVlZHNUb0JvcnJvd0xhc3RDaGlsZENsb3NpbmdUYWdFbmRNYXJrZXIobm9kZSlcbiAgICAgICAgPyBwcmludENsb3NpbmdUYWdFbmRNYXJrZXIobm9kZS5sYXN0Q2hpbGQsIG9wdGlvbnMpXG4gICAgICAgIDogJyc7XG59XG5mdW5jdGlvbiBwcmludENsb3NpbmdUYWdTdWZmaXgobm9kZSwgb3B0aW9ucykge1xuICAgIHJldHVybiBuZWVkc1RvQm9ycm93UGFyZW50Q2xvc2luZ1RhZ1N0YXJ0TWFya2VyKG5vZGUpXG4gICAgICAgID8gcHJpbnRDbG9zaW5nVGFnU3RhcnRNYXJrZXIobm9kZS5wYXJlbnROb2RlLCBvcHRpb25zKVxuICAgICAgICA6IG5lZWRzVG9Cb3Jyb3dOZXh0T3BlbmluZ1RhZ1N0YXJ0TWFya2VyKG5vZGUpXG4gICAgICAgICAgICA/IHByaW50T3BlbmluZ1RhZ1N0YXJ0TWFya2VyKG5vZGUubmV4dClcbiAgICAgICAgICAgIDogJyc7XG59XG5leHBvcnRzLnByaW50Q2xvc2luZ1RhZ1N1ZmZpeCA9IHByaW50Q2xvc2luZ1RhZ1N1ZmZpeDtcbmZ1bmN0aW9uIHByaW50Q2xvc2luZ1RhZ1N0YXJ0TWFya2VyKG5vZGUsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW5vZGUpXG4gICAgICAgIHJldHVybiAnJztcbiAgICBpZiAoc2hvdWxkTm90UHJpbnRDbG9zaW5nVGFnKG5vZGUsIG9wdGlvbnMpKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgc3dpdGNoIChub2RlLnR5cGUpIHtcbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5IdG1sRWxlbWVudDpcbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5IdG1sUmF3Tm9kZTpcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygbm9kZS5uYW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBgPC97eyAke25vZGUubmFtZS5tYXJrdXAudHJpbSgpfSB9fWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYDwvJHtub2RlLm5hbWV9YDtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICB9XG59XG5leHBvcnRzLnByaW50Q2xvc2luZ1RhZ1N0YXJ0TWFya2VyID0gcHJpbnRDbG9zaW5nVGFnU3RhcnRNYXJrZXI7XG5mdW5jdGlvbiBwcmludENsb3NpbmdUYWdFbmRNYXJrZXIobm9kZSwgb3B0aW9ucykge1xuICAgIGlmICghbm9kZSlcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIGlmIChzaG91bGROb3RQcmludENsb3NpbmdUYWcobm9kZSwgb3B0aW9ucykpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxTZWxmQ2xvc2luZ0VsZW1lbnQ6IHtcbiAgICAgICAgICAgIHJldHVybiAnLz4nO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gJz4nO1xuICAgIH1cbn1cbmV4cG9ydHMucHJpbnRDbG9zaW5nVGFnRW5kTWFya2VyID0gcHJpbnRDbG9zaW5nVGFnRW5kTWFya2VyO1xuZnVuY3Rpb24gc2hvdWxkTm90UHJpbnRDbG9zaW5nVGFnKG5vZGUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gKCEoMCwgdXRpbHNfMS5oYXNOb0Nsb3NlTWFya2VyKShub2RlKSAmJlxuICAgICAgICAhbm9kZS5ibG9ja0VuZFBvc2l0aW9uICYmXG4gICAgICAgICgoMCwgdXRpbHNfMS5oYXNQcmV0dGllcklnbm9yZSkobm9kZSkgfHxcbiAgICAgICAgICAgICgwLCB1dGlsc18xLnNob3VsZFByZXNlcnZlQ29udGVudCkobm9kZS5wYXJlbnROb2RlLCBvcHRpb25zKSkpO1xufVxuZnVuY3Rpb24gbmVlZHNUb0JvcnJvd1ByZXZDbG9zaW5nVGFnRW5kTWFya2VyKG5vZGUpIHtcbiAgICByZXR1cm4gKCEoMCwgdXRpbHNfMS5pc0xpcXVpZE5vZGUpKG5vZGUpICYmXG4gICAgICAgIG5vZGUucHJldiAmJlxuICAgICAgICAoMCwgdXRpbHNfMS5pc0h0bWxOb2RlKShub2RlLnByZXYpICYmXG4gICAgICAgICgwLCB1dGlsc18xLmhhc01lYW5pbmdmdWxMYWNrT2ZMZWFkaW5nV2hpdGVzcGFjZSkobm9kZSkpO1xufVxuZXhwb3J0cy5uZWVkc1RvQm9ycm93UHJldkNsb3NpbmdUYWdFbmRNYXJrZXIgPSBuZWVkc1RvQm9ycm93UHJldkNsb3NpbmdUYWdFbmRNYXJrZXI7XG5mdW5jdGlvbiBuZWVkc1RvQm9ycm93TGFzdENoaWxkQ2xvc2luZ1RhZ0VuZE1hcmtlcihub2RlKSB7XG4gICAgcmV0dXJuICgoMCwgdXRpbHNfMS5pc0h0bWxOb2RlKShub2RlKSAmJlxuICAgICAgICBub2RlLmxhc3RDaGlsZCAmJlxuICAgICAgICAoMCwgdXRpbHNfMS5oYXNNZWFuaW5nZnVsTGFja09mVHJhaWxpbmdXaGl0ZXNwYWNlKShub2RlLmxhc3RDaGlsZCkgJiZcbiAgICAgICAgKDAsIHV0aWxzXzEuaXNIdG1sTm9kZSkoKDAsIHV0aWxzXzEuZ2V0TGFzdERlc2NlbmRhbnQpKG5vZGUubGFzdENoaWxkKSkgJiZcbiAgICAgICAgISgwLCB1dGlsc18xLmlzUHJlTGlrZU5vZGUpKG5vZGUpKTtcbn1cbmV4cG9ydHMubmVlZHNUb0JvcnJvd0xhc3RDaGlsZENsb3NpbmdUYWdFbmRNYXJrZXIgPSBuZWVkc1RvQm9ycm93TGFzdENoaWxkQ2xvc2luZ1RhZ0VuZE1hcmtlcjtcbmZ1bmN0aW9uIG5lZWRzVG9Cb3Jyb3dQYXJlbnRDbG9zaW5nVGFnU3RhcnRNYXJrZXIobm9kZSkge1xuICAgIHJldHVybiAoKDAsIHV0aWxzXzEuaXNIdG1sTm9kZSkobm9kZS5wYXJlbnROb2RlKSAmJlxuICAgICAgICAhbm9kZS5uZXh0ICYmXG4gICAgICAgICgwLCB1dGlsc18xLmhhc01lYW5pbmdmdWxMYWNrT2ZUcmFpbGluZ1doaXRlc3BhY2UpKG5vZGUpICYmXG4gICAgICAgICEoMCwgdXRpbHNfMS5pc0xpcXVpZE5vZGUpKG5vZGUpICYmXG4gICAgICAgICgoMCwgdXRpbHNfMS5pc1RleHRMaWtlTm9kZSkoKDAsIHV0aWxzXzEuZ2V0TGFzdERlc2NlbmRhbnQpKG5vZGUpKSB8fFxuICAgICAgICAgICAgKDAsIHV0aWxzXzEuaXNMaXF1aWROb2RlKSgoMCwgdXRpbHNfMS5nZXRMYXN0RGVzY2VuZGFudCkobm9kZSkpKSk7XG59XG5leHBvcnRzLm5lZWRzVG9Cb3Jyb3dQYXJlbnRDbG9zaW5nVGFnU3RhcnRNYXJrZXIgPSBuZWVkc1RvQm9ycm93UGFyZW50Q2xvc2luZ1RhZ1N0YXJ0TWFya2VyO1xuZnVuY3Rpb24gbmVlZHNUb0JvcnJvd05leHRPcGVuaW5nVGFnU3RhcnRNYXJrZXIobm9kZSkge1xuICAgIHJldHVybiAobm9kZS5uZXh0ICYmXG4gICAgICAgICgwLCB1dGlsc18xLmlzSHRtbE5vZGUpKG5vZGUubmV4dCkgJiZcbiAgICAgICAgKDAsIHV0aWxzXzEuaXNUZXh0TGlrZU5vZGUpKG5vZGUpICYmXG4gICAgICAgICgwLCB1dGlsc18xLmhhc01lYW5pbmdmdWxMYWNrT2ZUcmFpbGluZ1doaXRlc3BhY2UpKG5vZGUpKTtcbn1cbmV4cG9ydHMubmVlZHNUb0JvcnJvd05leHRPcGVuaW5nVGFnU3RhcnRNYXJrZXIgPSBuZWVkc1RvQm9ycm93TmV4dE9wZW5pbmdUYWdTdGFydE1hcmtlcjtcbmZ1bmN0aW9uIGdldFByZXR0aWVySWdub3JlQXR0cmlidXRlQ29tbWVudERhdGEodmFsdWUpIHtcbiAgICBjb25zdCBtYXRjaCA9IHZhbHVlLnRyaW0oKS5tYXRjaCgvXnByZXR0aWVyLWlnbm9yZS1hdHRyaWJ1dGUoPzpcXHMrKC4rKSk/JC9zKTtcbiAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFtYXRjaFsxXSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIG1hdGNoWzFdLnNwbGl0KC9cXHMrLyk7XG59XG5mdW5jdGlvbiBuZWVkc1RvQm9ycm93UGFyZW50T3BlbmluZ1RhZ0VuZE1hcmtlcihub2RlKSB7XG4gICAgcmV0dXJuICgoMCwgdXRpbHNfMS5pc0h0bWxOb2RlKShub2RlLnBhcmVudE5vZGUpICYmXG4gICAgICAgICFub2RlLnByZXYgJiZcbiAgICAgICAgKDAsIHV0aWxzXzEuaGFzTWVhbmluZ2Z1bExhY2tPZkxlYWRpbmdXaGl0ZXNwYWNlKShub2RlKSAmJlxuICAgICAgICAhKDAsIHV0aWxzXzEuaXNMaXF1aWROb2RlKShub2RlKSk7XG59XG5leHBvcnRzLm5lZWRzVG9Cb3Jyb3dQYXJlbnRPcGVuaW5nVGFnRW5kTWFya2VyID0gbmVlZHNUb0JvcnJvd1BhcmVudE9wZW5pbmdUYWdFbmRNYXJrZXI7XG5mdW5jdGlvbiBwcmludEF0dHJpYnV0ZXMocGF0aCwgb3B0aW9ucywgcHJpbnQpIHtcbiAgICBjb25zdCBub2RlID0gcGF0aC5nZXRWYWx1ZSgpO1xuICAgIGNvbnN0IHsgbG9jU3RhcnQsIGxvY0VuZCB9ID0gb3B0aW9ucztcbiAgICBpZiAoKDAsIHV0aWxzXzEuaXNIdG1sQ29tbWVudCkobm9kZSkpXG4gICAgICAgIHJldHVybiAnJztcbiAgICBpZiAoISgwLCB1dGlsc18xLmlzTm9uRW1wdHlBcnJheSkobm9kZS5hdHRyaWJ1dGVzKSkge1xuICAgICAgICByZXR1cm4gKDAsIHV0aWxzXzEuaXNTZWxmQ2xvc2luZykobm9kZSlcbiAgICAgICAgICAgID9cbiAgICAgICAgICAgICAgICAnICdcbiAgICAgICAgICAgIDogJyc7XG4gICAgfVxuICAgIGNvbnN0IGlnbm9yZUF0dHJpYnV0ZURhdGEgPSBub2RlLnByZXYgJiZcbiAgICAgICAgbm9kZS5wcmV2LnR5cGUgPT09IHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxDb21tZW50ICYmXG4gICAgICAgIGdldFByZXR0aWVySWdub3JlQXR0cmlidXRlQ29tbWVudERhdGEobm9kZS5wcmV2LmJvZHkpO1xuICAgIGNvbnN0IGhhc1ByZXR0aWVySWdub3JlQXR0cmlidXRlID0gdHlwZW9mIGlnbm9yZUF0dHJpYnV0ZURhdGEgPT09ICdib29sZWFuJ1xuICAgICAgICA/ICgpID0+IGlnbm9yZUF0dHJpYnV0ZURhdGFcbiAgICAgICAgOiBBcnJheS5pc0FycmF5KGlnbm9yZUF0dHJpYnV0ZURhdGEpXG4gICAgICAgICAgICA/IChhdHRyaWJ1dGUpID0+IGlnbm9yZUF0dHJpYnV0ZURhdGEuaW5jbHVkZXMoYXR0cmlidXRlLnJhd05hbWUpXG4gICAgICAgICAgICA6ICgpID0+IGZhbHNlO1xuICAgIGNvbnN0IHByaW50ZWRBdHRyaWJ1dGVzID0gcGF0aC5tYXAoKGF0dHJpYnV0ZVBhdGgpID0+IHtcbiAgICAgICAgY29uc3QgYXR0cmlidXRlID0gYXR0cmlidXRlUGF0aC5nZXRWYWx1ZSgpO1xuICAgICAgICByZXR1cm4gaGFzUHJldHRpZXJJZ25vcmVBdHRyaWJ1dGUoYXR0cmlidXRlKVxuICAgICAgICAgICAgPyByZXBsYWNlVGV4dEVuZE9mTGluZShvcHRpb25zLm9yaWdpbmFsVGV4dC5zbGljZShsb2NTdGFydChhdHRyaWJ1dGUpLCBsb2NFbmQoYXR0cmlidXRlKSkpXG4gICAgICAgICAgICA6IHByaW50KGF0dHJpYnV0ZVBhdGgpO1xuICAgIH0sICdhdHRyaWJ1dGVzJyk7XG4gICAgY29uc3QgZm9yY2VOb3RUb0JyZWFrQXR0ckNvbnRlbnQgPSAob3B0aW9ucy5zaW5nbGVMaW5lTGlua1RhZ3MgJiZcbiAgICAgICAgdHlwZW9mIG5vZGUubmFtZSA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgbm9kZS5uYW1lID09PSAnbGluaycpIHx8XG4gICAgICAgICgoKDAsIHV0aWxzXzEuaXNTZWxmQ2xvc2luZykobm9kZSkgfHxcbiAgICAgICAgICAgICgwLCB1dGlsc18xLmlzVm9pZEVsZW1lbnQpKG5vZGUpIHx8XG4gICAgICAgICAgICAoKDAsIHV0aWxzXzEuaXNIdG1sRWxlbWVudCkobm9kZSkgJiYgbm9kZS5jaGlsZHJlbi5sZW5ndGggPiAwKSkgJiZcbiAgICAgICAgICAgIG5vZGUuYXR0cmlidXRlcyAmJlxuICAgICAgICAgICAgbm9kZS5hdHRyaWJ1dGVzLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgICAgICAgISgwLCB1dGlsc18xLmlzTXVsdGlsaW5lTGlxdWlkVGFnKShub2RlLmF0dHJpYnV0ZXNbMF0pKTtcbiAgICBjb25zdCBmb3JjZUJyZWFrQXR0ckNvbnRlbnQgPSBub2RlLnNvdXJjZVxuICAgICAgICAuc2xpY2Uobm9kZS5ibG9ja1N0YXJ0UG9zaXRpb24uc3RhcnQsIG5vZGUuYmxvY2tTdGFydFBvc2l0aW9uLmVuZClcbiAgICAgICAgLmluZGV4T2YoJ1xcbicpICE9PSAtMTtcbiAgICBjb25zdCBhdHRyaWJ1dGVMaW5lID0gZm9yY2VOb3RUb0JyZWFrQXR0ckNvbnRlbnRcbiAgICAgICAgPyAnICdcbiAgICAgICAgOiBvcHRpb25zLnNpbmdsZUF0dHJpYnV0ZVBlckxpbmUgJiYgbm9kZS5hdHRyaWJ1dGVzLmxlbmd0aCA+IDFcbiAgICAgICAgICAgID8gaGFyZGxpbmVcbiAgICAgICAgICAgIDogbGluZTtcbiAgICBjb25zdCBwYXJ0cyA9IFtcbiAgICAgICAgaW5kZW50KFtcbiAgICAgICAgICAgIGZvcmNlTm90VG9CcmVha0F0dHJDb250ZW50ID8gJyAnIDogbGluZSxcbiAgICAgICAgICAgIGZvcmNlQnJlYWtBdHRyQ29udGVudCA/IGJyZWFrUGFyZW50IDogJycsXG4gICAgICAgICAgICBqb2luKGF0dHJpYnV0ZUxpbmUsIHByaW50ZWRBdHRyaWJ1dGVzKSxcbiAgICAgICAgXSksXG4gICAgXTtcbiAgICBpZiAoKG5vZGUuZmlyc3RDaGlsZCAmJlxuICAgICAgICBuZWVkc1RvQm9ycm93UGFyZW50T3BlbmluZ1RhZ0VuZE1hcmtlcihub2RlLmZpcnN0Q2hpbGQpKSB8fFxuICAgICAgICAoKDAsIHV0aWxzXzEuaGFzTm9DbG9zZU1hcmtlcikobm9kZSkgJiZcbiAgICAgICAgICAgIG5lZWRzVG9Cb3Jyb3dMYXN0Q2hpbGRDbG9zaW5nVGFnRW5kTWFya2VyKG5vZGUucGFyZW50Tm9kZSkpIHx8XG4gICAgICAgIGZvcmNlTm90VG9CcmVha0F0dHJDb250ZW50KSB7XG4gICAgICAgIHBhcnRzLnB1c2goKDAsIHV0aWxzXzEuaXNTZWxmQ2xvc2luZykobm9kZSkgPyAnICcgOiAnJyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBwYXJ0cy5wdXNoKG9wdGlvbnMuYnJhY2tldFNhbWVMaW5lXG4gICAgICAgICAgICA/ICgwLCB1dGlsc18xLmlzU2VsZkNsb3NpbmcpKG5vZGUpXG4gICAgICAgICAgICAgICAgPyAnICdcbiAgICAgICAgICAgICAgICA6ICcnXG4gICAgICAgICAgICA6ICgwLCB1dGlsc18xLmlzU2VsZkNsb3NpbmcpKG5vZGUpXG4gICAgICAgICAgICAgICAgPyBsaW5lXG4gICAgICAgICAgICAgICAgOiBzb2Z0bGluZSk7XG4gICAgfVxuICAgIHJldHVybiBwYXJ0cztcbn1cbmZ1bmN0aW9uIHByaW50T3BlbmluZ1RhZ0VuZChub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUuZmlyc3RDaGlsZCAmJlxuICAgICAgICBuZWVkc1RvQm9ycm93UGFyZW50T3BlbmluZ1RhZ0VuZE1hcmtlcihub2RlLmZpcnN0Q2hpbGQpXG4gICAgICAgID8gJydcbiAgICAgICAgOiBwcmludE9wZW5pbmdUYWdFbmRNYXJrZXIobm9kZSk7XG59XG5mdW5jdGlvbiBwcmludE9wZW5pbmdUYWcocGF0aCwgb3B0aW9ucywgcHJpbnQpIHtcbiAgICBjb25zdCBub2RlID0gcGF0aC5nZXRWYWx1ZSgpO1xuICAgIHJldHVybiBbXG4gICAgICAgIHByaW50T3BlbmluZ1RhZ1N0YXJ0KG5vZGUsIG9wdGlvbnMpLFxuICAgICAgICBwcmludEF0dHJpYnV0ZXMocGF0aCwgb3B0aW9ucywgcHJpbnQpLFxuICAgICAgICAoMCwgdXRpbHNfMS5oYXNOb0Nsb3NlTWFya2VyKShub2RlKSA/ICcnIDogcHJpbnRPcGVuaW5nVGFnRW5kKG5vZGUpLFxuICAgIF07XG59XG5leHBvcnRzLnByaW50T3BlbmluZ1RhZyA9IHByaW50T3BlbmluZ1RhZztcbmZ1bmN0aW9uIHByaW50T3BlbmluZ1RhZ1N0YXJ0KG5vZGUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbm9kZS5wcmV2ICYmIG5lZWRzVG9Cb3Jyb3dOZXh0T3BlbmluZ1RhZ1N0YXJ0TWFya2VyKG5vZGUucHJldilcbiAgICAgICAgPyAnJ1xuICAgICAgICA6IFtwcmludE9wZW5pbmdUYWdQcmVmaXgobm9kZSwgb3B0aW9ucyksIHByaW50T3BlbmluZ1RhZ1N0YXJ0TWFya2VyKG5vZGUpXTtcbn1cbmV4cG9ydHMucHJpbnRPcGVuaW5nVGFnU3RhcnQgPSBwcmludE9wZW5pbmdUYWdTdGFydDtcbmZ1bmN0aW9uIHByaW50T3BlbmluZ1RhZ1ByZWZpeChub2RlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIG5lZWRzVG9Cb3Jyb3dQYXJlbnRPcGVuaW5nVGFnRW5kTWFya2VyKG5vZGUpXG4gICAgICAgID8gcHJpbnRPcGVuaW5nVGFnRW5kTWFya2VyKG5vZGUucGFyZW50Tm9kZSlcbiAgICAgICAgOiBuZWVkc1RvQm9ycm93UHJldkNsb3NpbmdUYWdFbmRNYXJrZXIobm9kZSlcbiAgICAgICAgICAgID8gcHJpbnRDbG9zaW5nVGFnRW5kTWFya2VyKG5vZGUucHJldiwgb3B0aW9ucylcbiAgICAgICAgICAgIDogJyc7XG59XG5leHBvcnRzLnByaW50T3BlbmluZ1RhZ1ByZWZpeCA9IHByaW50T3BlbmluZ1RhZ1ByZWZpeDtcbmZ1bmN0aW9uIHByaW50T3BlbmluZ1RhZ1N0YXJ0TWFya2VyKG5vZGUpIHtcbiAgICBpZiAoIW5vZGUpXG4gICAgICAgIHJldHVybiAnJztcbiAgICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxDb21tZW50OlxuICAgICAgICAgICAgcmV0dXJuICc8IS0tJztcbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5IdG1sRWxlbWVudDpcbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5IdG1sU2VsZkNsb3NpbmdFbGVtZW50OlxuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxWb2lkRWxlbWVudDpcbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5IdG1sUmF3Tm9kZTpcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygbm9kZS5uYW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBgPHt7ICR7bm9kZS5uYW1lLm1hcmt1cC50cmltKCl9IH19YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBgPCR7bm9kZS5uYW1lfWA7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxufVxuZXhwb3J0cy5wcmludE9wZW5pbmdUYWdTdGFydE1hcmtlciA9IHByaW50T3BlbmluZ1RhZ1N0YXJ0TWFya2VyO1xuZnVuY3Rpb24gcHJpbnRPcGVuaW5nVGFnRW5kTWFya2VyKG5vZGUpIHtcbiAgICBpZiAoIW5vZGUpXG4gICAgICAgIHJldHVybiAnJztcbiAgICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxDb21tZW50OlxuICAgICAgICAgICAgcmV0dXJuICctLT4nO1xuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxTZWxmQ2xvc2luZ0VsZW1lbnQ6XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuSHRtbFZvaWRFbGVtZW50OlxuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxFbGVtZW50OlxuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxSYXdOb2RlOlxuICAgICAgICAgICAgcmV0dXJuICc+JztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAnPic7XG4gICAgfVxufVxuZXhwb3J0cy5wcmludE9wZW5pbmdUYWdFbmRNYXJrZXIgPSBwcmludE9wZW5pbmdUYWdFbmRNYXJrZXI7XG5mdW5jdGlvbiBnZXROb2RlQ29udGVudChub2RlLCBvcHRpb25zKSB7XG4gICAgbGV0IHN0YXJ0ID0gbm9kZS5ibG9ja1N0YXJ0UG9zaXRpb24uZW5kO1xuICAgIGlmIChub2RlLmZpcnN0Q2hpbGQgJiZcbiAgICAgICAgbmVlZHNUb0JvcnJvd1BhcmVudE9wZW5pbmdUYWdFbmRNYXJrZXIobm9kZS5maXJzdENoaWxkKSkge1xuICAgICAgICBzdGFydCAtPSBwcmludE9wZW5pbmdUYWdFbmRNYXJrZXIobm9kZSkubGVuZ3RoO1xuICAgIH1cbiAgICBsZXQgZW5kID0gbm9kZS5ibG9ja0VuZFBvc2l0aW9uLnN0YXJ0O1xuICAgIGlmIChub2RlLmxhc3RDaGlsZCAmJlxuICAgICAgICBuZWVkc1RvQm9ycm93UGFyZW50Q2xvc2luZ1RhZ1N0YXJ0TWFya2VyKG5vZGUubGFzdENoaWxkKSkge1xuICAgICAgICBlbmQgKz0gcHJpbnRDbG9zaW5nVGFnU3RhcnRNYXJrZXIobm9kZSwgb3B0aW9ucykubGVuZ3RoO1xuICAgIH1cbiAgICBlbHNlIGlmIChub2RlLmxhc3RDaGlsZCAmJlxuICAgICAgICBuZWVkc1RvQm9ycm93TGFzdENoaWxkQ2xvc2luZ1RhZ0VuZE1hcmtlcihub2RlKSkge1xuICAgICAgICBlbmQgLT0gcHJpbnRDbG9zaW5nVGFnRW5kTWFya2VyKG5vZGUubGFzdENoaWxkLCBvcHRpb25zKS5sZW5ndGg7XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zLm9yaWdpbmFsVGV4dC5zbGljZShzdGFydCwgZW5kKTtcbn1cbmV4cG9ydHMuZ2V0Tm9kZUNvbnRlbnQgPSBnZXROb2RlQ29udGVudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWRHRm5MbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaUxpNHZMaTR2TGk0dmMzSmpMM0J5YVc1MFpYSXZjSEpwYm5RdmRHRm5MblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3T3p0QlFVRkJMSFZEUVVFMlF6dEJRVU0zUXl4dFEwRlRhVUk3UVVGRGFrSXNNa05CYVVKNVFqdEJRVVY2UWl4TlFVRk5MRVZCUTBvc1VVRkJVU3hGUVVGRkxFVkJRVVVzVjBGQlZ5eEZRVUZGTEUxQlFVMHNSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxGRkJRVkVzUlVGQlJTeFJRVUZSTEVWQlFVVXNSMEZEYkVVc1IwRkJSeXhqUVVGSExFTkJRVU03UVVGRFVpeE5RVUZOTEVWQlFVVXNiMEpCUVc5Q0xFVkJRVVVzUjBGQlJ5eGpRVUZITEVOQlFVTXNTMEZCV1N4RFFVRkRPMEZCUld4RUxGTkJRV2RDTEdWQlFXVXNRMEZETjBJc1NVRkJiMElzUlVGRGNFSXNUMEZCTkVJN1NVRkZOVUlzVDBGQlR6dFJRVU5NTEVsQlFVRXNkMEpCUVdkQ0xFVkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zYjBKQlFXOUNMRU5CUVVNc1NVRkJTU3hGUVVGRkxFOUJRVThzUTBGQlF6dFJRVU5xUlN4clFrRkJhMElzUTBGQlF5eEpRVUZKTEVWQlFVVXNUMEZCVHl4RFFVRkRPMHRCUTJ4RExFTkJRVU03UVVGRFNpeERRVUZETzBGQlVrUXNNRU5CVVVNN1FVRkZSQ3hUUVVGblFpeHZRa0ZCYjBJc1EwRkRiRU1zU1VGQmIwSXNSVUZEY0VJc1QwRkJORUk3U1VGRk5VSXNUMEZCVHl4SlFVRkpMRU5CUVVNc1UwRkJVenRSUVVOdVFpeDNRMEZCZDBNc1EwRkJReXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETzFGQlEzaEVMRU5CUVVNc1EwRkJReXhGUVVGRk8xRkJRMG9zUTBGQlF5eERRVUZETzFsQlEwVXNjVUpCUVhGQ0xFTkJRVU1zU1VGQlNTeEZRVUZGTEU5QlFVOHNRMEZCUXp0WlFVTndReXd3UWtGQk1FSXNRMEZCUXl4SlFVRkpMRVZCUVVVc1QwRkJUeXhEUVVGRE8xTkJRekZETEVOQlFVTTdRVUZEVWl4RFFVRkRPMEZCV0VRc2IwUkJWME03UVVGRlJDeFRRVUZuUWl4clFrRkJhMElzUTBGRGFFTXNTVUZCYjBJc1JVRkRjRUlzVDBGQk5FSTdTVUZGTlVJc1QwRkJUeXhEUVVOTUxFbEJRVWtzUTBGQlF5eEpRVUZKTzFGQlExQXNRMEZCUXl4RFFVRkRMRzlEUVVGdlF5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNN1VVRkRha1FzUTBGQlF5eERRVUZETEhsRFFVRjVReXhEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZYTEVOQlFVTXNRMEZEYUVVN1VVRkRReXhEUVVGRExFTkJRVU1zUlVGQlJUdFJRVU5LTEVOQlFVTXNRMEZCUXp0WlFVTkZMSGRDUVVGM1FpeERRVUZETEVsQlFVa3NSVUZCUlN4UFFVRlBMRU5CUVVNN1dVRkRka01zY1VKQlFYRkNMRU5CUVVNc1NVRkJTU3hGUVVGRkxFOUJRVThzUTBGQlF6dFRRVU55UXl4RFFVRkRPMEZCUTFJc1EwRkJRenRCUVdSRUxHZEVRV05ETzBGQlJVUXNVMEZCVXl4eFFrRkJjVUlzUTBGRE5VSXNTVUZCYjBJc1JVRkRjRUlzVDBGQk5FSTdTVUZGTlVJc1QwRkJUeXg1UTBGQmVVTXNRMEZCUXl4SlFVRkpMRU5CUVVNN1VVRkRjRVFzUTBGQlF5eERRVUZETEhkQ1FVRjNRaXhEUVVGRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVWQlFVVXNUMEZCVHl4RFFVRkRPMUZCUTI1RUxFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTTdRVUZEVkN4RFFVRkRPMEZCUlVRc1UwRkJaMElzY1VKQlFYRkNMRU5CUTI1RExFbEJRVzlDTEVWQlEzQkNMRTlCUVRSQ08wbEJSVFZDTEU5QlFVOHNkME5CUVhkRExFTkJRVU1zU1VGQlNTeERRVUZETzFGQlEyNUVMRU5CUVVNc1EwRkJReXd3UWtGQk1FSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFOUJRVThzUTBGQlF6dFJRVU4wUkN4RFFVRkRMRU5CUVVNc2MwTkJRWE5ETEVOQlFVTXNTVUZCU1N4RFFVRkRPMWxCUXpsRExFTkJRVU1zUTBGQlF5d3dRa0ZCTUVJc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETzFsQlEzWkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU03UVVGRFZDeERRVUZETzBGQlZFUXNjMFJCVTBNN1FVRkZSQ3hUUVVGblFpd3dRa0ZCTUVJc1EwRkRlRU1zU1VGQlowTXNSVUZEYUVNc1QwRkJORUk3U1VGRk5VSXNTVUZCU1N4RFFVRkRMRWxCUVVrN1VVRkJSU3hQUVVGUExFVkJRVVVzUTBGQlF6dEpRVVZ5UWl4SlFVRkpMSGRDUVVGM1FpeERRVUZETEVsQlFVa3NSVUZCUlN4UFFVRlBMRU5CUVVNc1JVRkJSVHRSUVVNelF5eFBRVUZQTEVWQlFVVXNRMEZCUXp0TFFVTllPMGxCUTBRc1VVRkJVU3hKUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTzFGQlIycENMRXRCUVVzc2FVSkJRVk1zUTBGQlF5eFhRVUZYTEVOQlFVTTdVVUZETTBJc1MwRkJTeXhwUWtGQlV5eERRVUZETEZkQlFWYzdXVUZKZUVJc1NVRkJTU3hQUVVGUExFbEJRVWtzUTBGQlF5eEpRVUZKTEV0QlFVc3NVVUZCVVN4RlFVRkZPMmRDUVVOcVF5eFBRVUZQTEZGQlFWRXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zU1VGQlNTeEZRVUZGTEV0QlFVc3NRMEZCUXp0aFFVTTNRenRaUVVORUxFOUJRVThzUzBGQlN5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVNN1VVRkRNVUk3V1VGRFJTeFBRVUZQTEVWQlFVVXNRMEZCUXp0TFFVTmlPMEZCUTBnc1EwRkJRenRCUVhoQ1JDeG5SVUYzUWtNN1FVRkZSQ3hUUVVGblFpeDNRa0ZCZDBJc1EwRkRkRU1zU1VGQlowTXNSVUZEYUVNc1QwRkJORUk3U1VGRk5VSXNTVUZCU1N4RFFVRkRMRWxCUVVrN1VVRkJSU3hQUVVGUExFVkJRVVVzUTBGQlF6dEpRVU55UWl4SlFVRkpMSGRDUVVGM1FpeERRVUZETEVsQlFVa3NSVUZCUlN4UFFVRlBMRU5CUVVNc1JVRkJSVHRSUVVNelF5eFBRVUZQTEVWQlFVVXNRMEZCUXp0TFFVTllPMGxCUlVRc1VVRkJVU3hKUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTzFGQlVXcENMRXRCUVVzc2FVSkJRVk1zUTBGQlF5eHpRa0ZCYzBJc1EwRkJReXhEUVVGRE8xbEJTM0pETEU5QlFVOHNTVUZCU1N4RFFVRkRPMU5CUTJJN1VVRkZSRHRaUVVORkxFOUJRVThzUjBGQlJ5eERRVUZETzB0QlEyUTdRVUZEU0N4RFFVRkRPMEZCTlVKRUxEUkVRVFJDUXp0QlFVVkVMRk5CUVZNc2QwSkJRWGRDTEVOQlF5OUNMRWxCUVc5Q0xFVkJRM0JDTEU5QlFUUkNPMGxCUlRWQ0xFOUJRVThzUTBGRFRDeERRVUZETEVsQlFVRXNkMEpCUVdkQ0xFVkJRVU1zU1VGQlNTeERRVUZETzFGQlEzWkNMRU5CUVVVc1NVRkJXU3hEUVVGRExHZENRVUZuUWp0UlFVTXZRaXhEUVVGRExFbEJRVUVzZVVKQlFXbENMRVZCUVVNc1NVRkJTU3hEUVVGRE8xbEJRM1JDTEVsQlFVRXNOa0pCUVhGQ0xFVkJRVU1zU1VGQlNTeERRVUZETEZWQlFWY3NSVUZCUlN4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVOd1JDeERRVUZETzBGQlEwb3NRMEZCUXp0QlFVVkVMRk5CUVdkQ0xHOURRVUZ2UXl4RFFVRkRMRWxCUVc5Q08wbEJWWFpGTEU5QlFVOHNRMEZEVEN4RFFVRkRMRWxCUVVFc2IwSkJRVmtzUlVGQlF5eEpRVUZKTEVOQlFVTTdVVUZEYmtJc1NVRkJTU3hEUVVGRExFbEJRVWs3VVVGRlZDeEpRVUZCTEd0Q1FVRlZMRVZCUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF6dFJRVU55UWl4SlFVRkJMRFJEUVVGdlF5eEZRVUZETEVsQlFVa3NRMEZCUXl4RFFVTXpReXhEUVVGRE8wRkJRMG9zUTBGQlF6dEJRV3BDUkN4dlJrRnBRa003UVVGRlJDeFRRVUZuUWl4NVEwRkJlVU1zUTBGRGRrUXNTVUZCYjBJN1NVRlRjRUlzVDBGQlR5eERRVU5NTEVsQlFVRXNhMEpCUVZVc1JVRkJReXhKUVVGSkxFTkJRVU03VVVGRGFFSXNTVUZCU1N4RFFVRkRMRk5CUVZNN1VVRkRaQ3hKUVVGQkxEWkRRVUZ4UXl4RlFVRkRMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU03VVVGRGNrUXNTVUZCUVN4clFrRkJWU3hGUVVGRExFbEJRVUVzZVVKQlFXbENMRVZCUVVNc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETzFGQlF6ZERMRU5CUVVNc1NVRkJRU3h4UWtGQllTeEZRVUZETEVsQlFVa3NRMEZCUXl4RFFVTnlRaXhEUVVGRE8wRkJRMG9zUTBGQlF6dEJRV3BDUkN3NFJrRnBRa003UVVGRlJDeFRRVUZuUWl4M1EwRkJkME1zUTBGQlF5eEpRVUZ2UWp0SlFWa3pSU3hQUVVGUExFTkJRMHdzU1VGQlFTeHJRa0ZCVlN4RlFVRkRMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU03VVVGRE0wSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTVHRSUVVOV0xFbEJRVUVzTmtOQlFYRkRMRVZCUVVNc1NVRkJTU3hEUVVGRE8xRkJRek5ETEVOQlFVTXNTVUZCUVN4dlFrRkJXU3hGUVVGRExFbEJRVWtzUTBGQlF6dFJRVU51UWl4RFFVRkRMRWxCUVVFc2MwSkJRV01zUlVGQlF5eEpRVUZCTEhsQ1FVRnBRaXhGUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzFsQlEzUkRMRWxCUVVFc2IwSkJRVmtzUlVGQlF5eEpRVUZCTEhsQ1FVRnBRaXhGUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZEZWtNc1EwRkJRenRCUVVOS0xFTkJRVU03UVVGd1FrUXNORVpCYjBKRE8wRkJSVVFzVTBGQlowSXNjME5CUVhORExFTkJRVU1zU1VGQmIwSTdTVUZOZWtVc1QwRkJUeXhEUVVOTUxFbEJRVWtzUTBGQlF5eEpRVUZKTzFGQlExUXNTVUZCUVN4clFrRkJWU3hGUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTTdVVUZEY2tJc1NVRkJRU3h6UWtGQll5eEZRVUZETEVsQlFVa3NRMEZCUXp0UlFVTndRaXhKUVVGQkxEWkRRVUZ4UXl4RlFVRkRMRWxCUVVrc1EwRkJReXhEUVVNMVF5eERRVUZETzBGQlEwb3NRMEZCUXp0QlFWcEVMSGRHUVZsRE8wRkJSVVFzVTBGQlV5eHhRMEZCY1VNc1EwRkJReXhMUVVGaE8wbEJRekZFTEUxQlFVMHNTMEZCU3l4SFFVRkhMRXRCUVVzc1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF5eExRVUZMTEVOQlFVTXNNRU5CUVRCRExFTkJRVU1zUTBGQlF6dEpRVVUzUlN4SlFVRkpMRU5CUVVNc1MwRkJTeXhGUVVGRk8xRkJRMVlzVDBGQlR5eExRVUZMTEVOQlFVTTdTMEZEWkR0SlFVVkVMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVTdVVUZEWWl4UFFVRlBMRWxCUVVrc1EwRkJRenRMUVVOaU8wbEJSVVFzVDBGQlR5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzBGQlF5OUNMRU5CUVVNN1FVRkZSQ3hUUVVGblFpeHpRMEZCYzBNc1EwRkJReXhKUVVGdlFqdEpRVlY2UlN4UFFVRlBMRU5CUTB3c1NVRkJRU3hyUWtGQlZTeEZRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNN1VVRkRNMElzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1R0UlFVTldMRWxCUVVFc05FTkJRVzlETEVWQlFVTXNTVUZCU1N4RFFVRkRPMUZCUXpGRExFTkJRVU1zU1VGQlFTeHZRa0ZCV1N4RlFVRkRMRWxCUVVrc1EwRkJReXhEUVVOd1FpeERRVUZETzBGQlEwb3NRMEZCUXp0QlFXaENSQ3gzUmtGblFrTTdRVUZGUkN4VFFVRlRMR1ZCUVdVc1EwRkRkRUlzU1VGQmRVSXNSVUZEZGtJc1QwRkJORUlzUlVGRE5VSXNTMEZCYjBJN1NVRkZjRUlzVFVGQlRTeEpRVUZKTEVkQlFVY3NTVUZCU1N4RFFVRkRMRkZCUVZFc1JVRkJSU3hEUVVGRE8wbEJRemRDTEUxQlFVMHNSVUZCUlN4UlFVRlJMRVZCUVVVc1RVRkJUU3hGUVVGRkxFZEJRVWNzVDBGQlR5eERRVUZETzBsQlJYSkRMRWxCUVVrc1NVRkJRU3h4UWtGQllTeEZRVUZETEVsQlFVa3NRMEZCUXp0UlFVRkZMRTlCUVU4c1JVRkJSU3hEUVVGRE8wbEJSVzVETEVsQlFVa3NRMEZCUXl4SlFVRkJMSFZDUVVGbExFVkJRVU1zU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4RlFVRkZPMUZCUTNKRExFOUJRVThzU1VGQlFTeHhRa0ZCWVN4RlFVRkRMRWxCUVVrc1EwRkJRenRaUVVONFFpeERRVUZETzJkQ1FVbERMRWRCUVVjN1dVRkRUQ3hEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETzB0QlExSTdTVUZGUkN4TlFVRk5MRzFDUVVGdFFpeEhRVU4yUWl4SlFVRkpMRU5CUVVNc1NVRkJTVHRSUVVOVUxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4TFFVRkxMR2xDUVVGVExFTkJRVU1zVjBGQlZ6dFJRVU40UXl4eFEwRkJjVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wbEJSWGhFTEUxQlFVMHNNRUpCUVRCQ0xFZEJRemxDTEU5QlFVOHNiVUpCUVcxQ0xFdEJRVXNzVTBGQlV6dFJRVU4wUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhGUVVGRkxFTkJRVU1zYlVKQlFXMUNPMUZCUXpOQ0xFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkRMRzFDUVVGdFFpeERRVUZETzFsQlEzQkRMRU5CUVVNc1EwRkJReXhEUVVGRExGTkJRV01zUlVGQlJTeEZRVUZGTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zVVVGQlVTeERRVUZETEZOQlFWTXNRMEZCUXl4UFFVRlBMRU5CUVVNN1dVRkRja1VzUTBGQlF5eERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkRMRXRCUVVzc1EwRkJRenRKUVVWc1FpeE5RVUZOTEdsQ1FVRnBRaXhIUVVGSExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4aFFVRmhMRVZCUVVVc1JVRkJSVHRSUVVOdVJDeE5RVUZOTEZOQlFWTXNSMEZCUnl4aFFVRmhMRU5CUVVNc1VVRkJVU3hGUVVGRkxFTkJRVU03VVVGRE0wTXNUMEZCVHl3d1FrRkJNRUlzUTBGQlF5eFRRVUZUTEVOQlFVTTdXVUZETVVNc1EwRkJReXhEUVVGRExHOUNRVUZ2UWl4RFFVTnNRaXhQUVVGUExFTkJRVU1zV1VGQldTeERRVUZETEV0QlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVNc1UwRkJVeXhEUVVGRExFVkJRVVVzVFVGQlRTeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRMRU5CUTI1Rk8xbEJRMGdzUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXl4aFFVRmhMRU5CUVVNc1EwRkJRenRKUVVNelFpeERRVUZETEVWQlFVVXNXVUZCV1N4RFFVRkRMRU5CUVVNN1NVRkZha0lzVFVGQlRTd3dRa0ZCTUVJc1IwRkRPVUlzUTBGQlF5eFBRVUZQTEVOQlFVTXNhMEpCUVd0Q08xRkJRM3BDTEU5QlFVOHNTVUZCU1N4RFFVRkRMRWxCUVVrc1MwRkJTeXhSUVVGUk8xRkJRemRDTEVsQlFVa3NRMEZCUXl4SlFVRkpMRXRCUVVzc1RVRkJUU3hEUVVGRE8xRkJRM1pDTEVOQlFVTXNRMEZCUXl4SlFVRkJMSEZDUVVGaExFVkJRVU1zU1VGQlNTeERRVUZETzFsQlEyNUNMRWxCUVVFc2NVSkJRV0VzUlVGQlF5eEpRVUZKTEVOQlFVTTdXVUZEYmtJc1EwRkJReXhKUVVGQkxIRkNRVUZoTEVWQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eE5RVUZOTEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRiRVFzU1VGQlNTeERRVUZETEZWQlFWVTdXVUZEWml4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFMUJRVTBzUzBGQlN5eERRVUZETzFsQlF6VkNMRU5CUVVNc1NVRkJRU3cwUWtGQmIwSXNSVUZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0SlFVVXZReXhOUVVGTkxIRkNRVUZ4UWl4SFFVTjZRaXhKUVVGSkxFTkJRVU1zVFVGQlRUdFRRVU5TTEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNTMEZCU3l4RlFVRkZMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4SFFVRkhMRU5CUVVNN1UwRkRha1VzVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJSVEZDTEUxQlFVMHNZVUZCWVN4SFFVRkhMREJDUVVFd1FqdFJRVU01UXl4RFFVRkRMRU5CUVVNc1IwRkJSenRSUVVOTUxFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlFVTXNjMEpCUVhOQ0xFbEJRVWtzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4TlFVRk5MRWRCUVVjc1EwRkJRenRaUVVNNVJDeERRVUZETEVOQlFVTXNVVUZCVVR0WlFVTldMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU03U1VGRlZDeE5RVUZOTEV0QlFVc3NSMEZCVlR0UlFVTnVRaXhOUVVGTkxFTkJRVU03V1VGRFRDd3dRa0ZCTUVJc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4SlFVRkpPMWxCUTNaRExIRkNRVUZ4UWl4RFFVRkRMRU5CUVVNc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVTdXVUZEZUVNc1NVRkJTU3hEUVVGRExHRkJRV0VzUlVGQlJTeHBRa0ZCYVVJc1EwRkJRenRUUVVOMlF5eERRVUZETzB0QlEwZ3NRMEZCUXp0SlFVVkdMRWxCVDBVc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlZUdFJRVU5rTEhORFFVRnpReXhEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXp0UlFVOHhSQ3hEUVVGRExFbEJRVUVzZDBKQlFXZENMRVZCUVVNc1NVRkJTU3hEUVVGRE8xbEJRM0pDTEhsRFFVRjVReXhEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZYTEVOQlFVTXNRMEZCUXp0UlFVTTVSQ3d3UWtGQk1FSXNSVUZETVVJN1VVRkRRU3hMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVRXNjVUpCUVdFc1JVRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF6dExRVU0xUXp0VFFVRk5PMUZCUTB3c1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGRFVpeFBRVUZQTEVOQlFVTXNaVUZCWlR0WlFVTnlRaXhEUVVGRExFTkJRVU1zU1VGQlFTeHhRa0ZCWVN4RlFVRkRMRWxCUVVrc1EwRkJRenRuUWtGRGJrSXNRMEZCUXl4RFFVRkRMRWRCUVVjN1owSkJRMHdzUTBGQlF5eERRVUZETEVWQlFVVTdXVUZEVGl4RFFVRkRMRU5CUVVNc1NVRkJRU3h4UWtGQllTeEZRVUZETEVsQlFVa3NRMEZCUXp0blFrRkRja0lzUTBGQlF5eERRVUZETEVsQlFVazdaMEpCUTA0c1EwRkJReXhEUVVGRExGRkJRVkVzUTBGRFlpeERRVUZETzB0QlEwZzdTVUZGUkN4UFFVRlBMRXRCUVVzc1EwRkJRenRCUVVObUxFTkJRVU03UVVGRlJDeFRRVUZUTEd0Q1FVRnJRaXhEUVVGRExFbEJRVzlDTzBsQlF6bERMRTlCUVU4c1NVRkJTU3hEUVVGRExGVkJRVlU3VVVGRGNFSXNjME5CUVhORExFTkJRVU1zU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXp0UlFVTjJSQ3hEUVVGRExFTkJRVU1zUlVGQlJUdFJRVU5LTEVOQlFVTXNRMEZCUXl4M1FrRkJkMElzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0QlFVTnlReXhEUVVGRE8wRkJSVVFzVTBGQlowSXNaVUZCWlN4RFFVTTNRaXhKUVVGMVFpeEZRVU4yUWl4UFFVRTBRaXhGUVVNMVFpeExRVUZ2UWp0SlFVVndRaXhOUVVGTkxFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RlFVRkZMRU5CUVVNN1NVRkZOMElzVDBGQlR6dFJRVU5NTEc5Q1FVRnZRaXhEUVVGRExFbEJRVWtzUlVGQlJTeFBRVUZQTEVOQlFVTTdVVUZEYmtNc1pVRkJaU3hEUVVGRExFbEJRVWtzUlVGQlJTeFBRVUZQTEVWQlFVVXNTMEZCU3l4RFFVRkRPMUZCUTNKRExFbEJRVUVzZDBKQlFXZENMRVZCUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNTVUZCU1N4RFFVRkRPMHRCUTNaRUxFTkJRVU03UVVGRFNpeERRVUZETzBGQldrUXNNRU5CV1VNN1FVRkZSQ3hUUVVGblFpeHZRa0ZCYjBJc1EwRkRiRU1zU1VGQmIwSXNSVUZEY0VJc1QwRkJORUk3U1VGRk5VSXNUMEZCVHl4SlFVRkpMRU5CUVVNc1NVRkJTU3hKUVVGSkxITkRRVUZ6UXl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU03VVVGRGJrVXNRMEZCUXl4RFFVRkRMRVZCUVVVN1VVRkRTaXhEUVVGRExFTkJRVU1zUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXhKUVVGSkxFVkJRVVVzVDBGQlR5eERRVUZETEVWQlFVVXNNRUpCUVRCQ0xFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTXZSU3hEUVVGRE8wRkJVRVFzYjBSQlQwTTdRVUZGUkN4VFFVRm5RaXh4UWtGQmNVSXNRMEZEYmtNc1NVRkJiMElzUlVGRGNFSXNUMEZCTkVJN1NVRkZOVUlzVDBGQlR5eHpRMEZCYzBNc1EwRkJReXhKUVVGSkxFTkJRVU03VVVGRGFrUXNRMEZCUXl4RFFVRkRMSGRDUVVGM1FpeERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNN1VVRkRNME1zUTBGQlF5eERRVUZETEc5RFFVRnZReXhEUVVGRExFbEJRVWtzUTBGQlF6dFpRVU0xUXl4RFFVRkRMRU5CUVVNc2QwSkJRWGRDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1JVRkJSU3hQUVVGUExFTkJRVU03V1VGRE9VTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJRenRCUVVOVUxFTkJRVU03UVVGVVJDeHpSRUZUUXp0QlFVZEVMRk5CUVdkQ0xEQkNRVUV3UWl4RFFVRkRMRWxCUVdkRE8wbEJRM3BGTEVsQlFVa3NRMEZCUXl4SlFVRkpPMUZCUVVVc1QwRkJUeXhGUVVGRkxFTkJRVU03U1VGRGNrSXNVVUZCVVN4SlFVRkpMRU5CUVVNc1NVRkJTU3hGUVVGRk8xRkJWV3BDTEV0QlFVc3NhVUpCUVZNc1EwRkJReXhYUVVGWE8xbEJRM2hDTEU5QlFVOHNUVUZCVFN4RFFVRkRPMUZCUTJoQ0xFdEJRVXNzYVVKQlFWTXNRMEZCUXl4WFFVRlhMRU5CUVVNN1VVRkRNMElzUzBGQlN5eHBRa0ZCVXl4RFFVRkRMSE5DUVVGelFpeERRVUZETzFGQlEzUkRMRXRCUVVzc2FVSkJRVk1zUTBGQlF5eGxRVUZsTEVOQlFVTTdVVUZETDBJc1MwRkJTeXhwUWtGQlV5eERRVUZETEZkQlFWYzdXVUZKZUVJc1NVRkJTU3hQUVVGUExFbEJRVWtzUTBGQlF5eEpRVUZKTEV0QlFVc3NVVUZCVVN4RlFVRkZPMmRDUVVOcVF5eFBRVUZQTEU5QlFVOHNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zU1VGQlNTeEZRVUZGTEV0QlFVc3NRMEZCUXp0aFFVTTFRenRaUVVORUxFOUJRVThzU1VGQlNTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVNN1VVRkRla0k3V1VGRFJTeFBRVUZQTEVWQlFVVXNRMEZCUXp0TFFVTmlPMEZCUTBnc1EwRkJRenRCUVRWQ1JDeG5SVUUwUWtNN1FVRkZSQ3hUUVVGblFpeDNRa0ZCZDBJc1EwRkJReXhKUVVGblF6dEpRVU4yUlN4SlFVRkpMRU5CUVVNc1NVRkJTVHRSUVVGRkxFOUJRVThzUlVGQlJTeERRVUZETzBsQlEzSkNMRkZCUVZFc1NVRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJUdFJRVWRxUWl4TFFVRkxMR2xDUVVGVExFTkJRVU1zVjBGQlZ6dFpRVU40UWl4UFFVRlBMRXRCUVVzc1EwRkJRenRSUVVObUxFdEJRVXNzYVVKQlFWTXNRMEZCUXl4elFrRkJjMElzUTBGQlF6dFJRVU4wUXl4TFFVRkxMR2xDUVVGVExFTkJRVU1zWlVGQlpUdFpRVU0xUWl4UFFVRlBMRVZCUVVVc1EwRkJRenRSUVVOYUxFdEJRVXNzYVVKQlFWTXNRMEZCUXl4WFFVRlhMRU5CUVVNN1VVRkRNMElzUzBGQlN5eHBRa0ZCVXl4RFFVRkRMRmRCUVZjN1dVRkRlRUlzVDBGQlR5eEhRVUZITEVOQlFVTTdVVUZEWWp0WlFVTkZMRTlCUVU4c1IwRkJSeXhEUVVGRE8wdEJRMlE3UVVGRFNDeERRVUZETzBGQmFFSkVMRFJFUVdkQ1F6dEJRVVZFTEZOQlFXZENMR05CUVdNc1EwRkROVUlzU1VGSFF5eEZRVU5FTEU5QlFUUkNPMGxCUlRWQ0xFbEJRVWtzUzBGQlN5eEhRVUZITEVsQlFVa3NRMEZCUXl4clFrRkJhMElzUTBGQlF5eEhRVUZITEVOQlFVTTdTVUZEZUVNc1NVRkRSU3hKUVVGSkxFTkJRVU1zVlVGQlZUdFJRVU5tTEhORFFVRnpReXhEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNSVUZEZGtRN1VVRkRRU3hMUVVGTExFbEJRVWtzZDBKQlFYZENMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETzB0QlEyaEVPMGxCUlVRc1NVRkJTU3hIUVVGSExFZEJRVWNzU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFdEJRVXNzUTBGQlF6dEpRVU4wUXl4SlFVTkZMRWxCUVVrc1EwRkJReXhUUVVGVE8xRkJRMlFzZDBOQlFYZERMRU5CUVVNc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eEZRVU40UkR0UlFVTkJMRWRCUVVjc1NVRkJTU3d3UWtGQk1FSXNRMEZCUXl4SlFVRkpMRVZCUVVVc1QwRkJUeXhEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETzB0QlEzcEVPMU5CUVUwc1NVRkRUQ3hKUVVGSkxFTkJRVU1zVTBGQlV6dFJRVU5rTEhsRFFVRjVReXhEUVVGRExFbEJRVWtzUTBGQlF5eEZRVU12UXp0UlFVTkJMRWRCUVVjc1NVRkJTU3gzUWtGQmQwSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1UwRkJVeXhGUVVGRkxFOUJRVThzUTBGQlF5eERRVUZETEUxQlFVMHNRMEZCUXp0TFFVTnFSVHRKUVVWRUxFOUJRVThzVDBGQlR5eERRVUZETEZsQlFWa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1MwRkJTeXhGUVVGRkxFZEJRVWNzUTBGQlF5eERRVUZETzBGQlEyaEVMRU5CUVVNN1FVRTNRa1FzZDBOQk5rSkRJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnByaW50ZXJMaXF1aWRIdG1sID0gdm9pZCAwO1xuY29uc3QgcHJldHRpZXJfMSA9IHJlcXVpcmUoXCJwcmV0dGllclwiKTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi4vdHlwZXNcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuY29uc3QgcHJpbnRfcHJlcHJvY2Vzc18xID0gcmVxdWlyZShcIi4uL3ByaW50ZXIvcHJpbnQtcHJlcHJvY2Vzc1wiKTtcbmNvbnN0IHV0aWxzXzIgPSByZXF1aXJlKFwiLi4vcHJpbnRlci91dGlsc1wiKTtcbmNvbnN0IGVsZW1lbnRfMSA9IHJlcXVpcmUoXCIuLi9wcmludGVyL3ByaW50L2VsZW1lbnRcIik7XG5jb25zdCB0YWdfMSA9IHJlcXVpcmUoXCIuLi9wcmludGVyL3ByaW50L3RhZ1wiKTtcbmNvbnN0IGxpcXVpZF8xID0gcmVxdWlyZShcIi4uL3ByaW50ZXIvcHJpbnQvbGlxdWlkXCIpO1xuY29uc3QgY2hpbGRyZW5fMSA9IHJlcXVpcmUoXCIuLi9wcmludGVyL3ByaW50L2NoaWxkcmVuXCIpO1xuY29uc3QgeyBidWlsZGVycyB9ID0gcHJldHRpZXJfMS5kb2M7XG5jb25zdCB7IGZpbGwsIGdyb3VwLCBoYXJkbGluZSwgaW5kZW50LCBqb2luLCBsaW5lLCBzb2Z0bGluZSB9ID0gYnVpbGRlcnM7XG5jb25zdCB7IHJlcGxhY2VUZXh0RW5kT2ZMaW5lIH0gPSBwcmV0dGllcl8xLmRvYy51dGlscztcbmZ1bmN0aW9uIGdldFNjaGVtYShjb250ZW50cywgb3B0aW9ucykge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBbSlNPTi5zdHJpbmdpZnkoSlNPTi5wYXJzZShjb250ZW50cyksIG51bGwsIG9wdGlvbnMudGFiV2lkdGgpLCB0cnVlXTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIFtjb250ZW50cywgZmFsc2VdO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHByaW50QXR0cmlidXRlcyhwYXRoLCBfb3B0aW9ucywgcHJpbnQpIHtcbiAgICBjb25zdCBub2RlID0gcGF0aC5nZXRWYWx1ZSgpO1xuICAgIGlmICgoMCwgdXRpbHNfMi5pc0VtcHR5KShub2RlLmF0dHJpYnV0ZXMpKVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgcmV0dXJuIGdyb3VwKFtcbiAgICAgICAgaW5kZW50KFtcbiAgICAgICAgICAgIGxpbmUsXG4gICAgICAgICAgICBqb2luKGxpbmUsIHBhdGgubWFwKChwKSA9PiBwcmludChwKSwgJ2F0dHJpYnV0ZXMnKSksXG4gICAgICAgIF0pLFxuICAgICAgICBzb2Z0bGluZSxcbiAgICBdLCB7XG4gICAgICAgIHNob3VsZEJyZWFrOiAoMCwgdXRpbHNfMi5oYXNMaW5lQnJlYWtJblJhbmdlKShub2RlLnNvdXJjZSwgbm9kZS5ibG9ja1N0YXJ0UG9zaXRpb24uc3RhcnQsIG5vZGUuYmxvY2tTdGFydFBvc2l0aW9uLmVuZCksXG4gICAgfSk7XG59XG5jb25zdCBvcHBvc2l0ZVF1b3RlcyA9IHtcbiAgICAnXCInOiBcIidcIixcbiAgICBcIidcIjogJ1wiJyxcbn07XG5mdW5jdGlvbiBwcmludEF0dHJpYnV0ZShwYXRoLCBvcHRpb25zLCBfcHJpbnQpIHtcbiAgICBjb25zdCBub2RlID0gcGF0aC5nZXRWYWx1ZSgpO1xuICAgIGNvbnN0IGF0dHJHcm91cElkID0gU3ltYm9sKCdhdHRyLWdyb3VwLWlkJyk7XG4gICAgY29uc3QgdmFsdWUgPSBub2RlLnNvdXJjZS5zbGljZShub2RlLmF0dHJpYnV0ZVBvc2l0aW9uLnN0YXJ0LCBub2RlLmF0dHJpYnV0ZVBvc2l0aW9uLmVuZCk7XG4gICAgY29uc3QgcHJlZmVycmVkUXVvdGUgPSBvcHRpb25zLnNpbmdsZVF1b3RlID8gYCdgIDogYFwiYDtcbiAgICBjb25zdCBhdHRyaWJ1dGVWYWx1ZUNvbnRhaW5zUXVvdGUgPSAhIW5vZGUudmFsdWUuZmluZCgodmFsdWVOb2RlKSA9PiAoMCwgdXRpbHNfMi5pc1RleHRMaWtlTm9kZSkodmFsdWVOb2RlKSAmJiB2YWx1ZU5vZGUudmFsdWUuaW5jbHVkZXMocHJlZmVycmVkUXVvdGUpKTtcbiAgICBjb25zdCBxdW90ZSA9IGF0dHJpYnV0ZVZhbHVlQ29udGFpbnNRdW90ZVxuICAgICAgICA/IG9wcG9zaXRlUXVvdGVzW3ByZWZlcnJlZFF1b3RlXVxuICAgICAgICA6IHByZWZlcnJlZFF1b3RlO1xuICAgIHJldHVybiBbXG4gICAgICAgIG5vZGUubmFtZSxcbiAgICAgICAgJz0nLFxuICAgICAgICBxdW90ZSxcbiAgICAgICAgKDAsIHV0aWxzXzIuaGFzTGluZUJyZWFrSW5SYW5nZSkobm9kZS5zb3VyY2UsIG5vZGUuYXR0cmlidXRlUG9zaXRpb24uc3RhcnQsIG5vZGUuYXR0cmlidXRlUG9zaXRpb24uZW5kKVxuICAgICAgICAgICAgPyBncm91cChbXG4gICAgICAgICAgICAgICAgaW5kZW50KFtcbiAgICAgICAgICAgICAgICAgICAgc29mdGxpbmUsXG4gICAgICAgICAgICAgICAgICAgIGpvaW4oaGFyZGxpbmUsICgwLCB1dGlsc18yLnJlaW5kZW50KSgoMCwgdXRpbHNfMi5ib2R5TGluZXMpKHZhbHVlKSwgdHJ1ZSkpLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIHNvZnRsaW5lLFxuICAgICAgICAgICAgXSwgeyBpZDogYXR0ckdyb3VwSWQgfSlcbiAgICAgICAgICAgIDogdmFsdWUsXG4gICAgICAgIHF1b3RlLFxuICAgIF07XG59XG5mdW5jdGlvbiBwcmludFRleHROb2RlKHBhdGgsIG9wdGlvbnMsIF9wcmludCkge1xuICAgIGNvbnN0IG5vZGUgPSBwYXRoLmdldFZhbHVlKCk7XG4gICAgaWYgKG5vZGUudmFsdWUubWF0Y2goL15cXHMqJC8pKVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgY29uc3QgdGV4dCA9IG5vZGUudmFsdWU7XG4gICAgY29uc3QgcGFyYWdyYXBocyA9IHRleHRcbiAgICAgICAgLnNwbGl0KC8oXFxyP1xcbil7Mix9LylcbiAgICAgICAgLmZpbHRlcihCb29sZWFuKVxuICAgICAgICAubWFwKChjdXJyKSA9PiB7XG4gICAgICAgIGxldCBkb2MgPSBbXTtcbiAgICAgICAgY29uc3Qgd29yZHMgPSBjdXJyLnRyaW0oKS5zcGxpdCgvXFxzKy9nKTtcbiAgICAgICAgbGV0IGlzRmlyc3QgPSB0cnVlO1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHdvcmRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBjb25zdCB3b3JkID0gd29yZHNbal07XG4gICAgICAgICAgICBpZiAoaXNGaXJzdCkge1xuICAgICAgICAgICAgICAgIGlzRmlyc3QgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGRvYy5wdXNoKGxpbmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZG9jLnB1c2god29yZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZpbGwoZG9jKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW1xuICAgICAgICAoMCwgdGFnXzEucHJpbnRPcGVuaW5nVGFnUHJlZml4KShub2RlLCBvcHRpb25zKSxcbiAgICAgICAgam9pbihoYXJkbGluZSwgcGFyYWdyYXBocyksXG4gICAgICAgICgwLCB0YWdfMS5wcmludENsb3NpbmdUYWdTdWZmaXgpKG5vZGUsIG9wdGlvbnMpLFxuICAgIF07XG59XG5mdW5jdGlvbiBwcmludE5vZGUocGF0aCwgb3B0aW9ucywgcHJpbnQsIGFyZ3MgPSB7fSkge1xuICAgIGNvbnN0IG5vZGUgPSBwYXRoLmdldFZhbHVlKCk7XG4gICAgc3dpdGNoIChub2RlLnR5cGUpIHtcbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5Eb2N1bWVudDoge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAoMCwgY2hpbGRyZW5fMS5wcmludENoaWxkcmVuKShwYXRoLCBvcHRpb25zLCBwcmludCwgYXJncyksXG4gICAgICAgICAgICAgICAgaGFyZGxpbmUsXG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuSHRtbEVsZW1lbnQ6IHtcbiAgICAgICAgICAgIHJldHVybiAoMCwgZWxlbWVudF8xLnByaW50RWxlbWVudCkocGF0aCwgb3B0aW9ucywgcHJpbnQpO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuSHRtbFZvaWRFbGVtZW50OiB7XG4gICAgICAgICAgICByZXR1cm4gKDAsIGVsZW1lbnRfMS5wcmludEVsZW1lbnQpKHBhdGgsIG9wdGlvbnMsIHByaW50KTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxTZWxmQ2xvc2luZ0VsZW1lbnQ6IHtcbiAgICAgICAgICAgIHJldHVybiAoMCwgZWxlbWVudF8xLnByaW50RWxlbWVudCkocGF0aCwgb3B0aW9ucywgcHJpbnQpO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuSHRtbFJhd05vZGU6IHtcbiAgICAgICAgICAgIGNvbnN0IGxpbmVzID0gKDAsIHV0aWxzXzIuYm9keUxpbmVzKShub2RlLmJvZHkpO1xuICAgICAgICAgICAgY29uc3Qgc2hvdWxkU2tpcEZpcnN0TGluZSA9ICFub2RlLnNvdXJjZVtub2RlLmJsb2NrU3RhcnRQb3NpdGlvbi5lbmRdLm1hdGNoKC9cXHJ8XFxuLyk7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0gbGluZXMubGVuZ3RoID4gMCAmJiBsaW5lc1swXSAhPT0gJydcbiAgICAgICAgICAgICAgICA/IFtcbiAgICAgICAgICAgICAgICAgICAgaW5kZW50KFtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhcmRsaW5lLFxuICAgICAgICAgICAgICAgICAgICAgICAgam9pbihoYXJkbGluZSwgKDAsIHV0aWxzXzIucmVpbmRlbnQpKGxpbmVzLCBzaG91bGRTa2lwRmlyc3RMaW5lKSksXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBoYXJkbGluZSxcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgOiBbc29mdGxpbmVdO1xuICAgICAgICAgICAgcmV0dXJuIGdyb3VwKFtcbiAgICAgICAgICAgICAgICBncm91cChbXG4gICAgICAgICAgICAgICAgICAgICc8JyxcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICBwcmludEF0dHJpYnV0ZXMocGF0aCwgb3B0aW9ucywgcHJpbnQpLFxuICAgICAgICAgICAgICAgICAgICAnPicsXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgICAgICBbJzwvJywgbm9kZS5uYW1lLCAnPiddLFxuICAgICAgICAgICAgXSk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5MaXF1aWREcm9wOiB7XG4gICAgICAgICAgICByZXR1cm4gKDAsIGxpcXVpZF8xLnByaW50TGlxdWlkRHJvcCkocGF0aCwgb3B0aW9ucywgcHJpbnQsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuTGlxdWlkUmF3VGFnOiB7XG4gICAgICAgICAgICBjb25zdCBsaW5lcyA9ICgwLCB1dGlsc18yLmJvZHlMaW5lcykobm9kZS5ib2R5KTtcbiAgICAgICAgICAgIGNvbnN0IHNob3VsZFNraXBGaXJzdExpbmUgPSAhbm9kZS5zb3VyY2Vbbm9kZS5ibG9ja1N0YXJ0UG9zaXRpb24uZW5kXS5tYXRjaCgvXFxyfFxcbi8pO1xuICAgICAgICAgICAgY29uc3QgYm9keSA9ICgwLCB1dGlsc18yLnJlaW5kZW50KShsaW5lcywgc2hvdWxkU2tpcEZpcnN0TGluZSk7XG4gICAgICAgICAgICBjb25zdCBibG9ja1N0YXJ0ID0gZ3JvdXAoW1xuICAgICAgICAgICAgICAgICd7JScsXG4gICAgICAgICAgICAgICAgbm9kZS53aGl0ZXNwYWNlU3RhcnQsXG4gICAgICAgICAgICAgICAgJyAnLFxuICAgICAgICAgICAgICAgIG5vZGUubmFtZSxcbiAgICAgICAgICAgICAgICAnICcsXG4gICAgICAgICAgICAgICAgbm9kZS53aGl0ZXNwYWNlRW5kLFxuICAgICAgICAgICAgICAgICclfScsXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIGNvbnN0IGJsb2NrRW5kID0gW1xuICAgICAgICAgICAgICAgICd7JScsXG4gICAgICAgICAgICAgICAgbm9kZS53aGl0ZXNwYWNlU3RhcnQsXG4gICAgICAgICAgICAgICAgJyAnLFxuICAgICAgICAgICAgICAgICdlbmQnLFxuICAgICAgICAgICAgICAgIG5vZGUubmFtZSxcbiAgICAgICAgICAgICAgICAnICcsXG4gICAgICAgICAgICAgICAgbm9kZS53aGl0ZXNwYWNlRW5kLFxuICAgICAgICAgICAgICAgICclfScsXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaWYgKG5vZGUubmFtZSA9PT0gJ3NjaGVtYScpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBbc2NoZW1hLCBpc1ZhbGlkXSA9IGdldFNjaGVtYShub2RlLmJvZHksIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGlmICghaXNWYWxpZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tTdGFydCxcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnJlcGxhY2VUZXh0RW5kT2ZMaW5lKHNjaGVtYSwgaGFyZGxpbmUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tFbmQsXG4gICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGJvZHkgPSBbaGFyZGxpbmUsIC4uLnJlcGxhY2VUZXh0RW5kT2ZMaW5lKHNjaGVtYSwgaGFyZGxpbmUpXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICBibG9ja1N0YXJ0LFxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmluZGVudFNjaGVtYSA/IGluZGVudChib2R5KSA6IGJvZHksXG4gICAgICAgICAgICAgICAgICAgIGhhcmRsaW5lLFxuICAgICAgICAgICAgICAgICAgICBibG9ja0VuZCxcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCEoMCwgdXRpbHNfMi5oYXNMaW5lQnJlYWtJblJhbmdlKShub2RlLnNvdXJjZSwgbm9kZS5ibG9ja1N0YXJ0UG9zaXRpb24uZW5kLCBub2RlLmJsb2NrRW5kUG9zaXRpb24uc3RhcnQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgYmxvY2tTdGFydCxcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5zb3VyY2Uuc2xpY2Uobm9kZS5ibG9ja1N0YXJ0UG9zaXRpb24uZW5kLCBub2RlLmJsb2NrRW5kUG9zaXRpb24uc3RhcnQpLFxuICAgICAgICAgICAgICAgICAgICBibG9ja0VuZCxcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICBibG9ja1N0YXJ0LFxuICAgICAgICAgICAgICAgIGluZGVudChbaGFyZGxpbmUsIGpvaW4oaGFyZGxpbmUsIGJvZHkpXSksXG4gICAgICAgICAgICAgICAgaGFyZGxpbmUsXG4gICAgICAgICAgICAgICAgYmxvY2tFbmQsXG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuTGlxdWlkVGFnOiB7XG4gICAgICAgICAgICByZXR1cm4gKDAsIGxpcXVpZF8xLnByaW50TGlxdWlkVGFnKShwYXRoLCBvcHRpb25zLCBwcmludCwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5MaXF1aWRCcmFuY2g6IHtcbiAgICAgICAgICAgIHJldHVybiAoMCwgbGlxdWlkXzEucHJpbnRMaXF1aWRCcmFuY2gpKHBhdGgsIG9wdGlvbnMsIHByaW50LCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkF0dHJFbXB0eToge1xuICAgICAgICAgICAgcmV0dXJuIG5vZGUubmFtZTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkF0dHJVbnF1b3RlZDpcbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5BdHRyU2luZ2xlUXVvdGVkOlxuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkF0dHJEb3VibGVRdW90ZWQ6IHtcbiAgICAgICAgICAgIHJldHVybiBwcmludEF0dHJpYnV0ZShwYXRoLCBvcHRpb25zLCBwcmludCk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5IdG1sQ29tbWVudDoge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAnPCEtLScsXG4gICAgICAgICAgICAgICAgZ3JvdXAoW1xuICAgICAgICAgICAgICAgICAgICBpbmRlbnQoW2xpbmUsIGpvaW4oaGFyZGxpbmUsICgwLCB1dGlsc18yLnJlaW5kZW50KSgoMCwgdXRpbHNfMi5ib2R5TGluZXMpKG5vZGUuYm9keSksIHRydWUpKV0pLFxuICAgICAgICAgICAgICAgICAgICBsaW5lLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICctLT4nLFxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLlRleHROb2RlOiB7XG4gICAgICAgICAgICByZXR1cm4gcHJpbnRUZXh0Tm9kZShwYXRoLCBvcHRpb25zLCBwcmludCk7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgcmV0dXJuICgwLCB1dGlsc18xLmFzc2VydE5ldmVyKShub2RlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMucHJpbnRlckxpcXVpZEh0bWwgPSB7XG4gICAgcHJpbnQ6IHByaW50Tm9kZSxcbiAgICBwcmVwcm9jZXNzOiBwcmludF9wcmVwcm9jZXNzXzEucHJlcHJvY2Vzcyxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2ljSEpwYm5SbGNpMXNhWEYxYVdRdGFIUnRiQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYklpNHVMeTR1TDNOeVl5OXdjbWx1ZEdWeUwzQnlhVzUwWlhJdGJHbHhkV2xrTFdoMGJXd3VkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3TzBGQlFVRXNkVU5CUVhORU8wRkJRM1JFTEcxRFFYRkNhVUk3UVVGRmFrSXNiVU5CUVhORE8wRkJSWFJETEdsRlFVRjNSRHRCUVVONFJDd3lRMEZOZVVJN1FVRkRla0lzY1VSQlFYVkVPMEZCUTNaRUxEWkRRVWMyUWp0QlFVTTNRaXh0UkVGSlowTTdRVUZEYUVNc2RVUkJRWGxFTzBGQlJYcEVMRTFCUVUwc1JVRkJSU3hSUVVGUkxFVkJRVVVzUjBGQlJ5eGpRVUZITEVOQlFVTTdRVUZEZWtJc1RVRkJUU3hGUVVGRkxFbEJRVWtzUlVGQlJTeExRVUZMTEVWQlFVVXNVVUZCVVN4RlFVRkZMRTFCUVUwc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEZGQlFWRXNSVUZCUlN4SFFVRkhMRkZCUVZFc1EwRkJRenRCUVVONlJTeE5RVUZOTEVWQlFVVXNiMEpCUVc5Q0xFVkJRVVVzUjBGQlJ5eGpRVUZITEVOQlFVTXNTMEZCV1N4RFFVRkRPMEZCUld4RUxGTkJRVk1zVTBGQlV5eERRVUZETEZGQlFXZENMRVZCUVVVc1QwRkJORUk3U1VGREwwUXNTVUZCU1R0UlFVTkdMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExFVkJRVVVzU1VGQlNTeEZRVUZGTEU5QlFVOHNRMEZCUXl4UlFVRlJMRU5CUVVNc1JVRkJSU3hKUVVGSkxFTkJRVU1zUTBGQlF6dExRVU0zUlR0SlFVRkRMRTlCUVU4c1EwRkJReXhGUVVGRk8xRkJRMVlzVDBGQlR5eERRVUZETEZGQlFWRXNSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJRenRMUVVNeFFqdEJRVU5JTEVOQlFVTTdRVUZGUkN4VFFVRlRMR1ZCUVdVc1EwRkxkRUlzU1VGQlowSXNSVUZCUlN4UlFVRTJRaXhGUVVGRkxFdEJRVzlDTzBsQlEzSkZMRTFCUVUwc1NVRkJTU3hIUVVGSExFbEJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUXp0SlFVTTNRaXhKUVVGSkxFbEJRVUVzWlVGQlR5eEZRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNN1VVRkJSU3hQUVVGUExFVkJRVVVzUTBGQlF6dEpRVU40UXl4UFFVRlBMRXRCUVVzc1EwRkRWanRSUVVORkxFMUJRVTBzUTBGQlF6dFpRVU5NTEVsQlFVazdXVUZEU2l4SlFVRkpMRU5CUTBZc1NVRkJTU3hGUVVOS0xFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1JVRkJSU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4WlFVRlpMRU5CUVVNc1EwRkRlRU03VTBGRFJpeERRVUZETzFGQlEwWXNVVUZCVVR0TFFVTlVMRVZCUTBRN1VVRkRSU3hYUVVGWExFVkJRVVVzU1VGQlFTd3lRa0ZCYlVJc1JVRkRPVUlzU1VGQlNTeERRVUZETEUxQlFVMHNSVUZEV0N4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNTMEZCU3l4RlFVTTNRaXhKUVVGSkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1IwRkJSeXhEUVVNMVFqdExRVU5HTEVOQlEwWXNRMEZCUXp0QlFVTktMRU5CUVVNN1FVRkZSQ3hOUVVGTkxHTkJRV01zUjBGQlJ6dEpRVU55UWl4SFFVRkhMRVZCUVVVc1IwRkJSenRKUVVOU0xFZEJRVWNzUlVGQlJTeEhRVUZITzBOQlExUXNRMEZCUXp0QlFVVkdMRk5CUVZNc1kwRkJZeXhEUVVWeVFpeEpRVUZuUWl4RlFVRkZMRTlCUVRSQ0xFVkJRVVVzVFVGQmNVSTdTVUZEY2tVc1RVRkJUU3hKUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETEZGQlFWRXNSVUZCUlN4RFFVRkRPMGxCUXpkQ0xFMUJRVTBzVjBGQlZ5eEhRVUZITEUxQlFVMHNRMEZCUXl4bFFVRmxMRU5CUVVNc1EwRkJRenRKUVRKQ05VTXNUVUZCVFN4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlF6ZENMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4TFFVRkxMRVZCUXpWQ0xFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhIUVVGSExFTkJRek5DTEVOQlFVTTdTVUZEUml4TlFVRk5MR05CUVdNc1IwRkJSeXhQUVVGUExFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF6dEpRVU4yUkN4TlFVRk5MREpDUVVFeVFpeEhRVUZITEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGRGJrUXNRMEZCUXl4VFFVRlRMRVZCUVVVc1JVRkJSU3hEUVVOYUxFbEJRVUVzYzBKQlFXTXNSVUZCUXl4VFFVRlRMRU5CUVVNc1NVRkJTU3hUUVVGVExFTkJRVU1zUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUXl4alFVRmpMRU5CUVVNc1EwRkRlRVVzUTBGQlF6dEpRVU5HTEUxQlFVMHNTMEZCU3l4SFFVRkhMREpDUVVFeVFqdFJRVU4yUXl4RFFVRkRMRU5CUVVNc1kwRkJZeXhEUVVGRExHTkJRV01zUTBGQlF6dFJRVU5vUXl4RFFVRkRMRU5CUVVNc1kwRkJZeXhEUVVGRE8wbEJSVzVDTEU5QlFVODdVVUZEVEN4SlFVRkpMRU5CUVVNc1NVRkJTVHRSUVVOVUxFZEJRVWM3VVVGRFNDeExRVUZMTzFGQlEwd3NTVUZCUVN3eVFrRkJiVUlzUlVGRGFrSXNTVUZCU1N4RFFVRkRMRTFCUVUwc1JVRkRXQ3hKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1MwRkJTeXhGUVVNMVFpeEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zUjBGQlJ5eERRVU16UWp0WlFVTkRMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRMGc3WjBKQlEwVXNUVUZCVFN4RFFVRkRPMjlDUVVOTUxGRkJRVkU3YjBKQlExSXNTVUZCU1N4RFFVRkRMRkZCUVZFc1JVRkJSU3hKUVVGQkxHZENRVUZSTEVWQlFVTXNTVUZCUVN4cFFrRkJVeXhGUVVGRExFdEJRVXNzUTBGQlF5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMmxDUVVOcVJDeERRVUZETzJkQ1FVTkdMRkZCUVZFN1lVRkRWQ3hGUVVORUxFVkJRVVVzUlVGQlJTeEZRVUZGTEZkQlFWY3NSVUZCUlN4RFFVTndRanRaUVVOSUxFTkJRVU1zUTBGQlF5eExRVUZMTzFGQlExUXNTMEZCU3p0TFFVTk9MRU5CUVVNN1FVRkRTaXhEUVVGRE8wRkJSVVFzVTBGQlV5eGhRVUZoTEVOQlEzQkNMRWxCUVhWQ0xFVkJRM1pDTEU5QlFUUkNMRVZCUXpWQ0xFMUJRWEZDTzBsQlJYSkNMRTFCUVUwc1NVRkJTU3hIUVVGSExFbEJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUXp0SlFVTTNRaXhKUVVGSkxFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJRenRSUVVGRkxFOUJRVThzUlVGQlJTeERRVUZETzBsQlEzcERMRTFCUVUwc1NVRkJTU3hIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTTdTVUZGZUVJc1RVRkJUU3hWUVVGVkxFZEJRVWNzU1VGQlNUdFRRVU53UWl4TFFVRkxMRU5CUVVNc1lVRkJZU3hEUVVGRE8xTkJRM0JDTEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNN1UwRkRaaXhIUVVGSExFTkJRVU1zUTBGQlF5eEpRVUZKTEVWQlFVVXNSVUZCUlR0UlFVTmFMRWxCUVVrc1IwRkJSeXhIUVVGSExFVkJRVVVzUTBGQlF6dFJRVU5pTEUxQlFVMHNTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1VVRkRlRU1zU1VGQlNTeFBRVUZQTEVkQlFVY3NTVUZCU1N4RFFVRkRPMUZCUTI1Q0xFdEJRVXNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1IwRkJSeXhMUVVGTExFTkJRVU1zVFVGQlRTeEZRVUZGTEVOQlFVTXNSVUZCUlN4RlFVRkZPMWxCUTNKRExFMUJRVTBzU1VGQlNTeEhRVUZITEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVOMFFpeEpRVUZKTEU5QlFVOHNSVUZCUlR0blFrRkRXQ3hQUVVGUExFZEJRVWNzUzBGQlN5eERRVUZETzJGQlEycENPMmxDUVVGTk8yZENRVU5NTEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03WVVGRGFFSTdXVUZEUkN4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzFOQlEyaENPMUZCUTBRc1QwRkJUeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdTVUZEYmtJc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRlRDeFBRVUZQTzFGQlEwd3NTVUZCUVN3eVFrRkJjVUlzUlVGQlF5eEpRVUZKTEVWQlFVVXNUMEZCVHl4RFFVRkRPMUZCUTNCRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVXNWVUZCVlN4RFFVRkRPMUZCUXpGQ0xFbEJRVUVzTWtKQlFYRkNMRVZCUVVNc1NVRkJTU3hGUVVGRkxFOUJRVThzUTBGQlF6dExRVU55UXl4RFFVRkRPMEZCUTBvc1EwRkJRenRCUVVWRUxGTkJRVk1zVTBGQlV5eERRVU5vUWl4SlFVRnRRaXhGUVVOdVFpeFBRVUUwUWl4RlFVTTFRaXhMUVVGdlFpeEZRVU53UWl4UFFVRXdRaXhGUVVGRk8wbEJSVFZDTEUxQlFVMHNTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJReXhSUVVGUkxFVkJRVVVzUTBGQlF6dEpRVU0zUWl4UlFVRlJMRWxCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVU3VVVGRGFrSXNTMEZCU3l4cFFrRkJVeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzFsQlEzWkNMRTlCUVU4N1owSkJRMHdzU1VGQlFTeDNRa0ZCWVN4RlFVRkRMRWxCUVRaQ0xFVkJRVVVzVDBGQlR5eEZRVUZGTEV0QlFVc3NSVUZCUlN4SlFVRkpMRU5CUVVNN1owSkJRMnhGTEZGQlFWRTdZVUZEVkN4RFFVRkRPMU5CUTBnN1VVRkZSQ3hMUVVGTExHbENRVUZUTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNN1dVRkRNVUlzVDBGQlR5eEpRVUZCTEhOQ1FVRlpMRVZCUVVNc1NVRkJORUlzUlVGQlJTeFBRVUZQTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN1UwRkRia1U3VVVGRlJDeExRVUZMTEdsQ1FVRlRMRU5CUVVNc1pVRkJaU3hEUVVGRExFTkJRVU03V1VGRE9VSXNUMEZCVHl4SlFVRkJMSE5DUVVGWkxFVkJRVU1zU1VGQlowTXNSVUZCUlN4UFFVRlBMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU03VTBGRGRrVTdVVUZGUkN4TFFVRkxMR2xDUVVGVExFTkJRVU1zYzBKQlFYTkNMRU5CUVVNc1EwRkJRenRaUVVOeVF5eFBRVUZQTEVsQlFVRXNjMEpCUVZrc1JVRkRha0lzU1VGQmRVTXNSVUZEZGtNc1QwRkJUeXhGUVVOUUxFdEJRVXNzUTBGRFRpeERRVUZETzFOQlEwZzdVVUZGUkN4TFFVRkxMR2xDUVVGVExFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVTTdXVUZETVVJc1RVRkJUU3hMUVVGTExFZEJRVWNzU1VGQlFTeHBRa0ZCVXl4RlFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dFpRVU51UXl4TlFVRk5MRzFDUVVGdFFpeEhRVU4yUWl4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRenRaUVVNelJDeE5RVUZOTEVsQlFVa3NSMEZEVWl4TFFVRkxMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU1zU1VGQlNTeExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRXRCUVVzc1JVRkJSVHRuUWtGRGFrTXNRMEZCUXl4RFFVRkRPMjlDUVVORkxFMUJRVTBzUTBGQlF6dDNRa0ZEVEN4UlFVRlJPM2RDUVVOU0xFbEJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVXNTVUZCUVN4blFrRkJVU3hGUVVGRExFdEJRVXNzUlVGQlJTeHRRa0ZCYlVJc1EwRkJReXhEUVVGRE8zRkNRVU55UkN4RFFVRkRPMjlDUVVOR0xGRkJRVkU3YVVKQlExUTdaMEpCUTBnc1EwRkJReXhEUVVGRExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdXVUZGYWtJc1QwRkJUeXhMUVVGTExFTkJRVU03WjBKQlExZ3NTMEZCU3l4RFFVRkRPMjlDUVVOS0xFZEJRVWM3YjBKQlEwZ3NTVUZCU1N4RFFVRkRMRWxCUVVrN2IwSkJRMVFzWlVGQlpTeERRVUZETEVsQlFUUkNMRVZCUVVVc1QwRkJUeXhGUVVGRkxFdEJRVXNzUTBGQlF6dHZRa0ZETjBRc1IwRkJSenRwUWtGRFNpeERRVUZETzJkQ1FVTkdMRWxCUVVrN1owSkJRMG9zUTBGQlF5eEpRVUZKTEVWQlFVVXNTVUZCU1N4RFFVRkRMRWxCUVVrc1JVRkJSU3hIUVVGSExFTkJRVU03WVVGRGRrSXNRMEZCUXl4RFFVRkRPMU5CUTBvN1VVRkZSQ3hMUVVGTExHbENRVUZUTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNN1dVRkRla0lzVDBGQlR5eEpRVUZCTEhkQ1FVRmxMRVZCUVVNc1NVRkJNa0lzUlVGQlJTeFBRVUZQTEVWQlFVVXNTMEZCU3l4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRE8xTkJRek5GTzFGQlJVUXNTMEZCU3l4cFFrRkJVeXhEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZETzFsQlF6TkNMRTFCUVUwc1MwRkJTeXhIUVVGSExFbEJRVUVzYVVKQlFWTXNSVUZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03V1VGRGJrTXNUVUZCVFN4dFFrRkJiVUlzUjBGRGRrSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNN1dVRkRNMFFzVFVGQlRTeEpRVUZKTEVkQlFVY3NTVUZCUVN4blFrRkJVU3hGUVVGRExFdEJRVXNzUlVGQlJTeHRRa0ZCYlVJc1EwRkJReXhEUVVGRE8xbEJRMnhFTEUxQlFVMHNWVUZCVlN4SFFVRkhMRXRCUVVzc1EwRkJRenRuUWtGRGRrSXNTVUZCU1R0blFrRkRTaXhKUVVGSkxFTkJRVU1zWlVGQlpUdG5Ra0ZEY0VJc1IwRkJSenRuUWtGRFNDeEpRVUZKTEVOQlFVTXNTVUZCU1R0blFrRkRWQ3hIUVVGSE8yZENRVU5JTEVsQlFVa3NRMEZCUXl4aFFVRmhPMmRDUVVOc1FpeEpRVUZKTzJGQlEwd3NRMEZCUXl4RFFVRkRPMWxCUTBnc1RVRkJUU3hSUVVGUkxFZEJRVWM3WjBKQlEyWXNTVUZCU1R0blFrRkRTaXhKUVVGSkxFTkJRVU1zWlVGQlpUdG5Ra0ZEY0VJc1IwRkJSenRuUWtGRFNDeExRVUZMTzJkQ1FVTk1MRWxCUVVrc1EwRkJReXhKUVVGSk8yZENRVU5VTEVkQlFVYzdaMEpCUTBnc1NVRkJTU3hEUVVGRExHRkJRV0U3WjBKQlEyeENMRWxCUVVrN1lVRkRUQ3hEUVVGRE8xbEJSVVlzU1VGQlNTeEpRVUZKTEVOQlFVTXNTVUZCU1N4TFFVRkxMRkZCUVZFc1JVRkJSVHRuUWtGRE1VSXNUVUZCVFN4RFFVRkRMRTFCUVUwc1JVRkJSU3hQUVVGUExFTkJRVU1zUjBGQlJ5eFRRVUZUTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1JVRkJSU3hQUVVGUExFTkJRVU1zUTBGQlF6dG5Ra0ZEZUVRc1NVRkJTU3hEUVVGRExFOUJRVThzUlVGQlJUdHZRa0ZEV2l4UFFVRlBPM2RDUVVOTUxGVkJRVlU3ZDBKQlExWXNSMEZCUnl4dlFrRkJiMElzUTBGQlF5eE5RVUZOTEVWQlFVVXNVVUZCVVN4RFFVRkRPM2RDUVVONlF5eFJRVUZSTzNGQ1FVTlVMRU5CUVVNN2FVSkJRMGc3WjBKQlJVUXNUVUZCVFN4SlFVRkpMRWRCUVVjc1EwRkJReXhSUVVGUkxFVkJRVVVzUjBGQlJ5eHZRa0ZCYjBJc1EwRkJReXhOUVVGTkxFVkJRVVVzVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXp0blFrRkRia1VzVDBGQlR6dHZRa0ZEVEN4VlFVRlZPMjlDUVVOV0xFOUJRVThzUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCU1R0dlFrRkRNVU1zVVVGQlVUdHZRa0ZEVWl4UlFVRlJPMmxDUVVOVUxFTkJRVU03WVVGRFNEdFpRVVZFTEVsQlEwVXNRMEZCUXl4SlFVRkJMREpDUVVGdFFpeEZRVU5zUWl4SlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVOWUxFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhIUVVGSExFVkJRek5DTEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eExRVUZMTEVOQlF6VkNMRVZCUTBRN1owSkJRMEVzVDBGQlR6dHZRa0ZEVEN4VlFVRlZPMjlDUVVOV0xFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVTm1MRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4SFFVRkhMRVZCUXpOQ0xFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhMUVVGTExFTkJRelZDTzI5Q1FVTkVMRkZCUVZFN2FVSkJRMVFzUTBGQlF6dGhRVU5JTzFsQlJVUXNUMEZCVHp0blFrRkRUQ3hWUVVGVk8yZENRVU5XTEUxQlFVMHNRMEZCUXl4RFFVRkRMRkZCUVZFc1JVRkJSU3hKUVVGSkxFTkJRVU1zVVVGQlVTeEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJRM2hETEZGQlFWRTdaMEpCUTFJc1VVRkJVVHRoUVVOVUxFTkJRVU03VTBGRFNEdFJRVVZFTEV0QlFVc3NhVUpCUVZNc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF6dFpRVU40UWl4UFFVRlBMRWxCUVVFc2RVSkJRV01zUlVGQlF5eEpRVUV3UWl4RlFVRkZMRTlCUVU4c1JVRkJSU3hMUVVGTExFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTTdVMEZEZWtVN1VVRkZSQ3hMUVVGTExHbENRVUZUTEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVNN1dVRkRNMElzVDBGQlR5eEpRVUZCTERCQ1FVRnBRaXhGUVVOMFFpeEpRVUUyUWl4RlFVTTNRaXhQUVVGUExFVkJRMUFzUzBGQlN5eEZRVU5NTEVsQlFVa3NRMEZEVEN4RFFVRkRPMU5CUTBnN1VVRkZSQ3hMUVVGTExHbENRVUZUTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNN1dVRkRlRUlzVDBGQlR5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRPMU5CUTJ4Q08xRkJSVVFzUzBGQlN5eHBRa0ZCVXl4RFFVRkRMRmxCUVZrc1EwRkJRenRSUVVNMVFpeExRVUZMTEdsQ1FVRlRMRU5CUVVNc1owSkJRV2RDTEVOQlFVTTdVVUZEYUVNc1MwRkJTeXhwUWtGQlV5eERRVUZETEdkQ1FVRm5RaXhEUVVGRExFTkJRVU03V1VGREwwSXNUMEZCVHl4alFVRmpMRU5CUTI1Q0xFbEJRVzFGTEVWQlEyNUZMRTlCUVU4c1JVRkRVQ3hMUVVGTExFTkJRMDRzUTBGQlF6dFRRVU5JTzFGQlJVUXNTMEZCU3l4cFFrRkJVeXhEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZETzFsQlF6RkNMRTlCUVU4N1owSkJRMHdzVFVGQlRUdG5Ra0ZEVGl4TFFVRkxMRU5CUVVNN2IwSkJRMG9zVFVGQlRTeERRVUZETEVOQlFVTXNTVUZCU1N4RlFVRkZMRWxCUVVrc1EwRkJReXhSUVVGUkxFVkJRVVVzU1VGQlFTeG5Ra0ZCVVN4RlFVRkRMRWxCUVVFc2FVSkJRVk1zUlVGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzI5Q1FVTndSU3hKUVVGSk8ybENRVU5NTEVOQlFVTTdaMEpCUTBZc1MwRkJTenRoUVVOT0xFTkJRVU03VTBGRFNEdFJRVVZFTEV0QlFVc3NhVUpCUVZNc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6dFpRVU4yUWl4UFFVRlBMR0ZCUVdFc1EwRkJReXhKUVVGNVFpeEZRVUZGTEU5QlFVOHNSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJRenRUUVVOcVJUdFJRVVZFTEU5QlFVOHNRMEZCUXl4RFFVRkRPMWxCUTFBc1QwRkJUeXhKUVVGQkxHMUNRVUZYTEVWQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1UwRkRNVUk3UzBGRFJqdEJRVU5JTEVOQlFVTTdRVUZGV1N4UlFVRkJMR2xDUVVGcFFpeEhRVU0xUWp0SlFVTkZMRXRCUVVzc1JVRkJSU3hUUVVGVE8wbEJRMmhDTEZWQlFWVXNSVUZCVml3MlFrRkJWVHREUVVOWUxFTkJRVU1pZlE9PSIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc0VtcHR5ID0gZXhwb3J0cy5pbnRlcnNwZXJzZSA9IGV4cG9ydHMuZmlyc3QgPSBleHBvcnRzLmxhc3QgPSB2b2lkIDA7XG5mdW5jdGlvbiBsYXN0KHgpIHtcbiAgICByZXR1cm4geFt4Lmxlbmd0aCAtIDFdO1xufVxuZXhwb3J0cy5sYXN0ID0gbGFzdDtcbmZ1bmN0aW9uIGZpcnN0KHgpIHtcbiAgICByZXR1cm4geFswXTtcbn1cbmV4cG9ydHMuZmlyc3QgPSBmaXJzdDtcbmZ1bmN0aW9uIGludGVyc3BlcnNlKGFycmF5LCBkZWxpbSkge1xuICAgIHJldHVybiBhcnJheS5mbGF0TWFwKCh2YWwpID0+IFtkZWxpbSwgdmFsXSkuc2xpY2UoMSk7XG59XG5leHBvcnRzLmludGVyc3BlcnNlID0gaW50ZXJzcGVyc2U7XG5mdW5jdGlvbiBpc0VtcHR5KGNvbCkge1xuICAgIHJldHVybiBjb2wubGVuZ3RoID09PSAwO1xufVxuZXhwb3J0cy5pc0VtcHR5ID0gaXNFbXB0eTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVlYSnlZWGt1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk4dUxpOXpjbU12Y0hKcGJuUmxjaTkxZEdsc2N5OWhjbkpoZVM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdRVUZCUVN4VFFVRm5RaXhKUVVGSkxFTkJRVWtzUTBGQlRUdEpRVU0xUWl4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUTNwQ0xFTkJRVU03UVVGR1JDeHZRa0ZGUXp0QlFVVkVMRk5CUVdkQ0xFdEJRVXNzUTBGQlNTeERRVUZOTzBsQlF6ZENMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzBGQlEyUXNRMEZCUXp0QlFVWkVMSE5DUVVWRE8wRkJSVVFzVTBGQlowSXNWMEZCVnl4RFFVRkpMRXRCUVZVc1JVRkJSU3hMUVVGUk8wbEJRMnBFTEU5QlFVOHNTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFZEJRVWNzUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXl4TFFVRkxMRVZCUVVVc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRka1FzUTBGQlF6dEJRVVpFTEd0RFFVVkRPMEZCUlVRc1UwRkJaMElzVDBGQlR5eERRVUZETEVkQlFWVTdTVUZEYUVNc1QwRkJUeXhIUVVGSExFTkJRVU1zVFVGQlRTeExRVUZMTEVOQlFVTXNRMEZCUXp0QlFVTXhRaXhEUVVGRE8wRkJSa1FzTUVKQlJVTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNOb25FbXB0eUFycmF5ID0gZXhwb3J0cy5pZkJyZWFrQ2hhaW4gPSBleHBvcnRzLkZPUkNFX0JSRUFLX0dST1VQX0lEID0gZXhwb3J0cy5GT1JDRV9GTEFUX0dST1VQX0lEID0gZXhwb3J0cy5nZXRXaGl0ZXNwYWNlVHJpbSA9IGV4cG9ydHMuaXNEZWVwbHlOZXN0ZWQgPSBleHBvcnRzLmdldFNvdXJjZSA9IHZvaWQgMDtcbmNvbnN0IHByZXR0aWVyXzEgPSByZXF1aXJlKFwicHJldHRpZXJcIik7XG5jb25zdCBwYXJzZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi9wYXJzZXJcIik7XG5jb25zdCBhcnJheV8xID0gcmVxdWlyZShcIi4uLy4uL3ByaW50ZXIvdXRpbHMvYXJyYXlcIik7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4uLy4uL3ByaW50ZXIvdXRpbHMvYXJyYXlcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuLi8uLi9wcmludGVyL3V0aWxzL3N0cmluZ1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4uLy4uL3ByaW50ZXIvdXRpbHMvbm9kZVwiKSwgZXhwb3J0cyk7XG5jb25zdCB7IGJ1aWxkZXJzIH0gPSBwcmV0dGllcl8xLmRvYztcbmNvbnN0IHsgaWZCcmVhayB9ID0gYnVpbGRlcnM7XG5mdW5jdGlvbiBnZXRTb3VyY2UocGF0aCkge1xuICAgIHJldHVybiBwYXRoLmdldFZhbHVlKCkuc291cmNlO1xufVxuZXhwb3J0cy5nZXRTb3VyY2UgPSBnZXRTb3VyY2U7XG5mdW5jdGlvbiBpc0RlZXBseU5lc3RlZChub2RlKSB7XG4gICAgaWYgKCFub2RlLmNoaWxkcmVuKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKCgwLCBwYXJzZXJfMS5pc0JyYW5jaGVkVGFnKShub2RlKSkge1xuICAgICAgICByZXR1cm4gISFub2RlLmNoaWxkcmVuLmZpbmQoKGNoaWxkKSA9PiBpc0RlZXBseU5lc3RlZChjaGlsZCkpO1xuICAgIH1cbiAgICByZXR1cm4gISFub2RlLmNoaWxkcmVuLmZpbmQoKGNoaWxkKSA9PiAhKDAsIGFycmF5XzEuaXNFbXB0eSkoY2hpbGQuY2hpbGRyZW4gfHwgW10pKTtcbn1cbmV4cG9ydHMuaXNEZWVwbHlOZXN0ZWQgPSBpc0RlZXBseU5lc3RlZDtcbmZ1bmN0aW9uIGdldFdoaXRlc3BhY2VUcmltKGN1cnJXaGl0ZXNwYWNlVHJpbSwgbmVlZHNXaGl0ZXNwYWNlU3RyaXBwaW5nT25CcmVhaywgZ3JvdXBJZHMpIHtcbiAgICByZXR1cm4gaWZCcmVha0NoYWluKG5lZWRzV2hpdGVzcGFjZVN0cmlwcGluZ09uQnJlYWsgPyAnLScgOiBjdXJyV2hpdGVzcGFjZVRyaW0sIGN1cnJXaGl0ZXNwYWNlVHJpbSwgQXJyYXkuaXNBcnJheShncm91cElkcykgPyBncm91cElkcyA6IFtncm91cElkc10pO1xufVxuZXhwb3J0cy5nZXRXaGl0ZXNwYWNlVHJpbSA9IGdldFdoaXRlc3BhY2VUcmltO1xuZXhwb3J0cy5GT1JDRV9GTEFUX0dST1VQX0lEID0gU3ltYm9sKCdmb3JjZS1uby1icmVhaycpO1xuZXhwb3J0cy5GT1JDRV9CUkVBS19HUk9VUF9JRCA9IFN5bWJvbCgnZm9yY2UtYnJlYWsnKTtcbmZ1bmN0aW9uIGlmQnJlYWtDaGFpbihicmVha3NDb250ZW50LCBmbGF0Q29udGVudCwgZ3JvdXBJZHMpIHtcbiAgICBpZiAoZ3JvdXBJZHMuaW5jbHVkZXMoZXhwb3J0cy5GT1JDRV9CUkVBS19HUk9VUF9JRCkpXG4gICAgICAgIHJldHVybiBicmVha3NDb250ZW50O1xuICAgIGlmIChncm91cElkcy5pbmNsdWRlcyhleHBvcnRzLkZPUkNFX0ZMQVRfR1JPVVBfSUQpKVxuICAgICAgICByZXR1cm4gZmxhdENvbnRlbnQ7XG4gICAgcmV0dXJuIGdyb3VwSWRzLnJlZHVjZSgoY3VyckZsYXRDb250ZW50LCBncm91cElkKSA9PiBpZkJyZWFrKGJyZWFrc0NvbnRlbnQsIGN1cnJGbGF0Q29udGVudCwgeyBncm91cElkIH0pLCBmbGF0Q29udGVudCk7XG59XG5leHBvcnRzLmlmQnJlYWtDaGFpbiA9IGlmQnJlYWtDaGFpbjtcbmZ1bmN0aW9uIGlzTm9uRW1wdHlBcnJheShvYmplY3QpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShvYmplY3QpICYmIG9iamVjdC5sZW5ndGggPiAwO1xufVxuZXhwb3J0cy5pc05vbkVtcHR5QXJyYXkgPSBpc05vbkVtcHR5QXJyYXk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lhVzVrWlhndWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOHVMaTl6Y21NdmNISnBiblJsY2k5MWRHbHNjeTlwYm1SbGVDNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN096czdPenM3TzBGQlFVRXNkVU5CUVc5RE8wRkJSWEJETEhGRFFVRjVRenRCUVVONlF5eHBSRUZCWjBRN1FVRkZhRVFzZDBSQlFYTkRPMEZCUTNSRExIbEVRVUYxUXp0QlFVTjJReXgxUkVGQmNVTTdRVUZGY2tNc1RVRkJUU3hGUVVGRkxGRkJRVkVzUlVGQlJTeEhRVUZITEdOQlFVY3NRMEZCUXp0QlFVTjZRaXhOUVVGTkxFVkJRVVVzVDBGQlR5eEZRVUZGTEVkQlFVY3NVVUZCVVN4RFFVRkRPMEZCUlRkQ0xGTkJRV2RDTEZOQlFWTXNRMEZCUXl4SlFVRnRRanRKUVVNelF5eFBRVUZQTEVsQlFVa3NRMEZCUXl4UlFVRlJMRVZCUVVVc1EwRkJReXhOUVVGTkxFTkJRVU03UVVGRGFFTXNRMEZCUXp0QlFVWkVMRGhDUVVWRE8wRkJSVVFzVTBGQlowSXNZMEZCWXl4RFFVTTFRaXhKUVVFNFJEdEpRVVU1UkN4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkU3VVVGQlJTeFBRVUZQTEV0QlFVc3NRMEZCUXp0SlFVTnFReXhKUVVGSkxFbEJRVUVzYzBKQlFXRXNSVUZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSVHRSUVVOMlFpeFBRVUZQTEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEV0QlFVc3NSVUZCUlN4RlFVRkZMRU5CUTNCRExHTkJRV01zUTBGQlF5eExRVUZ4UWl4RFFVRkRMRU5CUTNSRExFTkJRVU03UzBGRFNEdEpRVU5FTEU5QlFVOHNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVU42UWl4RFFVRkRMRXRCUVVzc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF5eEpRVUZCTEdWQlFVOHNSVUZCUlN4TFFVRmhMRU5CUVVNc1VVRkJVU3hKUVVGSkxFVkJRVVVzUTBGQlF5eERRVU51UkN4RFFVRkRPMEZCUTBvc1EwRkJRenRCUVZwRUxIZERRVmxETzBGQlIwUXNVMEZCWjBJc2FVSkJRV2xDTEVOQlF5OUNMR3RDUVVFd1FpeEZRVU14UWl3clFrRkJiMFFzUlVGRGNFUXNVVUZCTkVJN1NVRkZOVUlzVDBGQlR5eFpRVUZaTEVOQlEycENMQ3RDUVVFclFpeERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExHdENRVUZyUWl4RlFVTXhSQ3hyUWtGQmEwSXNSVUZEYkVJc1MwRkJTeXhEUVVGRExFOUJRVThzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVTm9SQ3hEUVVGRE8wRkJRMG9zUTBGQlF6dEJRVlpFTERoRFFWVkRPMEZCUjFrc1VVRkJRU3h0UWtGQmJVSXNSMEZCUnl4TlFVRk5MRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNRMEZCUXp0QlFVTXZReXhSUVVGQkxHOUNRVUZ2UWl4SFFVRkhMRTFCUVUwc1EwRkJReXhoUVVGaExFTkJRVU1zUTBGQlF6dEJRVVV4UkN4VFFVRm5RaXhaUVVGWkxFTkJRekZDTEdGQlFXdENMRVZCUTJ4Q0xGZEJRV2RDTEVWQlEyaENMRkZCUVdkRE8wbEJSV2hETEVsQlFVa3NVVUZCVVN4RFFVRkRMRkZCUVZFc1EwRkJReXcwUWtGQmIwSXNRMEZCUXp0UlFVRkZMRTlCUVU4c1lVRkJZU3hEUVVGRE8wbEJRMnhGTEVsQlFVa3NVVUZCVVN4RFFVRkRMRkZCUVZFc1EwRkJReXd5UWtGQmJVSXNRMEZCUXp0UlFVRkZMRTlCUVU4c1YwRkJWeXhEUVVGRE8wbEJReTlFTEU5QlFVOHNVVUZCVVN4RFFVRkRMRTFCUVUwc1EwRkRjRUlzUTBGQlF5eGxRVUZsTEVWQlFVVXNUMEZCVHl4RlFVRkZMRVZCUVVVc1EwRkRNMElzVDBGQlR5eERRVUZETEdGQlFXRXNSVUZCUlN4bFFVRmxMRVZCUVVVc1JVRkJSU3hQUVVGUExFVkJRVVVzUTBGQlF5eEZRVU4wUkN4WFFVRlhMRU5CUTFvc1EwRkJRenRCUVVOS0xFTkJRVU03UVVGYVJDeHZRMEZaUXp0QlFVVkVMRk5CUVdkQ0xHVkJRV1VzUTBGQlF5eE5RVUZYTzBsQlEzcERMRTlCUVU4c1MwRkJTeXhEUVVGRExFOUJRVThzUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCU1N4TlFVRk5MRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU1zUTBGQlF6dEJRVU53UkN4RFFVRkRPMEZCUmtRc01FTkJSVU1pZlE9PSIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRMYXN0RGVzY2VuZGFudCA9IGV4cG9ydHMuaGFzTWVhbmluZ2Z1bExhY2tPZkRhbmdsaW5nV2hpdGVzcGFjZSA9IGV4cG9ydHMuaGFzTWVhbmluZ2Z1bExhY2tPZlRyYWlsaW5nV2hpdGVzcGFjZSA9IGV4cG9ydHMuaGFzTWVhbmluZ2Z1bExhY2tPZkxlYWRpbmdXaGl0ZXNwYWNlID0gZXhwb3J0cy5wcmVmZXJIYXJkbGluZUFzVHJhaWxpbmdTcGFjZXMgPSBleHBvcnRzLnByZWZlckhhcmRsaW5lQXNMZWFkaW5nU3BhY2VzID0gZXhwb3J0cy5wcmVmZXJIYXJkbGluZUFzU3Vycm91bmRpbmdTcGFjZXMgPSBleHBvcnRzLmZvcmNlQnJlYWtDaGlsZHJlbiA9IGV4cG9ydHMuZm9yY2VCcmVha0NvbnRlbnQgPSBleHBvcnRzLmZvcmNlTmV4dEVtcHR5TGluZSA9IGV4cG9ydHMuaGFzUHJldHRpZXJJZ25vcmUgPSBleHBvcnRzLmlzUHJldHRpZXJJZ25vcmVOb2RlID0gZXhwb3J0cy5zaG91bGRQcmVzZXJ2ZUNvbnRlbnQgPSBleHBvcnRzLmhhc05vblRleHRDaGlsZCA9IGV4cG9ydHMuaXNIdG1sTm9kZSA9IGV4cG9ydHMuaXNNdWx0aWxpbmVMaXF1aWRUYWcgPSBleHBvcnRzLmlzTGlxdWlkTm9kZSA9IGV4cG9ydHMuaXNUZXh0TGlrZU5vZGUgPSBleHBvcnRzLmlzSHRtbEVsZW1lbnQgPSBleHBvcnRzLmlzVm9pZEVsZW1lbnQgPSBleHBvcnRzLmlzU2VsZkNsb3NpbmcgPSBleHBvcnRzLmlzSHRtbENvbW1lbnQgPSBleHBvcnRzLmhhc05vQ2xvc2VNYXJrZXIgPSBleHBvcnRzLmlzUHJlTGlrZU5vZGUgPSBleHBvcnRzLmlzU2NyaXB0TGlrZVRhZyA9IHZvaWQgMDtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi4vLi4vdHlwZXNcIik7XG5jb25zdCBhcnJheV8xID0gcmVxdWlyZShcIi4uLy4uL3ByaW50ZXIvdXRpbHMvYXJyYXlcIik7XG5mdW5jdGlvbiBpc1NjcmlwdExpa2VUYWcobm9kZSkge1xuICAgIHJldHVybiBub2RlLnR5cGUgPT09IHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxSYXdOb2RlO1xufVxuZXhwb3J0cy5pc1NjcmlwdExpa2VUYWcgPSBpc1NjcmlwdExpa2VUYWc7XG5mdW5jdGlvbiBpc1ByZUxpa2VOb2RlKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5jc3NXaGl0ZXNwYWNlLnN0YXJ0c1dpdGgoJ3ByZScpO1xufVxuZXhwb3J0cy5pc1ByZUxpa2VOb2RlID0gaXNQcmVMaWtlTm9kZTtcbmZ1bmN0aW9uIGhhc05vQ2xvc2VNYXJrZXIobm9kZSkge1xuICAgIHJldHVybiBpc1NlbGZDbG9zaW5nKG5vZGUpIHx8IGlzVm9pZEVsZW1lbnQobm9kZSkgfHwgaXNIdG1sQ29tbWVudChub2RlKTtcbn1cbmV4cG9ydHMuaGFzTm9DbG9zZU1hcmtlciA9IGhhc05vQ2xvc2VNYXJrZXI7XG5mdW5jdGlvbiBpc0h0bWxDb21tZW50KG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS50eXBlID09PSB0eXBlc18xLk5vZGVUeXBlcy5IdG1sQ29tbWVudDtcbn1cbmV4cG9ydHMuaXNIdG1sQ29tbWVudCA9IGlzSHRtbENvbW1lbnQ7XG5mdW5jdGlvbiBpc1NlbGZDbG9zaW5nKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS50eXBlID09PSB0eXBlc18xLk5vZGVUeXBlcy5IdG1sU2VsZkNsb3NpbmdFbGVtZW50O1xufVxuZXhwb3J0cy5pc1NlbGZDbG9zaW5nID0gaXNTZWxmQ2xvc2luZztcbmZ1bmN0aW9uIGlzVm9pZEVsZW1lbnQobm9kZSkge1xuICAgIHJldHVybiBub2RlLnR5cGUgPT09IHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxWb2lkRWxlbWVudDtcbn1cbmV4cG9ydHMuaXNWb2lkRWxlbWVudCA9IGlzVm9pZEVsZW1lbnQ7XG5mdW5jdGlvbiBpc0h0bWxFbGVtZW50KG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS50eXBlID09PSB0eXBlc18xLk5vZGVUeXBlcy5IdG1sRWxlbWVudDtcbn1cbmV4cG9ydHMuaXNIdG1sRWxlbWVudCA9IGlzSHRtbEVsZW1lbnQ7XG5mdW5jdGlvbiBpc1RleHRMaWtlTm9kZShub2RlKSB7XG4gICAgcmV0dXJuICEhbm9kZSAmJiBub2RlLnR5cGUgPT09IHR5cGVzXzEuTm9kZVR5cGVzLlRleHROb2RlO1xufVxuZXhwb3J0cy5pc1RleHRMaWtlTm9kZSA9IGlzVGV4dExpa2VOb2RlO1xuZnVuY3Rpb24gaXNMaXF1aWROb2RlKG5vZGUpIHtcbiAgICByZXR1cm4gISFub2RlICYmIHR5cGVzXzEuTGlxdWlkTm9kZVR5cGVzLmluY2x1ZGVzKG5vZGUudHlwZSk7XG59XG5leHBvcnRzLmlzTGlxdWlkTm9kZSA9IGlzTGlxdWlkTm9kZTtcbmZ1bmN0aW9uIGlzTXVsdGlsaW5lTGlxdWlkVGFnKG5vZGUpIHtcbiAgICByZXR1cm4gKCEhbm9kZSAmJlxuICAgICAgICBub2RlLnR5cGUgPT09IHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZFRhZyAmJlxuICAgICAgICAhIW5vZGUuY2hpbGRyZW4gJiZcbiAgICAgICAgISgwLCBhcnJheV8xLmlzRW1wdHkpKG5vZGUuY2hpbGRyZW4pKTtcbn1cbmV4cG9ydHMuaXNNdWx0aWxpbmVMaXF1aWRUYWcgPSBpc011bHRpbGluZUxpcXVpZFRhZztcbmZ1bmN0aW9uIGlzSHRtbE5vZGUobm9kZSkge1xuICAgIHJldHVybiAhIW5vZGUgJiYgdHlwZXNfMS5IdG1sTm9kZVR5cGVzLmluY2x1ZGVzKG5vZGUudHlwZSk7XG59XG5leHBvcnRzLmlzSHRtbE5vZGUgPSBpc0h0bWxOb2RlO1xuZnVuY3Rpb24gaGFzTm9uVGV4dENoaWxkKG5vZGUpIHtcbiAgICByZXR1cm4gKG5vZGUuY2hpbGRyZW4gJiZcbiAgICAgICAgbm9kZS5jaGlsZHJlbi5zb21lKChjaGlsZCkgPT4gY2hpbGQudHlwZSAhPT0gdHlwZXNfMS5Ob2RlVHlwZXMuVGV4dE5vZGUpKTtcbn1cbmV4cG9ydHMuaGFzTm9uVGV4dENoaWxkID0gaGFzTm9uVGV4dENoaWxkO1xuZnVuY3Rpb24gc2hvdWxkUHJlc2VydmVDb250ZW50KG5vZGUsIF9vcHRpb25zKSB7XG4gICAgaWYgKGlzUHJlTGlrZU5vZGUobm9kZSkgJiZcbiAgICAgICAgbm9kZS5jaGlsZHJlbiAmJlxuICAgICAgICBub2RlLmNoaWxkcmVuLnNvbWUoKGNoaWxkKSA9PiAhaXNUZXh0TGlrZU5vZGUoY2hpbGQpKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0cy5zaG91bGRQcmVzZXJ2ZUNvbnRlbnQgPSBzaG91bGRQcmVzZXJ2ZUNvbnRlbnQ7XG5mdW5jdGlvbiBpc1ByZXR0aWVySWdub3JlTm9kZShub2RlKSB7XG4gICAgcmV0dXJuIChub2RlICYmXG4gICAgICAgIG5vZGUudHlwZSA9PT0gdHlwZXNfMS5Ob2RlVHlwZXMuSHRtbENvbW1lbnQgJiZcbiAgICAgICAgL15cXHMqcHJldHRpZXItaWdub3JlL20udGVzdChub2RlLmJvZHkpKTtcbn1cbmV4cG9ydHMuaXNQcmV0dGllcklnbm9yZU5vZGUgPSBpc1ByZXR0aWVySWdub3JlTm9kZTtcbmZ1bmN0aW9uIGhhc1ByZXR0aWVySWdub3JlKG5vZGUpIHtcbiAgICByZXR1cm4gaXNQcmV0dGllcklnbm9yZU5vZGUobm9kZSkgfHwgaXNQcmV0dGllcklnbm9yZU5vZGUobm9kZS5wcmV2KTtcbn1cbmV4cG9ydHMuaGFzUHJldHRpZXJJZ25vcmUgPSBoYXNQcmV0dGllcklnbm9yZTtcbmZ1bmN0aW9uIGZvcmNlTmV4dEVtcHR5TGluZShub2RlKSB7XG4gICAgaWYgKCFub2RlKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKCFub2RlLm5leHQpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBjb25zdCBzb3VyY2UgPSBub2RlLnNvdXJjZTtcbiAgICBsZXQgdG1wO1xuICAgIHRtcCA9IHNvdXJjZS5pbmRleE9mKCdcXG4nLCBub2RlLnBvc2l0aW9uLmVuZCk7XG4gICAgaWYgKHRtcCA9PT0gLTEpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB0bXAgPSBzb3VyY2UuaW5kZXhPZignXFxuJywgdG1wICsgMSk7XG4gICAgaWYgKHRtcCA9PT0gLTEpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdG1wIDwgbm9kZS5uZXh0LnBvc2l0aW9uLnN0YXJ0O1xufVxuZXhwb3J0cy5mb3JjZU5leHRFbXB0eUxpbmUgPSBmb3JjZU5leHRFbXB0eUxpbmU7XG5mdW5jdGlvbiBmb3JjZUJyZWFrQ29udGVudChub2RlKSB7XG4gICAgcmV0dXJuIChmb3JjZUJyZWFrQ2hpbGRyZW4obm9kZSkgfHxcbiAgICAgICAgKG5vZGUudHlwZSA9PT0gdHlwZXNfMS5Ob2RlVHlwZXMuSHRtbEVsZW1lbnQgJiZcbiAgICAgICAgICAgIG5vZGUuY2hpbGRyZW4ubGVuZ3RoID4gMCAmJlxuICAgICAgICAgICAgdHlwZW9mIG5vZGUubmFtZSA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgIChbJ2JvZHknLCAnc2NyaXB0JywgJ3N0eWxlJ10uaW5jbHVkZXMobm9kZS5uYW1lKSB8fFxuICAgICAgICAgICAgICAgIG5vZGUuY2hpbGRyZW4uc29tZSgoY2hpbGQpID0+IGhhc05vblRleHRDaGlsZChjaGlsZCkpKSkgfHxcbiAgICAgICAgKG5vZGUuZmlyc3RDaGlsZCAmJlxuICAgICAgICAgICAgbm9kZS5maXJzdENoaWxkID09PSBub2RlLmxhc3RDaGlsZCAmJlxuICAgICAgICAgICAgbm9kZS5maXJzdENoaWxkLnR5cGUgIT09IHR5cGVzXzEuTm9kZVR5cGVzLlRleHROb2RlICYmXG4gICAgICAgICAgICBoYXNMZWFkaW5nTGluZUJyZWFrKG5vZGUuZmlyc3RDaGlsZCkgJiZcbiAgICAgICAgICAgICghbm9kZS5sYXN0Q2hpbGQuaXNUcmFpbGluZ1doaXRlc3BhY2VTZW5zaXRpdmUgfHxcbiAgICAgICAgICAgICAgICBoYXNUcmFpbGluZ0xpbmVCcmVhayhub2RlLmxhc3RDaGlsZCkpKSk7XG59XG5leHBvcnRzLmZvcmNlQnJlYWtDb250ZW50ID0gZm9yY2VCcmVha0NvbnRlbnQ7XG5mdW5jdGlvbiBmb3JjZUJyZWFrQ2hpbGRyZW4obm9kZSkge1xuICAgIHJldHVybiAobm9kZS50eXBlID09PSB0eXBlc18xLk5vZGVUeXBlcy5IdG1sRWxlbWVudCAmJlxuICAgICAgICBub2RlLmNoaWxkcmVuLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgdHlwZW9mIG5vZGUubmFtZSA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgKFsnaHRtbCcsICdoZWFkJywgJ3VsJywgJ29sJywgJ3NlbGVjdCddLmluY2x1ZGVzKG5vZGUubmFtZSkgfHxcbiAgICAgICAgICAgIChub2RlLmNzc0Rpc3BsYXkuc3RhcnRzV2l0aCgndGFibGUnKSAmJiBub2RlLmNzc0Rpc3BsYXkgIT09ICd0YWJsZS1jZWxsJykpKTtcbn1cbmV4cG9ydHMuZm9yY2VCcmVha0NoaWxkcmVuID0gZm9yY2VCcmVha0NoaWxkcmVuO1xuZnVuY3Rpb24gcHJlZmVySGFyZGxpbmVBc1N1cnJvdW5kaW5nU3BhY2VzKG5vZGUpIHtcbiAgICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxDb21tZW50OlxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuSHRtbEVsZW1lbnQ6XG4gICAgICAgICAgICByZXR1cm4gKHR5cGVvZiBub2RlLm5hbWUgPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgWydzY3JpcHQnLCAnc2VsZWN0J10uaW5jbHVkZXMobm9kZS5uYW1lKSk7XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuTGlxdWlkVGFnOlxuICAgICAgICAgICAgaWYgKChub2RlLnByZXYgJiYgaXNUZXh0TGlrZU5vZGUobm9kZS5wcmV2KSkgfHxcbiAgICAgICAgICAgICAgICAobm9kZS5uZXh0ICYmIGlzVGV4dExpa2VOb2RlKG5vZGUubmV4dCkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5vZGUuY2hpbGRyZW4gJiYgbm9kZS5jaGlsZHJlbi5sZW5ndGggPiAwO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnRzLnByZWZlckhhcmRsaW5lQXNTdXJyb3VuZGluZ1NwYWNlcyA9IHByZWZlckhhcmRsaW5lQXNTdXJyb3VuZGluZ1NwYWNlcztcbmZ1bmN0aW9uIHByZWZlckhhcmRsaW5lQXNMZWFkaW5nU3BhY2VzKG5vZGUpIHtcbiAgICByZXR1cm4gKHByZWZlckhhcmRsaW5lQXNTdXJyb3VuZGluZ1NwYWNlcyhub2RlKSB8fFxuICAgICAgICAoaXNMaXF1aWROb2RlKG5vZGUpICYmIG5vZGUucHJldiAmJiBpc0xpcXVpZE5vZGUobm9kZS5wcmV2KSkgfHxcbiAgICAgICAgKG5vZGUucHJldiAmJiBwcmVmZXJIYXJkbGluZUFzVHJhaWxpbmdTcGFjZXMobm9kZS5wcmV2KSkgfHxcbiAgICAgICAgaGFzU3Vycm91bmRpbmdMaW5lQnJlYWsobm9kZSkpO1xufVxuZXhwb3J0cy5wcmVmZXJIYXJkbGluZUFzTGVhZGluZ1NwYWNlcyA9IHByZWZlckhhcmRsaW5lQXNMZWFkaW5nU3BhY2VzO1xuZnVuY3Rpb24gcHJlZmVySGFyZGxpbmVBc1RyYWlsaW5nU3BhY2VzKG5vZGUpIHtcbiAgICByZXR1cm4gKHByZWZlckhhcmRsaW5lQXNTdXJyb3VuZGluZ1NwYWNlcyhub2RlKSB8fFxuICAgICAgICAoaXNMaXF1aWROb2RlKG5vZGUpICYmXG4gICAgICAgICAgICBub2RlLm5leHQgJiZcbiAgICAgICAgICAgIChpc0xpcXVpZE5vZGUobm9kZS5uZXh0KSB8fCBpc0h0bWxOb2RlKG5vZGUubmV4dCkpKSB8fFxuICAgICAgICAobm9kZS50eXBlID09PSB0eXBlc18xLk5vZGVUeXBlcy5IdG1sRWxlbWVudCAmJiBub2RlLm5hbWUgPT09ICdicicpIHx8XG4gICAgICAgIGhhc1N1cnJvdW5kaW5nTGluZUJyZWFrKG5vZGUpKTtcbn1cbmV4cG9ydHMucHJlZmVySGFyZGxpbmVBc1RyYWlsaW5nU3BhY2VzID0gcHJlZmVySGFyZGxpbmVBc1RyYWlsaW5nU3BhY2VzO1xuZnVuY3Rpb24gaGFzTWVhbmluZ2Z1bExhY2tPZkxlYWRpbmdXaGl0ZXNwYWNlKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5pc0xlYWRpbmdXaGl0ZXNwYWNlU2Vuc2l0aXZlICYmICFub2RlLmhhc0xlYWRpbmdXaGl0ZXNwYWNlO1xufVxuZXhwb3J0cy5oYXNNZWFuaW5nZnVsTGFja09mTGVhZGluZ1doaXRlc3BhY2UgPSBoYXNNZWFuaW5nZnVsTGFja09mTGVhZGluZ1doaXRlc3BhY2U7XG5mdW5jdGlvbiBoYXNNZWFuaW5nZnVsTGFja09mVHJhaWxpbmdXaGl0ZXNwYWNlKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5pc1RyYWlsaW5nV2hpdGVzcGFjZVNlbnNpdGl2ZSAmJiAhbm9kZS5oYXNUcmFpbGluZ1doaXRlc3BhY2U7XG59XG5leHBvcnRzLmhhc01lYW5pbmdmdWxMYWNrT2ZUcmFpbGluZ1doaXRlc3BhY2UgPSBoYXNNZWFuaW5nZnVsTGFja09mVHJhaWxpbmdXaGl0ZXNwYWNlO1xuZnVuY3Rpb24gaGFzTWVhbmluZ2Z1bExhY2tPZkRhbmdsaW5nV2hpdGVzcGFjZShub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUuaXNEYW5nbGluZ1doaXRlc3BhY2VTZW5zaXRpdmUgJiYgIW5vZGUuaGFzRGFuZ2xpbmdXaGl0ZXNwYWNlO1xufVxuZXhwb3J0cy5oYXNNZWFuaW5nZnVsTGFja09mRGFuZ2xpbmdXaGl0ZXNwYWNlID0gaGFzTWVhbmluZ2Z1bExhY2tPZkRhbmdsaW5nV2hpdGVzcGFjZTtcbmZ1bmN0aW9uIGhhc1N1cnJvdW5kaW5nTGluZUJyZWFrKG5vZGUpIHtcbiAgICByZXR1cm4gaGFzTGVhZGluZ0xpbmVCcmVhayhub2RlKSAmJiBoYXNUcmFpbGluZ0xpbmVCcmVhayhub2RlKTtcbn1cbmZ1bmN0aW9uIGhhc0xlYWRpbmdMaW5lQnJlYWsobm9kZSkge1xuICAgIGlmIChub2RlLnR5cGUgPT09IHR5cGVzXzEuTm9kZVR5cGVzLkRvY3VtZW50KVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIChub2RlLmhhc0xlYWRpbmdXaGl0ZXNwYWNlICYmXG4gICAgICAgIGhhc0xpbmVCcmVha0luUmFuZ2Uobm9kZS5zb3VyY2UsIG5vZGUucHJldlxuICAgICAgICAgICAgPyBub2RlLnByZXYucG9zaXRpb24uZW5kXG4gICAgICAgICAgICA6IG5vZGUucGFyZW50Tm9kZS5ibG9ja1N0YXJ0UG9zaXRpb25cbiAgICAgICAgICAgICAgICA/IG5vZGUucGFyZW50Tm9kZS5ibG9ja1N0YXJ0UG9zaXRpb24uZW5kXG4gICAgICAgICAgICAgICAgOiBub2RlLnBhcmVudE5vZGUucG9zaXRpb24uc3RhcnQsIG5vZGUucG9zaXRpb24uc3RhcnQpKTtcbn1cbmZ1bmN0aW9uIGhhc1RyYWlsaW5nTGluZUJyZWFrKG5vZGUpIHtcbiAgICBpZiAobm9kZS50eXBlID09PSB0eXBlc18xLk5vZGVUeXBlcy5Eb2N1bWVudClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiAobm9kZS5oYXNUcmFpbGluZ1doaXRlc3BhY2UgJiZcbiAgICAgICAgaGFzTGluZUJyZWFrSW5SYW5nZShub2RlLnNvdXJjZSwgbm9kZS5wb3NpdGlvbi5lbmQsIG5vZGUubmV4dFxuICAgICAgICAgICAgPyBub2RlLm5leHQucG9zaXRpb24uc3RhcnRcbiAgICAgICAgICAgIDogbm9kZS5wYXJlbnROb2RlLmJsb2NrRW5kUG9zaXRpb25cbiAgICAgICAgICAgICAgICA/IG5vZGUucGFyZW50Tm9kZS5ibG9ja0VuZFBvc2l0aW9uLnN0YXJ0XG4gICAgICAgICAgICAgICAgOiBub2RlLnBhcmVudE5vZGUucG9zaXRpb24uZW5kKSk7XG59XG5mdW5jdGlvbiBoYXNMaW5lQnJlYWtJblJhbmdlKHNvdXJjZSwgc3RhcnQsIGVuZCkge1xuICAgIGNvbnN0IGluZGV4ID0gc291cmNlLmluZGV4T2YoJ1xcbicsIHN0YXJ0KTtcbiAgICByZXR1cm4gaW5kZXggIT09IC0xICYmIGluZGV4IDwgZW5kO1xufVxuZnVuY3Rpb24gZ2V0TGFzdERlc2NlbmRhbnQobm9kZSkge1xuICAgIHJldHVybiBub2RlLmxhc3RDaGlsZCA/IGdldExhc3REZXNjZW5kYW50KG5vZGUubGFzdENoaWxkKSA6IG5vZGU7XG59XG5leHBvcnRzLmdldExhc3REZXNjZW5kYW50ID0gZ2V0TGFzdERlc2NlbmRhbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2libTlrWlM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMM055WXk5d2NtbHVkR1Z5TDNWMGFXeHpMMjV2WkdVdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPMEZCUVVFc2JVTkJZMmxDTzBGQlEycENMR2xFUVVGblJEdEJRVVZvUkN4VFFVRm5RaXhsUVVGbExFTkJRVU1zU1VGQmVVSTdTVUZEZGtRc1QwRkJUeXhKUVVGSkxFTkJRVU1zU1VGQlNTeExRVUZMTEdsQ1FVRlRMRU5CUVVNc1YwRkJWeXhEUVVGRE8wRkJRemRETEVOQlFVTTdRVUZHUkN3d1EwRkZRenRCUVVWRUxGTkJRV2RDTEdGQlFXRXNRMEZCUXl4SlFVRXJRanRKUVVNelJDeFBRVUZQTEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1ZVRkJWU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzBGQlF6bERMRU5CUVVNN1FVRkdSQ3h6UTBGRlF6dEJRVWxFTEZOQlFXZENMR2RDUVVGblFpeERRVU01UWl4SlFVRnZRanRKUVVWd1FpeFBRVUZQTEdGQlFXRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hoUVVGaExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NZVUZCWVN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wRkJRek5GTEVOQlFVTTdRVUZLUkN3MFEwRkpRenRCUVVWRUxGTkJRV2RDTEdGQlFXRXNRMEZCUXl4SlFVRnZRanRKUVVOb1JDeFBRVUZQTEVsQlFVa3NRMEZCUXl4SlFVRkpMRXRCUVVzc2FVSkJRVk1zUTBGQlF5eFhRVUZYTEVOQlFVTTdRVUZETjBNc1EwRkJRenRCUVVaRUxITkRRVVZETzBGQlJVUXNVMEZCWjBJc1lVRkJZU3hEUVVNelFpeEpRVUZ2UWp0SlFVVndRaXhQUVVGUExFbEJRVWtzUTBGQlF5eEpRVUZKTEV0QlFVc3NhVUpCUVZNc1EwRkJReXh6UWtGQmMwSXNRMEZCUXp0QlFVTjRSQ3hEUVVGRE8wRkJTa1FzYzBOQlNVTTdRVUZGUkN4VFFVRm5RaXhoUVVGaExFTkJRVU1zU1VGQmIwSTdTVUZEYUVRc1QwRkJUeXhKUVVGSkxFTkJRVU1zU1VGQlNTeExRVUZMTEdsQ1FVRlRMRU5CUVVNc1pVRkJaU3hEUVVGRE8wRkJRMnBFTEVOQlFVTTdRVUZHUkN4elEwRkZRenRCUVVWRUxGTkJRV2RDTEdGQlFXRXNRMEZCUXl4SlFVRnZRanRKUVVOb1JDeFBRVUZQTEVsQlFVa3NRMEZCUXl4SlFVRkpMRXRCUVVzc2FVSkJRVk1zUTBGQlF5eFhRVUZYTEVOQlFVTTdRVUZETjBNc1EwRkJRenRCUVVaRUxITkRRVVZETzBGQlJVUXNVMEZCWjBJc1kwRkJZeXhEUVVNMVFpeEpRVUZuUXp0SlFVVm9ReXhQUVVGUExFTkJRVU1zUTBGQlF5eEpRVUZKTEVsQlFVa3NTVUZCU1N4RFFVRkRMRWxCUVVrc1MwRkJTeXhwUWtGQlV5eERRVUZETEZGQlFWRXNRMEZCUXp0QlFVTndSQ3hEUVVGRE8wRkJTa1FzZDBOQlNVTTdRVUZGUkN4VFFVRm5RaXhaUVVGWkxFTkJRekZDTEVsQlFXZERPMGxCUldoRExFOUJRVThzUTBGQlF5eERRVUZETEVsQlFVa3NTVUZCU1N4MVFrRkJaU3hEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCVnl4RFFVRkRMRU5CUVVNN1FVRkRPVVFzUTBGQlF6dEJRVXBFTEc5RFFVbERPMEZCUlVRc1UwRkJaMElzYjBKQlFXOUNMRU5CUTJ4RExFbEJRV2RETzBsQlJXaERMRTlCUVU4c1EwRkRUQ3hEUVVGRExFTkJRVU1zU1VGQlNUdFJRVU5PTEVsQlFVa3NRMEZCUXl4SlFVRkpMRXRCUVVzc2FVSkJRVk1zUTBGQlF5eFRRVUZUTzFGQlEycERMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVUdFJRVU5tTEVOQlFVTXNTVUZCUVN4bFFVRlBMRVZCUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVU40UWl4RFFVRkRPMEZCUTBvc1EwRkJRenRCUVZSRUxHOUVRVk5ETzBGQlJVUXNVMEZCWjBJc1ZVRkJWU3hEUVVGRExFbEJRV2RETzBsQlEzcEVMRTlCUVU4c1EwRkJReXhEUVVGRExFbEJRVWtzU1VGQlNTeHhRa0ZCWVN4RFFVRkRMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlZ5eERRVUZETEVOQlFVTTdRVUZETlVRc1EwRkJRenRCUVVaRUxHZERRVVZETzBGQlJVUXNVMEZCWjBJc1pVRkJaU3hEUVVGRExFbEJRVzlDTzBsQlEyeEVMRTlCUVU4c1EwRkRTaXhKUVVGWkxFTkJRVU1zVVVGQlVUdFJRVU55UWl4SlFVRlpMRU5CUVVNc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGRGVrSXNRMEZCUXl4TFFVRnhRaXhGUVVGRkxFVkJRVVVzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4TFFVRkxMR2xDUVVGVExFTkJRVU1zVVVGQlVTeERRVU0zUkN4RFFVTkdMRU5CUVVNN1FVRkRTaXhEUVVGRE8wRkJVRVFzTUVOQlQwTTdRVUZGUkN4VFFVRm5RaXh4UWtGQmNVSXNRMEZEYmtNc1NVRkJiMElzUlVGRGNFSXNVVUZCTmtJN1NVRnZRamRDTEVsQlEwVXNZVUZCWVN4RFFVRkRMRWxCUVVrc1EwRkJRenRSUVVOc1FpeEpRVUZaTEVOQlFVTXNVVUZCVVR0UlFVTnlRaXhKUVVGWkxFTkJRVU1zVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRXRCUVZVc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF5eGpRVUZqTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1JVRkRia1U3VVVGRFFTeFBRVUZQTEVsQlFVa3NRMEZCUXp0TFFVTmlPMGxCUlVRc1QwRkJUeXhMUVVGTExFTkJRVU03UVVGRFppeERRVUZETzBGQkwwSkVMSE5FUVN0Q1F6dEJRVVZFTEZOQlFXZENMRzlDUVVGdlFpeERRVUZETEVsQlFXZERPMGxCUTI1RkxFOUJRVThzUTBGRFRDeEpRVUZKTzFGQlEwb3NTVUZCU1N4RFFVRkRMRWxCUVVrc1MwRkJTeXhwUWtGQlV5eERRVUZETEZkQlFWYzdVVUZEYmtNc2MwSkJRWE5DTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGRGRrTXNRMEZCUXp0QlFVTktMRU5CUVVNN1FVRk9SQ3h2UkVGTlF6dEJRVVZFTEZOQlFXZENMR2xDUVVGcFFpeERRVUZETEVsQlFXOUNPMGxCUTNCRUxFOUJRVThzYjBKQlFXOUNMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzYjBKQlFXOUNMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBGQlEzWkZMRU5CUVVNN1FVRkdSQ3c0UTBGRlF6dEJRVVZFTEZOQlFXZENMR3RDUVVGclFpeERRVUZETEVsQlFXZERPMGxCUTJwRkxFbEJRVWtzUTBGQlF5eEpRVUZKTzFGQlFVVXNUMEZCVHl4TFFVRkxMRU5CUVVNN1NVRkRlRUlzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpPMUZCUVVVc1QwRkJUeXhMUVVGTExFTkJRVU03U1VGRE4wSXNUVUZCVFN4TlFVRk5MRWRCUVVjc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF6dEpRVWN6UWl4SlFVRkpMRWRCUVZjc1EwRkJRenRKUVVOb1FpeEhRVUZITEVkQlFVY3NUVUZCVFN4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFVkJRVVVzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRKUVVNNVF5eEpRVUZKTEVkQlFVY3NTMEZCU3l4RFFVRkRMRU5CUVVNN1VVRkJSU3hQUVVGUExFdEJRVXNzUTBGQlF6dEpRVU0zUWl4SFFVRkhMRWRCUVVjc1RVRkJUU3hEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVWQlFVVXNSMEZCUnl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRM0JETEVsQlFVa3NSMEZCUnl4TFFVRkxMRU5CUVVNc1EwRkJRenRSUVVGRkxFOUJRVThzUzBGQlN5eERRVUZETzBsQlF6ZENMRTlCUVU4c1IwRkJSeXhIUVVGSExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRXRCUVVzc1EwRkJRenRCUVVONFF5eERRVUZETzBGQldrUXNaMFJCV1VNN1FVRkhSQ3hUUVVGblFpeHBRa0ZCYVVJc1EwRkJReXhKUVVGdlFqdEpRVU53UkN4UFFVRlBMRU5CUTB3c2EwSkJRV3RDTEVOQlFVTXNTVUZCU1N4RFFVRkRPMUZCUTNoQ0xFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NTMEZCU3l4cFFrRkJVeXhEUVVGRExGZEJRVmM3V1VGRGJFTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhOUVVGTkxFZEJRVWNzUTBGQlF6dFpRVU40UWl4UFFVRlBMRWxCUVVrc1EwRkJReXhKUVVGSkxFdEJRVXNzVVVGQlVUdFpRVU0zUWl4RFFVRkRMRU5CUVVNc1RVRkJUU3hGUVVGRkxGRkJRVkVzUlVGQlJTeFBRVUZQTEVOQlFVTXNRMEZCUXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF6dG5Ra0ZET1VNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4TFFVRkxMRVZCUVVVc1JVRkJSU3hEUVVGRExHVkJRV1VzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRNMFFzUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCVlR0WlFVTmtMRWxCUVVrc1EwRkJReXhWUVVGVkxFdEJRVXNzU1VGQlNTeERRVUZETEZOQlFWTTdXVUZEYkVNc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eEpRVUZKTEV0QlFVc3NhVUpCUVZNc1EwRkJReXhSUVVGUk8xbEJRek5ETEcxQ1FVRnRRaXhEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTTdXVUZEY0VNc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNOa0pCUVRaQ08yZENRVU0xUXl4dlFrRkJiMElzUTBGQlF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVNelF5eERRVUZETzBGQlEwb3NRMEZCUXp0QlFXWkVMRGhEUVdWRE8wRkJSMFFzVTBGQlowSXNhMEpCUVd0Q0xFTkJRVU1zU1VGQmIwSTdTVUZEY2tRc1QwRkJUeXhEUVVOTUxFbEJRVWtzUTBGQlF5eEpRVUZKTEV0QlFVc3NhVUpCUVZNc1EwRkJReXhYUVVGWE8xRkJRMjVETEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU03VVVGRGVFSXNUMEZCVHl4SlFVRkpMRU5CUVVNc1NVRkJTU3hMUVVGTExGRkJRVkU3VVVGRE4wSXNRMEZCUXl4RFFVRkRMRTFCUVUwc1JVRkJSU3hOUVVGTkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4UlFVRlJMRU5CUVVNc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXp0WlFVTjZSQ3hEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNWVUZCVlN4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFbEJRVWtzUTBGQlF5eFZRVUZWTEV0QlFVc3NXVUZCV1N4RFFVRkRMRU5CUVVNc1EwRkROMFVzUTBGQlF6dEJRVU5LTEVOQlFVTTdRVUZTUkN4blJFRlJRenRCUVVWRUxGTkJRV2RDTEdsRFFVRnBReXhEUVVGRExFbEJRVzlDTzBsQlEzQkZMRkZCUVZFc1NVRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJUdFJRVVZxUWl4TFFVRkxMR2xDUVVGVExFTkJRVU1zVjBGQlZ6dFpRVU40UWl4UFFVRlBMRWxCUVVrc1EwRkJRenRSUVVOa0xFdEJRVXNzYVVKQlFWTXNRMEZCUXl4WFFVRlhPMWxCUTNoQ0xFOUJRVThzUTBGRFRDeFBRVUZQTEVsQlFVa3NRMEZCUXl4SlFVRkpMRXRCUVVzc1VVRkJVVHRuUWtGRE4wSXNRMEZCUXl4UlFVRlJMRVZCUVVVc1VVRkJVU3hEUVVGRExFTkJRVU1zVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkRla01zUTBGQlF6dFJRVU5LTEV0QlFVc3NhVUpCUVZNc1EwRkJReXhUUVVGVE8xbEJRM1JDTEVsQlEwVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hKUVVGSkxHTkJRV01zUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1owSkJRM2hETEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1NVRkJTU3hqUVVGakxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRVZCUTNoRE8yZENRVU5CTEU5QlFVOHNTMEZCU3l4RFFVRkRPMkZCUTJRN1dVRkRSQ3hQUVVGUExFbEJRVWtzUTBGQlF5eFJRVUZSTEVsQlFVa3NTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhOUVVGTkxFZEJRVWNzUTBGQlF5eERRVUZETzB0QlEzQkVPMGxCUlVRc1QwRkJUeXhMUVVGTExFTkJRVU03UVVGRFppeERRVUZETzBGQmNrSkVMRGhGUVhGQ1F6dEJRVVZFTEZOQlFXZENMRFpDUVVFMlFpeERRVUZETEVsQlFXOUNPMGxCUTJoRkxFOUJRVThzUTBGRFRDeHBRMEZCYVVNc1EwRkJReXhKUVVGSkxFTkJRVU03VVVGRGRrTXNRMEZCUXl4WlFVRlpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzU1VGQlNTeERRVUZETEVsQlFVa3NTVUZCU1N4WlFVRlpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzFGQlF6VkVMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzU1VGQlNTdzRRa0ZCT0VJc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdVVUZEZUVRc2RVSkJRWFZDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUXpsQ0xFTkJRVU03UVVGRFNpeERRVUZETzBGQlVFUXNjMFZCVDBNN1FVRkZSQ3hUUVVGblFpdzRRa0ZCT0VJc1EwRkJReXhKUVVGdlFqdEpRVU5xUlN4UFFVRlBMRU5CUTB3c2FVTkJRV2xETEVOQlFVTXNTVUZCU1N4RFFVRkRPMUZCUTNaRExFTkJRVU1zV1VGQldTeERRVUZETEVsQlFVa3NRMEZCUXp0WlFVTnFRaXhKUVVGSkxFTkJRVU1zU1VGQlNUdFpRVU5VTEVOQlFVTXNXVUZCV1N4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeFZRVUZWTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRGNrUXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hMUVVGTExHbENRVUZUTEVOQlFVTXNWMEZCVnl4SlFVRkpMRWxCUVVrc1EwRkJReXhKUVVGSkxFdEJRVXNzU1VGQlNTeERRVUZETzFGQlF6TkVMSFZDUVVGMVFpeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVTTVRaXhEUVVGRE8wRkJRMG9zUTBGQlF6dEJRVlJFTEhkRlFWTkRPMEZCUlVRc1UwRkJaMElzYjBOQlFXOURMRU5CUTJ4RUxFbEJRVzlDTzBsQlJYQkNMRTlCUVU4c1NVRkJTU3hEUVVGRExEUkNRVUUwUWl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExHOUNRVUZ2UWl4RFFVRkRPMEZCUTNwRkxFTkJRVU03UVVGS1JDeHZSa0ZKUXp0QlFVVkVMRk5CUVdkQ0xIRkRRVUZ4UXl4RFFVTnVSQ3hKUVVGdlFqdEpRVVZ3UWl4UFFVRlBMRWxCUVVrc1EwRkJReXcyUWtGQk5rSXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXh4UWtGQmNVSXNRMEZCUXp0QlFVTXpSU3hEUVVGRE8wRkJTa1FzYzBaQlNVTTdRVUZGUkN4VFFVRm5RaXh4UTBGQmNVTXNRMEZEYmtRc1NVRkJiMEk3U1VGRmNFSXNUMEZCVHl4SlFVRkpMRU5CUVVNc05rSkJRVFpDTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTTdRVUZETTBVc1EwRkJRenRCUVVwRUxITkdRVWxETzBGQlJVUXNVMEZCVXl4MVFrRkJkVUlzUTBGQlF5eEpRVUZ2UWp0SlFVTnVSQ3hQUVVGUExHMUNRVUZ0UWl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxHOUNRVUZ2UWl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wRkJRMnBGTEVOQlFVTTdRVUZGUkN4VFFVRlRMRzFDUVVGdFFpeERRVUZETEVsQlFXOUNPMGxCUXk5RExFbEJRVWtzU1VGQlNTeERRVUZETEVsQlFVa3NTMEZCU3l4cFFrRkJVeXhEUVVGRExGRkJRVkU3VVVGQlJTeFBRVUZQTEV0QlFVc3NRMEZCUXp0SlFVVnVSQ3hQUVVGUExFTkJRMHdzU1VGQlNTeERRVUZETEc5Q1FVRnZRanRSUVVONlFpeHRRa0ZCYlVJc1EwRkRha0lzU1VGQlNTeERRVUZETEUxQlFVMHNSVUZEV0N4SlFVRkpMRU5CUVVNc1NVRkJTVHRaUVVOUUxFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhIUVVGSE8xbEJRM2hDTEVOQlFVTXNRMEZCUlN4SlFVRkpMRU5CUVVNc1ZVRkJhMElzUTBGQlF5eHJRa0ZCYTBJN1owSkJRemRETEVOQlFVTXNRMEZCUlN4SlFVRkpMRU5CUVVNc1ZVRkJhMElzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhIUVVGSE8yZENRVU5xUkN4RFFVRkRMRU5CUVVVc1NVRkJTU3hEUVVGRExGVkJRV3RDTEVOQlFVTXNVVUZCVVN4RFFVRkRMRXRCUVVzc1JVRkRNME1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUTNCQ0xFTkJRMFlzUTBGQlF6dEJRVU5LTEVOQlFVTTdRVUZGUkN4VFFVRlRMRzlDUVVGdlFpeERRVUZETEVsQlFXOUNPMGxCUTJoRUxFbEJRVWtzU1VGQlNTeERRVUZETEVsQlFVa3NTMEZCU3l4cFFrRkJVeXhEUVVGRExGRkJRVkU3VVVGQlJTeFBRVUZQTEV0QlFVc3NRMEZCUXp0SlFVTnVSQ3hQUVVGUExFTkJRMHdzU1VGQlNTeERRVUZETEhGQ1FVRnhRanRSUVVNeFFpeHRRa0ZCYlVJc1EwRkRha0lzU1VGQlNTeERRVUZETEUxQlFVMHNSVUZEV0N4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFZEJRVWNzUlVGRGFrSXNTVUZCU1N4RFFVRkRMRWxCUVVrN1dVRkRVQ3hEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1MwRkJTenRaUVVNeFFpeERRVUZETEVOQlFVVXNTVUZCU1N4RFFVRkRMRlZCUVd0Q0xFTkJRVU1zWjBKQlFXZENPMmRDUVVNelF5eERRVUZETEVOQlFVVXNTVUZCU1N4RFFVRkRMRlZCUVd0Q0xFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1MwRkJTenRuUWtGRGFrUXNRMEZCUXl4RFFVRkZMRWxCUVVrc1EwRkJReXhWUVVGclFpeERRVUZETEZGQlFWRXNRMEZCUXl4SFFVRkhMRU5CUXpGRExFTkJRMFlzUTBGQlF6dEJRVU5LTEVOQlFVTTdRVUZGUkN4VFFVRlRMRzFDUVVGdFFpeERRVUZETEUxQlFXTXNSVUZCUlN4TFFVRmhMRVZCUVVVc1IwRkJWenRKUVVOeVJTeE5RVUZOTEV0QlFVc3NSMEZCUnl4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUlVGQlJTeExRVUZMTEVOQlFVTXNRMEZCUXp0SlFVTXhReXhQUVVGUExFdEJRVXNzUzBGQlN5eERRVUZETEVOQlFVTXNTVUZCU1N4TFFVRkxMRWRCUVVjc1IwRkJSeXhEUVVGRE8wRkJRM0pETEVOQlFVTTdRVUZGUkN4VFFVRm5RaXhwUWtGQmFVSXNRMEZCUXl4SlFVRnZRanRKUVVOd1JDeFBRVUZQTEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJReXhEUVVGRExHbENRVUZwUWl4RFFVRkRMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRPMEZCUTI1RkxFTkJRVU03UVVGR1JDdzRRMEZGUXlKOSIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5oYXNMaW5lQnJlYWtJblJhbmdlID0gZXhwb3J0cy5vcmlnaW5hbGx5SGFkTGluZUJyZWFrcyA9IGV4cG9ydHMucmVpbmRlbnQgPSBleHBvcnRzLm1hcmt1cExpbmVzID0gZXhwb3J0cy5ib2R5TGluZXMgPSBleHBvcnRzLnRyaW1FbmQgPSBleHBvcnRzLnRyaW0gPSBleHBvcnRzLmlzV2hpdGVzcGFjZSA9IHZvaWQgMDtcbmZ1bmN0aW9uIGlzV2hpdGVzcGFjZShzb3VyY2UsIGxvYykge1xuICAgIGlmIChsb2MgPCAwIHx8IGxvYyA+PSBzb3VyY2UubGVuZ3RoKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuICEhc291cmNlW2xvY10ubWF0Y2goL1xccy8pO1xufVxuZXhwb3J0cy5pc1doaXRlc3BhY2UgPSBpc1doaXRlc3BhY2U7XG5jb25zdCB0cmltID0gKHgpID0+IHgudHJpbSgpO1xuZXhwb3J0cy50cmltID0gdHJpbTtcbmNvbnN0IHRyaW1FbmQgPSAoeCkgPT4geC50cmltRW5kKCk7XG5leHBvcnRzLnRyaW1FbmQgPSB0cmltRW5kO1xuZnVuY3Rpb24gYm9keUxpbmVzKHN0cikge1xuICAgIHJldHVybiBzdHJcbiAgICAgICAgLnJlcGxhY2UoL15cXG4qfFxccyokL2csICcnKVxuICAgICAgICAuc3BsaXQoL1xccj9cXG4vKTtcbn1cbmV4cG9ydHMuYm9keUxpbmVzID0gYm9keUxpbmVzO1xuZnVuY3Rpb24gbWFya3VwTGluZXMobm9kZSkge1xuICAgIHJldHVybiBub2RlLm1hcmt1cC50cmltKCkuc3BsaXQoJ1xcbicpO1xufVxuZXhwb3J0cy5tYXJrdXBMaW5lcyA9IG1hcmt1cExpbmVzO1xuZnVuY3Rpb24gcmVpbmRlbnQobGluZXMsIHNraXBGaXJzdCA9IGZhbHNlKSB7XG4gICAgY29uc3QgbWluSW5kZW50TGV2ZWwgPSBsaW5lc1xuICAgICAgICAuZmlsdGVyKChfLCBpKSA9PiAoc2tpcEZpcnN0ID8gaSA+IDAgOiB0cnVlKSlcbiAgICAgICAgLmZpbHRlcigobGluZSkgPT4gbGluZS50cmltKCkubGVuZ3RoID4gMClcbiAgICAgICAgLm1hcCgobGluZSkgPT4gbGluZS5tYXRjaCgvXlxccyovKVswXS5sZW5ndGgpXG4gICAgICAgIC5yZWR1Y2UoKGEsIGIpID0+IE1hdGgubWluKGEsIGIpLCBJbmZpbml0eSk7XG4gICAgaWYgKG1pbkluZGVudExldmVsID09PSBJbmZpbml0eSkge1xuICAgICAgICByZXR1cm4gbGluZXM7XG4gICAgfVxuICAgIGNvbnN0IGluZGVudFN0cmlwID0gbmV3IFJlZ0V4cCgnXicgKyAnICcucmVwZWF0KG1pbkluZGVudExldmVsKSk7XG4gICAgcmV0dXJuIGxpbmVzLm1hcCgobGluZSkgPT4gbGluZS5yZXBsYWNlKGluZGVudFN0cmlwLCAnJykpLm1hcChleHBvcnRzLnRyaW1FbmQpO1xufVxuZXhwb3J0cy5yZWluZGVudCA9IHJlaW5kZW50O1xuZnVuY3Rpb24gb3JpZ2luYWxseUhhZExpbmVCcmVha3MocGF0aCwgeyBsb2NTdGFydCwgbG9jRW5kIH0pIHtcbiAgICBjb25zdCBub2RlID0gcGF0aC5nZXRWYWx1ZSgpO1xuICAgIHJldHVybiBoYXNMaW5lQnJlYWtJblJhbmdlKG5vZGUuc291cmNlLCBsb2NTdGFydChub2RlKSwgbG9jRW5kKG5vZGUpKTtcbn1cbmV4cG9ydHMub3JpZ2luYWxseUhhZExpbmVCcmVha3MgPSBvcmlnaW5hbGx5SGFkTGluZUJyZWFrcztcbmZ1bmN0aW9uIGhhc0xpbmVCcmVha0luUmFuZ2Uoc291cmNlLCBsb2NTdGFydCwgbG9jRW5kKSB7XG4gICAgY29uc3QgaW5kZXhPZk5ld0xpbmUgPSBzb3VyY2UuaW5kZXhPZignXFxuJywgbG9jU3RhcnQpO1xuICAgIHJldHVybiAwIDw9IGluZGV4T2ZOZXdMaW5lICYmIGluZGV4T2ZOZXdMaW5lIDwgbG9jRW5kO1xufVxuZXhwb3J0cy5oYXNMaW5lQnJlYWtJblJhbmdlID0gaGFzTGluZUJyZWFrSW5SYW5nZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWMzUnlhVzVuTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2lMaTR2TGk0dkxpNHZjM0pqTDNCeWFXNTBaWEl2ZFhScGJITXZjM1J5YVc1bkxuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenRCUVVWQkxGTkJRV2RDTEZsQlFWa3NRMEZCUXl4TlFVRmpMRVZCUVVVc1IwRkJWenRKUVVOMFJDeEpRVUZKTEVkQlFVY3NSMEZCUnl4RFFVRkRMRWxCUVVrc1IwRkJSeXhKUVVGSkxFMUJRVTBzUTBGQlF5eE5RVUZOTzFGQlFVVXNUMEZCVHl4TFFVRkxMRU5CUVVNN1NVRkRiRVFzVDBGQlR5eERRVUZETEVOQlFVTXNUVUZCVFN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0QlFVTnVReXhEUVVGRE8wRkJTRVFzYjBOQlIwTTdRVUZGVFN4TlFVRk5MRWxCUVVrc1IwRkJSeXhEUVVGRExFTkJRVk1zUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRE8wRkJRUzlDTEZGQlFVRXNTVUZCU1N4UlFVRXlRanRCUVVOeVF5eE5RVUZOTEU5QlFVOHNSMEZCUnl4RFFVRkRMRU5CUVZNc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEU5QlFVOHNSVUZCUlN4RFFVRkRPMEZCUVhKRExGRkJRVUVzVDBGQlR5eFhRVUU0UWp0QlFVVnNSQ3hUUVVGblFpeFRRVUZUTEVOQlFVTXNSMEZCVnp0SlFVTnVReXhQUVVGUExFZEJRVWM3VTBGRFVDeFBRVUZQTEVOQlFVTXNXVUZCV1N4RlFVRkZMRVZCUVVVc1EwRkJRenRUUVVONlFpeExRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNN1FVRkRjRUlzUTBGQlF6dEJRVXBFTERoQ1FVbERPMEZCUlVRc1UwRkJaMElzVjBGQlZ5eERRVVY2UWl4SlFVRlBPMGxCUTFBc1QwRkJUeXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dEJRVU40UXl4RFFVRkRPMEZCU2tRc2EwTkJTVU03UVVGRlJDeFRRVUZuUWl4UlFVRlJMRU5CUVVNc1MwRkJaU3hGUVVGRkxGTkJRVk1zUjBGQlJ5eExRVUZMTzBsQlEzcEVMRTFCUVUwc1kwRkJZeXhIUVVGSExFdEJRVXM3VTBGRGVrSXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8xTkJRelZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRWxCUVVrc1JVRkJSU3hGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkRMRTFCUVUwc1IwRkJSeXhEUVVGRExFTkJRVU03VTBGRGVFTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1NVRkJTU3hGUVVGRkxFVkJRVVVzUTBGQlJTeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJVeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEUxQlFVMHNRMEZCUXp0VFFVTndSQ3hOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRVZCUVVVc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1JVRkJSU3hSUVVGUkxFTkJRVU1zUTBGQlF6dEpRVVU1UXl4SlFVRkpMR05CUVdNc1MwRkJTeXhSUVVGUkxFVkJRVVU3VVVGREwwSXNUMEZCVHl4TFFVRkxMRU5CUVVNN1MwRkRaRHRKUVVWRUxFMUJRVTBzVjBGQlZ5eEhRVUZITEVsQlFVa3NUVUZCVFN4RFFVRkRMRWRCUVVjc1IwRkJSeXhIUVVGSExFTkJRVU1zVFVGQlRTeERRVUZETEdOQlFXTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRha1VzVDBGQlR5eExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1NVRkJTU3hGUVVGRkxFVkJRVVVzUTBGQlF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRmRCUVZjc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXl4bFFVRlBMRU5CUVVNc1EwRkJRenRCUVVONlJTeERRVUZETzBGQllrUXNORUpCWVVNN1FVRkZSQ3hUUVVGblFpeDFRa0ZCZFVJc1EwRkRja01zU1VGQmJVSXNSVUZEYmtJc1JVRkJSU3hSUVVGUkxFVkJRVVVzVFVGQlRTeEZRVUYxUWp0SlFVVjZReXhOUVVGTkxFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RlFVRkZMRU5CUVVNN1NVRkROMElzVDBGQlR5eHRRa0ZCYlVJc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeEZRVUZGTEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSU3hOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTjRSU3hEUVVGRE8wRkJUa1FzTUVSQlRVTTdRVUZGUkN4VFFVRm5RaXh0UWtGQmJVSXNRMEZEYWtNc1RVRkJZeXhGUVVOa0xGRkJRV2RDTEVWQlEyaENMRTFCUVdNN1NVRkZaQ3hOUVVGTkxHTkJRV01zUjBGQlJ5eE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1JVRkJSU3hSUVVGUkxFTkJRVU1zUTBGQlF6dEpRVU4wUkN4UFFVRlBMRU5CUVVNc1NVRkJTU3hqUVVGakxFbEJRVWtzWTBGQll5eEhRVUZITEUxQlFVMHNRMEZCUXp0QlFVTjRSQ3hEUVVGRE8wRkJVRVFzYTBSQlQwTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkxpcXVpZE5vZGVUeXBlcyA9IGV4cG9ydHMuSHRtbE5vZGVUeXBlcyA9IGV4cG9ydHMuTm9kZVR5cGVzID0gdm9pZCAwO1xudmFyIE5vZGVUeXBlcztcbihmdW5jdGlvbiAoTm9kZVR5cGVzKSB7XG4gICAgTm9kZVR5cGVzW1wiRG9jdW1lbnRcIl0gPSBcIkRvY3VtZW50XCI7XG4gICAgTm9kZVR5cGVzW1wiTGlxdWlkUmF3VGFnXCJdID0gXCJMaXF1aWRSYXdUYWdcIjtcbiAgICBOb2RlVHlwZXNbXCJMaXF1aWRUYWdcIl0gPSBcIkxpcXVpZFRhZ1wiO1xuICAgIE5vZGVUeXBlc1tcIkxpcXVpZEJyYW5jaFwiXSA9IFwiTGlxdWlkQnJhbmNoXCI7XG4gICAgTm9kZVR5cGVzW1wiTGlxdWlkRHJvcFwiXSA9IFwiTGlxdWlkRHJvcFwiO1xuICAgIE5vZGVUeXBlc1tcIkh0bWxTZWxmQ2xvc2luZ0VsZW1lbnRcIl0gPSBcIkh0bWxTZWxmQ2xvc2luZ0VsZW1lbnRcIjtcbiAgICBOb2RlVHlwZXNbXCJIdG1sVm9pZEVsZW1lbnRcIl0gPSBcIkh0bWxWb2lkRWxlbWVudFwiO1xuICAgIE5vZGVUeXBlc1tcIkh0bWxDb21tZW50XCJdID0gXCJIdG1sQ29tbWVudFwiO1xuICAgIE5vZGVUeXBlc1tcIkh0bWxFbGVtZW50XCJdID0gXCJIdG1sRWxlbWVudFwiO1xuICAgIE5vZGVUeXBlc1tcIkh0bWxSYXdOb2RlXCJdID0gXCJIdG1sUmF3Tm9kZVwiO1xuICAgIE5vZGVUeXBlc1tcIkF0dHJTaW5nbGVRdW90ZWRcIl0gPSBcIkF0dHJTaW5nbGVRdW90ZWRcIjtcbiAgICBOb2RlVHlwZXNbXCJBdHRyRG91YmxlUXVvdGVkXCJdID0gXCJBdHRyRG91YmxlUXVvdGVkXCI7XG4gICAgTm9kZVR5cGVzW1wiQXR0clVucXVvdGVkXCJdID0gXCJBdHRyVW5xdW90ZWRcIjtcbiAgICBOb2RlVHlwZXNbXCJBdHRyRW1wdHlcIl0gPSBcIkF0dHJFbXB0eVwiO1xuICAgIE5vZGVUeXBlc1tcIlRleHROb2RlXCJdID0gXCJUZXh0Tm9kZVwiO1xufSkoTm9kZVR5cGVzID0gZXhwb3J0cy5Ob2RlVHlwZXMgfHwgKGV4cG9ydHMuTm9kZVR5cGVzID0ge30pKTtcbmV4cG9ydHMuSHRtbE5vZGVUeXBlcyA9IFtcbiAgICBOb2RlVHlwZXMuSHRtbEVsZW1lbnQsXG4gICAgTm9kZVR5cGVzLkh0bWxSYXdOb2RlLFxuICAgIE5vZGVUeXBlcy5IdG1sVm9pZEVsZW1lbnQsXG4gICAgTm9kZVR5cGVzLkh0bWxTZWxmQ2xvc2luZ0VsZW1lbnQsXG5dO1xuZXhwb3J0cy5MaXF1aWROb2RlVHlwZXMgPSBbXG4gICAgTm9kZVR5cGVzLkxpcXVpZFRhZyxcbiAgICBOb2RlVHlwZXMuTGlxdWlkRHJvcCxcbiAgICBOb2RlVHlwZXMuTGlxdWlkQnJhbmNoLFxuICAgIE5vZGVUeXBlcy5MaXF1aWRSYXdUYWcsXG5dO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pZEhsd1pYTXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOXpjbU12ZEhsd1pYTXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3TzBGQlVVRXNTVUZCV1N4VFFXZENXRHRCUVdoQ1JDeFhRVUZaTEZOQlFWTTdTVUZEYmtJc2EwTkJRWEZDTEVOQlFVRTdTVUZEY2tJc01FTkJRVFpDTEVOQlFVRTdTVUZETjBJc2IwTkJRWFZDTEVOQlFVRTdTVUZEZGtJc01FTkJRVFpDTEVOQlFVRTdTVUZETjBJc2MwTkJRWGxDTEVOQlFVRTdTVUZEZWtJc09FUkJRV2xFTEVOQlFVRTdTVUZEYWtRc1owUkJRVzFETEVOQlFVRTdTVUZEYmtNc2QwTkJRVEpDTEVOQlFVRTdTVUZETTBJc2QwTkJRVEpDTEVOQlFVRTdTVUZETTBJc2QwTkJRVEpDTEVOQlFVRTdTVUZETTBJc2EwUkJRWEZETEVOQlFVRTdTVUZEY2tNc2EwUkJRWEZETEVOQlFVRTdTVUZEY2tNc01FTkJRVFpDTEVOQlFVRTdTVUZETjBJc2IwTkJRWFZDTEVOQlFVRTdTVUZEZGtJc2EwTkJRWEZDTEVOQlFVRTdRVUZEZGtJc1EwRkJReXhGUVdoQ1Z5eFRRVUZUTEVkQlFWUXNhVUpCUVZNc1MwRkJWQ3hwUWtGQlV5eFJRV2RDY0VJN1FVRkZXU3hSUVVGQkxHRkJRV0VzUjBGQlJ6dEpRVU16UWl4VFFVRlRMRU5CUVVNc1YwRkJWenRKUVVOeVFpeFRRVUZUTEVOQlFVTXNWMEZCVnp0SlFVTnlRaXhUUVVGVExFTkJRVU1zWlVGQlpUdEpRVU42UWl4VFFVRlRMRU5CUVVNc2MwSkJRWE5DTzBOQlEzaENMRU5CUVVNN1FVRkZSU3hSUVVGQkxHVkJRV1VzUjBGQlJ6dEpRVU0zUWl4VFFVRlRMRU5CUVVNc1UwRkJVenRKUVVOdVFpeFRRVUZUTEVOQlFVTXNWVUZCVlR0SlFVTndRaXhUUVVGVExFTkJRVU1zV1VGQldUdEpRVU4wUWl4VFFVRlRMRU5CUVVNc1dVRkJXVHREUVVOa0xFTkJRVU1pZlE9PSIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kcm9wTGFzdCA9IGV4cG9ydHMuZGVlcEdldCA9IGV4cG9ydHMubG9jRW5kID0gZXhwb3J0cy5sb2NTdGFydCA9IGV4cG9ydHMuYXNzZXJ0TmV2ZXIgPSB2b2lkIDA7XG5mdW5jdGlvbiBhc3NlcnROZXZlcih4KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbmV4cGVjdGVkIG9iamVjdDogJHt4fWApO1xufVxuZXhwb3J0cy5hc3NlcnROZXZlciA9IGFzc2VydE5ldmVyO1xuZnVuY3Rpb24gbG9jU3RhcnQobm9kZSkge1xuICAgIHJldHVybiBub2RlLnBvc2l0aW9uLnN0YXJ0O1xufVxuZXhwb3J0cy5sb2NTdGFydCA9IGxvY1N0YXJ0O1xuZnVuY3Rpb24gbG9jRW5kKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5wb3NpdGlvbi5lbmQ7XG59XG5leHBvcnRzLmxvY0VuZCA9IGxvY0VuZDtcbmZ1bmN0aW9uIGRlZXBHZXQocGF0aCwgb2JqKSB7XG4gICAgcmV0dXJuIHBhdGgucmVkdWNlKChjdXJyLCBrKSA9PiB7XG4gICAgICAgIGlmIChjdXJyICYmIGN1cnJba10gIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiBjdXJyW2tdO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0sIG9iaik7XG59XG5leHBvcnRzLmRlZXBHZXQgPSBkZWVwR2V0O1xuZnVuY3Rpb24gZHJvcExhc3QobiwgeHMpIHtcbiAgICBjb25zdCByZXN1bHQgPSBbLi4ueHNdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIHJlc3VsdC5wb3AoKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydHMuZHJvcExhc3QgPSBkcm9wTGFzdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWRYUnBiSE11YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTl6Y21NdmRYUnBiSE11ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN08wRkJSVUVzVTBGQlowSXNWMEZCVnl4RFFVRkRMRU5CUVZFN1NVRkRiRU1zVFVGQlRTeEpRVUZKTEV0QlFVc3NRMEZCUXl4elFrRkJjMElzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXp0QlFVTTNReXhEUVVGRE8wRkJSa1FzYTBOQlJVTTdRVUZGUkN4VFFVRm5RaXhSUVVGUkxFTkJRVU1zU1VGQk5FSTdTVUZEYmtRc1QwRkJUeXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEV0QlFVc3NRMEZCUXp0QlFVTTNRaXhEUVVGRE8wRkJSa1FzTkVKQlJVTTdRVUZGUkN4VFFVRm5RaXhOUVVGTkxFTkJRVU1zU1VGQk5FSTdTVUZEYWtRc1QwRkJUeXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEVkQlFVY3NRMEZCUXp0QlFVTXpRaXhEUVVGRE8wRkJSa1FzZDBKQlJVTTdRVUZGUkN4VFFVRm5RaXhQUVVGUExFTkJRVlVzU1VGQmVVSXNSVUZCUlN4SFFVRlJPMGxCUTJ4RkxFOUJRVThzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRWxCUVZNc1JVRkJSU3hEUVVGclFpeEZRVUZGTEVWQlFVVTdVVUZEYmtRc1NVRkJTU3hKUVVGSkxFbEJRVWtzU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4TFFVRkxMRk5CUVZNN1dVRkJSU3hQUVVGUExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTnNSQ3hQUVVGUExGTkJRVk1zUTBGQlF6dEpRVU51UWl4RFFVRkRMRVZCUVVVc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRFZpeERRVUZETzBGQlRFUXNNRUpCUzBNN1FVRkZSQ3hUUVVGblFpeFJRVUZSTEVOQlFVa3NRMEZCVXl4RlFVRkZMRVZCUVdkQ08wbEJRM0pFTEUxQlFVMHNUVUZCVFN4SFFVRkhMRU5CUVVNc1IwRkJSeXhGUVVGRkxFTkJRVU1zUTBGQlF6dEpRVU4yUWl4TFFVRkxMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRk8xRkJRekZDTEUxQlFVMHNRMEZCUXl4SFFVRkhMRVZCUVVVc1EwRkJRenRMUVVOa08wbEJRMFFzVDBGQlR5eE5RVUZOTEVOQlFVTTdRVUZEYUVJc1EwRkJRenRCUVU1RUxEUkNRVTFESW4wPSIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9pbmRleC5qc29uJyk7IiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCIvKiFcbiAqIGlzb2JqZWN0IDxodHRwczovL2dpdGh1Yi5jb20vam9uc2NobGlua2VydC9pc29iamVjdD5cbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtMjAxNSwgSm9uIFNjaGxpbmtlcnQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnICYmIGlzQXJyYXkodmFsKSA9PT0gZmFsc2U7XG59O1xuIiwiLyoqXG4gKiBsaW5lLWNvbHVtbiAtIENvbnZlcnQgZWZmaWNpZW50bHkgaW5kZXggdG8vZnJvbSBsaW5lLWNvbHVtbiBpbiBhIHN0cmluZ1xuICogQG1vZHVsZSAgbGluZUNvbHVtblxuICogQGxpY2Vuc2UgTUlUXG4gKi9cblwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNBcnJheSAgPSByZXF1aXJlKFwiaXNhcnJheVwiKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoXCJpc29iamVjdFwiKTtcbnZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcblxubW9kdWxlLmV4cG9ydHMgPSBMaW5lQ29sdW1uRmluZGVyO1xuXG4vKipcbiAqIEZpbmRlciBmb3IgaW5kZXggYW5kIGxpbmUtY29sdW1uIGZyb20gZ2l2ZW4gc3RyaW5nLlxuICpcbiAqIFlvdSBjYW4gY2FsbCB0aGlzIHdpdGhvdXQgYG5ld2Agb3BlcmF0b3IgYXMgaXQgcmV0dXJucyBhbiBpbnN0YW5jZSBhbnl3YXkuXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIC0gQSBzdHJpbmcgdG8gYmUgcGFyc2VkLlxuICogQHBhcmFtIHtPYmplY3R8bnVtYmVyfSBbb3B0aW9uc10gLSBPcHRpb25zLlxuICogICAgIFRoaXMgY2FuIGJlIGFuIGluZGV4IGluIHRoZSBzdHJpbmcgZm9yIHNob3J0aGFuZCBvZiBgbGluZUNvbHVtbihzdHIsIGluZGV4KWAuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMub3JpZ2luPTFdIC0gVGhlIG9yaWdpbiB2YWx1ZSBvZiBsaW5lIGFuZCBjb2x1bW4uXG4gKi9cbmZ1bmN0aW9uIExpbmVDb2x1bW5GaW5kZXIoc3RyLCBvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBMaW5lQ29sdW1uRmluZGVyKSkge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJudW1iZXJcIikge1xuICAgICAgcmV0dXJuIChuZXcgTGluZUNvbHVtbkZpbmRlcihzdHIpKS5mcm9tSW5kZXgob3B0aW9ucyk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgTGluZUNvbHVtbkZpbmRlcihzdHIsIG9wdGlvbnMpO1xuICB9XG5cbiAgdGhpcy5zdHIgPSBzdHIgfHwgXCJcIjtcbiAgdGhpcy5saW5lVG9JbmRleCA9IGJ1aWxkTGluZVRvSW5kZXgodGhpcy5zdHIpO1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB0aGlzLm9yaWdpbiA9IHR5cGVvZiBvcHRpb25zLm9yaWdpbiA9PT0gXCJ1bmRlZmluZWRcIiA/IDEgOiBvcHRpb25zLm9yaWdpbjtcbn1cblxuLyoqXG4gKiBGaW5kIGxpbmUgYW5kIGNvbHVtbiBmcm9tIGluZGV4IGluIHRoZSBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7bnVtYmVyfSBpbmRleCAtIEluZGV4IGluIHRoZSBzdHJpbmcuICgwLW9yaWdpbilcbiAqIEByZXR1cm4ge09iamVjdHxudWxsfVxuICogICAgIEZvdW5kIGxpbmUgbnVtYmVyIGFuZCBjb2x1bW4gbnVtYmVyIGluIG9iamVjdCBgeyBsaW5lOiBYLCBjb2w6IFkgfWAuXG4gKiAgICAgSWYgdGhlIGdpdmVuIGluZGV4IGlzIG91dCBvZiByYW5nZSwgaXQgcmV0dXJucyBgbnVsbGAuXG4gKi9cbkxpbmVDb2x1bW5GaW5kZXIucHJvdG90eXBlLmZyb21JbmRleCA9IGZ1bmN0aW9uIChpbmRleCkge1xuICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHRoaXMuc3RyLmxlbmd0aCB8fCBpc05hTihpbmRleCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBsaW5lID0gZmluZExvd2VySW5kZXhJblJhbmdlQXJyYXkoaW5kZXgsIHRoaXMubGluZVRvSW5kZXgpO1xuICByZXR1cm4ge1xuICAgIGxpbmU6IGxpbmUgKyB0aGlzLm9yaWdpbixcbiAgICBjb2w6ICBpbmRleCAtIHRoaXMubGluZVRvSW5kZXhbbGluZV0gKyB0aGlzLm9yaWdpblxuICB9O1xufVxuXG4vKipcbiAqIEZpbmQgaW5kZXggZnJvbSBsaW5lIGFuZCBjb2x1bW4gaW4gdGhlIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gIHtudW1iZXJ8T2JqZWN0fEFycmF5fSBsaW5lIC0gTGluZSBudW1iZXIgaW4gdGhlIHN0cmluZy5cbiAqICAgICBUaGlzIGNhbiBiZSBhbiBPYmplY3Qgb2YgYHsgbGluZTogWCwgY29sOiBZIH1gLCBvclxuICogICAgIGFuIEFycmF5IG9mIGBbbGluZSwgY29sXWAuXG4gKiBAcGFyYW0gIHtudW1iZXJ9IFtjb2x1bW5dIC0gQ29sdW1uIG51bWJlciBpbiB0aGUgc3RyaW5nLlxuICogICAgIFRoaXMgbXVzdCBiZSBvbWl0dGVkIG9yIHVuZGVmaW5lZCB3aGVuIE9iamVjdCBvciBBcnJheSBpcyBnaXZlblxuICogICAgIHRvIHRoZSBmaXJzdCBhcmd1bWVudC5cbiAqIEByZXR1cm4ge251bWJlcn1cbiAqICAgICBGb3VuZCBpbmRleCBpbiB0aGUgc3RyaW5nLiAoYWx3YXlzIDAtb3JpZ2luKVxuICogICAgIElmIHRoZSBnaXZlbiBsaW5lIG9yIGNvbHVtbiBpcyBvdXQgb2YgcmFuZ2UsIGl0IHJldHVybnMgYC0xYC5cbiAqL1xuTGluZUNvbHVtbkZpbmRlci5wcm90b3R5cGUudG9JbmRleCA9IGZ1bmN0aW9uIChsaW5lLCBjb2x1bW4pIHtcbiAgaWYgKHR5cGVvZiBjb2x1bW4gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBpZiAoaXNBcnJheShsaW5lKSAmJiBsaW5lLmxlbmd0aCA+PSAyKSB7XG4gICAgICByZXR1cm4gdGhpcy50b0luZGV4KGxpbmVbMF0sIGxpbmVbMV0pO1xuICAgIH1cbiAgICBpZiAoaXNPYmplY3QobGluZSkgJiYgXCJsaW5lXCIgaW4gbGluZSAmJiAoXCJjb2xcIiBpbiBsaW5lIHx8IFwiY29sdW1uXCIgaW4gbGluZSkpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvSW5kZXgobGluZS5saW5lLCAoXCJjb2xcIiBpbiBsaW5lID8gbGluZS5jb2wgOiBsaW5lLmNvbHVtbikpO1xuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH1cbiAgaWYgKGlzTmFOKGxpbmUpIHx8IGlzTmFOKGNvbHVtbikpIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICBsaW5lIC09IHRoaXMub3JpZ2luO1xuICBjb2x1bW4gLT0gdGhpcy5vcmlnaW47XG5cbiAgaWYgKGxpbmUgPj0gMCAmJiBjb2x1bW4gPj0gMCAmJiBsaW5lIDwgdGhpcy5saW5lVG9JbmRleC5sZW5ndGgpIHtcbiAgICB2YXIgbGluZUluZGV4ID0gdGhpcy5saW5lVG9JbmRleFtsaW5lXTtcbiAgICB2YXIgbmV4dEluZGV4ID0gKFxuICAgICAgbGluZSA9PT0gdGhpcy5saW5lVG9JbmRleC5sZW5ndGggLSAxXG4gICAgICAgID8gdGhpcy5zdHIubGVuZ3RoXG4gICAgICAgIDogdGhpcy5saW5lVG9JbmRleFtsaW5lICsgMV1cbiAgICApO1xuXG4gICAgaWYgKGNvbHVtbiA8IG5leHRJbmRleCAtIGxpbmVJbmRleCkge1xuICAgICAgcmV0dXJuIGxpbmVJbmRleCArIGNvbHVtbjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG4vKipcbiAqIEJ1aWxkIGFuIGFycmF5IG9mIGluZGV4ZXMgb2YgZWFjaCBsaW5lIGZyb20gYSBzdHJpbmcuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSAgIHN0ciB7c3RyaW5nfSAgQW4gaW5wdXQgc3RyaW5nLlxuICogQHJldHVybiAge251bWJlcltdfSAgICBCdWlsdCBhcnJheSBvZiBpbmRleGVzLiBUaGUga2V5IGlzIGxpbmUgbnVtYmVyLlxuICovXG5mdW5jdGlvbiBidWlsZExpbmVUb0luZGV4KHN0cikge1xuICB2YXIgbGluZXMgPSBzdHIuc3BsaXQoXCJcXG5cIiksXG4gICAgICBsaW5lVG9JbmRleCA9IG5ldyBBcnJheShsaW5lcy5sZW5ndGgpLFxuICAgICAgaW5kZXggPSAwO1xuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gbGluZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgbGluZVRvSW5kZXhbaV0gPSBpbmRleDtcbiAgICBpbmRleCArPSBsaW5lc1tpXS5sZW5ndGggKyAvKiBcIlxcblwiLmxlbmd0aCAqLyAxO1xuICB9XG4gIHJldHVybiBsaW5lVG9JbmRleDtcbn1cblxuLyoqXG4gKiBGaW5kIGEgbG93ZXItYm91bmQgaW5kZXggb2YgYSB2YWx1ZSBpbiBhIHNvcnRlZCBhcnJheSBvZiByYW5nZXMuXG4gKlxuICogQXNzdW1lIGBhcnIgPSBbMCwgNSwgMTAsIDE1LCAyMF1gIGFuZFxuICogdGhpcyByZXR1cm5zIGAxYCBmb3IgYHZhbHVlID0gN2AgKDUgPD0gdmFsdWUgPCAxMCksXG4gKiBhbmQgcmV0dXJucyBgM2AgZm9yIGB2YWx1ZSA9IDE4YCAoMTUgPD0gdmFsdWUgPCAyMCkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSAgYXJyICAge251bWJlcltdfSBBbiBhcnJheSBvZiB2YWx1ZXMgcmVwcmVzZW50aW5nIHJhbmdlcy5cbiAqIEBwYXJhbSAgdmFsdWUge251bWJlcn0gICBBIHZhbHVlIHRvIGJlIHNlYXJjaGVkLlxuICogQHJldHVybiB7bnVtYmVyfSBGb3VuZCBpbmRleC4gSWYgbm90IGZvdW5kIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGZpbmRMb3dlckluZGV4SW5SYW5nZUFycmF5KHZhbHVlLCBhcnIpIHtcbiAgaWYgKHZhbHVlID49IGFyclthcnIubGVuZ3RoIC0gMV0pIHtcbiAgICByZXR1cm4gYXJyLmxlbmd0aCAtIDE7XG4gIH1cblxuICB2YXIgbWluID0gMCwgbWF4ID0gYXJyLmxlbmd0aCAtIDIsIG1pZDtcbiAgd2hpbGUgKG1pbiA8IG1heCkge1xuICAgIG1pZCA9IG1pbiArICgobWF4IC0gbWluKSA+PiAxKTtcblxuICAgIGlmICh2YWx1ZSA8IGFyclttaWRdKSB7XG4gICAgICBtYXggPSBtaWQgLSAxO1xuICAgIH0gZWxzZSBpZiAodmFsdWUgPj0gYXJyW21pZCArIDFdKSB7XG4gICAgICBtaW4gPSBtaWQgKyAxO1xuICAgIH0gZWxzZSB7IC8vIHZhbHVlID49IGFyclttaWRdICYmIHZhbHVlIDwgYXJyW21pZCArIDFdXG4gICAgICBtaW4gPSBtaWQ7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1pbjtcbn1cbiIsIi8vLyA8cmVmZXJlbmNlIHR5cGVzPVwiLi4vaW5kZXguZC50c1wiIC8+XG52YXIgbWFpbiQxID0ge2V4cG9ydHM6IHt9fTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFByaXZhdGUgc3R1ZmZcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8qXG4gIGBGYWlsdXJlYHMgcmVwcmVzZW50IGV4cHJlc3Npb25zIHRoYXQgd2VyZW4ndCBtYXRjaGVkIHdoaWxlIHBhcnNpbmcuIFRoZXkgYXJlIHVzZWQgdG8gZ2VuZXJhdGVcbiAgZXJyb3IgbWVzc2FnZXMgYXV0b21hdGljYWxseS4gVGhlIGludGVyZmFjZSBvZiBgRmFpbHVyZWBzIGluY2x1ZGVzIHRoZSBjb2xsb3dpbmcgbWV0aG9kczpcblxuICAtIGdldFRleHQoKSA6IFN0cmluZ1xuICAtIGdldFR5cGUoKSA6IFN0cmluZyAgKG9uZSBvZiB7XCJkZXNjcmlwdGlvblwiLCBcInN0cmluZ1wiLCBcImNvZGVcIn0pXG4gIC0gaXNEZXNjcmlwdGlvbigpIDogYm9vbFxuICAtIGlzU3RyaW5nVGVybWluYWwoKSA6IGJvb2xcbiAgLSBpc0NvZGUoKSA6IGJvb2xcbiAgLSBpc0ZsdWZmeSgpIDogYm9vbFxuICAtIG1ha2VGbHVmZnkoKSA6IHZvaWRcbiAgLSBzdWJzdW1lcyhGYWlsdXJlKSA6IGJvb2xcbiovXG5cbmZ1bmN0aW9uIGlzVmFsaWRUeXBlKHR5cGUpIHtcbiAgcmV0dXJuIHR5cGUgPT09ICdkZXNjcmlwdGlvbicgfHwgdHlwZSA9PT0gJ3N0cmluZycgfHwgdHlwZSA9PT0gJ2NvZGUnO1xufVxuXG5mdW5jdGlvbiBGYWlsdXJlJDIocGV4cHIsIHRleHQsIHR5cGUpIHtcbiAgaWYgKCFpc1ZhbGlkVHlwZSh0eXBlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBGYWlsdXJlIHR5cGU6ICcgKyB0eXBlKTtcbiAgfVxuICB0aGlzLnBleHByID0gcGV4cHI7XG4gIHRoaXMudGV4dCA9IHRleHQ7XG4gIHRoaXMudHlwZSA9IHR5cGU7XG4gIHRoaXMuZmx1ZmZ5ID0gZmFsc2U7XG59XG5cbkZhaWx1cmUkMi5wcm90b3R5cGUuZ2V0UEV4cHIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMucGV4cHI7XG59O1xuXG5GYWlsdXJlJDIucHJvdG90eXBlLmdldFRleHQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMudGV4dDtcbn07XG5cbkZhaWx1cmUkMi5wcm90b3R5cGUuZ2V0VHlwZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy50eXBlO1xufTtcblxuRmFpbHVyZSQyLnByb3RvdHlwZS5pc0Rlc2NyaXB0aW9uID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnR5cGUgPT09ICdkZXNjcmlwdGlvbic7XG59O1xuXG5GYWlsdXJlJDIucHJvdG90eXBlLmlzU3RyaW5nVGVybWluYWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMudHlwZSA9PT0gJ3N0cmluZyc7XG59O1xuXG5GYWlsdXJlJDIucHJvdG90eXBlLmlzQ29kZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy50eXBlID09PSAnY29kZSc7XG59O1xuXG5GYWlsdXJlJDIucHJvdG90eXBlLmlzRmx1ZmZ5ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmZsdWZmeTtcbn07XG5cbkZhaWx1cmUkMi5wcm90b3R5cGUubWFrZUZsdWZmeSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmZsdWZmeSA9IHRydWU7XG59O1xuXG5GYWlsdXJlJDIucHJvdG90eXBlLmNsZWFyRmx1ZmZ5ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZmx1ZmZ5ID0gZmFsc2U7XG59O1xuXG5GYWlsdXJlJDIucHJvdG90eXBlLnN1YnN1bWVzID0gZnVuY3Rpb24odGhhdCkge1xuICByZXR1cm4gKFxuICAgIHRoaXMuZ2V0VGV4dCgpID09PSB0aGF0LmdldFRleHQoKSAmJlxuICAgIHRoaXMudHlwZSA9PT0gdGhhdC50eXBlICYmXG4gICAgKCF0aGlzLmlzRmx1ZmZ5KCkgfHwgKHRoaXMuaXNGbHVmZnkoKSAmJiB0aGF0LmlzRmx1ZmZ5KCkpKVxuICApO1xufTtcblxuRmFpbHVyZSQyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy50eXBlID09PSAnc3RyaW5nJyA/IEpTT04uc3RyaW5naWZ5KHRoaXMuZ2V0VGV4dCgpKSA6IHRoaXMuZ2V0VGV4dCgpO1xufTtcblxuRmFpbHVyZSQyLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICBjb25zdCBmYWlsdXJlID0gbmV3IEZhaWx1cmUkMih0aGlzLnBleHByLCB0aGlzLnRleHQsIHRoaXMudHlwZSk7XG4gIGlmICh0aGlzLmlzRmx1ZmZ5KCkpIHtcbiAgICBmYWlsdXJlLm1ha2VGbHVmZnkoKTtcbiAgfVxuICByZXR1cm4gZmFpbHVyZTtcbn07XG5cbkZhaWx1cmUkMi5wcm90b3R5cGUudG9LZXkgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMudG9TdHJpbmcoKSArICcjJyArIHRoaXMudHlwZTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBFeHBvcnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgRmFpbHVyZV8xID0gRmFpbHVyZSQyO1xuXG52YXIgY29tbW9uJGwgPSB7fTtcblxuKGZ1bmN0aW9uIChleHBvcnRzKSB7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBQcml2YXRlIFN0dWZmXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vLyBIZWxwZXJzXG5cbmNvbnN0IGVzY2FwZVN0cmluZ0ZvciA9IHt9O1xuZm9yIChsZXQgYyA9IDA7IGMgPCAxMjg7IGMrKykge1xuICBlc2NhcGVTdHJpbmdGb3JbY10gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGMpO1xufVxuZXNjYXBlU3RyaW5nRm9yW1wiJ1wiLmNoYXJDb2RlQXQoMCldID0gXCJcXFxcJ1wiO1xuZXNjYXBlU3RyaW5nRm9yWydcIicuY2hhckNvZGVBdCgwKV0gPSAnXFxcXFwiJztcbmVzY2FwZVN0cmluZ0ZvclsnXFxcXCcuY2hhckNvZGVBdCgwKV0gPSAnXFxcXFxcXFwnO1xuZXNjYXBlU3RyaW5nRm9yWydcXGInLmNoYXJDb2RlQXQoMCldID0gJ1xcXFxiJztcbmVzY2FwZVN0cmluZ0ZvclsnXFxmJy5jaGFyQ29kZUF0KDApXSA9ICdcXFxcZic7XG5lc2NhcGVTdHJpbmdGb3JbJ1xcbicuY2hhckNvZGVBdCgwKV0gPSAnXFxcXG4nO1xuZXNjYXBlU3RyaW5nRm9yWydcXHInLmNoYXJDb2RlQXQoMCldID0gJ1xcXFxyJztcbmVzY2FwZVN0cmluZ0ZvclsnXFx0Jy5jaGFyQ29kZUF0KDApXSA9ICdcXFxcdCc7XG5lc2NhcGVTdHJpbmdGb3JbJ1xcdTAwMGInLmNoYXJDb2RlQXQoMCldID0gJ1xcXFx2JztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEV4cG9ydHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydHMuYWJzdHJhY3QgPSBmdW5jdGlvbihvcHRNZXRob2ROYW1lKSB7XG4gIGNvbnN0IG1ldGhvZE5hbWUgPSBvcHRNZXRob2ROYW1lIHx8ICcnO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAndGhpcyBtZXRob2QgJyArXG4gICAgICAgIG1ldGhvZE5hbWUgK1xuICAgICAgICAnIGlzIGFic3RyYWN0ISAnICtcbiAgICAgICAgJyhpdCBoYXMgbm8gaW1wbGVtZW50YXRpb24gaW4gY2xhc3MgJyArXG4gICAgICAgIHRoaXMuY29uc3RydWN0b3IubmFtZSArXG4gICAgICAgICcpJ1xuICAgICk7XG4gIH07XG59O1xuXG5leHBvcnRzLmFzc2VydCA9IGZ1bmN0aW9uKGNvbmQsIG1lc3NhZ2UpIHtcbiAgaWYgKCFjb25kKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UgfHwgJ0Fzc2VydGlvbiBmYWlsZWQnKTtcbiAgfVxufTtcblxuLy8gRGVmaW5lIGEgbGF6aWx5LWNvbXB1dGVkLCBub24tZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lZCBgcHJvcE5hbWVgXG4vLyBvbiB0aGUgb2JqZWN0IGBvYmpgLiBgZ2V0dGVyRm5gIHdpbGwgYmUgY2FsbGVkIHRvIGNvbXB1dGUgdGhlIHZhbHVlIHRoZVxuLy8gZmlyc3QgdGltZSB0aGUgcHJvcGVydHkgaXMgYWNjZXNzZWQuXG5leHBvcnRzLmRlZmluZUxhenlQcm9wZXJ0eSA9IGZ1bmN0aW9uKG9iaiwgcHJvcE5hbWUsIGdldHRlckZuKSB7XG4gIGxldCBtZW1vO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBwcm9wTmFtZSwge1xuICAgIGdldCgpIHtcbiAgICAgIGlmICghbWVtbykge1xuICAgICAgICBtZW1vID0gZ2V0dGVyRm4uY2FsbCh0aGlzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtZW1vO1xuICAgIH0sXG4gIH0pO1xufTtcblxuZXhwb3J0cy5jbG9uZSA9IGZ1bmN0aW9uKG9iaikge1xuICBpZiAob2JqKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIG9iaik7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn07XG5cbmV4cG9ydHMucmVwZWF0Rm4gPSBmdW5jdGlvbihmbiwgbikge1xuICBjb25zdCBhcnIgPSBbXTtcbiAgd2hpbGUgKG4tLSA+IDApIHtcbiAgICBhcnIucHVzaChmbigpKTtcbiAgfVxuICByZXR1cm4gYXJyO1xufTtcblxuZXhwb3J0cy5yZXBlYXRTdHIgPSBmdW5jdGlvbihzdHIsIG4pIHtcbiAgcmV0dXJuIG5ldyBBcnJheShuICsgMSkuam9pbihzdHIpO1xufTtcblxuZXhwb3J0cy5yZXBlYXQgPSBmdW5jdGlvbih4LCBuKSB7XG4gIHJldHVybiBleHBvcnRzLnJlcGVhdEZuKCgpID0+IHgsIG4pO1xufTtcblxuZXhwb3J0cy5nZXREdXBsaWNhdGVzID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgY29uc3QgZHVwbGljYXRlcyA9IFtdO1xuICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBhcnJheS5sZW5ndGg7IGlkeCsrKSB7XG4gICAgY29uc3QgeCA9IGFycmF5W2lkeF07XG4gICAgaWYgKGFycmF5Lmxhc3RJbmRleE9mKHgpICE9PSBpZHggJiYgZHVwbGljYXRlcy5pbmRleE9mKHgpIDwgMCkge1xuICAgICAgZHVwbGljYXRlcy5wdXNoKHgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZHVwbGljYXRlcztcbn07XG5cbmV4cG9ydHMuY29weVdpdGhvdXREdXBsaWNhdGVzID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgY29uc3Qgbm9EdXBsaWNhdGVzID0gW107XG4gIGFycmF5LmZvckVhY2goZW50cnkgPT4ge1xuICAgIGlmIChub0R1cGxpY2F0ZXMuaW5kZXhPZihlbnRyeSkgPCAwKSB7XG4gICAgICBub0R1cGxpY2F0ZXMucHVzaChlbnRyeSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG5vRHVwbGljYXRlcztcbn07XG5cbmV4cG9ydHMuaXNTeW50YWN0aWMgPSBmdW5jdGlvbihydWxlTmFtZSkge1xuICBjb25zdCBmaXJzdENoYXIgPSBydWxlTmFtZVswXTtcbiAgcmV0dXJuIGZpcnN0Q2hhciA9PT0gZmlyc3RDaGFyLnRvVXBwZXJDYXNlKCk7XG59O1xuXG5leHBvcnRzLmlzTGV4aWNhbCA9IGZ1bmN0aW9uKHJ1bGVOYW1lKSB7XG4gIHJldHVybiAhZXhwb3J0cy5pc1N5bnRhY3RpYyhydWxlTmFtZSk7XG59O1xuXG5leHBvcnRzLnBhZExlZnQgPSBmdW5jdGlvbihzdHIsIGxlbiwgb3B0Q2hhcikge1xuICBjb25zdCBjaCA9IG9wdENoYXIgfHwgJyAnO1xuICBpZiAoc3RyLmxlbmd0aCA8IGxlbikge1xuICAgIHJldHVybiBleHBvcnRzLnJlcGVhdFN0cihjaCwgbGVuIC0gc3RyLmxlbmd0aCkgKyBzdHI7XG4gIH1cbiAgcmV0dXJuIHN0cjtcbn07XG5cbi8vIFN0cmluZ0J1ZmZlclxuXG5leHBvcnRzLlN0cmluZ0J1ZmZlciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnN0cmluZ3MgPSBbXTtcbn07XG5cbmV4cG9ydHMuU3RyaW5nQnVmZmVyLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbihzdHIpIHtcbiAgdGhpcy5zdHJpbmdzLnB1c2goc3RyKTtcbn07XG5cbmV4cG9ydHMuU3RyaW5nQnVmZmVyLnByb3RvdHlwZS5jb250ZW50cyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zdHJpbmdzLmpvaW4oJycpO1xufTtcblxuY29uc3QgZXNjYXBlVW5pY29kZSA9IHN0ciA9PiBTdHJpbmcuZnJvbUNvZGVQb2ludChwYXJzZUludChzdHIsIDE2KSk7XG5cbmV4cG9ydHMudW5lc2NhcGVDb2RlUG9pbnQgPSBmdW5jdGlvbihzKSB7XG4gIGlmIChzLmNoYXJBdCgwKSA9PT0gJ1xcXFwnKSB7XG4gICAgc3dpdGNoIChzLmNoYXJBdCgxKSkge1xuICAgICAgY2FzZSAnYic6XG4gICAgICAgIHJldHVybiAnXFxiJztcbiAgICAgIGNhc2UgJ2YnOlxuICAgICAgICByZXR1cm4gJ1xcZic7XG4gICAgICBjYXNlICduJzpcbiAgICAgICAgcmV0dXJuICdcXG4nO1xuICAgICAgY2FzZSAncic6XG4gICAgICAgIHJldHVybiAnXFxyJztcbiAgICAgIGNhc2UgJ3QnOlxuICAgICAgICByZXR1cm4gJ1xcdCc7XG4gICAgICBjYXNlICd2JzpcbiAgICAgICAgcmV0dXJuICdcXHYnO1xuICAgICAgY2FzZSAneCc6XG4gICAgICAgIHJldHVybiBlc2NhcGVVbmljb2RlKHMuc2xpY2UoMiwgNCkpO1xuICAgICAgY2FzZSAndSc6XG4gICAgICAgIHJldHVybiBzLmNoYXJBdCgyKSA9PT0gJ3snID9cbiAgICAgICAgICBlc2NhcGVVbmljb2RlKHMuc2xpY2UoMywgLTEpKSA6XG4gICAgICAgICAgZXNjYXBlVW5pY29kZShzLnNsaWNlKDIsIDYpKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBzLmNoYXJBdCgxKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHM7XG4gIH1cbn07XG5cbi8vIEhlbHBlciBmb3IgcHJvZHVjaW5nIGEgZGVzY3JpcHRpb24gb2YgYW4gdW5rbm93biBvYmplY3QgaW4gYSBzYWZlIHdheS5cbi8vIEVzcGVjaWFsbHkgdXNlZnVsIGZvciBlcnJvciBtZXNzYWdlcyB3aGVyZSBhbiB1bmV4cGVjdGVkIHR5cGUgb2Ygb2JqZWN0IHdhcyBlbmNvdW50ZXJlZC5cbmV4cG9ydHMudW5leHBlY3RlZE9ialRvU3RyaW5nID0gZnVuY3Rpb24ob2JqKSB7XG4gIGlmIChvYmogPT0gbnVsbCkge1xuICAgIHJldHVybiBTdHJpbmcob2JqKTtcbiAgfVxuICBjb25zdCBiYXNlVG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKTtcbiAgdHJ5IHtcbiAgICBsZXQgdHlwZU5hbWU7XG4gICAgaWYgKG9iai5jb25zdHJ1Y3RvciAmJiBvYmouY29uc3RydWN0b3IubmFtZSkge1xuICAgICAgdHlwZU5hbWUgPSBvYmouY29uc3RydWN0b3IubmFtZTtcbiAgICB9IGVsc2UgaWYgKGJhc2VUb1N0cmluZy5pbmRleE9mKCdbb2JqZWN0ICcpID09PSAwKSB7XG4gICAgICB0eXBlTmFtZSA9IGJhc2VUb1N0cmluZy5zbGljZSg4LCAtMSk7IC8vIEV4dHJhY3QgZS5nLiBcIkFycmF5XCIgZnJvbSBcIltvYmplY3QgQXJyYXldXCIuXG4gICAgfSBlbHNlIHtcbiAgICAgIHR5cGVOYW1lID0gdHlwZW9mIG9iajtcbiAgICB9XG4gICAgcmV0dXJuIHR5cGVOYW1lICsgJzogJyArIEpTT04uc3RyaW5naWZ5KFN0cmluZyhvYmopKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBiYXNlVG9TdHJpbmc7XG4gIH1cbn07XG59KGNvbW1vbiRsKSk7XG5cbmNvbnN0IGNvbW1vbiRrID0gY29tbW9uJGw7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBQcml2YXRlIHN0dWZmXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jbGFzcyBOb2RlIHtcbiAgY29uc3RydWN0b3IobWF0Y2hMZW5ndGgpIHtcbiAgICB0aGlzLm1hdGNoTGVuZ3RoID0gbWF0Y2hMZW5ndGg7XG4gIH1cblxuICBnZXQgY3Rvck5hbWUoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzdWJjbGFzcyByZXNwb25zaWJpbGl0eScpO1xuICB9XG5cbiAgbnVtQ2hpbGRyZW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hpbGRyZW4gPyB0aGlzLmNoaWxkcmVuLmxlbmd0aCA6IDA7XG4gIH1cblxuICBjaGlsZEF0KGlkeCkge1xuICAgIGlmICh0aGlzLmNoaWxkcmVuKSB7XG4gICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbltpZHhdO1xuICAgIH1cbiAgfVxuXG4gIGluZGV4T2ZDaGlsZChhcmcpIHtcbiAgICByZXR1cm4gdGhpcy5jaGlsZHJlbi5pbmRleE9mKGFyZyk7XG4gIH1cblxuICBoYXNDaGlsZHJlbigpIHtcbiAgICByZXR1cm4gdGhpcy5udW1DaGlsZHJlbigpID4gMDtcbiAgfVxuXG4gIGhhc05vQ2hpbGRyZW4oKSB7XG4gICAgcmV0dXJuICF0aGlzLmhhc0NoaWxkcmVuKCk7XG4gIH1cblxuICBvbmx5Q2hpbGQoKSB7XG4gICAgaWYgKHRoaXMubnVtQ2hpbGRyZW4oKSAhPT0gMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdjYW5ub3QgZ2V0IG9ubHkgY2hpbGQgb2YgYSBub2RlIG9mIHR5cGUgJyArXG4gICAgICAgICAgdGhpcy5jdG9yTmFtZSArXG4gICAgICAgICAgJyAoaXQgaGFzICcgK1xuICAgICAgICAgIHRoaXMubnVtQ2hpbGRyZW4oKSArXG4gICAgICAgICAgJyBjaGlsZHJlbiknXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5maXJzdENoaWxkKCk7XG4gICAgfVxuICB9XG5cbiAgZmlyc3RDaGlsZCgpIHtcbiAgICBpZiAodGhpcy5oYXNOb0NoaWxkcmVuKCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnY2Fubm90IGdldCBmaXJzdCBjaGlsZCBvZiBhICcgKyB0aGlzLmN0b3JOYW1lICsgJyBub2RlLCB3aGljaCBoYXMgbm8gY2hpbGRyZW4nXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5jaGlsZEF0KDApO1xuICAgIH1cbiAgfVxuXG4gIGxhc3RDaGlsZCgpIHtcbiAgICBpZiAodGhpcy5oYXNOb0NoaWxkcmVuKCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnY2Fubm90IGdldCBsYXN0IGNoaWxkIG9mIGEgJyArIHRoaXMuY3Rvck5hbWUgKyAnIG5vZGUsIHdoaWNoIGhhcyBubyBjaGlsZHJlbidcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmNoaWxkQXQodGhpcy5udW1DaGlsZHJlbigpIC0gMSk7XG4gICAgfVxuICB9XG5cbiAgY2hpbGRCZWZvcmUoY2hpbGQpIHtcbiAgICBjb25zdCBjaGlsZElkeCA9IHRoaXMuaW5kZXhPZkNoaWxkKGNoaWxkKTtcbiAgICBpZiAoY2hpbGRJZHggPCAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vZGUuY2hpbGRCZWZvcmUoKSBjYWxsZWQgdy8gYW4gYXJndW1lbnQgdGhhdCBpcyBub3QgYSBjaGlsZCcpO1xuICAgIH0gZWxzZSBpZiAoY2hpbGRJZHggPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY2Fubm90IGdldCBjaGlsZCBiZWZvcmUgZmlyc3QgY2hpbGQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuY2hpbGRBdChjaGlsZElkeCAtIDEpO1xuICAgIH1cbiAgfVxuXG4gIGNoaWxkQWZ0ZXIoY2hpbGQpIHtcbiAgICBjb25zdCBjaGlsZElkeCA9IHRoaXMuaW5kZXhPZkNoaWxkKGNoaWxkKTtcbiAgICBpZiAoY2hpbGRJZHggPCAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vZGUuY2hpbGRBZnRlcigpIGNhbGxlZCB3LyBhbiBhcmd1bWVudCB0aGF0IGlzIG5vdCBhIGNoaWxkJyk7XG4gICAgfSBlbHNlIGlmIChjaGlsZElkeCA9PT0gdGhpcy5udW1DaGlsZHJlbigpIC0gMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjYW5ub3QgZ2V0IGNoaWxkIGFmdGVyIGxhc3QgY2hpbGQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuY2hpbGRBdChjaGlsZElkeCArIDEpO1xuICAgIH1cbiAgfVxuXG4gIGlzVGVybWluYWwoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaXNOb250ZXJtaW5hbCgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpc0l0ZXJhdGlvbigpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpc09wdGlvbmFsKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vLyBUZXJtaW5hbHNcblxuY2xhc3MgVGVybWluYWxOb2RlJDIgZXh0ZW5kcyBOb2RlIHtcbiAgZ2V0IGN0b3JOYW1lKCkge1xuICAgIHJldHVybiAnX3Rlcm1pbmFsJztcbiAgfVxuXG4gIGlzVGVybWluYWwoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBnZXQgcHJpbWl0aXZlVmFsdWUoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgYHByaW1pdGl2ZVZhbHVlYCBwcm9wZXJ0eSB3YXMgcmVtb3ZlZCBpbiBPaG0gdjE3LicpO1xuICB9XG59XG5cbi8vIE5vbnRlcm1pbmFsc1xuXG5jbGFzcyBOb250ZXJtaW5hbE5vZGUkMSBleHRlbmRzIE5vZGUge1xuICBjb25zdHJ1Y3RvcihydWxlTmFtZSwgY2hpbGRyZW4sIGNoaWxkT2Zmc2V0cywgbWF0Y2hMZW5ndGgpIHtcbiAgICBzdXBlcihtYXRjaExlbmd0aCk7XG4gICAgdGhpcy5ydWxlTmFtZSA9IHJ1bGVOYW1lO1xuICAgIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgICB0aGlzLmNoaWxkT2Zmc2V0cyA9IGNoaWxkT2Zmc2V0cztcbiAgfVxuXG4gIGdldCBjdG9yTmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlTmFtZTtcbiAgfVxuXG4gIGlzTm9udGVybWluYWwoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpc0xleGljYWwoKSB7XG4gICAgcmV0dXJuIGNvbW1vbiRrLmlzTGV4aWNhbCh0aGlzLmN0b3JOYW1lKTtcbiAgfVxuXG4gIGlzU3ludGFjdGljKCkge1xuICAgIHJldHVybiBjb21tb24kay5pc1N5bnRhY3RpYyh0aGlzLmN0b3JOYW1lKTtcbiAgfVxufVxuXG4vLyBJdGVyYXRpb25zXG5cbmNsYXNzIEl0ZXJhdGlvbk5vZGUkMiBleHRlbmRzIE5vZGUge1xuICBjb25zdHJ1Y3RvcihjaGlsZHJlbiwgY2hpbGRPZmZzZXRzLCBtYXRjaExlbmd0aCwgaXNPcHRpb25hbCkge1xuICAgIHN1cGVyKG1hdGNoTGVuZ3RoKTtcbiAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgdGhpcy5jaGlsZE9mZnNldHMgPSBjaGlsZE9mZnNldHM7XG4gICAgdGhpcy5vcHRpb25hbCA9IGlzT3B0aW9uYWw7XG4gIH1cblxuICBnZXQgY3Rvck5hbWUoKSB7XG4gICAgcmV0dXJuICdfaXRlcic7XG4gIH1cblxuICBpc0l0ZXJhdGlvbigpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlzT3B0aW9uYWwoKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9uYWw7XG4gIH1cbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEV4cG9ydHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBub2RlcyQxID0ge1xuICBOb2RlLFxuICBUZXJtaW5hbE5vZGU6IFRlcm1pbmFsTm9kZSQyLFxuICBOb250ZXJtaW5hbE5vZGU6IE5vbnRlcm1pbmFsTm9kZSQxLFxuICBJdGVyYXRpb25Ob2RlOiBJdGVyYXRpb25Ob2RlJDIsXG59O1xuXG52YXIgcGV4cHJzTWFpbiA9IHt9O1xuXG4vLyBCYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vbWF0aGlhc2J5bmVucy91bmljb2RlLTkuMC4wLlxuLy8gVGhlc2UgYXJlIGp1c3QgY2F0ZWdvcmllcyB0aGF0IGFyZSB1c2VkIGluIEVTNS9FUzIwMTUuXG4vLyBUaGUgZnVsbCBsaXN0IG9mIFVuaWNvZGUgY2F0ZWdvcmllcyBpcyBoZXJlOiBodHRwOi8vd3d3LmZpbGVmb3JtYXQuaW5mby9pbmZvL3VuaWNvZGUvY2F0ZWdvcnkvaW5kZXguaHRtLlxudmFyIFVuaWNvZGVDYXRlZ29yaWVzJDEgPSB7XG4gIC8vIExldHRlcnNcbiAgTHU6IC9bQS1aXFx4QzAtXFx4RDZcXHhEOC1cXHhERVxcdTAxMDBcXHUwMTAyXFx1MDEwNFxcdTAxMDZcXHUwMTA4XFx1MDEwQVxcdTAxMENcXHUwMTBFXFx1MDExMFxcdTAxMTJcXHUwMTE0XFx1MDExNlxcdTAxMThcXHUwMTFBXFx1MDExQ1xcdTAxMUVcXHUwMTIwXFx1MDEyMlxcdTAxMjRcXHUwMTI2XFx1MDEyOFxcdTAxMkFcXHUwMTJDXFx1MDEyRVxcdTAxMzBcXHUwMTMyXFx1MDEzNFxcdTAxMzZcXHUwMTM5XFx1MDEzQlxcdTAxM0RcXHUwMTNGXFx1MDE0MVxcdTAxNDNcXHUwMTQ1XFx1MDE0N1xcdTAxNEFcXHUwMTRDXFx1MDE0RVxcdTAxNTBcXHUwMTUyXFx1MDE1NFxcdTAxNTZcXHUwMTU4XFx1MDE1QVxcdTAxNUNcXHUwMTVFXFx1MDE2MFxcdTAxNjJcXHUwMTY0XFx1MDE2NlxcdTAxNjhcXHUwMTZBXFx1MDE2Q1xcdTAxNkVcXHUwMTcwXFx1MDE3MlxcdTAxNzRcXHUwMTc2XFx1MDE3OFxcdTAxNzlcXHUwMTdCXFx1MDE3RFxcdTAxODFcXHUwMTgyXFx1MDE4NFxcdTAxODZcXHUwMTg3XFx1MDE4OS1cXHUwMThCXFx1MDE4RS1cXHUwMTkxXFx1MDE5M1xcdTAxOTRcXHUwMTk2LVxcdTAxOThcXHUwMTlDXFx1MDE5RFxcdTAxOUZcXHUwMUEwXFx1MDFBMlxcdTAxQTRcXHUwMUE2XFx1MDFBN1xcdTAxQTlcXHUwMUFDXFx1MDFBRVxcdTAxQUZcXHUwMUIxLVxcdTAxQjNcXHUwMUI1XFx1MDFCN1xcdTAxQjhcXHUwMUJDXFx1MDFDNFxcdTAxQzdcXHUwMUNBXFx1MDFDRFxcdTAxQ0ZcXHUwMUQxXFx1MDFEM1xcdTAxRDVcXHUwMUQ3XFx1MDFEOVxcdTAxREJcXHUwMURFXFx1MDFFMFxcdTAxRTJcXHUwMUU0XFx1MDFFNlxcdTAxRThcXHUwMUVBXFx1MDFFQ1xcdTAxRUVcXHUwMUYxXFx1MDFGNFxcdTAxRjYtXFx1MDFGOFxcdTAxRkFcXHUwMUZDXFx1MDFGRVxcdTAyMDBcXHUwMjAyXFx1MDIwNFxcdTAyMDZcXHUwMjA4XFx1MDIwQVxcdTAyMENcXHUwMjBFXFx1MDIxMFxcdTAyMTJcXHUwMjE0XFx1MDIxNlxcdTAyMThcXHUwMjFBXFx1MDIxQ1xcdTAyMUVcXHUwMjIwXFx1MDIyMlxcdTAyMjRcXHUwMjI2XFx1MDIyOFxcdTAyMkFcXHUwMjJDXFx1MDIyRVxcdTAyMzBcXHUwMjMyXFx1MDIzQVxcdTAyM0JcXHUwMjNEXFx1MDIzRVxcdTAyNDFcXHUwMjQzLVxcdTAyNDZcXHUwMjQ4XFx1MDI0QVxcdTAyNENcXHUwMjRFXFx1MDM3MFxcdTAzNzJcXHUwMzc2XFx1MDM3RlxcdTAzODZcXHUwMzg4LVxcdTAzOEFcXHUwMzhDXFx1MDM4RVxcdTAzOEZcXHUwMzkxLVxcdTAzQTFcXHUwM0EzLVxcdTAzQUJcXHUwM0NGXFx1MDNEMi1cXHUwM0Q0XFx1MDNEOFxcdTAzREFcXHUwM0RDXFx1MDNERVxcdTAzRTBcXHUwM0UyXFx1MDNFNFxcdTAzRTZcXHUwM0U4XFx1MDNFQVxcdTAzRUNcXHUwM0VFXFx1MDNGNFxcdTAzRjdcXHUwM0Y5XFx1MDNGQVxcdTAzRkQtXFx1MDQyRlxcdTA0NjBcXHUwNDYyXFx1MDQ2NFxcdTA0NjZcXHUwNDY4XFx1MDQ2QVxcdTA0NkNcXHUwNDZFXFx1MDQ3MFxcdTA0NzJcXHUwNDc0XFx1MDQ3NlxcdTA0NzhcXHUwNDdBXFx1MDQ3Q1xcdTA0N0VcXHUwNDgwXFx1MDQ4QVxcdTA0OENcXHUwNDhFXFx1MDQ5MFxcdTA0OTJcXHUwNDk0XFx1MDQ5NlxcdTA0OThcXHUwNDlBXFx1MDQ5Q1xcdTA0OUVcXHUwNEEwXFx1MDRBMlxcdTA0QTRcXHUwNEE2XFx1MDRBOFxcdTA0QUFcXHUwNEFDXFx1MDRBRVxcdTA0QjBcXHUwNEIyXFx1MDRCNFxcdTA0QjZcXHUwNEI4XFx1MDRCQVxcdTA0QkNcXHUwNEJFXFx1MDRDMFxcdTA0QzFcXHUwNEMzXFx1MDRDNVxcdTA0QzdcXHUwNEM5XFx1MDRDQlxcdTA0Q0RcXHUwNEQwXFx1MDREMlxcdTA0RDRcXHUwNEQ2XFx1MDREOFxcdTA0REFcXHUwNERDXFx1MDRERVxcdTA0RTBcXHUwNEUyXFx1MDRFNFxcdTA0RTZcXHUwNEU4XFx1MDRFQVxcdTA0RUNcXHUwNEVFXFx1MDRGMFxcdTA0RjJcXHUwNEY0XFx1MDRGNlxcdTA0RjhcXHUwNEZBXFx1MDRGQ1xcdTA0RkVcXHUwNTAwXFx1MDUwMlxcdTA1MDRcXHUwNTA2XFx1MDUwOFxcdTA1MEFcXHUwNTBDXFx1MDUwRVxcdTA1MTBcXHUwNTEyXFx1MDUxNFxcdTA1MTZcXHUwNTE4XFx1MDUxQVxcdTA1MUNcXHUwNTFFXFx1MDUyMFxcdTA1MjJcXHUwNTI0XFx1MDUyNlxcdTA1MjhcXHUwNTJBXFx1MDUyQ1xcdTA1MkVcXHUwNTMxLVxcdTA1NTZcXHUxMEEwLVxcdTEwQzVcXHUxMEM3XFx1MTBDRFxcdTEzQTAtXFx1MTNGNVxcdTFFMDBcXHUxRTAyXFx1MUUwNFxcdTFFMDZcXHUxRTA4XFx1MUUwQVxcdTFFMENcXHUxRTBFXFx1MUUxMFxcdTFFMTJcXHUxRTE0XFx1MUUxNlxcdTFFMThcXHUxRTFBXFx1MUUxQ1xcdTFFMUVcXHUxRTIwXFx1MUUyMlxcdTFFMjRcXHUxRTI2XFx1MUUyOFxcdTFFMkFcXHUxRTJDXFx1MUUyRVxcdTFFMzBcXHUxRTMyXFx1MUUzNFxcdTFFMzZcXHUxRTM4XFx1MUUzQVxcdTFFM0NcXHUxRTNFXFx1MUU0MFxcdTFFNDJcXHUxRTQ0XFx1MUU0NlxcdTFFNDhcXHUxRTRBXFx1MUU0Q1xcdTFFNEVcXHUxRTUwXFx1MUU1MlxcdTFFNTRcXHUxRTU2XFx1MUU1OFxcdTFFNUFcXHUxRTVDXFx1MUU1RVxcdTFFNjBcXHUxRTYyXFx1MUU2NFxcdTFFNjZcXHUxRTY4XFx1MUU2QVxcdTFFNkNcXHUxRTZFXFx1MUU3MFxcdTFFNzJcXHUxRTc0XFx1MUU3NlxcdTFFNzhcXHUxRTdBXFx1MUU3Q1xcdTFFN0VcXHUxRTgwXFx1MUU4MlxcdTFFODRcXHUxRTg2XFx1MUU4OFxcdTFFOEFcXHUxRThDXFx1MUU4RVxcdTFFOTBcXHUxRTkyXFx1MUU5NFxcdTFFOUVcXHUxRUEwXFx1MUVBMlxcdTFFQTRcXHUxRUE2XFx1MUVBOFxcdTFFQUFcXHUxRUFDXFx1MUVBRVxcdTFFQjBcXHUxRUIyXFx1MUVCNFxcdTFFQjZcXHUxRUI4XFx1MUVCQVxcdTFFQkNcXHUxRUJFXFx1MUVDMFxcdTFFQzJcXHUxRUM0XFx1MUVDNlxcdTFFQzhcXHUxRUNBXFx1MUVDQ1xcdTFFQ0VcXHUxRUQwXFx1MUVEMlxcdTFFRDRcXHUxRUQ2XFx1MUVEOFxcdTFFREFcXHUxRURDXFx1MUVERVxcdTFFRTBcXHUxRUUyXFx1MUVFNFxcdTFFRTZcXHUxRUU4XFx1MUVFQVxcdTFFRUNcXHUxRUVFXFx1MUVGMFxcdTFFRjJcXHUxRUY0XFx1MUVGNlxcdTFFRjhcXHUxRUZBXFx1MUVGQ1xcdTFFRkVcXHUxRjA4LVxcdTFGMEZcXHUxRjE4LVxcdTFGMURcXHUxRjI4LVxcdTFGMkZcXHUxRjM4LVxcdTFGM0ZcXHUxRjQ4LVxcdTFGNERcXHUxRjU5XFx1MUY1QlxcdTFGNURcXHUxRjVGXFx1MUY2OC1cXHUxRjZGXFx1MUZCOC1cXHUxRkJCXFx1MUZDOC1cXHUxRkNCXFx1MUZEOC1cXHUxRkRCXFx1MUZFOC1cXHUxRkVDXFx1MUZGOC1cXHUxRkZCXFx1MjEwMlxcdTIxMDdcXHUyMTBCLVxcdTIxMERcXHUyMTEwLVxcdTIxMTJcXHUyMTE1XFx1MjExOS1cXHUyMTFEXFx1MjEyNFxcdTIxMjZcXHUyMTI4XFx1MjEyQS1cXHUyMTJEXFx1MjEzMC1cXHUyMTMzXFx1MjEzRVxcdTIxM0ZcXHUyMTQ1XFx1MjE4M1xcdTJDMDAtXFx1MkMyRVxcdTJDNjBcXHUyQzYyLVxcdTJDNjRcXHUyQzY3XFx1MkM2OVxcdTJDNkJcXHUyQzZELVxcdTJDNzBcXHUyQzcyXFx1MkM3NVxcdTJDN0UtXFx1MkM4MFxcdTJDODJcXHUyQzg0XFx1MkM4NlxcdTJDODhcXHUyQzhBXFx1MkM4Q1xcdTJDOEVcXHUyQzkwXFx1MkM5MlxcdTJDOTRcXHUyQzk2XFx1MkM5OFxcdTJDOUFcXHUyQzlDXFx1MkM5RVxcdTJDQTBcXHUyQ0EyXFx1MkNBNFxcdTJDQTZcXHUyQ0E4XFx1MkNBQVxcdTJDQUNcXHUyQ0FFXFx1MkNCMFxcdTJDQjJcXHUyQ0I0XFx1MkNCNlxcdTJDQjhcXHUyQ0JBXFx1MkNCQ1xcdTJDQkVcXHUyQ0MwXFx1MkNDMlxcdTJDQzRcXHUyQ0M2XFx1MkNDOFxcdTJDQ0FcXHUyQ0NDXFx1MkNDRVxcdTJDRDBcXHUyQ0QyXFx1MkNENFxcdTJDRDZcXHUyQ0Q4XFx1MkNEQVxcdTJDRENcXHUyQ0RFXFx1MkNFMFxcdTJDRTJcXHUyQ0VCXFx1MkNFRFxcdTJDRjJcXHVBNjQwXFx1QTY0MlxcdUE2NDRcXHVBNjQ2XFx1QTY0OFxcdUE2NEFcXHVBNjRDXFx1QTY0RVxcdUE2NTBcXHVBNjUyXFx1QTY1NFxcdUE2NTZcXHVBNjU4XFx1QTY1QVxcdUE2NUNcXHVBNjVFXFx1QTY2MFxcdUE2NjJcXHVBNjY0XFx1QTY2NlxcdUE2NjhcXHVBNjZBXFx1QTY2Q1xcdUE2ODBcXHVBNjgyXFx1QTY4NFxcdUE2ODZcXHVBNjg4XFx1QTY4QVxcdUE2OENcXHVBNjhFXFx1QTY5MFxcdUE2OTJcXHVBNjk0XFx1QTY5NlxcdUE2OThcXHVBNjlBXFx1QTcyMlxcdUE3MjRcXHVBNzI2XFx1QTcyOFxcdUE3MkFcXHVBNzJDXFx1QTcyRVxcdUE3MzJcXHVBNzM0XFx1QTczNlxcdUE3MzhcXHVBNzNBXFx1QTczQ1xcdUE3M0VcXHVBNzQwXFx1QTc0MlxcdUE3NDRcXHVBNzQ2XFx1QTc0OFxcdUE3NEFcXHVBNzRDXFx1QTc0RVxcdUE3NTBcXHVBNzUyXFx1QTc1NFxcdUE3NTZcXHVBNzU4XFx1QTc1QVxcdUE3NUNcXHVBNzVFXFx1QTc2MFxcdUE3NjJcXHVBNzY0XFx1QTc2NlxcdUE3NjhcXHVBNzZBXFx1QTc2Q1xcdUE3NkVcXHVBNzc5XFx1QTc3QlxcdUE3N0RcXHVBNzdFXFx1QTc4MFxcdUE3ODJcXHVBNzg0XFx1QTc4NlxcdUE3OEJcXHVBNzhEXFx1QTc5MFxcdUE3OTJcXHVBNzk2XFx1QTc5OFxcdUE3OUFcXHVBNzlDXFx1QTc5RVxcdUE3QTBcXHVBN0EyXFx1QTdBNFxcdUE3QTZcXHVBN0E4XFx1QTdBQS1cXHVBN0FFXFx1QTdCMC1cXHVBN0I0XFx1QTdCNlxcdUZGMjEtXFx1RkYzQV18XFx1RDgwMVtcXHVEQzAwLVxcdURDMjdcXHVEQ0IwLVxcdURDRDNdfFxcdUQ4MDNbXFx1REM4MC1cXHVEQ0IyXXxcXHVEODA2W1xcdURDQTAtXFx1RENCRl18XFx1RDgzNVtcXHVEQzAwLVxcdURDMTlcXHVEQzM0LVxcdURDNERcXHVEQzY4LVxcdURDODFcXHVEQzlDXFx1REM5RVxcdURDOUZcXHVEQ0EyXFx1RENBNVxcdURDQTZcXHVEQ0E5LVxcdURDQUNcXHVEQ0FFLVxcdURDQjVcXHVEQ0QwLVxcdURDRTlcXHVERDA0XFx1REQwNVxcdUREMDctXFx1REQwQVxcdUREMEQtXFx1REQxNFxcdUREMTYtXFx1REQxQ1xcdUREMzhcXHVERDM5XFx1REQzQi1cXHVERDNFXFx1REQ0MC1cXHVERDQ0XFx1REQ0NlxcdURENEEtXFx1REQ1MFxcdURENkMtXFx1REQ4NVxcdUREQTAtXFx1RERCOVxcdURERDQtXFx1RERFRFxcdURFMDgtXFx1REUyMVxcdURFM0MtXFx1REU1NVxcdURFNzAtXFx1REU4OVxcdURFQTgtXFx1REVDMFxcdURFRTItXFx1REVGQVxcdURGMUMtXFx1REYzNFxcdURGNTYtXFx1REY2RVxcdURGOTAtXFx1REZBOFxcdURGQ0FdfFxcdUQ4M0FbXFx1REQwMC1cXHVERDIxXS8sXG4gIExsOiAvW2EtelxceEI1XFx4REYtXFx4RjZcXHhGOC1cXHhGRlxcdTAxMDFcXHUwMTAzXFx1MDEwNVxcdTAxMDdcXHUwMTA5XFx1MDEwQlxcdTAxMERcXHUwMTBGXFx1MDExMVxcdTAxMTNcXHUwMTE1XFx1MDExN1xcdTAxMTlcXHUwMTFCXFx1MDExRFxcdTAxMUZcXHUwMTIxXFx1MDEyM1xcdTAxMjVcXHUwMTI3XFx1MDEyOVxcdTAxMkJcXHUwMTJEXFx1MDEyRlxcdTAxMzFcXHUwMTMzXFx1MDEzNVxcdTAxMzdcXHUwMTM4XFx1MDEzQVxcdTAxM0NcXHUwMTNFXFx1MDE0MFxcdTAxNDJcXHUwMTQ0XFx1MDE0NlxcdTAxNDhcXHUwMTQ5XFx1MDE0QlxcdTAxNERcXHUwMTRGXFx1MDE1MVxcdTAxNTNcXHUwMTU1XFx1MDE1N1xcdTAxNTlcXHUwMTVCXFx1MDE1RFxcdTAxNUZcXHUwMTYxXFx1MDE2M1xcdTAxNjVcXHUwMTY3XFx1MDE2OVxcdTAxNkJcXHUwMTZEXFx1MDE2RlxcdTAxNzFcXHUwMTczXFx1MDE3NVxcdTAxNzdcXHUwMTdBXFx1MDE3Q1xcdTAxN0UtXFx1MDE4MFxcdTAxODNcXHUwMTg1XFx1MDE4OFxcdTAxOENcXHUwMThEXFx1MDE5MlxcdTAxOTVcXHUwMTk5LVxcdTAxOUJcXHUwMTlFXFx1MDFBMVxcdTAxQTNcXHUwMUE1XFx1MDFBOFxcdTAxQUFcXHUwMUFCXFx1MDFBRFxcdTAxQjBcXHUwMUI0XFx1MDFCNlxcdTAxQjlcXHUwMUJBXFx1MDFCRC1cXHUwMUJGXFx1MDFDNlxcdTAxQzlcXHUwMUNDXFx1MDFDRVxcdTAxRDBcXHUwMUQyXFx1MDFENFxcdTAxRDZcXHUwMUQ4XFx1MDFEQVxcdTAxRENcXHUwMUREXFx1MDFERlxcdTAxRTFcXHUwMUUzXFx1MDFFNVxcdTAxRTdcXHUwMUU5XFx1MDFFQlxcdTAxRURcXHUwMUVGXFx1MDFGMFxcdTAxRjNcXHUwMUY1XFx1MDFGOVxcdTAxRkJcXHUwMUZEXFx1MDFGRlxcdTAyMDFcXHUwMjAzXFx1MDIwNVxcdTAyMDdcXHUwMjA5XFx1MDIwQlxcdTAyMERcXHUwMjBGXFx1MDIxMVxcdTAyMTNcXHUwMjE1XFx1MDIxN1xcdTAyMTlcXHUwMjFCXFx1MDIxRFxcdTAyMUZcXHUwMjIxXFx1MDIyM1xcdTAyMjVcXHUwMjI3XFx1MDIyOVxcdTAyMkJcXHUwMjJEXFx1MDIyRlxcdTAyMzFcXHUwMjMzLVxcdTAyMzlcXHUwMjNDXFx1MDIzRlxcdTAyNDBcXHUwMjQyXFx1MDI0N1xcdTAyNDlcXHUwMjRCXFx1MDI0RFxcdTAyNEYtXFx1MDI5M1xcdTAyOTUtXFx1MDJBRlxcdTAzNzFcXHUwMzczXFx1MDM3N1xcdTAzN0ItXFx1MDM3RFxcdTAzOTBcXHUwM0FDLVxcdTAzQ0VcXHUwM0QwXFx1MDNEMVxcdTAzRDUtXFx1MDNEN1xcdTAzRDlcXHUwM0RCXFx1MDNERFxcdTAzREZcXHUwM0UxXFx1MDNFM1xcdTAzRTVcXHUwM0U3XFx1MDNFOVxcdTAzRUJcXHUwM0VEXFx1MDNFRi1cXHUwM0YzXFx1MDNGNVxcdTAzRjhcXHUwM0ZCXFx1MDNGQ1xcdTA0MzAtXFx1MDQ1RlxcdTA0NjFcXHUwNDYzXFx1MDQ2NVxcdTA0NjdcXHUwNDY5XFx1MDQ2QlxcdTA0NkRcXHUwNDZGXFx1MDQ3MVxcdTA0NzNcXHUwNDc1XFx1MDQ3N1xcdTA0NzlcXHUwNDdCXFx1MDQ3RFxcdTA0N0ZcXHUwNDgxXFx1MDQ4QlxcdTA0OERcXHUwNDhGXFx1MDQ5MVxcdTA0OTNcXHUwNDk1XFx1MDQ5N1xcdTA0OTlcXHUwNDlCXFx1MDQ5RFxcdTA0OUZcXHUwNEExXFx1MDRBM1xcdTA0QTVcXHUwNEE3XFx1MDRBOVxcdTA0QUJcXHUwNEFEXFx1MDRBRlxcdTA0QjFcXHUwNEIzXFx1MDRCNVxcdTA0QjdcXHUwNEI5XFx1MDRCQlxcdTA0QkRcXHUwNEJGXFx1MDRDMlxcdTA0QzRcXHUwNEM2XFx1MDRDOFxcdTA0Q0FcXHUwNENDXFx1MDRDRVxcdTA0Q0ZcXHUwNEQxXFx1MDREM1xcdTA0RDVcXHUwNEQ3XFx1MDREOVxcdTA0REJcXHUwNEREXFx1MDRERlxcdTA0RTFcXHUwNEUzXFx1MDRFNVxcdTA0RTdcXHUwNEU5XFx1MDRFQlxcdTA0RURcXHUwNEVGXFx1MDRGMVxcdTA0RjNcXHUwNEY1XFx1MDRGN1xcdTA0RjlcXHUwNEZCXFx1MDRGRFxcdTA0RkZcXHUwNTAxXFx1MDUwM1xcdTA1MDVcXHUwNTA3XFx1MDUwOVxcdTA1MEJcXHUwNTBEXFx1MDUwRlxcdTA1MTFcXHUwNTEzXFx1MDUxNVxcdTA1MTdcXHUwNTE5XFx1MDUxQlxcdTA1MURcXHUwNTFGXFx1MDUyMVxcdTA1MjNcXHUwNTI1XFx1MDUyN1xcdTA1MjlcXHUwNTJCXFx1MDUyRFxcdTA1MkZcXHUwNTYxLVxcdTA1ODdcXHUxM0Y4LVxcdTEzRkRcXHUxQzgwLVxcdTFDODhcXHUxRDAwLVxcdTFEMkJcXHUxRDZCLVxcdTFENzdcXHUxRDc5LVxcdTFEOUFcXHUxRTAxXFx1MUUwM1xcdTFFMDVcXHUxRTA3XFx1MUUwOVxcdTFFMEJcXHUxRTBEXFx1MUUwRlxcdTFFMTFcXHUxRTEzXFx1MUUxNVxcdTFFMTdcXHUxRTE5XFx1MUUxQlxcdTFFMURcXHUxRTFGXFx1MUUyMVxcdTFFMjNcXHUxRTI1XFx1MUUyN1xcdTFFMjlcXHUxRTJCXFx1MUUyRFxcdTFFMkZcXHUxRTMxXFx1MUUzM1xcdTFFMzVcXHUxRTM3XFx1MUUzOVxcdTFFM0JcXHUxRTNEXFx1MUUzRlxcdTFFNDFcXHUxRTQzXFx1MUU0NVxcdTFFNDdcXHUxRTQ5XFx1MUU0QlxcdTFFNERcXHUxRTRGXFx1MUU1MVxcdTFFNTNcXHUxRTU1XFx1MUU1N1xcdTFFNTlcXHUxRTVCXFx1MUU1RFxcdTFFNUZcXHUxRTYxXFx1MUU2M1xcdTFFNjVcXHUxRTY3XFx1MUU2OVxcdTFFNkJcXHUxRTZEXFx1MUU2RlxcdTFFNzFcXHUxRTczXFx1MUU3NVxcdTFFNzdcXHUxRTc5XFx1MUU3QlxcdTFFN0RcXHUxRTdGXFx1MUU4MVxcdTFFODNcXHUxRTg1XFx1MUU4N1xcdTFFODlcXHUxRThCXFx1MUU4RFxcdTFFOEZcXHUxRTkxXFx1MUU5M1xcdTFFOTUtXFx1MUU5RFxcdTFFOUZcXHUxRUExXFx1MUVBM1xcdTFFQTVcXHUxRUE3XFx1MUVBOVxcdTFFQUJcXHUxRUFEXFx1MUVBRlxcdTFFQjFcXHUxRUIzXFx1MUVCNVxcdTFFQjdcXHUxRUI5XFx1MUVCQlxcdTFFQkRcXHUxRUJGXFx1MUVDMVxcdTFFQzNcXHUxRUM1XFx1MUVDN1xcdTFFQzlcXHUxRUNCXFx1MUVDRFxcdTFFQ0ZcXHUxRUQxXFx1MUVEM1xcdTFFRDVcXHUxRUQ3XFx1MUVEOVxcdTFFREJcXHUxRUREXFx1MUVERlxcdTFFRTFcXHUxRUUzXFx1MUVFNVxcdTFFRTdcXHUxRUU5XFx1MUVFQlxcdTFFRURcXHUxRUVGXFx1MUVGMVxcdTFFRjNcXHUxRUY1XFx1MUVGN1xcdTFFRjlcXHUxRUZCXFx1MUVGRFxcdTFFRkYtXFx1MUYwN1xcdTFGMTAtXFx1MUYxNVxcdTFGMjAtXFx1MUYyN1xcdTFGMzAtXFx1MUYzN1xcdTFGNDAtXFx1MUY0NVxcdTFGNTAtXFx1MUY1N1xcdTFGNjAtXFx1MUY2N1xcdTFGNzAtXFx1MUY3RFxcdTFGODAtXFx1MUY4N1xcdTFGOTAtXFx1MUY5N1xcdTFGQTAtXFx1MUZBN1xcdTFGQjAtXFx1MUZCNFxcdTFGQjZcXHUxRkI3XFx1MUZCRVxcdTFGQzItXFx1MUZDNFxcdTFGQzZcXHUxRkM3XFx1MUZEMC1cXHUxRkQzXFx1MUZENlxcdTFGRDdcXHUxRkUwLVxcdTFGRTdcXHUxRkYyLVxcdTFGRjRcXHUxRkY2XFx1MUZGN1xcdTIxMEFcXHUyMTBFXFx1MjEwRlxcdTIxMTNcXHUyMTJGXFx1MjEzNFxcdTIxMzlcXHUyMTNDXFx1MjEzRFxcdTIxNDYtXFx1MjE0OVxcdTIxNEVcXHUyMTg0XFx1MkMzMC1cXHUyQzVFXFx1MkM2MVxcdTJDNjVcXHUyQzY2XFx1MkM2OFxcdTJDNkFcXHUyQzZDXFx1MkM3MVxcdTJDNzNcXHUyQzc0XFx1MkM3Ni1cXHUyQzdCXFx1MkM4MVxcdTJDODNcXHUyQzg1XFx1MkM4N1xcdTJDODlcXHUyQzhCXFx1MkM4RFxcdTJDOEZcXHUyQzkxXFx1MkM5M1xcdTJDOTVcXHUyQzk3XFx1MkM5OVxcdTJDOUJcXHUyQzlEXFx1MkM5RlxcdTJDQTFcXHUyQ0EzXFx1MkNBNVxcdTJDQTdcXHUyQ0E5XFx1MkNBQlxcdTJDQURcXHUyQ0FGXFx1MkNCMVxcdTJDQjNcXHUyQ0I1XFx1MkNCN1xcdTJDQjlcXHUyQ0JCXFx1MkNCRFxcdTJDQkZcXHUyQ0MxXFx1MkNDM1xcdTJDQzVcXHUyQ0M3XFx1MkNDOVxcdTJDQ0JcXHUyQ0NEXFx1MkNDRlxcdTJDRDFcXHUyQ0QzXFx1MkNENVxcdTJDRDdcXHUyQ0Q5XFx1MkNEQlxcdTJDRERcXHUyQ0RGXFx1MkNFMVxcdTJDRTNcXHUyQ0U0XFx1MkNFQ1xcdTJDRUVcXHUyQ0YzXFx1MkQwMC1cXHUyRDI1XFx1MkQyN1xcdTJEMkRcXHVBNjQxXFx1QTY0M1xcdUE2NDVcXHVBNjQ3XFx1QTY0OVxcdUE2NEJcXHVBNjREXFx1QTY0RlxcdUE2NTFcXHVBNjUzXFx1QTY1NVxcdUE2NTdcXHVBNjU5XFx1QTY1QlxcdUE2NURcXHVBNjVGXFx1QTY2MVxcdUE2NjNcXHVBNjY1XFx1QTY2N1xcdUE2NjlcXHVBNjZCXFx1QTY2RFxcdUE2ODFcXHVBNjgzXFx1QTY4NVxcdUE2ODdcXHVBNjg5XFx1QTY4QlxcdUE2OERcXHVBNjhGXFx1QTY5MVxcdUE2OTNcXHVBNjk1XFx1QTY5N1xcdUE2OTlcXHVBNjlCXFx1QTcyM1xcdUE3MjVcXHVBNzI3XFx1QTcyOVxcdUE3MkJcXHVBNzJEXFx1QTcyRi1cXHVBNzMxXFx1QTczM1xcdUE3MzVcXHVBNzM3XFx1QTczOVxcdUE3M0JcXHVBNzNEXFx1QTczRlxcdUE3NDFcXHVBNzQzXFx1QTc0NVxcdUE3NDdcXHVBNzQ5XFx1QTc0QlxcdUE3NERcXHVBNzRGXFx1QTc1MVxcdUE3NTNcXHVBNzU1XFx1QTc1N1xcdUE3NTlcXHVBNzVCXFx1QTc1RFxcdUE3NUZcXHVBNzYxXFx1QTc2M1xcdUE3NjVcXHVBNzY3XFx1QTc2OVxcdUE3NkJcXHVBNzZEXFx1QTc2RlxcdUE3NzEtXFx1QTc3OFxcdUE3N0FcXHVBNzdDXFx1QTc3RlxcdUE3ODFcXHVBNzgzXFx1QTc4NVxcdUE3ODdcXHVBNzhDXFx1QTc4RVxcdUE3OTFcXHVBNzkzLVxcdUE3OTVcXHVBNzk3XFx1QTc5OVxcdUE3OUJcXHVBNzlEXFx1QTc5RlxcdUE3QTFcXHVBN0EzXFx1QTdBNVxcdUE3QTdcXHVBN0E5XFx1QTdCNVxcdUE3QjdcXHVBN0ZBXFx1QUIzMC1cXHVBQjVBXFx1QUI2MC1cXHVBQjY1XFx1QUI3MC1cXHVBQkJGXFx1RkIwMC1cXHVGQjA2XFx1RkIxMy1cXHVGQjE3XFx1RkY0MS1cXHVGRjVBXXxcXHVEODAxW1xcdURDMjgtXFx1REM0RlxcdURDRDgtXFx1RENGQl18XFx1RDgwM1tcXHVEQ0MwLVxcdURDRjJdfFxcdUQ4MDZbXFx1RENDMC1cXHVEQ0RGXXxcXHVEODM1W1xcdURDMUEtXFx1REMzM1xcdURDNEUtXFx1REM1NFxcdURDNTYtXFx1REM2N1xcdURDODItXFx1REM5QlxcdURDQjYtXFx1RENCOVxcdURDQkJcXHVEQ0JELVxcdURDQzNcXHVEQ0M1LVxcdURDQ0ZcXHVEQ0VBLVxcdUREMDNcXHVERDFFLVxcdUREMzdcXHVERDUyLVxcdURENkJcXHVERDg2LVxcdUREOUZcXHVEREJBLVxcdURERDNcXHVEREVFLVxcdURFMDdcXHVERTIyLVxcdURFM0JcXHVERTU2LVxcdURFNkZcXHVERThBLVxcdURFQTVcXHVERUMyLVxcdURFREFcXHVERURDLVxcdURFRTFcXHVERUZDLVxcdURGMTRcXHVERjE2LVxcdURGMUJcXHVERjM2LVxcdURGNEVcXHVERjUwLVxcdURGNTVcXHVERjcwLVxcdURGODhcXHVERjhBLVxcdURGOEZcXHVERkFBLVxcdURGQzJcXHVERkM0LVxcdURGQzlcXHVERkNCXXxcXHVEODNBW1xcdUREMjItXFx1REQ0M10vLFxuICBMdDogL1tcXHUwMUM1XFx1MDFDOFxcdTAxQ0JcXHUwMUYyXFx1MUY4OC1cXHUxRjhGXFx1MUY5OC1cXHUxRjlGXFx1MUZBOC1cXHUxRkFGXFx1MUZCQ1xcdTFGQ0NcXHUxRkZDXS8sXG4gIExtOiAvW1xcdTAyQjAtXFx1MDJDMVxcdTAyQzYtXFx1MDJEMVxcdTAyRTAtXFx1MDJFNFxcdTAyRUNcXHUwMkVFXFx1MDM3NFxcdTAzN0FcXHUwNTU5XFx1MDY0MFxcdTA2RTVcXHUwNkU2XFx1MDdGNFxcdTA3RjVcXHUwN0ZBXFx1MDgxQVxcdTA4MjRcXHUwODI4XFx1MDk3MVxcdTBFNDZcXHUwRUM2XFx1MTBGQ1xcdTE3RDdcXHUxODQzXFx1MUFBN1xcdTFDNzgtXFx1MUM3RFxcdTFEMkMtXFx1MUQ2QVxcdTFENzhcXHUxRDlCLVxcdTFEQkZcXHUyMDcxXFx1MjA3RlxcdTIwOTAtXFx1MjA5Q1xcdTJDN0NcXHUyQzdEXFx1MkQ2RlxcdTJFMkZcXHUzMDA1XFx1MzAzMS1cXHUzMDM1XFx1MzAzQlxcdTMwOURcXHUzMDlFXFx1MzBGQy1cXHUzMEZFXFx1QTAxNVxcdUE0RjgtXFx1QTRGRFxcdUE2MENcXHVBNjdGXFx1QTY5Q1xcdUE2OURcXHVBNzE3LVxcdUE3MUZcXHVBNzcwXFx1QTc4OFxcdUE3RjhcXHVBN0Y5XFx1QTlDRlxcdUE5RTZcXHVBQTcwXFx1QUFERFxcdUFBRjNcXHVBQUY0XFx1QUI1Qy1cXHVBQjVGXFx1RkY3MFxcdUZGOUVcXHVGRjlGXXxcXHVEODFBW1xcdURGNDAtXFx1REY0M118XFx1RDgxQltcXHVERjkzLVxcdURGOUZcXHVERkUwXS8sXG4gIExvOiAvW1xceEFBXFx4QkFcXHUwMUJCXFx1MDFDMC1cXHUwMUMzXFx1MDI5NFxcdTA1RDAtXFx1MDVFQVxcdTA1RjAtXFx1MDVGMlxcdTA2MjAtXFx1MDYzRlxcdTA2NDEtXFx1MDY0QVxcdTA2NkVcXHUwNjZGXFx1MDY3MS1cXHUwNkQzXFx1MDZENVxcdTA2RUVcXHUwNkVGXFx1MDZGQS1cXHUwNkZDXFx1MDZGRlxcdTA3MTBcXHUwNzEyLVxcdTA3MkZcXHUwNzRELVxcdTA3QTVcXHUwN0IxXFx1MDdDQS1cXHUwN0VBXFx1MDgwMC1cXHUwODE1XFx1MDg0MC1cXHUwODU4XFx1MDhBMC1cXHUwOEI0XFx1MDhCNi1cXHUwOEJEXFx1MDkwNC1cXHUwOTM5XFx1MDkzRFxcdTA5NTBcXHUwOTU4LVxcdTA5NjFcXHUwOTcyLVxcdTA5ODBcXHUwOTg1LVxcdTA5OENcXHUwOThGXFx1MDk5MFxcdTA5OTMtXFx1MDlBOFxcdTA5QUEtXFx1MDlCMFxcdTA5QjJcXHUwOUI2LVxcdTA5QjlcXHUwOUJEXFx1MDlDRVxcdTA5RENcXHUwOUREXFx1MDlERi1cXHUwOUUxXFx1MDlGMFxcdTA5RjFcXHUwQTA1LVxcdTBBMEFcXHUwQTBGXFx1MEExMFxcdTBBMTMtXFx1MEEyOFxcdTBBMkEtXFx1MEEzMFxcdTBBMzJcXHUwQTMzXFx1MEEzNVxcdTBBMzZcXHUwQTM4XFx1MEEzOVxcdTBBNTktXFx1MEE1Q1xcdTBBNUVcXHUwQTcyLVxcdTBBNzRcXHUwQTg1LVxcdTBBOERcXHUwQThGLVxcdTBBOTFcXHUwQTkzLVxcdTBBQThcXHUwQUFBLVxcdTBBQjBcXHUwQUIyXFx1MEFCM1xcdTBBQjUtXFx1MEFCOVxcdTBBQkRcXHUwQUQwXFx1MEFFMFxcdTBBRTFcXHUwQUY5XFx1MEIwNS1cXHUwQjBDXFx1MEIwRlxcdTBCMTBcXHUwQjEzLVxcdTBCMjhcXHUwQjJBLVxcdTBCMzBcXHUwQjMyXFx1MEIzM1xcdTBCMzUtXFx1MEIzOVxcdTBCM0RcXHUwQjVDXFx1MEI1RFxcdTBCNUYtXFx1MEI2MVxcdTBCNzFcXHUwQjgzXFx1MEI4NS1cXHUwQjhBXFx1MEI4RS1cXHUwQjkwXFx1MEI5Mi1cXHUwQjk1XFx1MEI5OVxcdTBCOUFcXHUwQjlDXFx1MEI5RVxcdTBCOUZcXHUwQkEzXFx1MEJBNFxcdTBCQTgtXFx1MEJBQVxcdTBCQUUtXFx1MEJCOVxcdTBCRDBcXHUwQzA1LVxcdTBDMENcXHUwQzBFLVxcdTBDMTBcXHUwQzEyLVxcdTBDMjhcXHUwQzJBLVxcdTBDMzlcXHUwQzNEXFx1MEM1OC1cXHUwQzVBXFx1MEM2MFxcdTBDNjFcXHUwQzgwXFx1MEM4NS1cXHUwQzhDXFx1MEM4RS1cXHUwQzkwXFx1MEM5Mi1cXHUwQ0E4XFx1MENBQS1cXHUwQ0IzXFx1MENCNS1cXHUwQ0I5XFx1MENCRFxcdTBDREVcXHUwQ0UwXFx1MENFMVxcdTBDRjFcXHUwQ0YyXFx1MEQwNS1cXHUwRDBDXFx1MEQwRS1cXHUwRDEwXFx1MEQxMi1cXHUwRDNBXFx1MEQzRFxcdTBENEVcXHUwRDU0LVxcdTBENTZcXHUwRDVGLVxcdTBENjFcXHUwRDdBLVxcdTBEN0ZcXHUwRDg1LVxcdTBEOTZcXHUwRDlBLVxcdTBEQjFcXHUwREIzLVxcdTBEQkJcXHUwREJEXFx1MERDMC1cXHUwREM2XFx1MEUwMS1cXHUwRTMwXFx1MEUzMlxcdTBFMzNcXHUwRTQwLVxcdTBFNDVcXHUwRTgxXFx1MEU4MlxcdTBFODRcXHUwRTg3XFx1MEU4OFxcdTBFOEFcXHUwRThEXFx1MEU5NC1cXHUwRTk3XFx1MEU5OS1cXHUwRTlGXFx1MEVBMS1cXHUwRUEzXFx1MEVBNVxcdTBFQTdcXHUwRUFBXFx1MEVBQlxcdTBFQUQtXFx1MEVCMFxcdTBFQjJcXHUwRUIzXFx1MEVCRFxcdTBFQzAtXFx1MEVDNFxcdTBFREMtXFx1MEVERlxcdTBGMDBcXHUwRjQwLVxcdTBGNDdcXHUwRjQ5LVxcdTBGNkNcXHUwRjg4LVxcdTBGOENcXHUxMDAwLVxcdTEwMkFcXHUxMDNGXFx1MTA1MC1cXHUxMDU1XFx1MTA1QS1cXHUxMDVEXFx1MTA2MVxcdTEwNjVcXHUxMDY2XFx1MTA2RS1cXHUxMDcwXFx1MTA3NS1cXHUxMDgxXFx1MTA4RVxcdTEwRDAtXFx1MTBGQVxcdTEwRkQtXFx1MTI0OFxcdTEyNEEtXFx1MTI0RFxcdTEyNTAtXFx1MTI1NlxcdTEyNThcXHUxMjVBLVxcdTEyNURcXHUxMjYwLVxcdTEyODhcXHUxMjhBLVxcdTEyOERcXHUxMjkwLVxcdTEyQjBcXHUxMkIyLVxcdTEyQjVcXHUxMkI4LVxcdTEyQkVcXHUxMkMwXFx1MTJDMi1cXHUxMkM1XFx1MTJDOC1cXHUxMkQ2XFx1MTJEOC1cXHUxMzEwXFx1MTMxMi1cXHUxMzE1XFx1MTMxOC1cXHUxMzVBXFx1MTM4MC1cXHUxMzhGXFx1MTQwMS1cXHUxNjZDXFx1MTY2Ri1cXHUxNjdGXFx1MTY4MS1cXHUxNjlBXFx1MTZBMC1cXHUxNkVBXFx1MTZGMS1cXHUxNkY4XFx1MTcwMC1cXHUxNzBDXFx1MTcwRS1cXHUxNzExXFx1MTcyMC1cXHUxNzMxXFx1MTc0MC1cXHUxNzUxXFx1MTc2MC1cXHUxNzZDXFx1MTc2RS1cXHUxNzcwXFx1MTc4MC1cXHUxN0IzXFx1MTdEQ1xcdTE4MjAtXFx1MTg0MlxcdTE4NDQtXFx1MTg3N1xcdTE4ODAtXFx1MTg4NFxcdTE4ODctXFx1MThBOFxcdTE4QUFcXHUxOEIwLVxcdTE4RjVcXHUxOTAwLVxcdTE5MUVcXHUxOTUwLVxcdTE5NkRcXHUxOTcwLVxcdTE5NzRcXHUxOTgwLVxcdTE5QUJcXHUxOUIwLVxcdTE5QzlcXHUxQTAwLVxcdTFBMTZcXHUxQTIwLVxcdTFBNTRcXHUxQjA1LVxcdTFCMzNcXHUxQjQ1LVxcdTFCNEJcXHUxQjgzLVxcdTFCQTBcXHUxQkFFXFx1MUJBRlxcdTFCQkEtXFx1MUJFNVxcdTFDMDAtXFx1MUMyM1xcdTFDNEQtXFx1MUM0RlxcdTFDNUEtXFx1MUM3N1xcdTFDRTktXFx1MUNFQ1xcdTFDRUUtXFx1MUNGMVxcdTFDRjVcXHUxQ0Y2XFx1MjEzNS1cXHUyMTM4XFx1MkQzMC1cXHUyRDY3XFx1MkQ4MC1cXHUyRDk2XFx1MkRBMC1cXHUyREE2XFx1MkRBOC1cXHUyREFFXFx1MkRCMC1cXHUyREI2XFx1MkRCOC1cXHUyREJFXFx1MkRDMC1cXHUyREM2XFx1MkRDOC1cXHUyRENFXFx1MkREMC1cXHUyREQ2XFx1MkREOC1cXHUyRERFXFx1MzAwNlxcdTMwM0NcXHUzMDQxLVxcdTMwOTZcXHUzMDlGXFx1MzBBMS1cXHUzMEZBXFx1MzBGRlxcdTMxMDUtXFx1MzEyRFxcdTMxMzEtXFx1MzE4RVxcdTMxQTAtXFx1MzFCQVxcdTMxRjAtXFx1MzFGRlxcdTM0MDAtXFx1NERCNVxcdTRFMDAtXFx1OUZENVxcdUEwMDAtXFx1QTAxNFxcdUEwMTYtXFx1QTQ4Q1xcdUE0RDAtXFx1QTRGN1xcdUE1MDAtXFx1QTYwQlxcdUE2MTAtXFx1QTYxRlxcdUE2MkFcXHVBNjJCXFx1QTY2RVxcdUE2QTAtXFx1QTZFNVxcdUE3OEZcXHVBN0Y3XFx1QTdGQi1cXHVBODAxXFx1QTgwMy1cXHVBODA1XFx1QTgwNy1cXHVBODBBXFx1QTgwQy1cXHVBODIyXFx1QTg0MC1cXHVBODczXFx1QTg4Mi1cXHVBOEIzXFx1QThGMi1cXHVBOEY3XFx1QThGQlxcdUE4RkRcXHVBOTBBLVxcdUE5MjVcXHVBOTMwLVxcdUE5NDZcXHVBOTYwLVxcdUE5N0NcXHVBOTg0LVxcdUE5QjJcXHVBOUUwLVxcdUE5RTRcXHVBOUU3LVxcdUE5RUZcXHVBOUZBLVxcdUE5RkVcXHVBQTAwLVxcdUFBMjhcXHVBQTQwLVxcdUFBNDJcXHVBQTQ0LVxcdUFBNEJcXHVBQTYwLVxcdUFBNkZcXHVBQTcxLVxcdUFBNzZcXHVBQTdBXFx1QUE3RS1cXHVBQUFGXFx1QUFCMVxcdUFBQjVcXHVBQUI2XFx1QUFCOS1cXHVBQUJEXFx1QUFDMFxcdUFBQzJcXHVBQURCXFx1QUFEQ1xcdUFBRTAtXFx1QUFFQVxcdUFBRjJcXHVBQjAxLVxcdUFCMDZcXHVBQjA5LVxcdUFCMEVcXHVBQjExLVxcdUFCMTZcXHVBQjIwLVxcdUFCMjZcXHVBQjI4LVxcdUFCMkVcXHVBQkMwLVxcdUFCRTJcXHVBQzAwLVxcdUQ3QTNcXHVEN0IwLVxcdUQ3QzZcXHVEN0NCLVxcdUQ3RkJcXHVGOTAwLVxcdUZBNkRcXHVGQTcwLVxcdUZBRDlcXHVGQjFEXFx1RkIxRi1cXHVGQjI4XFx1RkIyQS1cXHVGQjM2XFx1RkIzOC1cXHVGQjNDXFx1RkIzRVxcdUZCNDBcXHVGQjQxXFx1RkI0M1xcdUZCNDRcXHVGQjQ2LVxcdUZCQjFcXHVGQkQzLVxcdUZEM0RcXHVGRDUwLVxcdUZEOEZcXHVGRDkyLVxcdUZEQzdcXHVGREYwLVxcdUZERkJcXHVGRTcwLVxcdUZFNzRcXHVGRTc2LVxcdUZFRkNcXHVGRjY2LVxcdUZGNkZcXHVGRjcxLVxcdUZGOURcXHVGRkEwLVxcdUZGQkVcXHVGRkMyLVxcdUZGQzdcXHVGRkNBLVxcdUZGQ0ZcXHVGRkQyLVxcdUZGRDdcXHVGRkRBLVxcdUZGRENdfFxcdUQ4MDBbXFx1REMwMC1cXHVEQzBCXFx1REMwRC1cXHVEQzI2XFx1REMyOC1cXHVEQzNBXFx1REMzQ1xcdURDM0RcXHVEQzNGLVxcdURDNERcXHVEQzUwLVxcdURDNURcXHVEQzgwLVxcdURDRkFcXHVERTgwLVxcdURFOUNcXHVERUEwLVxcdURFRDBcXHVERjAwLVxcdURGMUZcXHVERjMwLVxcdURGNDBcXHVERjQyLVxcdURGNDlcXHVERjUwLVxcdURGNzVcXHVERjgwLVxcdURGOURcXHVERkEwLVxcdURGQzNcXHVERkM4LVxcdURGQ0ZdfFxcdUQ4MDFbXFx1REM1MC1cXHVEQzlEXFx1REQwMC1cXHVERDI3XFx1REQzMC1cXHVERDYzXFx1REUwMC1cXHVERjM2XFx1REY0MC1cXHVERjU1XFx1REY2MC1cXHVERjY3XXxcXHVEODAyW1xcdURDMDAtXFx1REMwNVxcdURDMDhcXHVEQzBBLVxcdURDMzVcXHVEQzM3XFx1REMzOFxcdURDM0NcXHVEQzNGLVxcdURDNTVcXHVEQzYwLVxcdURDNzZcXHVEQzgwLVxcdURDOUVcXHVEQ0UwLVxcdURDRjJcXHVEQ0Y0XFx1RENGNVxcdUREMDAtXFx1REQxNVxcdUREMjAtXFx1REQzOVxcdUREODAtXFx1RERCN1xcdUREQkVcXHVEREJGXFx1REUwMFxcdURFMTAtXFx1REUxM1xcdURFMTUtXFx1REUxN1xcdURFMTktXFx1REUzM1xcdURFNjAtXFx1REU3Q1xcdURFODAtXFx1REU5Q1xcdURFQzAtXFx1REVDN1xcdURFQzktXFx1REVFNFxcdURGMDAtXFx1REYzNVxcdURGNDAtXFx1REY1NVxcdURGNjAtXFx1REY3MlxcdURGODAtXFx1REY5MV18XFx1RDgwM1tcXHVEQzAwLVxcdURDNDhdfFxcdUQ4MDRbXFx1REMwMy1cXHVEQzM3XFx1REM4My1cXHVEQ0FGXFx1RENEMC1cXHVEQ0U4XFx1REQwMy1cXHVERDI2XFx1REQ1MC1cXHVERDcyXFx1REQ3NlxcdUREODMtXFx1RERCMlxcdUREQzEtXFx1RERDNFxcdUREREFcXHVERERDXFx1REUwMC1cXHVERTExXFx1REUxMy1cXHVERTJCXFx1REU4MC1cXHVERTg2XFx1REU4OFxcdURFOEEtXFx1REU4RFxcdURFOEYtXFx1REU5RFxcdURFOUYtXFx1REVBOFxcdURFQjAtXFx1REVERVxcdURGMDUtXFx1REYwQ1xcdURGMEZcXHVERjEwXFx1REYxMy1cXHVERjI4XFx1REYyQS1cXHVERjMwXFx1REYzMlxcdURGMzNcXHVERjM1LVxcdURGMzlcXHVERjNEXFx1REY1MFxcdURGNUQtXFx1REY2MV18XFx1RDgwNVtcXHVEQzAwLVxcdURDMzRcXHVEQzQ3LVxcdURDNEFcXHVEQzgwLVxcdURDQUZcXHVEQ0M0XFx1RENDNVxcdURDQzdcXHVERDgwLVxcdUREQUVcXHVEREQ4LVxcdUREREJcXHVERTAwLVxcdURFMkZcXHVERTQ0XFx1REU4MC1cXHVERUFBXFx1REYwMC1cXHVERjE5XXxcXHVEODA2W1xcdURDRkZcXHVERUMwLVxcdURFRjhdfFxcdUQ4MDdbXFx1REMwMC1cXHVEQzA4XFx1REMwQS1cXHVEQzJFXFx1REM0MFxcdURDNzItXFx1REM4Rl18XFx1RDgwOFtcXHVEQzAwLVxcdURGOTldfFxcdUQ4MDlbXFx1REM4MC1cXHVERDQzXXxbXFx1RDgwQ1xcdUQ4MUMtXFx1RDgyMFxcdUQ4NDAtXFx1RDg2OFxcdUQ4NkEtXFx1RDg2Q1xcdUQ4NkYtXFx1RDg3Ml1bXFx1REMwMC1cXHVERkZGXXxcXHVEODBEW1xcdURDMDAtXFx1REMyRV18XFx1RDgxMVtcXHVEQzAwLVxcdURFNDZdfFxcdUQ4MUFbXFx1REMwMC1cXHVERTM4XFx1REU0MC1cXHVERTVFXFx1REVEMC1cXHVERUVEXFx1REYwMC1cXHVERjJGXFx1REY2My1cXHVERjc3XFx1REY3RC1cXHVERjhGXXxcXHVEODFCW1xcdURGMDAtXFx1REY0NFxcdURGNTBdfFxcdUQ4MjFbXFx1REMwMC1cXHVERkVDXXxcXHVEODIyW1xcdURDMDAtXFx1REVGMl18XFx1RDgyQ1tcXHVEQzAwXFx1REMwMV18XFx1RDgyRltcXHVEQzAwLVxcdURDNkFcXHVEQzcwLVxcdURDN0NcXHVEQzgwLVxcdURDODhcXHVEQzkwLVxcdURDOTldfFxcdUQ4M0FbXFx1REMwMC1cXHVEQ0M0XXxcXHVEODNCW1xcdURFMDAtXFx1REUwM1xcdURFMDUtXFx1REUxRlxcdURFMjFcXHVERTIyXFx1REUyNFxcdURFMjdcXHVERTI5LVxcdURFMzJcXHVERTM0LVxcdURFMzdcXHVERTM5XFx1REUzQlxcdURFNDJcXHVERTQ3XFx1REU0OVxcdURFNEJcXHVERTRELVxcdURFNEZcXHVERTUxXFx1REU1MlxcdURFNTRcXHVERTU3XFx1REU1OVxcdURFNUJcXHVERTVEXFx1REU1RlxcdURFNjFcXHVERTYyXFx1REU2NFxcdURFNjctXFx1REU2QVxcdURFNkMtXFx1REU3MlxcdURFNzQtXFx1REU3N1xcdURFNzktXFx1REU3Q1xcdURFN0VcXHVERTgwLVxcdURFODlcXHVERThCLVxcdURFOUJcXHVERUExLVxcdURFQTNcXHVERUE1LVxcdURFQTlcXHVERUFCLVxcdURFQkJdfFxcdUQ4NjlbXFx1REMwMC1cXHVERUQ2XFx1REYwMC1cXHVERkZGXXxcXHVEODZEW1xcdURDMDAtXFx1REYzNFxcdURGNDAtXFx1REZGRl18XFx1RDg2RVtcXHVEQzAwLVxcdURDMURcXHVEQzIwLVxcdURGRkZdfFxcdUQ4NzNbXFx1REMwMC1cXHVERUExXXxcXHVEODdFW1xcdURDMDAtXFx1REUxRF0vLFxuXG4gIC8vIE51bWJlcnNcbiAgTmw6IC9bXFx1MTZFRS1cXHUxNkYwXFx1MjE2MC1cXHUyMTgyXFx1MjE4NS1cXHUyMTg4XFx1MzAwN1xcdTMwMjEtXFx1MzAyOVxcdTMwMzgtXFx1MzAzQVxcdUE2RTYtXFx1QTZFRl18XFx1RDgwMFtcXHVERDQwLVxcdURENzRcXHVERjQxXFx1REY0QVxcdURGRDEtXFx1REZENV18XFx1RDgwOVtcXHVEQzAwLVxcdURDNkVdLyxcbiAgTmQ6IC9bMC05XFx1MDY2MC1cXHUwNjY5XFx1MDZGMC1cXHUwNkY5XFx1MDdDMC1cXHUwN0M5XFx1MDk2Ni1cXHUwOTZGXFx1MDlFNi1cXHUwOUVGXFx1MEE2Ni1cXHUwQTZGXFx1MEFFNi1cXHUwQUVGXFx1MEI2Ni1cXHUwQjZGXFx1MEJFNi1cXHUwQkVGXFx1MEM2Ni1cXHUwQzZGXFx1MENFNi1cXHUwQ0VGXFx1MEQ2Ni1cXHUwRDZGXFx1MERFNi1cXHUwREVGXFx1MEU1MC1cXHUwRTU5XFx1MEVEMC1cXHUwRUQ5XFx1MEYyMC1cXHUwRjI5XFx1MTA0MC1cXHUxMDQ5XFx1MTA5MC1cXHUxMDk5XFx1MTdFMC1cXHUxN0U5XFx1MTgxMC1cXHUxODE5XFx1MTk0Ni1cXHUxOTRGXFx1MTlEMC1cXHUxOUQ5XFx1MUE4MC1cXHUxQTg5XFx1MUE5MC1cXHUxQTk5XFx1MUI1MC1cXHUxQjU5XFx1MUJCMC1cXHUxQkI5XFx1MUM0MC1cXHUxQzQ5XFx1MUM1MC1cXHUxQzU5XFx1QTYyMC1cXHVBNjI5XFx1QThEMC1cXHVBOEQ5XFx1QTkwMC1cXHVBOTA5XFx1QTlEMC1cXHVBOUQ5XFx1QTlGMC1cXHVBOUY5XFx1QUE1MC1cXHVBQTU5XFx1QUJGMC1cXHVBQkY5XFx1RkYxMC1cXHVGRjE5XXxcXHVEODAxW1xcdURDQTAtXFx1RENBOV18XFx1RDgwNFtcXHVEQzY2LVxcdURDNkZcXHVEQ0YwLVxcdURDRjlcXHVERDM2LVxcdUREM0ZcXHVEREQwLVxcdURERDlcXHVERUYwLVxcdURFRjldfFtcXHVEODA1XFx1RDgwN11bXFx1REM1MC1cXHVEQzU5XFx1RENEMC1cXHVEQ0Q5XFx1REU1MC1cXHVERTU5XFx1REVDMC1cXHVERUM5XFx1REYzMC1cXHVERjM5XXxcXHVEODA2W1xcdURDRTAtXFx1RENFOV18XFx1RDgxQVtcXHVERTYwLVxcdURFNjlcXHVERjUwLVxcdURGNTldfFxcdUQ4MzVbXFx1REZDRS1cXHVERkZGXXxcXHVEODNBW1xcdURENTAtXFx1REQ1OV0vLFxuXG4gIC8vIE1hcmtzXG4gIE1uOiAvW1xcdTAzMDAtXFx1MDM2RlxcdTA0ODMtXFx1MDQ4N1xcdTA1OTEtXFx1MDVCRFxcdTA1QkZcXHUwNUMxXFx1MDVDMlxcdTA1QzRcXHUwNUM1XFx1MDVDN1xcdTA2MTAtXFx1MDYxQVxcdTA2NEItXFx1MDY1RlxcdTA2NzBcXHUwNkQ2LVxcdTA2RENcXHUwNkRGLVxcdTA2RTRcXHUwNkU3XFx1MDZFOFxcdTA2RUEtXFx1MDZFRFxcdTA3MTFcXHUwNzMwLVxcdTA3NEFcXHUwN0E2LVxcdTA3QjBcXHUwN0VCLVxcdTA3RjNcXHUwODE2LVxcdTA4MTlcXHUwODFCLVxcdTA4MjNcXHUwODI1LVxcdTA4MjdcXHUwODI5LVxcdTA4MkRcXHUwODU5LVxcdTA4NUJcXHUwOEQ0LVxcdTA4RTFcXHUwOEUzLVxcdTA5MDJcXHUwOTNBXFx1MDkzQ1xcdTA5NDEtXFx1MDk0OFxcdTA5NERcXHUwOTUxLVxcdTA5NTdcXHUwOTYyXFx1MDk2M1xcdTA5ODFcXHUwOUJDXFx1MDlDMS1cXHUwOUM0XFx1MDlDRFxcdTA5RTJcXHUwOUUzXFx1MEEwMVxcdTBBMDJcXHUwQTNDXFx1MEE0MVxcdTBBNDJcXHUwQTQ3XFx1MEE0OFxcdTBBNEItXFx1MEE0RFxcdTBBNTFcXHUwQTcwXFx1MEE3MVxcdTBBNzVcXHUwQTgxXFx1MEE4MlxcdTBBQkNcXHUwQUMxLVxcdTBBQzVcXHUwQUM3XFx1MEFDOFxcdTBBQ0RcXHUwQUUyXFx1MEFFM1xcdTBCMDFcXHUwQjNDXFx1MEIzRlxcdTBCNDEtXFx1MEI0NFxcdTBCNERcXHUwQjU2XFx1MEI2MlxcdTBCNjNcXHUwQjgyXFx1MEJDMFxcdTBCQ0RcXHUwQzAwXFx1MEMzRS1cXHUwQzQwXFx1MEM0Ni1cXHUwQzQ4XFx1MEM0QS1cXHUwQzREXFx1MEM1NVxcdTBDNTZcXHUwQzYyXFx1MEM2M1xcdTBDODFcXHUwQ0JDXFx1MENCRlxcdTBDQzZcXHUwQ0NDXFx1MENDRFxcdTBDRTJcXHUwQ0UzXFx1MEQwMVxcdTBENDEtXFx1MEQ0NFxcdTBENERcXHUwRDYyXFx1MEQ2M1xcdTBEQ0FcXHUwREQyLVxcdTBERDRcXHUwREQ2XFx1MEUzMVxcdTBFMzQtXFx1MEUzQVxcdTBFNDctXFx1MEU0RVxcdTBFQjFcXHUwRUI0LVxcdTBFQjlcXHUwRUJCXFx1MEVCQ1xcdTBFQzgtXFx1MEVDRFxcdTBGMThcXHUwRjE5XFx1MEYzNVxcdTBGMzdcXHUwRjM5XFx1MEY3MS1cXHUwRjdFXFx1MEY4MC1cXHUwRjg0XFx1MEY4NlxcdTBGODdcXHUwRjhELVxcdTBGOTdcXHUwRjk5LVxcdTBGQkNcXHUwRkM2XFx1MTAyRC1cXHUxMDMwXFx1MTAzMi1cXHUxMDM3XFx1MTAzOVxcdTEwM0FcXHUxMDNEXFx1MTAzRVxcdTEwNThcXHUxMDU5XFx1MTA1RS1cXHUxMDYwXFx1MTA3MS1cXHUxMDc0XFx1MTA4MlxcdTEwODVcXHUxMDg2XFx1MTA4RFxcdTEwOURcXHUxMzVELVxcdTEzNUZcXHUxNzEyLVxcdTE3MTRcXHUxNzMyLVxcdTE3MzRcXHUxNzUyXFx1MTc1M1xcdTE3NzJcXHUxNzczXFx1MTdCNFxcdTE3QjVcXHUxN0I3LVxcdTE3QkRcXHUxN0M2XFx1MTdDOS1cXHUxN0QzXFx1MTdERFxcdTE4MEItXFx1MTgwRFxcdTE4ODVcXHUxODg2XFx1MThBOVxcdTE5MjAtXFx1MTkyMlxcdTE5MjdcXHUxOTI4XFx1MTkzMlxcdTE5MzktXFx1MTkzQlxcdTFBMTdcXHUxQTE4XFx1MUExQlxcdTFBNTZcXHUxQTU4LVxcdTFBNUVcXHUxQTYwXFx1MUE2MlxcdTFBNjUtXFx1MUE2Q1xcdTFBNzMtXFx1MUE3Q1xcdTFBN0ZcXHUxQUIwLVxcdTFBQkRcXHUxQjAwLVxcdTFCMDNcXHUxQjM0XFx1MUIzNi1cXHUxQjNBXFx1MUIzQ1xcdTFCNDJcXHUxQjZCLVxcdTFCNzNcXHUxQjgwXFx1MUI4MVxcdTFCQTItXFx1MUJBNVxcdTFCQThcXHUxQkE5XFx1MUJBQi1cXHUxQkFEXFx1MUJFNlxcdTFCRThcXHUxQkU5XFx1MUJFRFxcdTFCRUYtXFx1MUJGMVxcdTFDMkMtXFx1MUMzM1xcdTFDMzZcXHUxQzM3XFx1MUNEMC1cXHUxQ0QyXFx1MUNENC1cXHUxQ0UwXFx1MUNFMi1cXHUxQ0U4XFx1MUNFRFxcdTFDRjRcXHUxQ0Y4XFx1MUNGOVxcdTFEQzAtXFx1MURGNVxcdTFERkItXFx1MURGRlxcdTIwRDAtXFx1MjBEQ1xcdTIwRTFcXHUyMEU1LVxcdTIwRjBcXHUyQ0VGLVxcdTJDRjFcXHUyRDdGXFx1MkRFMC1cXHUyREZGXFx1MzAyQS1cXHUzMDJEXFx1MzA5OVxcdTMwOUFcXHVBNjZGXFx1QTY3NC1cXHVBNjdEXFx1QTY5RVxcdUE2OUZcXHVBNkYwXFx1QTZGMVxcdUE4MDJcXHVBODA2XFx1QTgwQlxcdUE4MjVcXHVBODI2XFx1QThDNFxcdUE4QzVcXHVBOEUwLVxcdUE4RjFcXHVBOTI2LVxcdUE5MkRcXHVBOTQ3LVxcdUE5NTFcXHVBOTgwLVxcdUE5ODJcXHVBOUIzXFx1QTlCNi1cXHVBOUI5XFx1QTlCQ1xcdUE5RTVcXHVBQTI5LVxcdUFBMkVcXHVBQTMxXFx1QUEzMlxcdUFBMzVcXHVBQTM2XFx1QUE0M1xcdUFBNENcXHVBQTdDXFx1QUFCMFxcdUFBQjItXFx1QUFCNFxcdUFBQjdcXHVBQUI4XFx1QUFCRVxcdUFBQkZcXHVBQUMxXFx1QUFFQ1xcdUFBRURcXHVBQUY2XFx1QUJFNVxcdUFCRThcXHVBQkVEXFx1RkIxRVxcdUZFMDAtXFx1RkUwRlxcdUZFMjAtXFx1RkUyRl18XFx1RDgwMFtcXHVEREZEXFx1REVFMFxcdURGNzYtXFx1REY3QV18XFx1RDgwMltcXHVERTAxLVxcdURFMDNcXHVERTA1XFx1REUwNlxcdURFMEMtXFx1REUwRlxcdURFMzgtXFx1REUzQVxcdURFM0ZcXHVERUU1XFx1REVFNl18XFx1RDgwNFtcXHVEQzAxXFx1REMzOC1cXHVEQzQ2XFx1REM3Ri1cXHVEQzgxXFx1RENCMy1cXHVEQ0I2XFx1RENCOVxcdURDQkFcXHVERDAwLVxcdUREMDJcXHVERDI3LVxcdUREMkJcXHVERDJELVxcdUREMzRcXHVERDczXFx1REQ4MFxcdUREODFcXHVEREI2LVxcdUREQkVcXHVERENBLVxcdUREQ0NcXHVERTJGLVxcdURFMzFcXHVERTM0XFx1REUzNlxcdURFMzdcXHVERTNFXFx1REVERlxcdURFRTMtXFx1REVFQVxcdURGMDBcXHVERjAxXFx1REYzQ1xcdURGNDBcXHVERjY2LVxcdURGNkNcXHVERjcwLVxcdURGNzRdfFxcdUQ4MDVbXFx1REMzOC1cXHVEQzNGXFx1REM0Mi1cXHVEQzQ0XFx1REM0NlxcdURDQjMtXFx1RENCOFxcdURDQkFcXHVEQ0JGXFx1RENDMFxcdURDQzJcXHVEQ0MzXFx1RERCMi1cXHVEREI1XFx1RERCQ1xcdUREQkRcXHVEREJGXFx1RERDMFxcdURERENcXHVEREREXFx1REUzMy1cXHVERTNBXFx1REUzRFxcdURFM0ZcXHVERTQwXFx1REVBQlxcdURFQURcXHVERUIwLVxcdURFQjVcXHVERUI3XFx1REYxRC1cXHVERjFGXFx1REYyMi1cXHVERjI1XFx1REYyNy1cXHVERjJCXXxcXHVEODA3W1xcdURDMzAtXFx1REMzNlxcdURDMzgtXFx1REMzRFxcdURDM0ZcXHVEQzkyLVxcdURDQTdcXHVEQ0FBLVxcdURDQjBcXHVEQ0IyXFx1RENCM1xcdURDQjVcXHVEQ0I2XXxcXHVEODFBW1xcdURFRjAtXFx1REVGNFxcdURGMzAtXFx1REYzNl18XFx1RDgxQltcXHVERjhGLVxcdURGOTJdfFxcdUQ4MkZbXFx1REM5RFxcdURDOUVdfFxcdUQ4MzRbXFx1REQ2Ny1cXHVERDY5XFx1REQ3Qi1cXHVERDgyXFx1REQ4NS1cXHVERDhCXFx1RERBQS1cXHVEREFEXFx1REU0Mi1cXHVERTQ0XXxcXHVEODM2W1xcdURFMDAtXFx1REUzNlxcdURFM0ItXFx1REU2Q1xcdURFNzVcXHVERTg0XFx1REU5Qi1cXHVERTlGXFx1REVBMS1cXHVERUFGXXxcXHVEODM4W1xcdURDMDAtXFx1REMwNlxcdURDMDgtXFx1REMxOFxcdURDMUItXFx1REMyMVxcdURDMjNcXHVEQzI0XFx1REMyNi1cXHVEQzJBXXxcXHVEODNBW1xcdURDRDAtXFx1RENENlxcdURENDQtXFx1REQ0QV18XFx1REI0MFtcXHVERDAwLVxcdURERUZdLyxcbiAgTWM6IC9bXFx1MDkwMy1cXHUwOTAzXXxbXFx1MDkzRS1cXHUwOTQwXXxbXFx1MDk0OS1cXHUwOTRDXXxbXFx1MDk4Mi1cXHUwOTgzXXxbXFx1MDlCRS1cXHUwOUMwXXxbXFx1MDlDNy1cXHUwOUM4XXxbXFx1MDlDQi1cXHUwOUNDXXxbXFx1MDlENy1cXHUwOUQ3XXxbXFx1MEEzRS1cXHUwQTQwXXxbXFx1MEE4My1cXHUwQTgzXXxbXFx1MEFCRS1cXHUwQUMwXXxbXFx1MEFDOS1cXHUwQUM5XXxbXFx1MEFDQi1cXHUwQUNDXXxbXFx1MEIwMi1cXHUwQjAzXXxbXFx1MEIzRS1cXHUwQjNFXXxbXFx1MEI0MC1cXHUwQjQwXXxbXFx1MEI0Ny1cXHUwQjQ4XXxbXFx1MEI0Qi1cXHUwQjRDXXxbXFx1MEI1Ny1cXHUwQjU3XXxbXFx1MEI4My1cXHUwQjgzXXxbXFx1MEJCRS1cXHUwQkJGXXxbXFx1MEJDMS1cXHUwQkMyXXxbXFx1MEJDNi1cXHUwQkM4XXxbXFx1MEJDQS1cXHUwQkNDXXxbXFx1MEJENy1cXHUwQkQ3XXxbXFx1MEMwMS1cXHUwQzAzXXxbXFx1MEM0MS1cXHUwQzQ0XXxbXFx1MEM4Mi1cXHUwQzgzXXxbXFx1MENCRS1cXHUwQ0JFXXxbXFx1MENDMC1cXHUwQ0M0XXxbXFx1MENDNy1cXHUwQ0M4XXxbXFx1MENDQS1cXHUwQ0NCXXxbXFx1MENENS1cXHUwQ0Q2XXxbXFx1MEQwMi1cXHUwRDAzXXxbXFx1MEQzRS1cXHUwRDQwXXxbXFx1MEQ0Ni1cXHUwRDQ4XXxbXFx1MEQ0QS1cXHUwRDRDXXxbXFx1MEQ1Ny1cXHUwRDU3XXxbXFx1MEYzRS1cXHUwRjNGXXxbXFx1MEY3Ri1cXHUwRjdGXS8sXG5cbiAgLy8gUHVuY3R1YXRpb24sIENvbm5lY3RvclxuICBQYzogL1tfXFx1MjAzRlxcdTIwNDBcXHUyMDU0XFx1RkUzM1xcdUZFMzRcXHVGRTRELVxcdUZFNEZcXHVGRjNGXS8sXG5cbiAgLy8gU2VwYXJhdG9yLCBTcGFjZVxuICBaczogL1sgXFx4QTBcXHUxNjgwXFx1MjAwMC1cXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXS8sXG5cbiAgLy8gVGhlc2UgdHdvIGFyZSBub3QgcmVhbCBVbmljb2RlIGNhdGVnb3JpZXMsIGJ1dCBvdXIgdXNlZnVsIGZvciBPaG0uXG4gIC8vIEwgaXMgYSBjb21iaW5hdGlvbiBvZiBhbGwgdGhlIGxldHRlciBjYXRlZ29yaWVzLlxuICAvLyBMdG1vIGlzIGEgY29tYmluYXRpb24gb2YgTHQsIExtLCBhbmQgTG8uXG4gIEw6IC9bQS1aYS16XFx4QUFcXHhCNVxceEJBXFx4QzAtXFx4RDZcXHhEOC1cXHhGNlxceEY4LVxcdTAyQzFcXHUwMkM2LVxcdTAyRDFcXHUwMkUwLVxcdTAyRTRcXHUwMkVDXFx1MDJFRVxcdTAzNzAtXFx1MDM3NFxcdTAzNzZcXHUwMzc3XFx1MDM3QS1cXHUwMzdEXFx1MDM3RlxcdTAzODZcXHUwMzg4LVxcdTAzOEFcXHUwMzhDXFx1MDM4RS1cXHUwM0ExXFx1MDNBMy1cXHUwM0Y1XFx1MDNGNy1cXHUwNDgxXFx1MDQ4QS1cXHUwNTJGXFx1MDUzMS1cXHUwNTU2XFx1MDU1OVxcdTA1NjEtXFx1MDU4N1xcdTA1RDAtXFx1MDVFQVxcdTA1RjAtXFx1MDVGMlxcdTA2MjAtXFx1MDY0QVxcdTA2NkVcXHUwNjZGXFx1MDY3MS1cXHUwNkQzXFx1MDZENVxcdTA2RTVcXHUwNkU2XFx1MDZFRVxcdTA2RUZcXHUwNkZBLVxcdTA2RkNcXHUwNkZGXFx1MDcxMFxcdTA3MTItXFx1MDcyRlxcdTA3NEQtXFx1MDdBNVxcdTA3QjFcXHUwN0NBLVxcdTA3RUFcXHUwN0Y0XFx1MDdGNVxcdTA3RkFcXHUwODAwLVxcdTA4MTVcXHUwODFBXFx1MDgyNFxcdTA4MjhcXHUwODQwLVxcdTA4NThcXHUwOEEwLVxcdTA4QjRcXHUwOEI2LVxcdTA4QkRcXHUwOTA0LVxcdTA5MzlcXHUwOTNEXFx1MDk1MFxcdTA5NTgtXFx1MDk2MVxcdTA5NzEtXFx1MDk4MFxcdTA5ODUtXFx1MDk4Q1xcdTA5OEZcXHUwOTkwXFx1MDk5My1cXHUwOUE4XFx1MDlBQS1cXHUwOUIwXFx1MDlCMlxcdTA5QjYtXFx1MDlCOVxcdTA5QkRcXHUwOUNFXFx1MDlEQ1xcdTA5RERcXHUwOURGLVxcdTA5RTFcXHUwOUYwXFx1MDlGMVxcdTBBMDUtXFx1MEEwQVxcdTBBMEZcXHUwQTEwXFx1MEExMy1cXHUwQTI4XFx1MEEyQS1cXHUwQTMwXFx1MEEzMlxcdTBBMzNcXHUwQTM1XFx1MEEzNlxcdTBBMzhcXHUwQTM5XFx1MEE1OS1cXHUwQTVDXFx1MEE1RVxcdTBBNzItXFx1MEE3NFxcdTBBODUtXFx1MEE4RFxcdTBBOEYtXFx1MEE5MVxcdTBBOTMtXFx1MEFBOFxcdTBBQUEtXFx1MEFCMFxcdTBBQjJcXHUwQUIzXFx1MEFCNS1cXHUwQUI5XFx1MEFCRFxcdTBBRDBcXHUwQUUwXFx1MEFFMVxcdTBBRjlcXHUwQjA1LVxcdTBCMENcXHUwQjBGXFx1MEIxMFxcdTBCMTMtXFx1MEIyOFxcdTBCMkEtXFx1MEIzMFxcdTBCMzJcXHUwQjMzXFx1MEIzNS1cXHUwQjM5XFx1MEIzRFxcdTBCNUNcXHUwQjVEXFx1MEI1Ri1cXHUwQjYxXFx1MEI3MVxcdTBCODNcXHUwQjg1LVxcdTBCOEFcXHUwQjhFLVxcdTBCOTBcXHUwQjkyLVxcdTBCOTVcXHUwQjk5XFx1MEI5QVxcdTBCOUNcXHUwQjlFXFx1MEI5RlxcdTBCQTNcXHUwQkE0XFx1MEJBOC1cXHUwQkFBXFx1MEJBRS1cXHUwQkI5XFx1MEJEMFxcdTBDMDUtXFx1MEMwQ1xcdTBDMEUtXFx1MEMxMFxcdTBDMTItXFx1MEMyOFxcdTBDMkEtXFx1MEMzOVxcdTBDM0RcXHUwQzU4LVxcdTBDNUFcXHUwQzYwXFx1MEM2MVxcdTBDODBcXHUwQzg1LVxcdTBDOENcXHUwQzhFLVxcdTBDOTBcXHUwQzkyLVxcdTBDQThcXHUwQ0FBLVxcdTBDQjNcXHUwQ0I1LVxcdTBDQjlcXHUwQ0JEXFx1MENERVxcdTBDRTBcXHUwQ0UxXFx1MENGMVxcdTBDRjJcXHUwRDA1LVxcdTBEMENcXHUwRDBFLVxcdTBEMTBcXHUwRDEyLVxcdTBEM0FcXHUwRDNEXFx1MEQ0RVxcdTBENTQtXFx1MEQ1NlxcdTBENUYtXFx1MEQ2MVxcdTBEN0EtXFx1MEQ3RlxcdTBEODUtXFx1MEQ5NlxcdTBEOUEtXFx1MERCMVxcdTBEQjMtXFx1MERCQlxcdTBEQkRcXHUwREMwLVxcdTBEQzZcXHUwRTAxLVxcdTBFMzBcXHUwRTMyXFx1MEUzM1xcdTBFNDAtXFx1MEU0NlxcdTBFODFcXHUwRTgyXFx1MEU4NFxcdTBFODdcXHUwRTg4XFx1MEU4QVxcdTBFOERcXHUwRTk0LVxcdTBFOTdcXHUwRTk5LVxcdTBFOUZcXHUwRUExLVxcdTBFQTNcXHUwRUE1XFx1MEVBN1xcdTBFQUFcXHUwRUFCXFx1MEVBRC1cXHUwRUIwXFx1MEVCMlxcdTBFQjNcXHUwRUJEXFx1MEVDMC1cXHUwRUM0XFx1MEVDNlxcdTBFREMtXFx1MEVERlxcdTBGMDBcXHUwRjQwLVxcdTBGNDdcXHUwRjQ5LVxcdTBGNkNcXHUwRjg4LVxcdTBGOENcXHUxMDAwLVxcdTEwMkFcXHUxMDNGXFx1MTA1MC1cXHUxMDU1XFx1MTA1QS1cXHUxMDVEXFx1MTA2MVxcdTEwNjVcXHUxMDY2XFx1MTA2RS1cXHUxMDcwXFx1MTA3NS1cXHUxMDgxXFx1MTA4RVxcdTEwQTAtXFx1MTBDNVxcdTEwQzdcXHUxMENEXFx1MTBEMC1cXHUxMEZBXFx1MTBGQy1cXHUxMjQ4XFx1MTI0QS1cXHUxMjREXFx1MTI1MC1cXHUxMjU2XFx1MTI1OFxcdTEyNUEtXFx1MTI1RFxcdTEyNjAtXFx1MTI4OFxcdTEyOEEtXFx1MTI4RFxcdTEyOTAtXFx1MTJCMFxcdTEyQjItXFx1MTJCNVxcdTEyQjgtXFx1MTJCRVxcdTEyQzBcXHUxMkMyLVxcdTEyQzVcXHUxMkM4LVxcdTEyRDZcXHUxMkQ4LVxcdTEzMTBcXHUxMzEyLVxcdTEzMTVcXHUxMzE4LVxcdTEzNUFcXHUxMzgwLVxcdTEzOEZcXHUxM0EwLVxcdTEzRjVcXHUxM0Y4LVxcdTEzRkRcXHUxNDAxLVxcdTE2NkNcXHUxNjZGLVxcdTE2N0ZcXHUxNjgxLVxcdTE2OUFcXHUxNkEwLVxcdTE2RUFcXHUxNkYxLVxcdTE2RjhcXHUxNzAwLVxcdTE3MENcXHUxNzBFLVxcdTE3MTFcXHUxNzIwLVxcdTE3MzFcXHUxNzQwLVxcdTE3NTFcXHUxNzYwLVxcdTE3NkNcXHUxNzZFLVxcdTE3NzBcXHUxNzgwLVxcdTE3QjNcXHUxN0Q3XFx1MTdEQ1xcdTE4MjAtXFx1MTg3N1xcdTE4ODAtXFx1MTg4NFxcdTE4ODctXFx1MThBOFxcdTE4QUFcXHUxOEIwLVxcdTE4RjVcXHUxOTAwLVxcdTE5MUVcXHUxOTUwLVxcdTE5NkRcXHUxOTcwLVxcdTE5NzRcXHUxOTgwLVxcdTE5QUJcXHUxOUIwLVxcdTE5QzlcXHUxQTAwLVxcdTFBMTZcXHUxQTIwLVxcdTFBNTRcXHUxQUE3XFx1MUIwNS1cXHUxQjMzXFx1MUI0NS1cXHUxQjRCXFx1MUI4My1cXHUxQkEwXFx1MUJBRVxcdTFCQUZcXHUxQkJBLVxcdTFCRTVcXHUxQzAwLVxcdTFDMjNcXHUxQzRELVxcdTFDNEZcXHUxQzVBLVxcdTFDN0RcXHUxQzgwLVxcdTFDODhcXHUxQ0U5LVxcdTFDRUNcXHUxQ0VFLVxcdTFDRjFcXHUxQ0Y1XFx1MUNGNlxcdTFEMDAtXFx1MURCRlxcdTFFMDAtXFx1MUYxNVxcdTFGMTgtXFx1MUYxRFxcdTFGMjAtXFx1MUY0NVxcdTFGNDgtXFx1MUY0RFxcdTFGNTAtXFx1MUY1N1xcdTFGNTlcXHUxRjVCXFx1MUY1RFxcdTFGNUYtXFx1MUY3RFxcdTFGODAtXFx1MUZCNFxcdTFGQjYtXFx1MUZCQ1xcdTFGQkVcXHUxRkMyLVxcdTFGQzRcXHUxRkM2LVxcdTFGQ0NcXHUxRkQwLVxcdTFGRDNcXHUxRkQ2LVxcdTFGREJcXHUxRkUwLVxcdTFGRUNcXHUxRkYyLVxcdTFGRjRcXHUxRkY2LVxcdTFGRkNcXHUyMDcxXFx1MjA3RlxcdTIwOTAtXFx1MjA5Q1xcdTIxMDJcXHUyMTA3XFx1MjEwQS1cXHUyMTEzXFx1MjExNVxcdTIxMTktXFx1MjExRFxcdTIxMjRcXHUyMTI2XFx1MjEyOFxcdTIxMkEtXFx1MjEyRFxcdTIxMkYtXFx1MjEzOVxcdTIxM0MtXFx1MjEzRlxcdTIxNDUtXFx1MjE0OVxcdTIxNEVcXHUyMTgzXFx1MjE4NFxcdTJDMDAtXFx1MkMyRVxcdTJDMzAtXFx1MkM1RVxcdTJDNjAtXFx1MkNFNFxcdTJDRUItXFx1MkNFRVxcdTJDRjJcXHUyQ0YzXFx1MkQwMC1cXHUyRDI1XFx1MkQyN1xcdTJEMkRcXHUyRDMwLVxcdTJENjdcXHUyRDZGXFx1MkQ4MC1cXHUyRDk2XFx1MkRBMC1cXHUyREE2XFx1MkRBOC1cXHUyREFFXFx1MkRCMC1cXHUyREI2XFx1MkRCOC1cXHUyREJFXFx1MkRDMC1cXHUyREM2XFx1MkRDOC1cXHUyRENFXFx1MkREMC1cXHUyREQ2XFx1MkREOC1cXHUyRERFXFx1MkUyRlxcdTMwMDVcXHUzMDA2XFx1MzAzMS1cXHUzMDM1XFx1MzAzQlxcdTMwM0NcXHUzMDQxLVxcdTMwOTZcXHUzMDlELVxcdTMwOUZcXHUzMEExLVxcdTMwRkFcXHUzMEZDLVxcdTMwRkZcXHUzMTA1LVxcdTMxMkRcXHUzMTMxLVxcdTMxOEVcXHUzMUEwLVxcdTMxQkFcXHUzMUYwLVxcdTMxRkZcXHUzNDAwLVxcdTREQjVcXHU0RTAwLVxcdTlGRDVcXHVBMDAwLVxcdUE0OENcXHVBNEQwLVxcdUE0RkRcXHVBNTAwLVxcdUE2MENcXHVBNjEwLVxcdUE2MUZcXHVBNjJBXFx1QTYyQlxcdUE2NDAtXFx1QTY2RVxcdUE2N0YtXFx1QTY5RFxcdUE2QTAtXFx1QTZFNVxcdUE3MTctXFx1QTcxRlxcdUE3MjItXFx1QTc4OFxcdUE3OEItXFx1QTdBRVxcdUE3QjAtXFx1QTdCN1xcdUE3RjctXFx1QTgwMVxcdUE4MDMtXFx1QTgwNVxcdUE4MDctXFx1QTgwQVxcdUE4MEMtXFx1QTgyMlxcdUE4NDAtXFx1QTg3M1xcdUE4ODItXFx1QThCM1xcdUE4RjItXFx1QThGN1xcdUE4RkJcXHVBOEZEXFx1QTkwQS1cXHVBOTI1XFx1QTkzMC1cXHVBOTQ2XFx1QTk2MC1cXHVBOTdDXFx1QTk4NC1cXHVBOUIyXFx1QTlDRlxcdUE5RTAtXFx1QTlFNFxcdUE5RTYtXFx1QTlFRlxcdUE5RkEtXFx1QTlGRVxcdUFBMDAtXFx1QUEyOFxcdUFBNDAtXFx1QUE0MlxcdUFBNDQtXFx1QUE0QlxcdUFBNjAtXFx1QUE3NlxcdUFBN0FcXHVBQTdFLVxcdUFBQUZcXHVBQUIxXFx1QUFCNVxcdUFBQjZcXHVBQUI5LVxcdUFBQkRcXHVBQUMwXFx1QUFDMlxcdUFBREItXFx1QUFERFxcdUFBRTAtXFx1QUFFQVxcdUFBRjItXFx1QUFGNFxcdUFCMDEtXFx1QUIwNlxcdUFCMDktXFx1QUIwRVxcdUFCMTEtXFx1QUIxNlxcdUFCMjAtXFx1QUIyNlxcdUFCMjgtXFx1QUIyRVxcdUFCMzAtXFx1QUI1QVxcdUFCNUMtXFx1QUI2NVxcdUFCNzAtXFx1QUJFMlxcdUFDMDAtXFx1RDdBM1xcdUQ3QjAtXFx1RDdDNlxcdUQ3Q0ItXFx1RDdGQlxcdUY5MDAtXFx1RkE2RFxcdUZBNzAtXFx1RkFEOVxcdUZCMDAtXFx1RkIwNlxcdUZCMTMtXFx1RkIxN1xcdUZCMURcXHVGQjFGLVxcdUZCMjhcXHVGQjJBLVxcdUZCMzZcXHVGQjM4LVxcdUZCM0NcXHVGQjNFXFx1RkI0MFxcdUZCNDFcXHVGQjQzXFx1RkI0NFxcdUZCNDYtXFx1RkJCMVxcdUZCRDMtXFx1RkQzRFxcdUZENTAtXFx1RkQ4RlxcdUZEOTItXFx1RkRDN1xcdUZERjAtXFx1RkRGQlxcdUZFNzAtXFx1RkU3NFxcdUZFNzYtXFx1RkVGQ1xcdUZGMjEtXFx1RkYzQVxcdUZGNDEtXFx1RkY1QVxcdUZGNjYtXFx1RkZCRVxcdUZGQzItXFx1RkZDN1xcdUZGQ0EtXFx1RkZDRlxcdUZGRDItXFx1RkZEN1xcdUZGREEtXFx1RkZEQ118XFx1RDgwMFtcXHVEQzAwLVxcdURDMEJcXHVEQzBELVxcdURDMjZcXHVEQzI4LVxcdURDM0FcXHVEQzNDXFx1REMzRFxcdURDM0YtXFx1REM0RFxcdURDNTAtXFx1REM1RFxcdURDODAtXFx1RENGQVxcdURFODAtXFx1REU5Q1xcdURFQTAtXFx1REVEMFxcdURGMDAtXFx1REYxRlxcdURGMzAtXFx1REY0MFxcdURGNDItXFx1REY0OVxcdURGNTAtXFx1REY3NVxcdURGODAtXFx1REY5RFxcdURGQTAtXFx1REZDM1xcdURGQzgtXFx1REZDRl18XFx1RDgwMVtcXHVEQzAwLVxcdURDOURcXHVEQ0IwLVxcdURDRDNcXHVEQ0Q4LVxcdURDRkJcXHVERDAwLVxcdUREMjdcXHVERDMwLVxcdURENjNcXHVERTAwLVxcdURGMzZcXHVERjQwLVxcdURGNTVcXHVERjYwLVxcdURGNjddfFxcdUQ4MDJbXFx1REMwMC1cXHVEQzA1XFx1REMwOFxcdURDMEEtXFx1REMzNVxcdURDMzdcXHVEQzM4XFx1REMzQ1xcdURDM0YtXFx1REM1NVxcdURDNjAtXFx1REM3NlxcdURDODAtXFx1REM5RVxcdURDRTAtXFx1RENGMlxcdURDRjRcXHVEQ0Y1XFx1REQwMC1cXHVERDE1XFx1REQyMC1cXHVERDM5XFx1REQ4MC1cXHVEREI3XFx1RERCRVxcdUREQkZcXHVERTAwXFx1REUxMC1cXHVERTEzXFx1REUxNS1cXHVERTE3XFx1REUxOS1cXHVERTMzXFx1REU2MC1cXHVERTdDXFx1REU4MC1cXHVERTlDXFx1REVDMC1cXHVERUM3XFx1REVDOS1cXHVERUU0XFx1REYwMC1cXHVERjM1XFx1REY0MC1cXHVERjU1XFx1REY2MC1cXHVERjcyXFx1REY4MC1cXHVERjkxXXxcXHVEODAzW1xcdURDMDAtXFx1REM0OFxcdURDODAtXFx1RENCMlxcdURDQzAtXFx1RENGMl18XFx1RDgwNFtcXHVEQzAzLVxcdURDMzdcXHVEQzgzLVxcdURDQUZcXHVEQ0QwLVxcdURDRThcXHVERDAzLVxcdUREMjZcXHVERDUwLVxcdURENzJcXHVERDc2XFx1REQ4My1cXHVEREIyXFx1RERDMS1cXHVEREM0XFx1REREQVxcdURERENcXHVERTAwLVxcdURFMTFcXHVERTEzLVxcdURFMkJcXHVERTgwLVxcdURFODZcXHVERTg4XFx1REU4QS1cXHVERThEXFx1REU4Ri1cXHVERTlEXFx1REU5Ri1cXHVERUE4XFx1REVCMC1cXHVERURFXFx1REYwNS1cXHVERjBDXFx1REYwRlxcdURGMTBcXHVERjEzLVxcdURGMjhcXHVERjJBLVxcdURGMzBcXHVERjMyXFx1REYzM1xcdURGMzUtXFx1REYzOVxcdURGM0RcXHVERjUwXFx1REY1RC1cXHVERjYxXXxcXHVEODA1W1xcdURDMDAtXFx1REMzNFxcdURDNDctXFx1REM0QVxcdURDODAtXFx1RENBRlxcdURDQzRcXHVEQ0M1XFx1RENDN1xcdUREODAtXFx1RERBRVxcdURERDgtXFx1REREQlxcdURFMDAtXFx1REUyRlxcdURFNDRcXHVERTgwLVxcdURFQUFcXHVERjAwLVxcdURGMTldfFxcdUQ4MDZbXFx1RENBMC1cXHVEQ0RGXFx1RENGRlxcdURFQzAtXFx1REVGOF18XFx1RDgwN1tcXHVEQzAwLVxcdURDMDhcXHVEQzBBLVxcdURDMkVcXHVEQzQwXFx1REM3Mi1cXHVEQzhGXXxcXHVEODA4W1xcdURDMDAtXFx1REY5OV18XFx1RDgwOVtcXHVEQzgwLVxcdURENDNdfFtcXHVEODBDXFx1RDgxQy1cXHVEODIwXFx1RDg0MC1cXHVEODY4XFx1RDg2QS1cXHVEODZDXFx1RDg2Ri1cXHVEODcyXVtcXHVEQzAwLVxcdURGRkZdfFxcdUQ4MERbXFx1REMwMC1cXHVEQzJFXXxcXHVEODExW1xcdURDMDAtXFx1REU0Nl18XFx1RDgxQVtcXHVEQzAwLVxcdURFMzhcXHVERTQwLVxcdURFNUVcXHVERUQwLVxcdURFRURcXHVERjAwLVxcdURGMkZcXHVERjQwLVxcdURGNDNcXHVERjYzLVxcdURGNzdcXHVERjdELVxcdURGOEZdfFxcdUQ4MUJbXFx1REYwMC1cXHVERjQ0XFx1REY1MFxcdURGOTMtXFx1REY5RlxcdURGRTBdfFxcdUQ4MjFbXFx1REMwMC1cXHVERkVDXXxcXHVEODIyW1xcdURDMDAtXFx1REVGMl18XFx1RDgyQ1tcXHVEQzAwXFx1REMwMV18XFx1RDgyRltcXHVEQzAwLVxcdURDNkFcXHVEQzcwLVxcdURDN0NcXHVEQzgwLVxcdURDODhcXHVEQzkwLVxcdURDOTldfFxcdUQ4MzVbXFx1REMwMC1cXHVEQzU0XFx1REM1Ni1cXHVEQzlDXFx1REM5RVxcdURDOUZcXHVEQ0EyXFx1RENBNVxcdURDQTZcXHVEQ0E5LVxcdURDQUNcXHVEQ0FFLVxcdURDQjlcXHVEQ0JCXFx1RENCRC1cXHVEQ0MzXFx1RENDNS1cXHVERDA1XFx1REQwNy1cXHVERDBBXFx1REQwRC1cXHVERDE0XFx1REQxNi1cXHVERDFDXFx1REQxRS1cXHVERDM5XFx1REQzQi1cXHVERDNFXFx1REQ0MC1cXHVERDQ0XFx1REQ0NlxcdURENEEtXFx1REQ1MFxcdURENTItXFx1REVBNVxcdURFQTgtXFx1REVDMFxcdURFQzItXFx1REVEQVxcdURFREMtXFx1REVGQVxcdURFRkMtXFx1REYxNFxcdURGMTYtXFx1REYzNFxcdURGMzYtXFx1REY0RVxcdURGNTAtXFx1REY2RVxcdURGNzAtXFx1REY4OFxcdURGOEEtXFx1REZBOFxcdURGQUEtXFx1REZDMlxcdURGQzQtXFx1REZDQl18XFx1RDgzQVtcXHVEQzAwLVxcdURDQzRcXHVERDAwLVxcdURENDNdfFxcdUQ4M0JbXFx1REUwMC1cXHVERTAzXFx1REUwNS1cXHVERTFGXFx1REUyMVxcdURFMjJcXHVERTI0XFx1REUyN1xcdURFMjktXFx1REUzMlxcdURFMzQtXFx1REUzN1xcdURFMzlcXHVERTNCXFx1REU0MlxcdURFNDdcXHVERTQ5XFx1REU0QlxcdURFNEQtXFx1REU0RlxcdURFNTFcXHVERTUyXFx1REU1NFxcdURFNTdcXHVERTU5XFx1REU1QlxcdURFNURcXHVERTVGXFx1REU2MVxcdURFNjJcXHVERTY0XFx1REU2Ny1cXHVERTZBXFx1REU2Qy1cXHVERTcyXFx1REU3NC1cXHVERTc3XFx1REU3OS1cXHVERTdDXFx1REU3RVxcdURFODAtXFx1REU4OVxcdURFOEItXFx1REU5QlxcdURFQTEtXFx1REVBM1xcdURFQTUtXFx1REVBOVxcdURFQUItXFx1REVCQl18XFx1RDg2OVtcXHVEQzAwLVxcdURFRDZcXHVERjAwLVxcdURGRkZdfFxcdUQ4NkRbXFx1REMwMC1cXHVERjM0XFx1REY0MC1cXHVERkZGXXxcXHVEODZFW1xcdURDMDAtXFx1REMxRFxcdURDMjAtXFx1REZGRl18XFx1RDg3M1tcXHVEQzAwLVxcdURFQTFdfFxcdUQ4N0VbXFx1REMwMC1cXHVERTFEXS8sXG4gIEx0bW86IC9bXFx1MDFDNVxcdTAxQzhcXHUwMUNCXFx1MDFGMlxcdTFGODgtXFx1MUY4RlxcdTFGOTgtXFx1MUY5RlxcdTFGQTgtXFx1MUZBRlxcdTFGQkNcXHUxRkNDXFx1MUZGQ118W1xcdTAyQjAtXFx1MDJDMVxcdTAyQzYtXFx1MDJEMVxcdTAyRTAtXFx1MDJFNFxcdTAyRUNcXHUwMkVFXFx1MDM3NFxcdTAzN0FcXHUwNTU5XFx1MDY0MFxcdTA2RTVcXHUwNkU2XFx1MDdGNFxcdTA3RjVcXHUwN0ZBXFx1MDgxQVxcdTA4MjRcXHUwODI4XFx1MDk3MVxcdTBFNDZcXHUwRUM2XFx1MTBGQ1xcdTE3RDdcXHUxODQzXFx1MUFBN1xcdTFDNzgtXFx1MUM3RFxcdTFEMkMtXFx1MUQ2QVxcdTFENzhcXHUxRDlCLVxcdTFEQkZcXHUyMDcxXFx1MjA3RlxcdTIwOTAtXFx1MjA5Q1xcdTJDN0NcXHUyQzdEXFx1MkQ2RlxcdTJFMkZcXHUzMDA1XFx1MzAzMS1cXHUzMDM1XFx1MzAzQlxcdTMwOURcXHUzMDlFXFx1MzBGQy1cXHUzMEZFXFx1QTAxNVxcdUE0RjgtXFx1QTRGRFxcdUE2MENcXHVBNjdGXFx1QTY5Q1xcdUE2OURcXHVBNzE3LVxcdUE3MUZcXHVBNzcwXFx1QTc4OFxcdUE3RjhcXHVBN0Y5XFx1QTlDRlxcdUE5RTZcXHVBQTcwXFx1QUFERFxcdUFBRjNcXHVBQUY0XFx1QUI1Qy1cXHVBQjVGXFx1RkY3MFxcdUZGOUVcXHVGRjlGXXxcXHVEODFBW1xcdURGNDAtXFx1REY0M118XFx1RDgxQltcXHVERjkzLVxcdURGOUZcXHVERkUwXXxbXFx4QUFcXHhCQVxcdTAxQkJcXHUwMUMwLVxcdTAxQzNcXHUwMjk0XFx1MDVEMC1cXHUwNUVBXFx1MDVGMC1cXHUwNUYyXFx1MDYyMC1cXHUwNjNGXFx1MDY0MS1cXHUwNjRBXFx1MDY2RVxcdTA2NkZcXHUwNjcxLVxcdTA2RDNcXHUwNkQ1XFx1MDZFRVxcdTA2RUZcXHUwNkZBLVxcdTA2RkNcXHUwNkZGXFx1MDcxMFxcdTA3MTItXFx1MDcyRlxcdTA3NEQtXFx1MDdBNVxcdTA3QjFcXHUwN0NBLVxcdTA3RUFcXHUwODAwLVxcdTA4MTVcXHUwODQwLVxcdTA4NThcXHUwOEEwLVxcdTA4QjRcXHUwOEI2LVxcdTA4QkRcXHUwOTA0LVxcdTA5MzlcXHUwOTNEXFx1MDk1MFxcdTA5NTgtXFx1MDk2MVxcdTA5NzItXFx1MDk4MFxcdTA5ODUtXFx1MDk4Q1xcdTA5OEZcXHUwOTkwXFx1MDk5My1cXHUwOUE4XFx1MDlBQS1cXHUwOUIwXFx1MDlCMlxcdTA5QjYtXFx1MDlCOVxcdTA5QkRcXHUwOUNFXFx1MDlEQ1xcdTA5RERcXHUwOURGLVxcdTA5RTFcXHUwOUYwXFx1MDlGMVxcdTBBMDUtXFx1MEEwQVxcdTBBMEZcXHUwQTEwXFx1MEExMy1cXHUwQTI4XFx1MEEyQS1cXHUwQTMwXFx1MEEzMlxcdTBBMzNcXHUwQTM1XFx1MEEzNlxcdTBBMzhcXHUwQTM5XFx1MEE1OS1cXHUwQTVDXFx1MEE1RVxcdTBBNzItXFx1MEE3NFxcdTBBODUtXFx1MEE4RFxcdTBBOEYtXFx1MEE5MVxcdTBBOTMtXFx1MEFBOFxcdTBBQUEtXFx1MEFCMFxcdTBBQjJcXHUwQUIzXFx1MEFCNS1cXHUwQUI5XFx1MEFCRFxcdTBBRDBcXHUwQUUwXFx1MEFFMVxcdTBBRjlcXHUwQjA1LVxcdTBCMENcXHUwQjBGXFx1MEIxMFxcdTBCMTMtXFx1MEIyOFxcdTBCMkEtXFx1MEIzMFxcdTBCMzJcXHUwQjMzXFx1MEIzNS1cXHUwQjM5XFx1MEIzRFxcdTBCNUNcXHUwQjVEXFx1MEI1Ri1cXHUwQjYxXFx1MEI3MVxcdTBCODNcXHUwQjg1LVxcdTBCOEFcXHUwQjhFLVxcdTBCOTBcXHUwQjkyLVxcdTBCOTVcXHUwQjk5XFx1MEI5QVxcdTBCOUNcXHUwQjlFXFx1MEI5RlxcdTBCQTNcXHUwQkE0XFx1MEJBOC1cXHUwQkFBXFx1MEJBRS1cXHUwQkI5XFx1MEJEMFxcdTBDMDUtXFx1MEMwQ1xcdTBDMEUtXFx1MEMxMFxcdTBDMTItXFx1MEMyOFxcdTBDMkEtXFx1MEMzOVxcdTBDM0RcXHUwQzU4LVxcdTBDNUFcXHUwQzYwXFx1MEM2MVxcdTBDODBcXHUwQzg1LVxcdTBDOENcXHUwQzhFLVxcdTBDOTBcXHUwQzkyLVxcdTBDQThcXHUwQ0FBLVxcdTBDQjNcXHUwQ0I1LVxcdTBDQjlcXHUwQ0JEXFx1MENERVxcdTBDRTBcXHUwQ0UxXFx1MENGMVxcdTBDRjJcXHUwRDA1LVxcdTBEMENcXHUwRDBFLVxcdTBEMTBcXHUwRDEyLVxcdTBEM0FcXHUwRDNEXFx1MEQ0RVxcdTBENTQtXFx1MEQ1NlxcdTBENUYtXFx1MEQ2MVxcdTBEN0EtXFx1MEQ3RlxcdTBEODUtXFx1MEQ5NlxcdTBEOUEtXFx1MERCMVxcdTBEQjMtXFx1MERCQlxcdTBEQkRcXHUwREMwLVxcdTBEQzZcXHUwRTAxLVxcdTBFMzBcXHUwRTMyXFx1MEUzM1xcdTBFNDAtXFx1MEU0NVxcdTBFODFcXHUwRTgyXFx1MEU4NFxcdTBFODdcXHUwRTg4XFx1MEU4QVxcdTBFOERcXHUwRTk0LVxcdTBFOTdcXHUwRTk5LVxcdTBFOUZcXHUwRUExLVxcdTBFQTNcXHUwRUE1XFx1MEVBN1xcdTBFQUFcXHUwRUFCXFx1MEVBRC1cXHUwRUIwXFx1MEVCMlxcdTBFQjNcXHUwRUJEXFx1MEVDMC1cXHUwRUM0XFx1MEVEQy1cXHUwRURGXFx1MEYwMFxcdTBGNDAtXFx1MEY0N1xcdTBGNDktXFx1MEY2Q1xcdTBGODgtXFx1MEY4Q1xcdTEwMDAtXFx1MTAyQVxcdTEwM0ZcXHUxMDUwLVxcdTEwNTVcXHUxMDVBLVxcdTEwNURcXHUxMDYxXFx1MTA2NVxcdTEwNjZcXHUxMDZFLVxcdTEwNzBcXHUxMDc1LVxcdTEwODFcXHUxMDhFXFx1MTBEMC1cXHUxMEZBXFx1MTBGRC1cXHUxMjQ4XFx1MTI0QS1cXHUxMjREXFx1MTI1MC1cXHUxMjU2XFx1MTI1OFxcdTEyNUEtXFx1MTI1RFxcdTEyNjAtXFx1MTI4OFxcdTEyOEEtXFx1MTI4RFxcdTEyOTAtXFx1MTJCMFxcdTEyQjItXFx1MTJCNVxcdTEyQjgtXFx1MTJCRVxcdTEyQzBcXHUxMkMyLVxcdTEyQzVcXHUxMkM4LVxcdTEyRDZcXHUxMkQ4LVxcdTEzMTBcXHUxMzEyLVxcdTEzMTVcXHUxMzE4LVxcdTEzNUFcXHUxMzgwLVxcdTEzOEZcXHUxNDAxLVxcdTE2NkNcXHUxNjZGLVxcdTE2N0ZcXHUxNjgxLVxcdTE2OUFcXHUxNkEwLVxcdTE2RUFcXHUxNkYxLVxcdTE2RjhcXHUxNzAwLVxcdTE3MENcXHUxNzBFLVxcdTE3MTFcXHUxNzIwLVxcdTE3MzFcXHUxNzQwLVxcdTE3NTFcXHUxNzYwLVxcdTE3NkNcXHUxNzZFLVxcdTE3NzBcXHUxNzgwLVxcdTE3QjNcXHUxN0RDXFx1MTgyMC1cXHUxODQyXFx1MTg0NC1cXHUxODc3XFx1MTg4MC1cXHUxODg0XFx1MTg4Ny1cXHUxOEE4XFx1MThBQVxcdTE4QjAtXFx1MThGNVxcdTE5MDAtXFx1MTkxRVxcdTE5NTAtXFx1MTk2RFxcdTE5NzAtXFx1MTk3NFxcdTE5ODAtXFx1MTlBQlxcdTE5QjAtXFx1MTlDOVxcdTFBMDAtXFx1MUExNlxcdTFBMjAtXFx1MUE1NFxcdTFCMDUtXFx1MUIzM1xcdTFCNDUtXFx1MUI0QlxcdTFCODMtXFx1MUJBMFxcdTFCQUVcXHUxQkFGXFx1MUJCQS1cXHUxQkU1XFx1MUMwMC1cXHUxQzIzXFx1MUM0RC1cXHUxQzRGXFx1MUM1QS1cXHUxQzc3XFx1MUNFOS1cXHUxQ0VDXFx1MUNFRS1cXHUxQ0YxXFx1MUNGNVxcdTFDRjZcXHUyMTM1LVxcdTIxMzhcXHUyRDMwLVxcdTJENjdcXHUyRDgwLVxcdTJEOTZcXHUyREEwLVxcdTJEQTZcXHUyREE4LVxcdTJEQUVcXHUyREIwLVxcdTJEQjZcXHUyREI4LVxcdTJEQkVcXHUyREMwLVxcdTJEQzZcXHUyREM4LVxcdTJEQ0VcXHUyREQwLVxcdTJERDZcXHUyREQ4LVxcdTJEREVcXHUzMDA2XFx1MzAzQ1xcdTMwNDEtXFx1MzA5NlxcdTMwOUZcXHUzMEExLVxcdTMwRkFcXHUzMEZGXFx1MzEwNS1cXHUzMTJEXFx1MzEzMS1cXHUzMThFXFx1MzFBMC1cXHUzMUJBXFx1MzFGMC1cXHUzMUZGXFx1MzQwMC1cXHU0REI1XFx1NEUwMC1cXHU5RkQ1XFx1QTAwMC1cXHVBMDE0XFx1QTAxNi1cXHVBNDhDXFx1QTREMC1cXHVBNEY3XFx1QTUwMC1cXHVBNjBCXFx1QTYxMC1cXHVBNjFGXFx1QTYyQVxcdUE2MkJcXHVBNjZFXFx1QTZBMC1cXHVBNkU1XFx1QTc4RlxcdUE3RjdcXHVBN0ZCLVxcdUE4MDFcXHVBODAzLVxcdUE4MDVcXHVBODA3LVxcdUE4MEFcXHVBODBDLVxcdUE4MjJcXHVBODQwLVxcdUE4NzNcXHVBODgyLVxcdUE4QjNcXHVBOEYyLVxcdUE4RjdcXHVBOEZCXFx1QThGRFxcdUE5MEEtXFx1QTkyNVxcdUE5MzAtXFx1QTk0NlxcdUE5NjAtXFx1QTk3Q1xcdUE5ODQtXFx1QTlCMlxcdUE5RTAtXFx1QTlFNFxcdUE5RTctXFx1QTlFRlxcdUE5RkEtXFx1QTlGRVxcdUFBMDAtXFx1QUEyOFxcdUFBNDAtXFx1QUE0MlxcdUFBNDQtXFx1QUE0QlxcdUFBNjAtXFx1QUE2RlxcdUFBNzEtXFx1QUE3NlxcdUFBN0FcXHVBQTdFLVxcdUFBQUZcXHVBQUIxXFx1QUFCNVxcdUFBQjZcXHVBQUI5LVxcdUFBQkRcXHVBQUMwXFx1QUFDMlxcdUFBREJcXHVBQURDXFx1QUFFMC1cXHVBQUVBXFx1QUFGMlxcdUFCMDEtXFx1QUIwNlxcdUFCMDktXFx1QUIwRVxcdUFCMTEtXFx1QUIxNlxcdUFCMjAtXFx1QUIyNlxcdUFCMjgtXFx1QUIyRVxcdUFCQzAtXFx1QUJFMlxcdUFDMDAtXFx1RDdBM1xcdUQ3QjAtXFx1RDdDNlxcdUQ3Q0ItXFx1RDdGQlxcdUY5MDAtXFx1RkE2RFxcdUZBNzAtXFx1RkFEOVxcdUZCMURcXHVGQjFGLVxcdUZCMjhcXHVGQjJBLVxcdUZCMzZcXHVGQjM4LVxcdUZCM0NcXHVGQjNFXFx1RkI0MFxcdUZCNDFcXHVGQjQzXFx1RkI0NFxcdUZCNDYtXFx1RkJCMVxcdUZCRDMtXFx1RkQzRFxcdUZENTAtXFx1RkQ4RlxcdUZEOTItXFx1RkRDN1xcdUZERjAtXFx1RkRGQlxcdUZFNzAtXFx1RkU3NFxcdUZFNzYtXFx1RkVGQ1xcdUZGNjYtXFx1RkY2RlxcdUZGNzEtXFx1RkY5RFxcdUZGQTAtXFx1RkZCRVxcdUZGQzItXFx1RkZDN1xcdUZGQ0EtXFx1RkZDRlxcdUZGRDItXFx1RkZEN1xcdUZGREEtXFx1RkZEQ118XFx1RDgwMFtcXHVEQzAwLVxcdURDMEJcXHVEQzBELVxcdURDMjZcXHVEQzI4LVxcdURDM0FcXHVEQzNDXFx1REMzRFxcdURDM0YtXFx1REM0RFxcdURDNTAtXFx1REM1RFxcdURDODAtXFx1RENGQVxcdURFODAtXFx1REU5Q1xcdURFQTAtXFx1REVEMFxcdURGMDAtXFx1REYxRlxcdURGMzAtXFx1REY0MFxcdURGNDItXFx1REY0OVxcdURGNTAtXFx1REY3NVxcdURGODAtXFx1REY5RFxcdURGQTAtXFx1REZDM1xcdURGQzgtXFx1REZDRl18XFx1RDgwMVtcXHVEQzUwLVxcdURDOURcXHVERDAwLVxcdUREMjdcXHVERDMwLVxcdURENjNcXHVERTAwLVxcdURGMzZcXHVERjQwLVxcdURGNTVcXHVERjYwLVxcdURGNjddfFxcdUQ4MDJbXFx1REMwMC1cXHVEQzA1XFx1REMwOFxcdURDMEEtXFx1REMzNVxcdURDMzdcXHVEQzM4XFx1REMzQ1xcdURDM0YtXFx1REM1NVxcdURDNjAtXFx1REM3NlxcdURDODAtXFx1REM5RVxcdURDRTAtXFx1RENGMlxcdURDRjRcXHVEQ0Y1XFx1REQwMC1cXHVERDE1XFx1REQyMC1cXHVERDM5XFx1REQ4MC1cXHVEREI3XFx1RERCRVxcdUREQkZcXHVERTAwXFx1REUxMC1cXHVERTEzXFx1REUxNS1cXHVERTE3XFx1REUxOS1cXHVERTMzXFx1REU2MC1cXHVERTdDXFx1REU4MC1cXHVERTlDXFx1REVDMC1cXHVERUM3XFx1REVDOS1cXHVERUU0XFx1REYwMC1cXHVERjM1XFx1REY0MC1cXHVERjU1XFx1REY2MC1cXHVERjcyXFx1REY4MC1cXHVERjkxXXxcXHVEODAzW1xcdURDMDAtXFx1REM0OF18XFx1RDgwNFtcXHVEQzAzLVxcdURDMzdcXHVEQzgzLVxcdURDQUZcXHVEQ0QwLVxcdURDRThcXHVERDAzLVxcdUREMjZcXHVERDUwLVxcdURENzJcXHVERDc2XFx1REQ4My1cXHVEREIyXFx1RERDMS1cXHVEREM0XFx1REREQVxcdURERENcXHVERTAwLVxcdURFMTFcXHVERTEzLVxcdURFMkJcXHVERTgwLVxcdURFODZcXHVERTg4XFx1REU4QS1cXHVERThEXFx1REU4Ri1cXHVERTlEXFx1REU5Ri1cXHVERUE4XFx1REVCMC1cXHVERURFXFx1REYwNS1cXHVERjBDXFx1REYwRlxcdURGMTBcXHVERjEzLVxcdURGMjhcXHVERjJBLVxcdURGMzBcXHVERjMyXFx1REYzM1xcdURGMzUtXFx1REYzOVxcdURGM0RcXHVERjUwXFx1REY1RC1cXHVERjYxXXxcXHVEODA1W1xcdURDMDAtXFx1REMzNFxcdURDNDctXFx1REM0QVxcdURDODAtXFx1RENBRlxcdURDQzRcXHVEQ0M1XFx1RENDN1xcdUREODAtXFx1RERBRVxcdURERDgtXFx1REREQlxcdURFMDAtXFx1REUyRlxcdURFNDRcXHVERTgwLVxcdURFQUFcXHVERjAwLVxcdURGMTldfFxcdUQ4MDZbXFx1RENGRlxcdURFQzAtXFx1REVGOF18XFx1RDgwN1tcXHVEQzAwLVxcdURDMDhcXHVEQzBBLVxcdURDMkVcXHVEQzQwXFx1REM3Mi1cXHVEQzhGXXxcXHVEODA4W1xcdURDMDAtXFx1REY5OV18XFx1RDgwOVtcXHVEQzgwLVxcdURENDNdfFtcXHVEODBDXFx1RDgxQy1cXHVEODIwXFx1RDg0MC1cXHVEODY4XFx1RDg2QS1cXHVEODZDXFx1RDg2Ri1cXHVEODcyXVtcXHVEQzAwLVxcdURGRkZdfFxcdUQ4MERbXFx1REMwMC1cXHVEQzJFXXxcXHVEODExW1xcdURDMDAtXFx1REU0Nl18XFx1RDgxQVtcXHVEQzAwLVxcdURFMzhcXHVERTQwLVxcdURFNUVcXHVERUQwLVxcdURFRURcXHVERjAwLVxcdURGMkZcXHVERjYzLVxcdURGNzdcXHVERjdELVxcdURGOEZdfFxcdUQ4MUJbXFx1REYwMC1cXHVERjQ0XFx1REY1MF18XFx1RDgyMVtcXHVEQzAwLVxcdURGRUNdfFxcdUQ4MjJbXFx1REMwMC1cXHVERUYyXXxcXHVEODJDW1xcdURDMDBcXHVEQzAxXXxcXHVEODJGW1xcdURDMDAtXFx1REM2QVxcdURDNzAtXFx1REM3Q1xcdURDODAtXFx1REM4OFxcdURDOTAtXFx1REM5OV18XFx1RDgzQVtcXHVEQzAwLVxcdURDQzRdfFxcdUQ4M0JbXFx1REUwMC1cXHVERTAzXFx1REUwNS1cXHVERTFGXFx1REUyMVxcdURFMjJcXHVERTI0XFx1REUyN1xcdURFMjktXFx1REUzMlxcdURFMzQtXFx1REUzN1xcdURFMzlcXHVERTNCXFx1REU0MlxcdURFNDdcXHVERTQ5XFx1REU0QlxcdURFNEQtXFx1REU0RlxcdURFNTFcXHVERTUyXFx1REU1NFxcdURFNTdcXHVERTU5XFx1REU1QlxcdURFNURcXHVERTVGXFx1REU2MVxcdURFNjJcXHVERTY0XFx1REU2Ny1cXHVERTZBXFx1REU2Qy1cXHVERTcyXFx1REU3NC1cXHVERTc3XFx1REU3OS1cXHVERTdDXFx1REU3RVxcdURFODAtXFx1REU4OVxcdURFOEItXFx1REU5QlxcdURFQTEtXFx1REVBM1xcdURFQTUtXFx1REVBOVxcdURFQUItXFx1REVCQl18XFx1RDg2OVtcXHVEQzAwLVxcdURFRDZcXHVERjAwLVxcdURGRkZdfFxcdUQ4NkRbXFx1REMwMC1cXHVERjM0XFx1REY0MC1cXHVERkZGXXxcXHVEODZFW1xcdURDMDAtXFx1REMxRFxcdURDMjAtXFx1REZGRl18XFx1RDg3M1tcXHVEQzAwLVxcdURFQTFdfFxcdUQ4N0VbXFx1REMwMC1cXHVERTFEXS9cbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBJbXBvcnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jb25zdCBVbmljb2RlQ2F0ZWdvcmllcyA9IFVuaWNvZGVDYXRlZ29yaWVzJDE7XG5jb25zdCBjb21tb24kaiA9IGNvbW1vbiRsO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUHJpdmF0ZSBzdHVmZlxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gR2VuZXJhbCBzdHVmZlxuXG5jbGFzcyBQRXhwciQxIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgaWYgKHRoaXMuY29uc3RydWN0b3IgPT09IFBFeHByJDEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlBFeHByIGNhbm5vdCBiZSBpbnN0YW50aWF0ZWQgLS0gaXQncyBhYnN0cmFjdFwiKTtcbiAgICB9XG4gIH1cblxuICAvLyBTZXQgdGhlIGBzb3VyY2VgIHByb3BlcnR5IHRvIHRoZSBpbnRlcnZhbCBjb250YWluaW5nIHRoZSBzb3VyY2UgZm9yIHRoaXMgZXhwcmVzc2lvbi5cbiAgd2l0aFNvdXJjZShpbnRlcnZhbCkge1xuICAgIGlmIChpbnRlcnZhbCkge1xuICAgICAgdGhpcy5zb3VyY2UgPSBpbnRlcnZhbC50cmltbWVkKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG5cbi8vIEFueVxuXG5jb25zdCBhbnkgPSBPYmplY3QuY3JlYXRlKFBFeHByJDEucHJvdG90eXBlKTtcblxuLy8gRW5kXG5cbmNvbnN0IGVuZCA9IE9iamVjdC5jcmVhdGUoUEV4cHIkMS5wcm90b3R5cGUpO1xuXG4vLyBUZXJtaW5hbHNcblxuY2xhc3MgVGVybWluYWwkMSBleHRlbmRzIFBFeHByJDEge1xuICBjb25zdHJ1Y3RvcihvYmopIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMub2JqID0gb2JqO1xuICB9XG59XG5cbi8vIFJhbmdlc1xuXG5jbGFzcyBSYW5nZSBleHRlbmRzIFBFeHByJDEge1xuICBjb25zdHJ1Y3Rvcihmcm9tLCB0bykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5mcm9tID0gZnJvbTtcbiAgICB0aGlzLnRvID0gdG87XG4gICAgLy8gSWYgZWl0aGVyIGBmcm9tYCBvciBgdG9gIGlzIG1hZGUgdXAgb2YgbXVsdGlwbGUgY29kZSB1bml0cywgdGhlblxuICAgIC8vIHRoZSByYW5nZSBzaG91bGQgY29uc3VtZSBhIGZ1bGwgY29kZSBwb2ludCwgbm90IGEgc2luZ2xlIGNvZGUgdW5pdC5cbiAgICB0aGlzLm1hdGNoQ29kZVBvaW50ID0gZnJvbS5sZW5ndGggPiAxIHx8IHRvLmxlbmd0aCA+IDE7XG4gIH1cbn1cblxuLy8gUGFyYW1ldGVyc1xuXG5jbGFzcyBQYXJhbSBleHRlbmRzIFBFeHByJDEge1xuICBjb25zdHJ1Y3RvcihpbmRleCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5pbmRleCA9IGluZGV4O1xuICB9XG59XG5cbi8vIEFsdGVybmF0aW9uXG5cbmNsYXNzIEFsdCBleHRlbmRzIFBFeHByJDEge1xuICBjb25zdHJ1Y3Rvcih0ZXJtcykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy50ZXJtcyA9IHRlcm1zO1xuICB9XG59XG5cbi8vIEV4dGVuZCBpcyBhbiBpbXBsZW1lbnRhdGlvbiBkZXRhaWwgb2YgcnVsZSBleHRlbnNpb25cblxuY2xhc3MgRXh0ZW5kIGV4dGVuZHMgQWx0IHtcbiAgY29uc3RydWN0b3Ioc3VwZXJHcmFtbWFyLCBuYW1lLCBib2R5KSB7XG4gICAgY29uc3Qgb3JpZ0JvZHkgPSBzdXBlckdyYW1tYXIucnVsZXNbbmFtZV0uYm9keTtcbiAgICBzdXBlcihbYm9keSwgb3JpZ0JvZHldKTtcblxuICAgIHRoaXMuc3VwZXJHcmFtbWFyID0gc3VwZXJHcmFtbWFyO1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5ib2R5ID0gYm9keTtcbiAgfVxufVxuXG4vLyBTcGxpY2UgaXMgYW4gaW1wbGVtZW50YXRpb24gZGV0YWlsIG9mIHJ1bGUgb3ZlcnJpZGluZyB3aXRoIHRoZSBgLi4uYCBvcGVyYXRvci5cbmNsYXNzIFNwbGljZSBleHRlbmRzIEFsdCB7XG4gIGNvbnN0cnVjdG9yKHN1cGVyR3JhbW1hciwgcnVsZU5hbWUsIGJlZm9yZVRlcm1zLCBhZnRlclRlcm1zKSB7XG4gICAgY29uc3Qgb3JpZ0JvZHkgPSBzdXBlckdyYW1tYXIucnVsZXNbcnVsZU5hbWVdLmJvZHk7XG4gICAgc3VwZXIoWy4uLmJlZm9yZVRlcm1zLCBvcmlnQm9keSwgLi4uYWZ0ZXJUZXJtc10pO1xuXG4gICAgdGhpcy5zdXBlckdyYW1tYXIgPSBzdXBlckdyYW1tYXI7XG4gICAgdGhpcy5ydWxlTmFtZSA9IHJ1bGVOYW1lO1xuICAgIHRoaXMuZXhwYW5zaW9uUG9zID0gYmVmb3JlVGVybXMubGVuZ3RoO1xuICB9XG59XG5cbi8vIFNlcXVlbmNlc1xuXG5jbGFzcyBTZXEgZXh0ZW5kcyBQRXhwciQxIHtcbiAgY29uc3RydWN0b3IoZmFjdG9ycykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5mYWN0b3JzID0gZmFjdG9ycztcbiAgfVxufVxuXG4vLyBJdGVyYXRvcnMgYW5kIG9wdGlvbmFsc1xuXG5jbGFzcyBJdGVyIGV4dGVuZHMgUEV4cHIkMSB7XG4gIGNvbnN0cnVjdG9yKGV4cHIpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuZXhwciA9IGV4cHI7XG4gIH1cbn1cblxuY2xhc3MgU3RhciBleHRlbmRzIEl0ZXIge31cbmNsYXNzIFBsdXMgZXh0ZW5kcyBJdGVyIHt9XG5jbGFzcyBPcHQgZXh0ZW5kcyBJdGVyIHt9XG5cblN0YXIucHJvdG90eXBlLm9wZXJhdG9yID0gJyonO1xuUGx1cy5wcm90b3R5cGUub3BlcmF0b3IgPSAnKyc7XG5PcHQucHJvdG90eXBlLm9wZXJhdG9yID0gJz8nO1xuXG5TdGFyLnByb3RvdHlwZS5taW5OdW1NYXRjaGVzID0gMDtcblBsdXMucHJvdG90eXBlLm1pbk51bU1hdGNoZXMgPSAxO1xuT3B0LnByb3RvdHlwZS5taW5OdW1NYXRjaGVzID0gMDtcblxuU3Rhci5wcm90b3R5cGUubWF4TnVtTWF0Y2hlcyA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcblBsdXMucHJvdG90eXBlLm1heE51bU1hdGNoZXMgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG5PcHQucHJvdG90eXBlLm1heE51bU1hdGNoZXMgPSAxO1xuXG4vLyBQcmVkaWNhdGVzXG5cbmNsYXNzIE5vdCBleHRlbmRzIFBFeHByJDEge1xuICBjb25zdHJ1Y3RvcihleHByKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmV4cHIgPSBleHByO1xuICB9XG59XG5cbmNsYXNzIExvb2thaGVhZCBleHRlbmRzIFBFeHByJDEge1xuICBjb25zdHJ1Y3RvcihleHByKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmV4cHIgPSBleHByO1xuICB9XG59XG5cbi8vIFwiTGV4aWZpY2F0aW9uXCJcblxuY2xhc3MgTGV4IGV4dGVuZHMgUEV4cHIkMSB7XG4gIGNvbnN0cnVjdG9yKGV4cHIpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuZXhwciA9IGV4cHI7XG4gIH1cbn1cblxuLy8gUnVsZSBhcHBsaWNhdGlvblxuXG5jbGFzcyBBcHBseSBleHRlbmRzIFBFeHByJDEge1xuICBjb25zdHJ1Y3RvcihydWxlTmFtZSwgYXJncyA9IFtdKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnJ1bGVOYW1lID0gcnVsZU5hbWU7XG4gICAgdGhpcy5hcmdzID0gYXJncztcbiAgfVxuXG4gIGlzU3ludGFjdGljKCkge1xuICAgIHJldHVybiBjb21tb24kai5pc1N5bnRhY3RpYyh0aGlzLnJ1bGVOYW1lKTtcbiAgfVxuXG4gIC8vIFRoaXMgbWV0aG9kIGp1c3QgY2FjaGVzIHRoZSByZXN1bHQgb2YgYHRoaXMudG9TdHJpbmcoKWAgaW4gYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eS5cbiAgdG9NZW1vS2V5KCkge1xuICAgIGlmICghdGhpcy5fbWVtb0tleSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdfbWVtb0tleScsIHt2YWx1ZTogdGhpcy50b1N0cmluZygpfSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9tZW1vS2V5O1xuICB9XG59XG5cbi8vIFVuaWNvZGUgY2hhcmFjdGVyXG5cbmNsYXNzIFVuaWNvZGVDaGFyIGV4dGVuZHMgUEV4cHIkMSB7XG4gIGNvbnN0cnVjdG9yKGNhdGVnb3J5KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmNhdGVnb3J5ID0gY2F0ZWdvcnk7XG4gICAgdGhpcy5wYXR0ZXJuID0gVW5pY29kZUNhdGVnb3JpZXNbY2F0ZWdvcnldO1xuICB9XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBFeHBvcnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5wZXhwcnNNYWluLlBFeHByID0gUEV4cHIkMTtcbnBleHByc01haW4uYW55ID0gYW55O1xucGV4cHJzTWFpbi5lbmQgPSBlbmQ7XG5wZXhwcnNNYWluLlRlcm1pbmFsID0gVGVybWluYWwkMTtcbnBleHByc01haW4uUmFuZ2UgPSBSYW5nZTtcbnBleHByc01haW4uUGFyYW0gPSBQYXJhbTtcbnBleHByc01haW4uQWx0ID0gQWx0O1xucGV4cHJzTWFpbi5FeHRlbmQgPSBFeHRlbmQ7XG5wZXhwcnNNYWluLlNwbGljZSA9IFNwbGljZTtcbnBleHByc01haW4uU2VxID0gU2VxO1xucGV4cHJzTWFpbi5JdGVyID0gSXRlcjtcbnBleHByc01haW4uU3RhciA9IFN0YXI7XG5wZXhwcnNNYWluLlBsdXMgPSBQbHVzO1xucGV4cHJzTWFpbi5PcHQgPSBPcHQ7XG5wZXhwcnNNYWluLk5vdCA9IE5vdDtcbnBleHByc01haW4uTG9va2FoZWFkID0gTG9va2FoZWFkO1xucGV4cHJzTWFpbi5MZXggPSBMZXg7XG5wZXhwcnNNYWluLkFwcGx5ID0gQXBwbHk7XG5wZXhwcnNNYWluLlVuaWNvZGVDaGFyID0gVW5pY29kZUNoYXI7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBJbXBvcnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jb25zdCBjb21tb24kaSA9IGNvbW1vbiRsO1xuY29uc3QgcGV4cHJzJGwgPSBwZXhwcnNNYWluO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gT3BlcmF0aW9uc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLypcbiAgUmV0dXJuIHRydWUgaWYgd2Ugc2hvdWxkIHNraXAgc3BhY2VzIHByZWNlZGluZyB0aGlzIGV4cHJlc3Npb24gaW4gYSBzeW50YWN0aWMgY29udGV4dC5cbiovXG5wZXhwcnMkbC5QRXhwci5wcm90b3R5cGUuYWxsb3dzU2tpcHBpbmdQcmVjZWRpbmdTcGFjZSA9IGNvbW1vbiRpLmFic3RyYWN0KFxuICAgICdhbGxvd3NTa2lwcGluZ1ByZWNlZGluZ1NwYWNlJ1xuKTtcblxuLypcbiAgR2VuZXJhbGx5LCB0aGVzZSBhcmUgYWxsIGZpcnN0LW9yZGVyIGV4cHJlc3Npb25zIGFuZCAod2l0aCB0aGUgZXhjZXB0aW9uIG9mIEFwcGx5KVxuICBkaXJlY3RseSByZWFkIGZyb20gdGhlIGlucHV0IHN0cmVhbS5cbiovXG5wZXhwcnMkbC5hbnkuYWxsb3dzU2tpcHBpbmdQcmVjZWRpbmdTcGFjZSA9XG4gIHBleHBycyRsLmVuZC5hbGxvd3NTa2lwcGluZ1ByZWNlZGluZ1NwYWNlID1cbiAgcGV4cHJzJGwuQXBwbHkucHJvdG90eXBlLmFsbG93c1NraXBwaW5nUHJlY2VkaW5nU3BhY2UgPVxuICBwZXhwcnMkbC5UZXJtaW5hbC5wcm90b3R5cGUuYWxsb3dzU2tpcHBpbmdQcmVjZWRpbmdTcGFjZSA9XG4gIHBleHBycyRsLlJhbmdlLnByb3RvdHlwZS5hbGxvd3NTa2lwcGluZ1ByZWNlZGluZ1NwYWNlID1cbiAgcGV4cHJzJGwuVW5pY29kZUNoYXIucHJvdG90eXBlLmFsbG93c1NraXBwaW5nUHJlY2VkaW5nU3BhY2UgPVxuICAgIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuLypcbiAgSGlnaGVyLW9yZGVyIGV4cHJlc3Npb25zIHRoYXQgZG9uJ3QgZGlyZWN0bHkgY29uc3VtZSBpbnB1dC5cbiovXG5wZXhwcnMkbC5BbHQucHJvdG90eXBlLmFsbG93c1NraXBwaW5nUHJlY2VkaW5nU3BhY2UgPVxuICBwZXhwcnMkbC5JdGVyLnByb3RvdHlwZS5hbGxvd3NTa2lwcGluZ1ByZWNlZGluZ1NwYWNlID1cbiAgcGV4cHJzJGwuTGV4LnByb3RvdHlwZS5hbGxvd3NTa2lwcGluZ1ByZWNlZGluZ1NwYWNlID1cbiAgcGV4cHJzJGwuTG9va2FoZWFkLnByb3RvdHlwZS5hbGxvd3NTa2lwcGluZ1ByZWNlZGluZ1NwYWNlID1cbiAgcGV4cHJzJGwuTm90LnByb3RvdHlwZS5hbGxvd3NTa2lwcGluZ1ByZWNlZGluZ1NwYWNlID1cbiAgcGV4cHJzJGwuUGFyYW0ucHJvdG90eXBlLmFsbG93c1NraXBwaW5nUHJlY2VkaW5nU3BhY2UgPVxuICBwZXhwcnMkbC5TZXEucHJvdG90eXBlLmFsbG93c1NraXBwaW5nUHJlY2VkaW5nU3BhY2UgPVxuICAgIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBQcml2YXRlIHN0dWZmXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5mdW5jdGlvbiBOYW1lc3BhY2UkMigpIHt9XG5OYW1lc3BhY2UkMi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5OYW1lc3BhY2UkMi5hc05hbWVzcGFjZSA9IGZ1bmN0aW9uKG9iak9yTmFtZXNwYWNlKSB7XG4gIGlmIChvYmpPck5hbWVzcGFjZSBpbnN0YW5jZW9mIE5hbWVzcGFjZSQyKSB7XG4gICAgcmV0dXJuIG9iak9yTmFtZXNwYWNlO1xuICB9XG4gIHJldHVybiBOYW1lc3BhY2UkMi5jcmVhdGVOYW1lc3BhY2Uob2JqT3JOYW1lc3BhY2UpO1xufTtcblxuLy8gQ3JlYXRlIGEgbmV3IG5hbWVzcGFjZS4gSWYgYG9wdFByb3BzYCBpcyBzcGVjaWZpZWQsIGFsbCBvZiBpdHMgcHJvcGVydGllc1xuLy8gd2lsbCBiZSBjb3BpZWQgdG8gdGhlIG5ldyBuYW1lc3BhY2UuXG5OYW1lc3BhY2UkMi5jcmVhdGVOYW1lc3BhY2UgPSBmdW5jdGlvbihvcHRQcm9wcykge1xuICByZXR1cm4gTmFtZXNwYWNlJDIuZXh0ZW5kKE5hbWVzcGFjZSQyLnByb3RvdHlwZSwgb3B0UHJvcHMpO1xufTtcblxuLy8gQ3JlYXRlIGEgbmV3IG5hbWVzcGFjZSB3aGljaCBleHRlbmRzIGFub3RoZXIgbmFtZXNwYWNlLiBJZiBgb3B0UHJvcHNgIGlzXG4vLyBzcGVjaWZpZWQsIGFsbCBvZiBpdHMgcHJvcGVydGllcyB3aWxsIGJlIGNvcGllZCB0byB0aGUgbmV3IG5hbWVzcGFjZS5cbk5hbWVzcGFjZSQyLmV4dGVuZCA9IGZ1bmN0aW9uKG5hbWVzcGFjZSwgb3B0UHJvcHMpIHtcbiAgaWYgKG5hbWVzcGFjZSAhPT0gTmFtZXNwYWNlJDIucHJvdG90eXBlICYmICEobmFtZXNwYWNlIGluc3RhbmNlb2YgTmFtZXNwYWNlJDIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbm90IGEgTmFtZXNwYWNlIG9iamVjdDogJyArIG5hbWVzcGFjZSk7XG4gIH1cbiAgY29uc3QgbnMgPSBPYmplY3QuY3JlYXRlKG5hbWVzcGFjZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogTmFtZXNwYWNlJDIsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIH0sXG4gIH0pO1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbihucywgb3B0UHJvcHMpO1xufTtcblxuLy8gVE9ETzogU2hvdWxkIHRoaXMgYmUgYSByZWd1bGFyIG1ldGhvZD9cbk5hbWVzcGFjZSQyLnRvU3RyaW5nID0gZnVuY3Rpb24obnMpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChucyk7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gRXhwb3J0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIE5hbWVzcGFjZV8xID0gTmFtZXNwYWNlJDI7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBJbXBvcnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jb25zdCB7YXNzZXJ0OiBhc3NlcnQkM30gPSBjb21tb24kbDtcbmNvbnN0IE5hbWVzcGFjZSQxID0gTmFtZXNwYWNlXzE7XG5jb25zdCBwZXhwcnMkayA9IHBleHByc01haW47XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBQcml2YXRlIHN0dWZmXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5mdW5jdGlvbiBjcmVhdGVFcnJvcihtZXNzYWdlLCBvcHRJbnRlcnZhbCkge1xuICBsZXQgZTtcbiAgaWYgKG9wdEludGVydmFsKSB7XG4gICAgZSA9IG5ldyBFcnJvcihvcHRJbnRlcnZhbC5nZXRMaW5lQW5kQ29sdW1uTWVzc2FnZSgpICsgbWVzc2FnZSk7XG4gICAgZS5zaG9ydE1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgIGUuaW50ZXJ2YWwgPSBvcHRJbnRlcnZhbDtcbiAgfSBlbHNlIHtcbiAgICBlID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICB9XG4gIHJldHVybiBlO1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLSBlcnJvcnMgYWJvdXQgaW50ZXJ2YWxzIC0tLS0tLS0tLS0tLS0tLS0tXG5cbmZ1bmN0aW9uIGludGVydmFsU291cmNlc0RvbnRNYXRjaCgpIHtcbiAgcmV0dXJuIGNyZWF0ZUVycm9yKFwiSW50ZXJ2YWwgc291cmNlcyBkb24ndCBtYXRjaFwiKTtcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0gZXJyb3JzIGFib3V0IGdyYW1tYXJzIC0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vIEdyYW1tYXIgc3ludGF4IGVycm9yXG5cbmZ1bmN0aW9uIGdyYW1tYXJTeW50YXhFcnJvcihtYXRjaEZhaWx1cmUpIHtcbiAgY29uc3QgZSA9IG5ldyBFcnJvcigpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgJ21lc3NhZ2UnLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQoKSB7XG4gICAgICByZXR1cm4gbWF0Y2hGYWlsdXJlLm1lc3NhZ2U7XG4gICAgfSxcbiAgfSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCAnc2hvcnRNZXNzYWdlJywge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0KCkge1xuICAgICAgcmV0dXJuICdFeHBlY3RlZCAnICsgbWF0Y2hGYWlsdXJlLmdldEV4cGVjdGVkVGV4dCgpO1xuICAgIH0sXG4gIH0pO1xuICBlLmludGVydmFsID0gbWF0Y2hGYWlsdXJlLmdldEludGVydmFsKCk7XG4gIHJldHVybiBlO1xufVxuXG4vLyBVbmRlY2xhcmVkIGdyYW1tYXJcblxuZnVuY3Rpb24gdW5kZWNsYXJlZEdyYW1tYXIoZ3JhbW1hck5hbWUsIG5hbWVzcGFjZSwgaW50ZXJ2YWwpIHtcbiAgY29uc3QgbWVzc2FnZSA9IG5hbWVzcGFjZSA/XG4gICAgJ0dyYW1tYXIgJyArXG4gICAgICBncmFtbWFyTmFtZSArXG4gICAgICAnIGlzIG5vdCBkZWNsYXJlZCBpbiBuYW1lc3BhY2UgJyArXG4gICAgICBOYW1lc3BhY2UkMS50b1N0cmluZyhuYW1lc3BhY2UpIDpcbiAgICAnVW5kZWNsYXJlZCBncmFtbWFyICcgKyBncmFtbWFyTmFtZTtcbiAgcmV0dXJuIGNyZWF0ZUVycm9yKG1lc3NhZ2UsIGludGVydmFsKTtcbn1cblxuLy8gRHVwbGljYXRlIGdyYW1tYXIgZGVjbGFyYXRpb25cblxuZnVuY3Rpb24gZHVwbGljYXRlR3JhbW1hckRlY2xhcmF0aW9uKGdyYW1tYXIsIG5hbWVzcGFjZSkge1xuICByZXR1cm4gY3JlYXRlRXJyb3IoJ0dyYW1tYXIgJyArIGdyYW1tYXIubmFtZSArICcgaXMgYWxyZWFkeSBkZWNsYXJlZCBpbiB0aGlzIG5hbWVzcGFjZScpO1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLSBydWxlcyAtLS0tLS0tLS0tLS0tLS0tLVxuXG4vLyBVbmRlY2xhcmVkIHJ1bGVcblxuZnVuY3Rpb24gdW5kZWNsYXJlZFJ1bGUocnVsZU5hbWUsIGdyYW1tYXJOYW1lLCBvcHRJbnRlcnZhbCkge1xuICByZXR1cm4gY3JlYXRlRXJyb3IoXG4gICAgICAnUnVsZSAnICsgcnVsZU5hbWUgKyAnIGlzIG5vdCBkZWNsYXJlZCBpbiBncmFtbWFyICcgKyBncmFtbWFyTmFtZSxcbiAgICAgIG9wdEludGVydmFsXG4gICk7XG59XG5cbi8vIENhbm5vdCBvdmVycmlkZSB1bmRlY2xhcmVkIHJ1bGVcblxuZnVuY3Rpb24gY2Fubm90T3ZlcnJpZGVVbmRlY2xhcmVkUnVsZShydWxlTmFtZSwgZ3JhbW1hck5hbWUsIG9wdFNvdXJjZSkge1xuICByZXR1cm4gY3JlYXRlRXJyb3IoXG4gICAgICAnQ2Fubm90IG92ZXJyaWRlIHJ1bGUgJyArIHJ1bGVOYW1lICsgJyBiZWNhdXNlIGl0IGlzIG5vdCBkZWNsYXJlZCBpbiAnICsgZ3JhbW1hck5hbWUsXG4gICAgICBvcHRTb3VyY2VcbiAgKTtcbn1cblxuLy8gQ2Fubm90IGV4dGVuZCB1bmRlY2xhcmVkIHJ1bGVcblxuZnVuY3Rpb24gY2Fubm90RXh0ZW5kVW5kZWNsYXJlZFJ1bGUocnVsZU5hbWUsIGdyYW1tYXJOYW1lLCBvcHRTb3VyY2UpIHtcbiAgcmV0dXJuIGNyZWF0ZUVycm9yKFxuICAgICAgJ0Nhbm5vdCBleHRlbmQgcnVsZSAnICsgcnVsZU5hbWUgKyAnIGJlY2F1c2UgaXQgaXMgbm90IGRlY2xhcmVkIGluICcgKyBncmFtbWFyTmFtZSxcbiAgICAgIG9wdFNvdXJjZVxuICApO1xufVxuXG4vLyBEdXBsaWNhdGUgcnVsZSBkZWNsYXJhdGlvblxuXG5mdW5jdGlvbiBkdXBsaWNhdGVSdWxlRGVjbGFyYXRpb24ocnVsZU5hbWUsIGdyYW1tYXJOYW1lLCBkZWNsR3JhbW1hck5hbWUsIG9wdFNvdXJjZSkge1xuICBsZXQgbWVzc2FnZSA9XG4gICAgXCJEdXBsaWNhdGUgZGVjbGFyYXRpb24gZm9yIHJ1bGUgJ1wiICsgcnVsZU5hbWUgKyBcIicgaW4gZ3JhbW1hciAnXCIgKyBncmFtbWFyTmFtZSArIFwiJ1wiO1xuICBpZiAoZ3JhbW1hck5hbWUgIT09IGRlY2xHcmFtbWFyTmFtZSkge1xuICAgIG1lc3NhZ2UgKz0gXCIgKG9yaWdpbmFsbHkgZGVjbGFyZWQgaW4gJ1wiICsgZGVjbEdyYW1tYXJOYW1lICsgXCInKVwiO1xuICB9XG4gIHJldHVybiBjcmVhdGVFcnJvcihtZXNzYWdlLCBvcHRTb3VyY2UpO1xufVxuXG4vLyBXcm9uZyBudW1iZXIgb2YgcGFyYW1ldGVyc1xuXG5mdW5jdGlvbiB3cm9uZ051bWJlck9mUGFyYW1ldGVycyhydWxlTmFtZSwgZXhwZWN0ZWQsIGFjdHVhbCwgc291cmNlKSB7XG4gIHJldHVybiBjcmVhdGVFcnJvcihcbiAgICAgICdXcm9uZyBudW1iZXIgb2YgcGFyYW1ldGVycyBmb3IgcnVsZSAnICtcbiAgICAgIHJ1bGVOYW1lICtcbiAgICAgICcgKGV4cGVjdGVkICcgK1xuICAgICAgZXhwZWN0ZWQgK1xuICAgICAgJywgZ290ICcgK1xuICAgICAgYWN0dWFsICtcbiAgICAgICcpJyxcbiAgICAgIHNvdXJjZVxuICApO1xufVxuXG4vLyBXcm9uZyBudW1iZXIgb2YgYXJndW1lbnRzXG5cbmZ1bmN0aW9uIHdyb25nTnVtYmVyT2ZBcmd1bWVudHMocnVsZU5hbWUsIGV4cGVjdGVkLCBhY3R1YWwsIGV4cHIpIHtcbiAgcmV0dXJuIGNyZWF0ZUVycm9yKFxuICAgICAgJ1dyb25nIG51bWJlciBvZiBhcmd1bWVudHMgZm9yIHJ1bGUgJyArXG4gICAgICBydWxlTmFtZSArXG4gICAgICAnIChleHBlY3RlZCAnICtcbiAgICAgIGV4cGVjdGVkICtcbiAgICAgICcsIGdvdCAnICtcbiAgICAgIGFjdHVhbCArXG4gICAgICAnKScsXG4gICAgICBleHByXG4gICk7XG59XG5cbi8vIER1cGxpY2F0ZSBwYXJhbWV0ZXIgbmFtZXNcblxuZnVuY3Rpb24gZHVwbGljYXRlUGFyYW1ldGVyTmFtZXMocnVsZU5hbWUsIGR1cGxpY2F0ZXMsIHNvdXJjZSkge1xuICByZXR1cm4gY3JlYXRlRXJyb3IoXG4gICAgICAnRHVwbGljYXRlIHBhcmFtZXRlciBuYW1lcyBpbiBydWxlICcgKyBydWxlTmFtZSArICc6ICcgKyBkdXBsaWNhdGVzLmpvaW4oJywgJyksXG4gICAgICBzb3VyY2VcbiAgKTtcbn1cblxuLy8gSW52YWxpZCBwYXJhbWV0ZXIgZXhwcmVzc2lvblxuXG5mdW5jdGlvbiBpbnZhbGlkUGFyYW1ldGVyKHJ1bGVOYW1lLCBleHByKSB7XG4gIHJldHVybiBjcmVhdGVFcnJvcihcbiAgICAgICdJbnZhbGlkIHBhcmFtZXRlciB0byBydWxlICcgK1xuICAgICAgcnVsZU5hbWUgK1xuICAgICAgJzogJyArXG4gICAgICBleHByICtcbiAgICAgICcgaGFzIGFyaXR5ICcgK1xuICAgICAgZXhwci5nZXRBcml0eSgpICtcbiAgICAgICcsIGJ1dCBwYXJhbWV0ZXIgZXhwcmVzc2lvbnMgbXVzdCBoYXZlIGFyaXR5IDEnLFxuICAgICAgZXhwci5zb3VyY2VcbiAgKTtcbn1cblxuLy8gQXBwbGljYXRpb24gb2Ygc3ludGFjdGljIHJ1bGUgZnJvbSBsZXhpY2FsIHJ1bGVcblxuY29uc3Qgc3ludGFjdGljVnNMZXhpY2FsTm90ZSA9XG4gICdOT1RFOiBBIF9zeW50YWN0aWMgcnVsZV8gaXMgYSBydWxlIHdob3NlIG5hbWUgYmVnaW5zIHdpdGggYSBjYXBpdGFsIGxldHRlci4gJyArXG4gICdTZWUgaHR0cHM6Ly9vaG1qcy5vcmcvZC9zdmwgZm9yIG1vcmUgZGV0YWlscy4nO1xuXG5mdW5jdGlvbiBhcHBsaWNhdGlvbk9mU3ludGFjdGljUnVsZUZyb21MZXhpY2FsQ29udGV4dChydWxlTmFtZSwgYXBwbHlFeHByKSB7XG4gIHJldHVybiBjcmVhdGVFcnJvcihcbiAgICAgICdDYW5ub3QgYXBwbHkgc3ludGFjdGljIHJ1bGUgJyArIHJ1bGVOYW1lICsgJyBmcm9tIGhlcmUgKGluc2lkZSBhIGxleGljYWwgY29udGV4dCknLFxuICAgICAgYXBwbHlFeHByLnNvdXJjZVxuICApO1xufVxuXG4vLyBMZXhpY2FsIHJ1bGUgYXBwbGljYXRpb24gdXNlZCB3aXRoIGFwcGx5U3ludGFjdGljXG5cbmZ1bmN0aW9uIGFwcGx5U3ludGFjdGljV2l0aExleGljYWxSdWxlQXBwbGljYXRpb24oYXBwbHlFeHByKSB7XG4gIGNvbnN0IHtydWxlTmFtZX0gPSBhcHBseUV4cHI7XG4gIHJldHVybiBjcmVhdGVFcnJvcihcbiAgICAgIGBhcHBseVN5bnRhY3RpYyBpcyBmb3Igc3ludGFjdGljIHJ1bGVzLCBidXQgJyR7cnVsZU5hbWV9JyBpcyBhIGxleGljYWwgcnVsZS4gYCArXG4gICAgICBzeW50YWN0aWNWc0xleGljYWxOb3RlLFxuICAgICAgYXBwbHlFeHByLnNvdXJjZVxuICApO1xufVxuXG4vLyBBcHBsaWNhdGlvbiBvZiBhcHBseVN5bnRhY3RpYyBpbiBhIHN5bnRhY3RpYyBjb250ZXh0XG5cbmZ1bmN0aW9uIHVubmVjZXNzYXJ5RXhwZXJpbWVudGFsQXBwbHlTeW50YWN0aWMoYXBwbHlFeHByKSB7XG4gIHJldHVybiBjcmVhdGVFcnJvcihcbiAgICAgICdhcHBseVN5bnRhY3RpYyBpcyBub3QgcmVxdWlyZWQgaGVyZSAoaW4gYSBzeW50YWN0aWMgY29udGV4dCknLFxuICAgICAgYXBwbHlFeHByLnNvdXJjZVxuICApO1xufVxuXG4vLyBJbmNvcnJlY3QgYXJndW1lbnQgdHlwZVxuXG5mdW5jdGlvbiBpbmNvcnJlY3RBcmd1bWVudFR5cGUoZXhwZWN0ZWRUeXBlLCBleHByKSB7XG4gIHJldHVybiBjcmVhdGVFcnJvcignSW5jb3JyZWN0IGFyZ3VtZW50IHR5cGU6IGV4cGVjdGVkICcgKyBleHBlY3RlZFR5cGUsIGV4cHIuc291cmNlKTtcbn1cblxuLy8gTXVsdGlwbGUgaW5zdGFuY2VzIG9mIHRoZSBzdXBlci1zcGxpY2Ugb3BlcmF0b3IgKGAuLi5gKSBpbiB0aGUgcnVsZSBib2R5LlxuXG5mdW5jdGlvbiBtdWx0aXBsZVN1cGVyU3BsaWNlcyhleHByKSB7XG4gIHJldHVybiBjcmVhdGVFcnJvcihcIicuLi4nIGNhbiBhcHBlYXIgYXQgbW9zdCBvbmNlIGluIGEgcnVsZSBib2R5XCIsIGV4cHIuc291cmNlKTtcbn1cblxuLy8gVW5pY29kZSBjb2RlIHBvaW50IGVzY2FwZXNcblxuZnVuY3Rpb24gaW52YWxpZENvZGVQb2ludChhcHBseVdyYXBwZXIpIHtcbiAgY29uc3Qgbm9kZSA9IGFwcGx5V3JhcHBlci5fbm9kZTtcbiAgYXNzZXJ0JDMobm9kZSAmJiBub2RlLmlzTm9udGVybWluYWwoKSAmJiBub2RlLmN0b3JOYW1lID09PSAnZXNjYXBlQ2hhcl91bmljb2RlQ29kZVBvaW50Jyk7XG5cbiAgLy8gR2V0IGFuIGludGVydmFsIHRoYXQgY292ZXJzIGFsbCBvZiB0aGUgaGV4IGRpZ2l0cy5cbiAgY29uc3QgZGlnaXRJbnRlcnZhbHMgPSBhcHBseVdyYXBwZXIuY2hpbGRyZW4uc2xpY2UoMSwgLTEpLm1hcChkID0+IGQuc291cmNlKTtcbiAgY29uc3QgZnVsbEludGVydmFsID0gZGlnaXRJbnRlcnZhbHNbMF0uY292ZXJhZ2VXaXRoKC4uLmRpZ2l0SW50ZXJ2YWxzLnNsaWNlKDEpKTtcbiAgcmV0dXJuIGNyZWF0ZUVycm9yKFxuICAgICAgYFUrJHtmdWxsSW50ZXJ2YWwuY29udGVudHN9IGlzIG5vdCBhIHZhbGlkIFVuaWNvZGUgY29kZSBwb2ludGAsXG4gICAgICBmdWxsSW50ZXJ2YWxcbiAgKTtcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0gS2xlZW5lIG9wZXJhdG9ycyAtLS0tLS0tLS0tLS0tLS0tLVxuXG5mdW5jdGlvbiBrbGVlbmVFeHBySGFzTnVsbGFibGVPcGVyYW5kKGtsZWVuZUV4cHIsIGFwcGxpY2F0aW9uU3RhY2spIHtcbiAgY29uc3QgYWN0dWFscyA9XG4gICAgYXBwbGljYXRpb25TdGFjay5sZW5ndGggPiAwID8gYXBwbGljYXRpb25TdGFja1thcHBsaWNhdGlvblN0YWNrLmxlbmd0aCAtIDFdLmFyZ3MgOiBbXTtcbiAgY29uc3QgZXhwciA9IGtsZWVuZUV4cHIuZXhwci5zdWJzdGl0dXRlUGFyYW1zKGFjdHVhbHMpO1xuICBsZXQgbWVzc2FnZSA9XG4gICAgJ051bGxhYmxlIGV4cHJlc3Npb24gJyArXG4gICAgZXhwciArXG4gICAgXCIgaXMgbm90IGFsbG93ZWQgaW5zaWRlICdcIiArXG4gICAga2xlZW5lRXhwci5vcGVyYXRvciArXG4gICAgXCInIChwb3NzaWJsZSBpbmZpbml0ZSBsb29wKVwiO1xuICBpZiAoYXBwbGljYXRpb25TdGFjay5sZW5ndGggPiAwKSB7XG4gICAgY29uc3Qgc3RhY2tUcmFjZSA9IGFwcGxpY2F0aW9uU3RhY2tcbiAgICAgICAgLm1hcChhcHAgPT4gbmV3IHBleHBycyRrLkFwcGx5KGFwcC5ydWxlTmFtZSwgYXBwLmFyZ3MpKVxuICAgICAgICAuam9pbignXFxuJyk7XG4gICAgbWVzc2FnZSArPSAnXFxuQXBwbGljYXRpb24gc3RhY2sgKG1vc3QgcmVjZW50IGFwcGxpY2F0aW9uIGxhc3QpOlxcbicgKyBzdGFja1RyYWNlO1xuICB9XG4gIHJldHVybiBjcmVhdGVFcnJvcihtZXNzYWdlLCBrbGVlbmVFeHByLmV4cHIuc291cmNlKTtcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0gYXJpdHkgLS0tLS0tLS0tLS0tLS0tLS1cblxuZnVuY3Rpb24gaW5jb25zaXN0ZW50QXJpdHkocnVsZU5hbWUsIGV4cGVjdGVkLCBhY3R1YWwsIGV4cHIpIHtcbiAgcmV0dXJuIGNyZWF0ZUVycm9yKFxuICAgICAgJ1J1bGUgJyArXG4gICAgICBydWxlTmFtZSArXG4gICAgICAnIGludm9sdmVzIGFuIGFsdGVybmF0aW9uIHdoaWNoIGhhcyBpbmNvbnNpc3RlbnQgYXJpdHkgJyArXG4gICAgICAnKGV4cGVjdGVkICcgK1xuICAgICAgZXhwZWN0ZWQgK1xuICAgICAgJywgZ290ICcgK1xuICAgICAgYWN0dWFsICtcbiAgICAgICcpJyxcbiAgICAgIGV4cHIuc291cmNlXG4gICk7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tIHByb3BlcnRpZXMgLS0tLS0tLS0tLS0tLS0tLS1cblxuZnVuY3Rpb24gZHVwbGljYXRlUHJvcGVydHlOYW1lcyhkdXBsaWNhdGVzKSB7XG4gIHJldHVybiBjcmVhdGVFcnJvcignT2JqZWN0IHBhdHRlcm4gaGFzIGR1cGxpY2F0ZSBwcm9wZXJ0eSBuYW1lczogJyArIGR1cGxpY2F0ZXMuam9pbignLCAnKSk7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tIGNvbnN0cnVjdG9ycyAtLS0tLS0tLS0tLS0tLS0tLVxuXG5mdW5jdGlvbiBpbnZhbGlkQ29uc3RydWN0b3JDYWxsKGdyYW1tYXIsIGN0b3JOYW1lLCBjaGlsZHJlbikge1xuICByZXR1cm4gY3JlYXRlRXJyb3IoXG4gICAgICAnQXR0ZW1wdCB0byBpbnZva2UgY29uc3RydWN0b3IgJyArIGN0b3JOYW1lICsgJyB3aXRoIGludmFsaWQgb3IgdW5leHBlY3RlZCBhcmd1bWVudHMnXG4gICk7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tIGNvbnZlbmllbmNlIC0tLS0tLS0tLS0tLS0tLS0tXG5cbmZ1bmN0aW9uIG11bHRpcGxlRXJyb3JzKGVycm9ycykge1xuICBjb25zdCBtZXNzYWdlcyA9IGVycm9ycy5tYXAoZSA9PiBlLm1lc3NhZ2UpO1xuICByZXR1cm4gY3JlYXRlRXJyb3IoWydFcnJvcnM6J10uY29uY2F0KG1lc3NhZ2VzKS5qb2luKCdcXG4tICcpLCBlcnJvcnNbMF0uaW50ZXJ2YWwpO1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLSBzZW1hbnRpYyAtLS0tLS0tLS0tLS0tLS0tLVxuXG5mdW5jdGlvbiBtaXNzaW5nU2VtYW50aWNBY3Rpb24oY3Rvck5hbWUsIG5hbWUsIHR5cGUsIHN0YWNrKSB7XG4gIGxldCBzdGFja1RyYWNlID0gc3RhY2tcbiAgICAgIC5zbGljZSgwLCAtMSlcbiAgICAgIC5tYXAoaW5mbyA9PiB7XG4gICAgICAgIGNvbnN0IGFucyA9ICcgICcgKyBpbmZvWzBdLm5hbWUgKyAnID4gJyArIGluZm9bMV07XG4gICAgICAgIHJldHVybiBpbmZvLmxlbmd0aCA9PT0gMyA/IGFucyArIFwiIGZvciAnXCIgKyBpbmZvWzJdICsgXCInXCIgOiBhbnM7XG4gICAgICB9KVxuICAgICAgLmpvaW4oJ1xcbicpO1xuICBzdGFja1RyYWNlICs9ICdcXG4gICcgKyBuYW1lICsgJyA+ICcgKyBjdG9yTmFtZTtcblxuICBsZXQgbW9yZUluZm8gPSAnJztcbiAgaWYgKGN0b3JOYW1lID09PSAnX2l0ZXInKSB7XG4gICAgbW9yZUluZm8gPSBbXG4gICAgICAnXFxuTk9URTogYXMgb2YgT2htIHYxNiwgdGhlcmUgaXMgbm8gZGVmYXVsdCBhY3Rpb24gZm9yIGl0ZXJhdGlvbiBub2RlcyDigJQgc2VlICcsXG4gICAgICAnICBodHRwczovL29obWpzLm9yZy9kL2RzYSBmb3IgZGV0YWlscy4nLFxuICAgIF0uam9pbignXFxuJyk7XG4gIH1cblxuICBjb25zdCBtZXNzYWdlID0gW1xuICAgIGBNaXNzaW5nIHNlbWFudGljIGFjdGlvbiBmb3IgJyR7Y3Rvck5hbWV9JyBpbiAke3R5cGV9ICcke25hbWV9Jy4ke21vcmVJbmZvfWAsXG4gICAgJ0FjdGlvbiBzdGFjayAobW9zdCByZWNlbnQgY2FsbCBsYXN0KTonLFxuICAgIHN0YWNrVHJhY2UsXG4gIF0uam9pbignXFxuJyk7XG5cbiAgY29uc3QgZSA9IGNyZWF0ZUVycm9yKG1lc3NhZ2UpO1xuICBlLm5hbWUgPSAnbWlzc2luZ1NlbWFudGljQWN0aW9uJztcbiAgcmV0dXJuIGU7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBFeHBvcnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgZXJyb3JzJDkgPSB7XG4gIGFwcGxpY2F0aW9uT2ZTeW50YWN0aWNSdWxlRnJvbUxleGljYWxDb250ZXh0LFxuICBhcHBseVN5bnRhY3RpY1dpdGhMZXhpY2FsUnVsZUFwcGxpY2F0aW9uLFxuICBjYW5ub3RFeHRlbmRVbmRlY2xhcmVkUnVsZSxcbiAgY2Fubm90T3ZlcnJpZGVVbmRlY2xhcmVkUnVsZSxcbiAgZHVwbGljYXRlR3JhbW1hckRlY2xhcmF0aW9uLFxuICBkdXBsaWNhdGVQYXJhbWV0ZXJOYW1lcyxcbiAgZHVwbGljYXRlUHJvcGVydHlOYW1lcyxcbiAgZHVwbGljYXRlUnVsZURlY2xhcmF0aW9uLFxuICBpbmNvbnNpc3RlbnRBcml0eSxcbiAgaW5jb3JyZWN0QXJndW1lbnRUeXBlLFxuICBpbnRlcnZhbFNvdXJjZXNEb250TWF0Y2gsXG4gIGludmFsaWRDb2RlUG9pbnQsXG4gIGludmFsaWRDb25zdHJ1Y3RvckNhbGwsXG4gIGludmFsaWRQYXJhbWV0ZXIsXG4gIGdyYW1tYXJTeW50YXhFcnJvcixcbiAga2xlZW5lRXhwckhhc051bGxhYmxlT3BlcmFuZCxcbiAgbWlzc2luZ1NlbWFudGljQWN0aW9uLFxuICBtdWx0aXBsZVN1cGVyU3BsaWNlcyxcbiAgdW5kZWNsYXJlZEdyYW1tYXIsXG4gIHVuZGVjbGFyZWRSdWxlLFxuICB1bm5lY2Vzc2FyeUV4cGVyaW1lbnRhbEFwcGx5U3ludGFjdGljLFxuICB3cm9uZ051bWJlck9mQXJndW1lbnRzLFxuICB3cm9uZ051bWJlck9mUGFyYW1ldGVycyxcblxuICB0aHJvd0Vycm9ycyhlcnJvcnMpIHtcbiAgICBpZiAoZXJyb3JzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdGhyb3cgZXJyb3JzWzBdO1xuICAgIH1cbiAgICBpZiAoZXJyb3JzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHRocm93IG11bHRpcGxlRXJyb3JzKGVycm9ycyk7XG4gICAgfVxuICB9LFxufTtcblxudmFyIHV0aWwkNyA9IHt9O1xuXG4oZnVuY3Rpb24gKGV4cG9ydHMpIHtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEltcG9ydHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IGNvbW1vbiA9IGNvbW1vbiRsO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUHJpdmF0ZSBzdHVmZlxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gR2l2ZW4gYW4gYXJyYXkgb2YgbnVtYmVycyBgYXJyYCwgcmV0dXJuIGFuIGFycmF5IG9mIHRoZSBudW1iZXJzIGFzIHN0cmluZ3MsXG4vLyByaWdodC1qdXN0aWZpZWQgYW5kIHBhZGRlZCB0byB0aGUgc2FtZSBsZW5ndGguXG5mdW5jdGlvbiBwYWROdW1iZXJzVG9FcXVhbExlbmd0aChhcnIpIHtcbiAgbGV0IG1heExlbiA9IDA7XG4gIGNvbnN0IHN0cmluZ3MgPSBhcnIubWFwKG4gPT4ge1xuICAgIGNvbnN0IHN0ciA9IG4udG9TdHJpbmcoKTtcbiAgICBtYXhMZW4gPSBNYXRoLm1heChtYXhMZW4sIHN0ci5sZW5ndGgpO1xuICAgIHJldHVybiBzdHI7XG4gIH0pO1xuICByZXR1cm4gc3RyaW5ncy5tYXAocyA9PiBjb21tb24ucGFkTGVmdChzLCBtYXhMZW4pKTtcbn1cblxuLy8gUHJvZHVjZSBhIG5ldyBzdHJpbmcgdGhhdCB3b3VsZCBiZSB0aGUgcmVzdWx0IG9mIGNvcHlpbmcgdGhlIGNvbnRlbnRzXG4vLyBvZiB0aGUgc3RyaW5nIGBzcmNgIG9udG8gYGRlc3RgIGF0IG9mZnNldCBgb2ZmZXN0YC5cbmZ1bmN0aW9uIHN0cmNweShkZXN0LCBzcmMsIG9mZnNldCkge1xuICBjb25zdCBvcmlnRGVzdExlbiA9IGRlc3QubGVuZ3RoO1xuICBjb25zdCBzdGFydCA9IGRlc3Quc2xpY2UoMCwgb2Zmc2V0KTtcbiAgY29uc3QgZW5kID0gZGVzdC5zbGljZShvZmZzZXQgKyBzcmMubGVuZ3RoKTtcbiAgcmV0dXJuIChzdGFydCArIHNyYyArIGVuZCkuc3Vic3RyKDAsIG9yaWdEZXN0TGVuKTtcbn1cblxuLy8gQ2FzdHMgdGhlIHVuZGVybHlpbmcgbGluZUFuZENvbCBvYmplY3QgdG8gYSBmb3JtYXR0ZWQgbWVzc2FnZSBzdHJpbmcsXG4vLyBoaWdobGlnaHRpbmcgYHJhbmdlc2AuXG5mdW5jdGlvbiBsaW5lQW5kQ29sdW1uVG9NZXNzYWdlKC4uLnJhbmdlcykge1xuICBjb25zdCBsaW5lQW5kQ29sID0gdGhpcztcbiAgY29uc3Qge29mZnNldH0gPSBsaW5lQW5kQ29sO1xuICBjb25zdCB7cmVwZWF0U3RyfSA9IGNvbW1vbjtcblxuICBjb25zdCBzYiA9IG5ldyBjb21tb24uU3RyaW5nQnVmZmVyKCk7XG4gIHNiLmFwcGVuZCgnTGluZSAnICsgbGluZUFuZENvbC5saW5lTnVtICsgJywgY29sICcgKyBsaW5lQW5kQ29sLmNvbE51bSArICc6XFxuJyk7XG5cbiAgLy8gQW4gYXJyYXkgb2YgdGhlIHByZXZpb3VzLCBjdXJyZW50LCBhbmQgbmV4dCBsaW5lIG51bWJlcnMgYXMgc3RyaW5ncyBvZiBlcXVhbCBsZW5ndGguXG4gIGNvbnN0IGxpbmVOdW1iZXJzID0gcGFkTnVtYmVyc1RvRXF1YWxMZW5ndGgoW1xuICAgIGxpbmVBbmRDb2wucHJldkxpbmUgPT0gbnVsbCA/IDAgOiBsaW5lQW5kQ29sLmxpbmVOdW0gLSAxLFxuICAgIGxpbmVBbmRDb2wubGluZU51bSxcbiAgICBsaW5lQW5kQ29sLm5leHRMaW5lID09IG51bGwgPyAwIDogbGluZUFuZENvbC5saW5lTnVtICsgMSxcbiAgXSk7XG5cbiAgLy8gSGVscGVyIGZvciBhcHBlbmRpbmcgZm9ybWF0dGluZyBpbnB1dCBsaW5lcyB0byB0aGUgYnVmZmVyLlxuICBjb25zdCBhcHBlbmRMaW5lID0gKG51bSwgY29udGVudCwgcHJlZml4KSA9PiB7XG4gICAgc2IuYXBwZW5kKHByZWZpeCArIGxpbmVOdW1iZXJzW251bV0gKyAnIHwgJyArIGNvbnRlbnQgKyAnXFxuJyk7XG4gIH07XG5cbiAgLy8gSW5jbHVkZSB0aGUgcHJldmlvdXMgbGluZSBmb3IgY29udGV4dCBpZiBwb3NzaWJsZS5cbiAgaWYgKGxpbmVBbmRDb2wucHJldkxpbmUgIT0gbnVsbCkge1xuICAgIGFwcGVuZExpbmUoMCwgbGluZUFuZENvbC5wcmV2TGluZSwgJyAgJyk7XG4gIH1cbiAgLy8gTGluZSB0aGF0IHRoZSBlcnJvciBvY2N1cnJlZCBvbi5cbiAgYXBwZW5kTGluZSgxLCBsaW5lQW5kQ29sLmxpbmUsICc+ICcpO1xuXG4gIC8vIEJ1aWxkIHVwIHRoZSBsaW5lIHRoYXQgcG9pbnRzIHRvIHRoZSBvZmZzZXQgYW5kIHBvc3NpYmxlIGluZGljYXRlcyBvbmUgb3IgbW9yZSByYW5nZXMuXG4gIC8vIFN0YXJ0IHdpdGggYSBibGFuayBsaW5lLCBhbmQgaW5kaWNhdGUgZWFjaCByYW5nZSBieSBvdmVybGF5aW5nIGEgc3RyaW5nIG9mIGB+YCBjaGFycy5cbiAgY29uc3QgbGluZUxlbiA9IGxpbmVBbmRDb2wubGluZS5sZW5ndGg7XG4gIGxldCBpbmRpY2F0aW9uTGluZSA9IHJlcGVhdFN0cignICcsIGxpbmVMZW4gKyAxKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCByYW5nZXMubGVuZ3RoOyArK2kpIHtcbiAgICBsZXQgc3RhcnRJZHggPSByYW5nZXNbaV1bMF07XG4gICAgbGV0IGVuZElkeCA9IHJhbmdlc1tpXVsxXTtcbiAgICBjb21tb24uYXNzZXJ0KHN0YXJ0SWR4ID49IDAgJiYgc3RhcnRJZHggPD0gZW5kSWR4LCAncmFuZ2Ugc3RhcnQgbXVzdCBiZSA+PSAwIGFuZCA8PSBlbmQnKTtcblxuICAgIGNvbnN0IGxpbmVTdGFydE9mZnNldCA9IG9mZnNldCAtIGxpbmVBbmRDb2wuY29sTnVtICsgMTtcbiAgICBzdGFydElkeCA9IE1hdGgubWF4KDAsIHN0YXJ0SWR4IC0gbGluZVN0YXJ0T2Zmc2V0KTtcbiAgICBlbmRJZHggPSBNYXRoLm1pbihlbmRJZHggLSBsaW5lU3RhcnRPZmZzZXQsIGxpbmVMZW4pO1xuXG4gICAgaW5kaWNhdGlvbkxpbmUgPSBzdHJjcHkoaW5kaWNhdGlvbkxpbmUsIHJlcGVhdFN0cignficsIGVuZElkeCAtIHN0YXJ0SWR4KSwgc3RhcnRJZHgpO1xuICB9XG4gIGNvbnN0IGd1dHRlcldpZHRoID0gMiArIGxpbmVOdW1iZXJzWzFdLmxlbmd0aCArIDM7XG4gIHNiLmFwcGVuZChyZXBlYXRTdHIoJyAnLCBndXR0ZXJXaWR0aCkpO1xuICBpbmRpY2F0aW9uTGluZSA9IHN0cmNweShpbmRpY2F0aW9uTGluZSwgJ14nLCBsaW5lQW5kQ29sLmNvbE51bSAtIDEpO1xuICBzYi5hcHBlbmQoaW5kaWNhdGlvbkxpbmUucmVwbGFjZSgvICskLywgJycpICsgJ1xcbicpO1xuXG4gIC8vIEluY2x1ZGUgdGhlIG5leHQgbGluZSBmb3IgY29udGV4dCBpZiBwb3NzaWJsZS5cbiAgaWYgKGxpbmVBbmRDb2wubmV4dExpbmUgIT0gbnVsbCkge1xuICAgIGFwcGVuZExpbmUoMiwgbGluZUFuZENvbC5uZXh0TGluZSwgJyAgJyk7XG4gIH1cbiAgcmV0dXJuIHNiLmNvbnRlbnRzKCk7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBFeHBvcnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5sZXQgYnVpbHRJblJ1bGVzQ2FsbGJhY2tzID0gW107XG5cbi8vIFNpbmNlIEdyYW1tYXIuQnVpbHRJblJ1bGVzIGlzIGJvb3RzdHJhcHBlZCwgbW9zdCBvZiBPaG0gY2FuJ3QgZGlyZWN0bHkgZGVwZW5kIGl0LlxuLy8gVGhpcyBmdW5jdGlvbiBhbGxvd3MgbW9kdWxlcyB0aGF0IGRvIGRlcGVuZCBvbiB0aGUgYnVpbHQtaW4gcnVsZXMgdG8gcmVnaXN0ZXIgYSBjYWxsYmFja1xuLy8gdGhhdCB3aWxsIGJlIGNhbGxlZCBsYXRlciBpbiB0aGUgaW5pdGlhbGl6YXRpb24gcHJvY2Vzcy5cbmV4cG9ydHMuYXdhaXRCdWlsdEluUnVsZXMgPSBjYiA9PiB7XG4gIGJ1aWx0SW5SdWxlc0NhbGxiYWNrcy5wdXNoKGNiKTtcbn07XG5cbmV4cG9ydHMuYW5ub3VuY2VCdWlsdEluUnVsZXMgPSBncmFtbWFyID0+IHtcbiAgYnVpbHRJblJ1bGVzQ2FsbGJhY2tzLmZvckVhY2goY2IgPT4ge1xuICAgIGNiKGdyYW1tYXIpO1xuICB9KTtcbiAgYnVpbHRJblJ1bGVzQ2FsbGJhY2tzID0gbnVsbDtcbn07XG5cbi8vIFJldHVybiBhbiBvYmplY3Qgd2l0aCB0aGUgbGluZSBhbmQgY29sdW1uIGluZm9ybWF0aW9uIGZvciB0aGUgZ2l2ZW5cbi8vIG9mZnNldCBpbiBgc3RyYC5cbmV4cG9ydHMuZ2V0TGluZUFuZENvbHVtbiA9IChzdHIsIG9mZnNldCkgPT4ge1xuICBsZXQgbGluZU51bSA9IDE7XG4gIGxldCBjb2xOdW0gPSAxO1xuXG4gIGxldCBjdXJyT2Zmc2V0ID0gMDtcbiAgbGV0IGxpbmVTdGFydE9mZnNldCA9IDA7XG5cbiAgbGV0IG5leHRMaW5lID0gbnVsbDtcbiAgbGV0IHByZXZMaW5lID0gbnVsbDtcbiAgbGV0IHByZXZMaW5lU3RhcnRPZmZzZXQgPSAtMTtcblxuICB3aGlsZSAoY3Vyck9mZnNldCA8IG9mZnNldCkge1xuICAgIGNvbnN0IGMgPSBzdHIuY2hhckF0KGN1cnJPZmZzZXQrKyk7XG4gICAgaWYgKGMgPT09ICdcXG4nKSB7XG4gICAgICBsaW5lTnVtKys7XG4gICAgICBjb2xOdW0gPSAxO1xuICAgICAgcHJldkxpbmVTdGFydE9mZnNldCA9IGxpbmVTdGFydE9mZnNldDtcbiAgICAgIGxpbmVTdGFydE9mZnNldCA9IGN1cnJPZmZzZXQ7XG4gICAgfSBlbHNlIGlmIChjICE9PSAnXFxyJykge1xuICAgICAgY29sTnVtKys7XG4gICAgfVxuICB9XG5cbiAgLy8gRmluZCB0aGUgZW5kIG9mIHRoZSB0YXJnZXQgbGluZS5cbiAgbGV0IGxpbmVFbmRPZmZzZXQgPSBzdHIuaW5kZXhPZignXFxuJywgbGluZVN0YXJ0T2Zmc2V0KTtcbiAgaWYgKGxpbmVFbmRPZmZzZXQgPT09IC0xKSB7XG4gICAgbGluZUVuZE9mZnNldCA9IHN0ci5sZW5ndGg7XG4gIH0gZWxzZSB7XG4gICAgLy8gR2V0IHRoZSBuZXh0IGxpbmUuXG4gICAgY29uc3QgbmV4dExpbmVFbmRPZmZzZXQgPSBzdHIuaW5kZXhPZignXFxuJywgbGluZUVuZE9mZnNldCArIDEpO1xuICAgIG5leHRMaW5lID1cbiAgICAgIG5leHRMaW5lRW5kT2Zmc2V0ID09PSAtMSA/XG4gICAgICAgIHN0ci5zbGljZShsaW5lRW5kT2Zmc2V0KSA6XG4gICAgICAgIHN0ci5zbGljZShsaW5lRW5kT2Zmc2V0LCBuZXh0TGluZUVuZE9mZnNldCk7XG4gICAgLy8gU3RyaXAgbGVhZGluZyBhbmQgdHJhaWxpbmcgRU9MIGNoYXIocykuXG4gICAgbmV4dExpbmUgPSBuZXh0TGluZS5yZXBsYWNlKC9eXFxyP1xcbi8sICcnKS5yZXBsYWNlKC9cXHIkLywgJycpO1xuICB9XG5cbiAgLy8gR2V0IHRoZSBwcmV2aW91cyBsaW5lLlxuICBpZiAocHJldkxpbmVTdGFydE9mZnNldCA+PSAwKSB7XG4gICAgLy8gU3RyaXAgdHJhaWxpbmcgRU9MIGNoYXIocykuXG4gICAgcHJldkxpbmUgPSBzdHIuc2xpY2UocHJldkxpbmVTdGFydE9mZnNldCwgbGluZVN0YXJ0T2Zmc2V0KS5yZXBsYWNlKC9cXHI/XFxuJC8sICcnKTtcbiAgfVxuXG4gIC8vIEdldCB0aGUgdGFyZ2V0IGxpbmUsIHN0cmlwcGluZyBhIHRyYWlsaW5nIGNhcnJpYWdlIHJldHVybiBpZiBuZWNlc3NhcnkuXG4gIGNvbnN0IGxpbmUgPSBzdHIuc2xpY2UobGluZVN0YXJ0T2Zmc2V0LCBsaW5lRW5kT2Zmc2V0KS5yZXBsYWNlKC9cXHIkLywgJycpO1xuXG4gIHJldHVybiB7XG4gICAgb2Zmc2V0LFxuICAgIGxpbmVOdW0sXG4gICAgY29sTnVtLFxuICAgIGxpbmUsXG4gICAgcHJldkxpbmUsXG4gICAgbmV4dExpbmUsXG4gICAgdG9TdHJpbmc6IGxpbmVBbmRDb2x1bW5Ub01lc3NhZ2UsXG4gIH07XG59O1xuXG4vLyBSZXR1cm4gYSBuaWNlbHktZm9ybWF0dGVkIHN0cmluZyBkZXNjcmliaW5nIHRoZSBsaW5lIGFuZCBjb2x1bW4gZm9yIHRoZVxuLy8gZ2l2ZW4gb2Zmc2V0IGluIGBzdHJgIGhpZ2hsaWdodGluZyBgcmFuZ2VzYC5cbmV4cG9ydHMuZ2V0TGluZUFuZENvbHVtbk1lc3NhZ2UgPSBmdW5jdGlvbihzdHIsIG9mZnNldCwgLi4ucmFuZ2VzKSB7XG4gIHJldHVybiBleHBvcnRzLmdldExpbmVBbmRDb2x1bW4oc3RyLCBvZmZzZXQpLnRvU3RyaW5nKC4uLnJhbmdlcyk7XG59O1xuXG5leHBvcnRzLnVuaXF1ZUlkID0gKCgpID0+IHtcbiAgbGV0IGlkQ291bnRlciA9IDA7XG4gIHJldHVybiBwcmVmaXggPT4gJycgKyBwcmVmaXggKyBpZENvdW50ZXIrKztcbn0pKCk7XG59KHV0aWwkNykpO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSW1wb3J0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuY29uc3Qge2Fic3RyYWN0LCBpc1N5bnRhY3RpY30gPSBjb21tb24kbDtcbmNvbnN0IGVycm9ycyQ4ID0gZXJyb3JzJDk7XG5jb25zdCBwZXhwcnMkaiA9IHBleHByc01haW47XG5jb25zdCB1dGlsJDYgPSB1dGlsJDc7XG5cbmxldCBCdWlsdEluUnVsZXM7XG5cbnV0aWwkNi5hd2FpdEJ1aWx0SW5SdWxlcyhnID0+IHtcbiAgQnVpbHRJblJ1bGVzID0gZztcbn0pO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gT3BlcmF0aW9uc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxubGV0IGxleGlmeUNvdW50O1xuXG5wZXhwcnMkai5QRXhwci5wcm90b3R5cGUuYXNzZXJ0QWxsQXBwbGljYXRpb25zQXJlVmFsaWQgPSBmdW5jdGlvbihydWxlTmFtZSwgZ3JhbW1hcikge1xuICBsZXhpZnlDb3VudCA9IDA7XG4gIHRoaXMuX2Fzc2VydEFsbEFwcGxpY2F0aW9uc0FyZVZhbGlkKHJ1bGVOYW1lLCBncmFtbWFyKTtcbn07XG5cbnBleHBycyRqLlBFeHByLnByb3RvdHlwZS5fYXNzZXJ0QWxsQXBwbGljYXRpb25zQXJlVmFsaWQgPSBhYnN0cmFjdChcbiAgICAnX2Fzc2VydEFsbEFwcGxpY2F0aW9uc0FyZVZhbGlkJ1xuKTtcblxucGV4cHJzJGouYW55Ll9hc3NlcnRBbGxBcHBsaWNhdGlvbnNBcmVWYWxpZCA9XG4gIHBleHBycyRqLmVuZC5fYXNzZXJ0QWxsQXBwbGljYXRpb25zQXJlVmFsaWQgPVxuICBwZXhwcnMkai5UZXJtaW5hbC5wcm90b3R5cGUuX2Fzc2VydEFsbEFwcGxpY2F0aW9uc0FyZVZhbGlkID1cbiAgcGV4cHJzJGouUmFuZ2UucHJvdG90eXBlLl9hc3NlcnRBbGxBcHBsaWNhdGlvbnNBcmVWYWxpZCA9XG4gIHBleHBycyRqLlBhcmFtLnByb3RvdHlwZS5fYXNzZXJ0QWxsQXBwbGljYXRpb25zQXJlVmFsaWQgPVxuICBwZXhwcnMkai5Vbmljb2RlQ2hhci5wcm90b3R5cGUuX2Fzc2VydEFsbEFwcGxpY2F0aW9uc0FyZVZhbGlkID1cbiAgICBmdW5jdGlvbihydWxlTmFtZSwgZ3JhbW1hcikge1xuICAgICAgLy8gbm8tb3BcbiAgICB9O1xuXG5wZXhwcnMkai5MZXgucHJvdG90eXBlLl9hc3NlcnRBbGxBcHBsaWNhdGlvbnNBcmVWYWxpZCA9IGZ1bmN0aW9uKHJ1bGVOYW1lLCBncmFtbWFyKSB7XG4gIGxleGlmeUNvdW50Kys7XG4gIHRoaXMuZXhwci5fYXNzZXJ0QWxsQXBwbGljYXRpb25zQXJlVmFsaWQocnVsZU5hbWUsIGdyYW1tYXIpO1xuICBsZXhpZnlDb3VudC0tO1xufTtcblxucGV4cHJzJGouQWx0LnByb3RvdHlwZS5fYXNzZXJ0QWxsQXBwbGljYXRpb25zQXJlVmFsaWQgPSBmdW5jdGlvbihydWxlTmFtZSwgZ3JhbW1hcikge1xuICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCB0aGlzLnRlcm1zLmxlbmd0aDsgaWR4KyspIHtcbiAgICB0aGlzLnRlcm1zW2lkeF0uX2Fzc2VydEFsbEFwcGxpY2F0aW9uc0FyZVZhbGlkKHJ1bGVOYW1lLCBncmFtbWFyKTtcbiAgfVxufTtcblxucGV4cHJzJGouU2VxLnByb3RvdHlwZS5fYXNzZXJ0QWxsQXBwbGljYXRpb25zQXJlVmFsaWQgPSBmdW5jdGlvbihydWxlTmFtZSwgZ3JhbW1hcikge1xuICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCB0aGlzLmZhY3RvcnMubGVuZ3RoOyBpZHgrKykge1xuICAgIHRoaXMuZmFjdG9yc1tpZHhdLl9hc3NlcnRBbGxBcHBsaWNhdGlvbnNBcmVWYWxpZChydWxlTmFtZSwgZ3JhbW1hcik7XG4gIH1cbn07XG5cbnBleHBycyRqLkl0ZXIucHJvdG90eXBlLl9hc3NlcnRBbGxBcHBsaWNhdGlvbnNBcmVWYWxpZCA9XG4gIHBleHBycyRqLk5vdC5wcm90b3R5cGUuX2Fzc2VydEFsbEFwcGxpY2F0aW9uc0FyZVZhbGlkID1cbiAgcGV4cHJzJGouTG9va2FoZWFkLnByb3RvdHlwZS5fYXNzZXJ0QWxsQXBwbGljYXRpb25zQXJlVmFsaWQgPVxuICAgIGZ1bmN0aW9uKHJ1bGVOYW1lLCBncmFtbWFyKSB7XG4gICAgICB0aGlzLmV4cHIuX2Fzc2VydEFsbEFwcGxpY2F0aW9uc0FyZVZhbGlkKHJ1bGVOYW1lLCBncmFtbWFyKTtcbiAgICB9O1xuXG5wZXhwcnMkai5BcHBseS5wcm90b3R5cGUuX2Fzc2VydEFsbEFwcGxpY2F0aW9uc0FyZVZhbGlkID0gZnVuY3Rpb24oXG4gICAgcnVsZU5hbWUsXG4gICAgZ3JhbW1hcixcbiAgICBza2lwU3ludGFjdGljQ2hlY2sgPSBmYWxzZVxuKSB7XG4gIGNvbnN0IHJ1bGVJbmZvID0gZ3JhbW1hci5ydWxlc1t0aGlzLnJ1bGVOYW1lXTtcbiAgY29uc3QgaXNDb250ZXh0U3ludGFjdGljID0gaXNTeW50YWN0aWMocnVsZU5hbWUpICYmIGxleGlmeUNvdW50ID09PSAwO1xuXG4gIC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBydWxlIGV4aXN0cy4uLlxuICBpZiAoIXJ1bGVJbmZvKSB7XG4gICAgdGhyb3cgZXJyb3JzJDgudW5kZWNsYXJlZFJ1bGUodGhpcy5ydWxlTmFtZSwgZ3JhbW1hci5uYW1lLCB0aGlzLnNvdXJjZSk7XG4gIH1cblxuICAvLyAuLi5hbmQgdGhhdCB0aGlzIGFwcGxpY2F0aW9uIGlzIGFsbG93ZWRcbiAgaWYgKCFza2lwU3ludGFjdGljQ2hlY2sgJiYgaXNTeW50YWN0aWModGhpcy5ydWxlTmFtZSkgJiYgIWlzQ29udGV4dFN5bnRhY3RpYykge1xuICAgIHRocm93IGVycm9ycyQ4LmFwcGxpY2F0aW9uT2ZTeW50YWN0aWNSdWxlRnJvbUxleGljYWxDb250ZXh0KHRoaXMucnVsZU5hbWUsIHRoaXMpO1xuICB9XG5cbiAgLy8gLi4uYW5kIHRoYXQgdGhpcyBhcHBsaWNhdGlvbiBoYXMgdGhlIGNvcnJlY3QgbnVtYmVyIG9mIGFyZ3VtZW50cy5cbiAgY29uc3QgYWN0dWFsID0gdGhpcy5hcmdzLmxlbmd0aDtcbiAgY29uc3QgZXhwZWN0ZWQgPSBydWxlSW5mby5mb3JtYWxzLmxlbmd0aDtcbiAgaWYgKGFjdHVhbCAhPT0gZXhwZWN0ZWQpIHtcbiAgICB0aHJvdyBlcnJvcnMkOC53cm9uZ051bWJlck9mQXJndW1lbnRzKHRoaXMucnVsZU5hbWUsIGV4cGVjdGVkLCBhY3R1YWwsIHRoaXMuc291cmNlKTtcbiAgfVxuXG4gIGNvbnN0IGlzQnVpbHRJbkFwcGx5U3ludGFjdGljID1cbiAgICBCdWlsdEluUnVsZXMgJiYgcnVsZUluZm8gPT09IEJ1aWx0SW5SdWxlcy5ydWxlcy5hcHBseVN5bnRhY3RpYztcbiAgY29uc3QgaXNCdWlsdEluQ2FzZUluc2Vuc2l0aXZlID1cbiAgICBCdWlsdEluUnVsZXMgJiYgcnVsZUluZm8gPT09IEJ1aWx0SW5SdWxlcy5ydWxlcy5jYXNlSW5zZW5zaXRpdmU7XG5cbiAgLy8gSWYgaXQncyBhbiBhcHBsaWNhdGlvbiBvZiAnY2FzZUluc2Vuc2l0aXZlJywgZW5zdXJlIHRoYXQgdGhlIGFyZ3VtZW50IGlzIGEgVGVybWluYWwuXG4gIGlmIChpc0J1aWx0SW5DYXNlSW5zZW5zaXRpdmUpIHtcbiAgICBpZiAoISh0aGlzLmFyZ3NbMF0gaW5zdGFuY2VvZiBwZXhwcnMkai5UZXJtaW5hbCkpIHtcbiAgICAgIHRocm93IGVycm9ycyQ4LmluY29ycmVjdEFyZ3VtZW50VHlwZSgnYSBUZXJtaW5hbCAoZS5nLiBcImFiY1wiKScsIHRoaXMuYXJnc1swXSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGlzQnVpbHRJbkFwcGx5U3ludGFjdGljKSB7XG4gICAgY29uc3QgYXJnID0gdGhpcy5hcmdzWzBdO1xuICAgIGlmICghKGFyZyBpbnN0YW5jZW9mIHBleHBycyRqLkFwcGx5KSkge1xuICAgICAgdGhyb3cgZXJyb3JzJDguaW5jb3JyZWN0QXJndW1lbnRUeXBlKCdhIHN5bnRhY3RpYyBydWxlIGFwcGxpY2F0aW9uJywgYXJnKTtcbiAgICB9XG4gICAgaWYgKCFpc1N5bnRhY3RpYyhhcmcucnVsZU5hbWUpKSB7XG4gICAgICB0aHJvdyBlcnJvcnMkOC5hcHBseVN5bnRhY3RpY1dpdGhMZXhpY2FsUnVsZUFwcGxpY2F0aW9uKGFyZyk7XG4gICAgfVxuICAgIGlmIChpc0NvbnRleHRTeW50YWN0aWMpIHtcbiAgICAgIHRocm93IGVycm9ycyQ4LnVubmVjZXNzYXJ5RXhwZXJpbWVudGFsQXBwbHlTeW50YWN0aWModGhpcyk7XG4gICAgfVxuICB9XG5cbiAgLy8gLi4uYW5kIHRoYXQgYWxsIG9mIHRoZSBhcmd1bWVudCBleHByZXNzaW9ucyBvbmx5IGhhdmUgdmFsaWQgYXBwbGljYXRpb25zIGFuZCBoYXZlIGFyaXR5IDEuXG4gIC8vIElmIGB0aGlzYCBpcyBhbiBhcHBsaWNhdGlvbiBvZiB0aGUgYnVpbHQtaW4gYXBwbHlTeW50YWN0aWMgcnVsZSwgdGhlbiBpdHMgYXJnIGlzXG4gIC8vIGFsbG93ZWQgKGFuZCBleHBlY3RlZCkgdG8gYmUgYSBzeW50YWN0aWMgcnVsZSwgZXZlbiBpZiB3ZSdyZSBpbiBhIGxleGljYWwgY29udGV4dC5cbiAgdGhpcy5hcmdzLmZvckVhY2goYXJnID0+IHtcbiAgICBhcmcuX2Fzc2VydEFsbEFwcGxpY2F0aW9uc0FyZVZhbGlkKHJ1bGVOYW1lLCBncmFtbWFyLCBpc0J1aWx0SW5BcHBseVN5bnRhY3RpYyk7XG4gICAgaWYgKGFyZy5nZXRBcml0eSgpICE9PSAxKSB7XG4gICAgICB0aHJvdyBlcnJvcnMkOC5pbnZhbGlkUGFyYW1ldGVyKHRoaXMucnVsZU5hbWUsIGFyZyk7XG4gICAgfVxuICB9KTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBJbXBvcnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jb25zdCBjb21tb24kaCA9IGNvbW1vbiRsO1xuY29uc3QgZXJyb3JzJDcgPSBlcnJvcnMkOTtcbmNvbnN0IHBleHBycyRpID0gcGV4cHJzTWFpbjtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIE9wZXJhdGlvbnNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnBleHBycyRpLlBFeHByLnByb3RvdHlwZS5hc3NlcnRDaG9pY2VzSGF2ZVVuaWZvcm1Bcml0eSA9IGNvbW1vbiRoLmFic3RyYWN0KFxuICAgICdhc3NlcnRDaG9pY2VzSGF2ZVVuaWZvcm1Bcml0eSdcbik7XG5cbnBleHBycyRpLmFueS5hc3NlcnRDaG9pY2VzSGF2ZVVuaWZvcm1Bcml0eSA9XG4gIHBleHBycyRpLmVuZC5hc3NlcnRDaG9pY2VzSGF2ZVVuaWZvcm1Bcml0eSA9XG4gIHBleHBycyRpLlRlcm1pbmFsLnByb3RvdHlwZS5hc3NlcnRDaG9pY2VzSGF2ZVVuaWZvcm1Bcml0eSA9XG4gIHBleHBycyRpLlJhbmdlLnByb3RvdHlwZS5hc3NlcnRDaG9pY2VzSGF2ZVVuaWZvcm1Bcml0eSA9XG4gIHBleHBycyRpLlBhcmFtLnByb3RvdHlwZS5hc3NlcnRDaG9pY2VzSGF2ZVVuaWZvcm1Bcml0eSA9XG4gIHBleHBycyRpLkxleC5wcm90b3R5cGUuYXNzZXJ0Q2hvaWNlc0hhdmVVbmlmb3JtQXJpdHkgPVxuICBwZXhwcnMkaS5Vbmljb2RlQ2hhci5wcm90b3R5cGUuYXNzZXJ0Q2hvaWNlc0hhdmVVbmlmb3JtQXJpdHkgPVxuICAgIGZ1bmN0aW9uKHJ1bGVOYW1lKSB7XG4gICAgICAvLyBuby1vcFxuICAgIH07XG5cbnBleHBycyRpLkFsdC5wcm90b3R5cGUuYXNzZXJ0Q2hvaWNlc0hhdmVVbmlmb3JtQXJpdHkgPSBmdW5jdGlvbihydWxlTmFtZSkge1xuICBpZiAodGhpcy50ZXJtcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgYXJpdHkgPSB0aGlzLnRlcm1zWzBdLmdldEFyaXR5KCk7XG4gIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IHRoaXMudGVybXMubGVuZ3RoOyBpZHgrKykge1xuICAgIGNvbnN0IHRlcm0gPSB0aGlzLnRlcm1zW2lkeF07XG4gICAgdGVybS5hc3NlcnRDaG9pY2VzSGF2ZVVuaWZvcm1Bcml0eSgpO1xuICAgIGNvbnN0IG90aGVyQXJpdHkgPSB0ZXJtLmdldEFyaXR5KCk7XG4gICAgaWYgKGFyaXR5ICE9PSBvdGhlckFyaXR5KSB7XG4gICAgICB0aHJvdyBlcnJvcnMkNy5pbmNvbnNpc3RlbnRBcml0eShydWxlTmFtZSwgYXJpdHksIG90aGVyQXJpdHksIHRlcm0pO1xuICAgIH1cbiAgfVxufTtcblxucGV4cHJzJGkuRXh0ZW5kLnByb3RvdHlwZS5hc3NlcnRDaG9pY2VzSGF2ZVVuaWZvcm1Bcml0eSA9IGZ1bmN0aW9uKHJ1bGVOYW1lKSB7XG4gIC8vIEV4dGVuZCBpcyBhIHNwZWNpYWwgY2FzZSBvZiBBbHQgdGhhdCdzIGd1YXJhbnRlZWQgdG8gaGF2ZSBleGFjdGx5IHR3b1xuICAvLyBjYXNlczogW2V4dGVuc2lvbnMsIG9yaWdCb2R5XS5cbiAgY29uc3QgYWN0dWFsQXJpdHkgPSB0aGlzLnRlcm1zWzBdLmdldEFyaXR5KCk7XG4gIGNvbnN0IGV4cGVjdGVkQXJpdHkgPSB0aGlzLnRlcm1zWzFdLmdldEFyaXR5KCk7XG4gIGlmIChhY3R1YWxBcml0eSAhPT0gZXhwZWN0ZWRBcml0eSkge1xuICAgIHRocm93IGVycm9ycyQ3LmluY29uc2lzdGVudEFyaXR5KHJ1bGVOYW1lLCBleHBlY3RlZEFyaXR5LCBhY3R1YWxBcml0eSwgdGhpcy50ZXJtc1swXSk7XG4gIH1cbn07XG5cbnBleHBycyRpLlNlcS5wcm90b3R5cGUuYXNzZXJ0Q2hvaWNlc0hhdmVVbmlmb3JtQXJpdHkgPSBmdW5jdGlvbihydWxlTmFtZSkge1xuICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCB0aGlzLmZhY3RvcnMubGVuZ3RoOyBpZHgrKykge1xuICAgIHRoaXMuZmFjdG9yc1tpZHhdLmFzc2VydENob2ljZXNIYXZlVW5pZm9ybUFyaXR5KHJ1bGVOYW1lKTtcbiAgfVxufTtcblxucGV4cHJzJGkuSXRlci5wcm90b3R5cGUuYXNzZXJ0Q2hvaWNlc0hhdmVVbmlmb3JtQXJpdHkgPSBmdW5jdGlvbihydWxlTmFtZSkge1xuICB0aGlzLmV4cHIuYXNzZXJ0Q2hvaWNlc0hhdmVVbmlmb3JtQXJpdHkocnVsZU5hbWUpO1xufTtcblxucGV4cHJzJGkuTm90LnByb3RvdHlwZS5hc3NlcnRDaG9pY2VzSGF2ZVVuaWZvcm1Bcml0eSA9IGZ1bmN0aW9uKHJ1bGVOYW1lKSB7XG4gIC8vIG5vLW9wIChub3QgcmVxdWlyZWQgYi9jIHRoZSBuZXN0ZWQgZXhwciBkb2Vzbid0IHNob3cgdXAgaW4gdGhlIENTVClcbn07XG5cbnBleHBycyRpLkxvb2thaGVhZC5wcm90b3R5cGUuYXNzZXJ0Q2hvaWNlc0hhdmVVbmlmb3JtQXJpdHkgPSBmdW5jdGlvbihydWxlTmFtZSkge1xuICB0aGlzLmV4cHIuYXNzZXJ0Q2hvaWNlc0hhdmVVbmlmb3JtQXJpdHkocnVsZU5hbWUpO1xufTtcblxucGV4cHJzJGkuQXBwbHkucHJvdG90eXBlLmFzc2VydENob2ljZXNIYXZlVW5pZm9ybUFyaXR5ID0gZnVuY3Rpb24ocnVsZU5hbWUpIHtcbiAgLy8gVGhlIGFyaXRpZXMgb2YgdGhlIHBhcmFtZXRlciBleHByZXNzaW9ucyBpcyByZXF1aXJlZCB0byBiZSAxIGJ5XG4gIC8vIGBhc3NlcnRBbGxBcHBsaWNhdGlvbnNBcmVWYWxpZCgpYC5cbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBJbXBvcnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jb25zdCBjb21tb24kZyA9IGNvbW1vbiRsO1xuY29uc3QgZXJyb3JzJDYgPSBlcnJvcnMkOTtcbmNvbnN0IHBleHBycyRoID0gcGV4cHJzTWFpbjtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIE9wZXJhdGlvbnNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnBleHBycyRoLlBFeHByLnByb3RvdHlwZS5hc3NlcnRJdGVyYXRlZEV4cHJzQXJlTm90TnVsbGFibGUgPSBjb21tb24kZy5hYnN0cmFjdChcbiAgICAnYXNzZXJ0SXRlcmF0ZWRFeHByc0FyZU5vdE51bGxhYmxlJ1xuKTtcblxucGV4cHJzJGguYW55LmFzc2VydEl0ZXJhdGVkRXhwcnNBcmVOb3ROdWxsYWJsZSA9XG4gIHBleHBycyRoLmVuZC5hc3NlcnRJdGVyYXRlZEV4cHJzQXJlTm90TnVsbGFibGUgPVxuICBwZXhwcnMkaC5UZXJtaW5hbC5wcm90b3R5cGUuYXNzZXJ0SXRlcmF0ZWRFeHByc0FyZU5vdE51bGxhYmxlID1cbiAgcGV4cHJzJGguUmFuZ2UucHJvdG90eXBlLmFzc2VydEl0ZXJhdGVkRXhwcnNBcmVOb3ROdWxsYWJsZSA9XG4gIHBleHBycyRoLlBhcmFtLnByb3RvdHlwZS5hc3NlcnRJdGVyYXRlZEV4cHJzQXJlTm90TnVsbGFibGUgPVxuICBwZXhwcnMkaC5Vbmljb2RlQ2hhci5wcm90b3R5cGUuYXNzZXJ0SXRlcmF0ZWRFeHByc0FyZU5vdE51bGxhYmxlID1cbiAgICBmdW5jdGlvbihncmFtbWFyKSB7XG4gICAgICAvLyBuby1vcFxuICAgIH07XG5cbnBleHBycyRoLkFsdC5wcm90b3R5cGUuYXNzZXJ0SXRlcmF0ZWRFeHByc0FyZU5vdE51bGxhYmxlID0gZnVuY3Rpb24oZ3JhbW1hcikge1xuICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCB0aGlzLnRlcm1zLmxlbmd0aDsgaWR4KyspIHtcbiAgICB0aGlzLnRlcm1zW2lkeF0uYXNzZXJ0SXRlcmF0ZWRFeHByc0FyZU5vdE51bGxhYmxlKGdyYW1tYXIpO1xuICB9XG59O1xuXG5wZXhwcnMkaC5TZXEucHJvdG90eXBlLmFzc2VydEl0ZXJhdGVkRXhwcnNBcmVOb3ROdWxsYWJsZSA9IGZ1bmN0aW9uKGdyYW1tYXIpIHtcbiAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgdGhpcy5mYWN0b3JzLmxlbmd0aDsgaWR4KyspIHtcbiAgICB0aGlzLmZhY3RvcnNbaWR4XS5hc3NlcnRJdGVyYXRlZEV4cHJzQXJlTm90TnVsbGFibGUoZ3JhbW1hcik7XG4gIH1cbn07XG5cbnBleHBycyRoLkl0ZXIucHJvdG90eXBlLmFzc2VydEl0ZXJhdGVkRXhwcnNBcmVOb3ROdWxsYWJsZSA9IGZ1bmN0aW9uKGdyYW1tYXIpIHtcbiAgLy8gTm90ZTogdGhpcyBpcyB0aGUgaW1wbGVtZW50YXRpb24gb2YgdGhpcyBtZXRob2QgZm9yIGBTdGFyYCBhbmQgYFBsdXNgIGV4cHJlc3Npb25zLlxuICAvLyBJdCBpcyBvdmVycmlkZGVuIGZvciBgT3B0YCBiZWxvdy5cbiAgdGhpcy5leHByLmFzc2VydEl0ZXJhdGVkRXhwcnNBcmVOb3ROdWxsYWJsZShncmFtbWFyKTtcbiAgaWYgKHRoaXMuZXhwci5pc051bGxhYmxlKGdyYW1tYXIpKSB7XG4gICAgdGhyb3cgZXJyb3JzJDYua2xlZW5lRXhwckhhc051bGxhYmxlT3BlcmFuZCh0aGlzLCBbXSk7XG4gIH1cbn07XG5cbnBleHBycyRoLk9wdC5wcm90b3R5cGUuYXNzZXJ0SXRlcmF0ZWRFeHByc0FyZU5vdE51bGxhYmxlID1cbiAgcGV4cHJzJGguTm90LnByb3RvdHlwZS5hc3NlcnRJdGVyYXRlZEV4cHJzQXJlTm90TnVsbGFibGUgPVxuICBwZXhwcnMkaC5Mb29rYWhlYWQucHJvdG90eXBlLmFzc2VydEl0ZXJhdGVkRXhwcnNBcmVOb3ROdWxsYWJsZSA9XG4gIHBleHBycyRoLkxleC5wcm90b3R5cGUuYXNzZXJ0SXRlcmF0ZWRFeHByc0FyZU5vdE51bGxhYmxlID1cbiAgICBmdW5jdGlvbihncmFtbWFyKSB7XG4gICAgICB0aGlzLmV4cHIuYXNzZXJ0SXRlcmF0ZWRFeHByc0FyZU5vdE51bGxhYmxlKGdyYW1tYXIpO1xuICAgIH07XG5cbnBleHBycyRoLkFwcGx5LnByb3RvdHlwZS5hc3NlcnRJdGVyYXRlZEV4cHJzQXJlTm90TnVsbGFibGUgPSBmdW5jdGlvbihncmFtbWFyKSB7XG4gIHRoaXMuYXJncy5mb3JFYWNoKGFyZyA9PiB7XG4gICAgYXJnLmFzc2VydEl0ZXJhdGVkRXhwcnNBcmVOb3ROdWxsYWJsZShncmFtbWFyKTtcbiAgfSk7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSW1wb3J0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuY29uc3Qge2Fzc2VydDogYXNzZXJ0JDJ9ID0gY29tbW9uJGw7XG5jb25zdCBlcnJvcnMkNSA9IGVycm9ycyQ5O1xuY29uc3QgdXRpbCQ1ID0gdXRpbCQ3O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUHJpdmF0ZSBzdHVmZlxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZnVuY3Rpb24gSW50ZXJ2YWwkMyhzb3VyY2VTdHJpbmcsIHN0YXJ0SWR4LCBlbmRJZHgpIHtcbiAgdGhpcy5zb3VyY2VTdHJpbmcgPSBzb3VyY2VTdHJpbmc7XG4gIHRoaXMuc3RhcnRJZHggPSBzdGFydElkeDtcbiAgdGhpcy5lbmRJZHggPSBlbmRJZHg7XG59XG5cbkludGVydmFsJDMuY292ZXJhZ2UgPSBmdW5jdGlvbihmaXJzdEludGVydmFsLCAuLi5pbnRlcnZhbHMpIHtcbiAgbGV0IHtzdGFydElkeCwgZW5kSWR4fSA9IGZpcnN0SW50ZXJ2YWw7XG4gIGZvciAoY29uc3QgaW50ZXJ2YWwgb2YgaW50ZXJ2YWxzKSB7XG4gICAgaWYgKGludGVydmFsLnNvdXJjZVN0cmluZyAhPT0gZmlyc3RJbnRlcnZhbC5zb3VyY2VTdHJpbmcpIHtcbiAgICAgIHRocm93IGVycm9ycyQ1LmludGVydmFsU291cmNlc0RvbnRNYXRjaCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGFydElkeCA9IE1hdGgubWluKHN0YXJ0SWR4LCBpbnRlcnZhbC5zdGFydElkeCk7XG4gICAgICBlbmRJZHggPSBNYXRoLm1heChlbmRJZHgsIGludGVydmFsLmVuZElkeCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBuZXcgSW50ZXJ2YWwkMyhmaXJzdEludGVydmFsLnNvdXJjZVN0cmluZywgc3RhcnRJZHgsIGVuZElkeCk7XG59O1xuXG5JbnRlcnZhbCQzLnByb3RvdHlwZSA9IHtcbiAgY292ZXJhZ2VXaXRoKC4uLmludGVydmFscykge1xuICAgIHJldHVybiBJbnRlcnZhbCQzLmNvdmVyYWdlKC4uLmludGVydmFscywgdGhpcyk7XG4gIH0sXG5cbiAgY29sbGFwc2VkTGVmdCgpIHtcbiAgICByZXR1cm4gbmV3IEludGVydmFsJDModGhpcy5zb3VyY2VTdHJpbmcsIHRoaXMuc3RhcnRJZHgsIHRoaXMuc3RhcnRJZHgpO1xuICB9LFxuXG4gIGNvbGxhcHNlZFJpZ2h0KCkge1xuICAgIHJldHVybiBuZXcgSW50ZXJ2YWwkMyh0aGlzLnNvdXJjZVN0cmluZywgdGhpcy5lbmRJZHgsIHRoaXMuZW5kSWR4KTtcbiAgfSxcblxuICBnZXRMaW5lQW5kQ29sdW1uKCkge1xuICAgIHJldHVybiB1dGlsJDUuZ2V0TGluZUFuZENvbHVtbih0aGlzLnNvdXJjZVN0cmluZywgdGhpcy5zdGFydElkeCk7XG4gIH0sXG5cbiAgZ2V0TGluZUFuZENvbHVtbk1lc3NhZ2UoKSB7XG4gICAgY29uc3QgcmFuZ2UgPSBbdGhpcy5zdGFydElkeCwgdGhpcy5lbmRJZHhdO1xuICAgIHJldHVybiB1dGlsJDUuZ2V0TGluZUFuZENvbHVtbk1lc3NhZ2UodGhpcy5zb3VyY2VTdHJpbmcsIHRoaXMuc3RhcnRJZHgsIHJhbmdlKTtcbiAgfSxcblxuICAvLyBSZXR1cm5zIGFuIGFycmF5IG9mIDAsIDEsIG9yIDIgaW50ZXJ2YWxzIHRoYXQgcmVwcmVzZW50cyB0aGUgcmVzdWx0IG9mIHRoZVxuICAvLyBpbnRlcnZhbCBkaWZmZXJlbmNlIG9wZXJhdGlvbi5cbiAgbWludXModGhhdCkge1xuICAgIGlmICh0aGlzLnNvdXJjZVN0cmluZyAhPT0gdGhhdC5zb3VyY2VTdHJpbmcpIHtcbiAgICAgIHRocm93IGVycm9ycyQ1LmludGVydmFsU291cmNlc0RvbnRNYXRjaCgpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5zdGFydElkeCA9PT0gdGhhdC5zdGFydElkeCAmJiB0aGlzLmVuZElkeCA9PT0gdGhhdC5lbmRJZHgpIHtcbiAgICAgIC8vIGB0aGlzYCBhbmQgYHRoYXRgIGFyZSB0aGUgc2FtZSBpbnRlcnZhbCFcbiAgICAgIHJldHVybiBbXTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuc3RhcnRJZHggPCB0aGF0LnN0YXJ0SWR4ICYmIHRoYXQuZW5kSWR4IDwgdGhpcy5lbmRJZHgpIHtcbiAgICAgIC8vIGB0aGF0YCBzcGxpdHMgYHRoaXNgIGludG8gdHdvIGludGVydmFsc1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgbmV3IEludGVydmFsJDModGhpcy5zb3VyY2VTdHJpbmcsIHRoaXMuc3RhcnRJZHgsIHRoYXQuc3RhcnRJZHgpLFxuICAgICAgICBuZXcgSW50ZXJ2YWwkMyh0aGlzLnNvdXJjZVN0cmluZywgdGhhdC5lbmRJZHgsIHRoaXMuZW5kSWR4KSxcbiAgICAgIF07XG4gICAgfSBlbHNlIGlmICh0aGlzLnN0YXJ0SWR4IDwgdGhhdC5lbmRJZHggJiYgdGhhdC5lbmRJZHggPCB0aGlzLmVuZElkeCkge1xuICAgICAgLy8gYHRoYXRgIGNvbnRhaW5zIGEgcHJlZml4IG9mIGB0aGlzYFxuICAgICAgcmV0dXJuIFtuZXcgSW50ZXJ2YWwkMyh0aGlzLnNvdXJjZVN0cmluZywgdGhhdC5lbmRJZHgsIHRoaXMuZW5kSWR4KV07XG4gICAgfSBlbHNlIGlmICh0aGlzLnN0YXJ0SWR4IDwgdGhhdC5zdGFydElkeCAmJiB0aGF0LnN0YXJ0SWR4IDwgdGhpcy5lbmRJZHgpIHtcbiAgICAgIC8vIGB0aGF0YCBjb250YWlucyBhIHN1ZmZpeCBvZiBgdGhpc2BcbiAgICAgIHJldHVybiBbbmV3IEludGVydmFsJDModGhpcy5zb3VyY2VTdHJpbmcsIHRoaXMuc3RhcnRJZHgsIHRoYXQuc3RhcnRJZHgpXTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gYHRoYXRgIGFuZCBgdGhpc2AgZG8gbm90IG92ZXJsYXBcbiAgICAgIHJldHVybiBbdGhpc107XG4gICAgfVxuICB9LFxuXG4gIC8vIFJldHVybnMgYSBuZXcgSW50ZXJ2YWwgdGhhdCBoYXMgdGhlIHNhbWUgZXh0ZW50IGFzIHRoaXMgb25lLCBidXQgd2hpY2ggaXMgcmVsYXRpdmVcbiAgLy8gdG8gYHRoYXRgLCBhbiBJbnRlcnZhbCB0aGF0IGZ1bGx5IGNvdmVycyB0aGlzIG9uZS5cbiAgcmVsYXRpdmVUbyh0aGF0KSB7XG4gICAgaWYgKHRoaXMuc291cmNlU3RyaW5nICE9PSB0aGF0LnNvdXJjZVN0cmluZykge1xuICAgICAgdGhyb3cgZXJyb3JzJDUuaW50ZXJ2YWxTb3VyY2VzRG9udE1hdGNoKCk7XG4gICAgfVxuICAgIGFzc2VydCQyKFxuICAgICAgICB0aGlzLnN0YXJ0SWR4ID49IHRoYXQuc3RhcnRJZHggJiYgdGhpcy5lbmRJZHggPD0gdGhhdC5lbmRJZHgsXG4gICAgICAgICdvdGhlciBpbnRlcnZhbCBkb2VzIG5vdCBjb3ZlciB0aGlzIG9uZSdcbiAgICApO1xuICAgIHJldHVybiBuZXcgSW50ZXJ2YWwkMyhcbiAgICAgICAgdGhpcy5zb3VyY2VTdHJpbmcsXG4gICAgICAgIHRoaXMuc3RhcnRJZHggLSB0aGF0LnN0YXJ0SWR4LFxuICAgICAgICB0aGlzLmVuZElkeCAtIHRoYXQuc3RhcnRJZHhcbiAgICApO1xuICB9LFxuXG4gIC8vIFJldHVybnMgYSBuZXcgSW50ZXJ2YWwgd2hpY2ggY29udGFpbnMgdGhlIHNhbWUgY29udGVudHMgYXMgdGhpcyBvbmUsXG4gIC8vIGJ1dCB3aXRoIHdoaXRlc3BhY2UgdHJpbW1lZCBmcm9tIGJvdGggZW5kcy4gKFRoaXMgb25seSBtYWtlcyBzZW5zZSB3aGVuXG4gIC8vIHRoZSBpbnB1dCBzdHJlYW0gaXMgYSBzdHJpbmcuKVxuICB0cmltbWVkKCkge1xuICAgIGNvbnN0IHtjb250ZW50c30gPSB0aGlzO1xuICAgIGNvbnN0IHN0YXJ0SWR4ID0gdGhpcy5zdGFydElkeCArIGNvbnRlbnRzLm1hdGNoKC9eXFxzKi8pWzBdLmxlbmd0aDtcbiAgICBjb25zdCBlbmRJZHggPSB0aGlzLmVuZElkeCAtIGNvbnRlbnRzLm1hdGNoKC9cXHMqJC8pWzBdLmxlbmd0aDtcbiAgICByZXR1cm4gbmV3IEludGVydmFsJDModGhpcy5zb3VyY2VTdHJpbmcsIHN0YXJ0SWR4LCBlbmRJZHgpO1xuICB9LFxuXG4gIHN1YkludGVydmFsKG9mZnNldCwgbGVuKSB7XG4gICAgY29uc3QgbmV3U3RhcnRJZHggPSB0aGlzLnN0YXJ0SWR4ICsgb2Zmc2V0O1xuICAgIHJldHVybiBuZXcgSW50ZXJ2YWwkMyh0aGlzLnNvdXJjZVN0cmluZywgbmV3U3RhcnRJZHgsIG5ld1N0YXJ0SWR4ICsgbGVuKTtcbiAgfSxcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEludGVydmFsJDMucHJvdG90eXBlLCB7XG4gIGNvbnRlbnRzOiB7XG4gICAgZ2V0KCkge1xuICAgICAgaWYgKHRoaXMuX2NvbnRlbnRzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5fY29udGVudHMgPSB0aGlzLnNvdXJjZVN0cmluZy5zbGljZSh0aGlzLnN0YXJ0SWR4LCB0aGlzLmVuZElkeCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5fY29udGVudHM7XG4gICAgfSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICB9LFxuICBsZW5ndGg6IHtcbiAgICBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5lbmRJZHggLSB0aGlzLnN0YXJ0SWR4O1xuICAgIH0sXG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgfSxcbn0pO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gRXhwb3J0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIEludGVydmFsXzEgPSBJbnRlcnZhbCQzO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSW1wb3J0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuY29uc3QgSW50ZXJ2YWwkMiA9IEludGVydmFsXzE7XG5jb25zdCBjb21tb24kZiA9IGNvbW1vbiRsO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUHJpdmF0ZSBzdHVmZlxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gVW5pY29kZSBjaGFyYWN0ZXJzIHRoYXQgYXJlIHVzZWQgaW4gdGhlIGB0b1N0cmluZ2Agb3V0cHV0LlxuY29uc3QgQkFMTE9UX1ggPSAnXFx1MjcxNyc7XG5jb25zdCBDSEVDS19NQVJLID0gJ1xcdTI3MTMnO1xuY29uc3QgRE9UX09QRVJBVE9SID0gJ1xcdTIyQzUnO1xuY29uc3QgUklHSFRXQVJEU19ET1VCTEVfQVJST1cgPSAnXFx1MjFEMic7XG5jb25zdCBTWU1CT0xfRk9SX0hPUklaT05UQUxfVEFCVUxBVElPTiA9ICdcXHUyNDA5JztcbmNvbnN0IFNZTUJPTF9GT1JfTElORV9GRUVEID0gJ1xcdTI0MEEnO1xuY29uc3QgU1lNQk9MX0ZPUl9DQVJSSUFHRV9SRVRVUk4gPSAnXFx1MjQwRCc7XG5cbmNvbnN0IEZsYWdzID0ge1xuICBzdWNjZWVkZWQ6IDEgPDwgMCxcbiAgaXNSb290Tm9kZTogMSA8PCAxLFxuICBpc0ltcGxpY2l0U3BhY2VzOiAxIDw8IDIsXG4gIGlzTWVtb2l6ZWQ6IDEgPDwgMyxcbiAgaXNIZWFkT2ZMZWZ0UmVjdXJzaW9uOiAxIDw8IDQsXG4gIHRlcm1pbmF0ZXNMUjogMSA8PCA1LFxufTtcblxuZnVuY3Rpb24gc3BhY2VzKG4pIHtcbiAgcmV0dXJuIGNvbW1vbiRmLnJlcGVhdCgnICcsIG4pLmpvaW4oJycpO1xufVxuXG4vLyBSZXR1cm4gYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBwb3J0aW9uIG9mIGBpbnB1dGAgYXQgb2Zmc2V0IGBwb3NgLlxuLy8gVGhlIHJlc3VsdCB3aWxsIGNvbnRhaW4gZXhhY3RseSBgbGVuYCBjaGFyYWN0ZXJzLlxuZnVuY3Rpb24gZ2V0SW5wdXRFeGNlcnB0KGlucHV0LCBwb3MsIGxlbikge1xuICBjb25zdCBleGNlcnB0ID0gYXNFc2NhcGVkU3RyaW5nKGlucHV0LnNsaWNlKHBvcywgcG9zICsgbGVuKSk7XG5cbiAgLy8gUGFkIHRoZSBvdXRwdXQgaWYgbmVjZXNzYXJ5LlxuICBpZiAoZXhjZXJwdC5sZW5ndGggPCBsZW4pIHtcbiAgICByZXR1cm4gZXhjZXJwdCArIGNvbW1vbiRmLnJlcGVhdCgnICcsIGxlbiAtIGV4Y2VycHQubGVuZ3RoKS5qb2luKCcnKTtcbiAgfVxuICByZXR1cm4gZXhjZXJwdDtcbn1cblxuZnVuY3Rpb24gYXNFc2NhcGVkU3RyaW5nKG9iaikge1xuICBpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBSZXBsYWNlIG5vbi1wcmludGFibGUgY2hhcmFjdGVycyB3aXRoIHZpc2libGUgc3ltYm9scy5cbiAgICByZXR1cm4gb2JqXG4gICAgICAgIC5yZXBsYWNlKC8gL2csIERPVF9PUEVSQVRPUilcbiAgICAgICAgLnJlcGxhY2UoL1xcdC9nLCBTWU1CT0xfRk9SX0hPUklaT05UQUxfVEFCVUxBVElPTilcbiAgICAgICAgLnJlcGxhY2UoL1xcbi9nLCBTWU1CT0xfRk9SX0xJTkVfRkVFRClcbiAgICAgICAgLnJlcGxhY2UoL1xcci9nLCBTWU1CT0xfRk9SX0NBUlJJQUdFX1JFVFVSTik7XG4gIH1cbiAgcmV0dXJuIFN0cmluZyhvYmopO1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLSBUcmFjZSAtLS0tLS0tLS0tLS0tLS0tLVxuXG5mdW5jdGlvbiBUcmFjZSQyKGlucHV0LCBwb3MxLCBwb3MyLCBleHByLCBzdWNjZWVkZWQsIGJpbmRpbmdzLCBvcHRDaGlsZHJlbikge1xuICB0aGlzLmlucHV0ID0gaW5wdXQ7XG4gIHRoaXMucG9zID0gdGhpcy5wb3MxID0gcG9zMTtcbiAgdGhpcy5wb3MyID0gcG9zMjtcbiAgdGhpcy5zb3VyY2UgPSBuZXcgSW50ZXJ2YWwkMihpbnB1dCwgcG9zMSwgcG9zMik7XG4gIHRoaXMuZXhwciA9IGV4cHI7XG4gIHRoaXMuYmluZGluZ3MgPSBiaW5kaW5ncztcbiAgdGhpcy5jaGlsZHJlbiA9IG9wdENoaWxkcmVuIHx8IFtdO1xuICB0aGlzLnRlcm1pbmF0aW5nTFJFbnRyeSA9IG51bGw7XG5cbiAgdGhpcy5fZmxhZ3MgPSBzdWNjZWVkZWQgPyBGbGFncy5zdWNjZWVkZWQgOiAwO1xufVxuXG4vLyBBIHZhbHVlIHRoYXQgY2FuIGJlIHJldHVybmVkIGZyb20gdmlzaXRvciBmdW5jdGlvbnMgdG8gaW5kaWNhdGUgdGhhdCBhXG4vLyBub2RlIHNob3VsZCBub3QgYmUgcmVjdXJzZWQgaW50by5cblRyYWNlJDIucHJvdG90eXBlLlNLSVAgPSB7fTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFRyYWNlJDIucHJvdG90eXBlLCAnZGlzcGxheVN0cmluZycsIHtcbiAgZ2V0KCkge1xuICAgIHJldHVybiB0aGlzLmV4cHIudG9EaXNwbGF5U3RyaW5nKCk7XG4gIH0sXG59KTtcblxuLy8gRm9yIGNvbnZlbmllbmNlLCBjcmVhdGUgYSBnZXR0ZXIgYW5kIHNldHRlciBmb3IgdGhlIGJvb2xlYW4gZmxhZ3MgaW4gYEZsYWdzYC5cbk9iamVjdC5rZXlzKEZsYWdzKS5mb3JFYWNoKG5hbWUgPT4ge1xuICBjb25zdCBtYXNrID0gRmxhZ3NbbmFtZV07XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUcmFjZSQyLnByb3RvdHlwZSwgbmFtZSwge1xuICAgIGdldCgpIHtcbiAgICAgIHJldHVybiAodGhpcy5fZmxhZ3MgJiBtYXNrKSAhPT0gMDtcbiAgICB9LFxuICAgIHNldCh2YWwpIHtcbiAgICAgIGlmICh2YWwpIHtcbiAgICAgICAgdGhpcy5fZmxhZ3MgfD0gbWFzaztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2ZsYWdzICY9IH5tYXNrO1xuICAgICAgfVxuICAgIH0sXG4gIH0pO1xufSk7XG5cblRyYWNlJDIucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmNsb25lV2l0aEV4cHIodGhpcy5leHByKTtcbn07XG5cblRyYWNlJDIucHJvdG90eXBlLmNsb25lV2l0aEV4cHIgPSBmdW5jdGlvbihleHByKSB7XG4gIGNvbnN0IGFucyA9IG5ldyBUcmFjZSQyKFxuICAgICAgdGhpcy5pbnB1dCxcbiAgICAgIHRoaXMucG9zLFxuICAgICAgdGhpcy5wb3MyLFxuICAgICAgZXhwcixcbiAgICAgIHRoaXMuc3VjY2VlZGVkLFxuICAgICAgdGhpcy5iaW5kaW5ncyxcbiAgICAgIHRoaXMuY2hpbGRyZW5cbiAgKTtcblxuICBhbnMuaXNIZWFkT2ZMZWZ0UmVjdXJzaW9uID0gdGhpcy5pc0hlYWRPZkxlZnRSZWN1cnNpb247XG4gIGFucy5pc0ltcGxpY2l0U3BhY2VzID0gdGhpcy5pc0ltcGxpY2l0U3BhY2VzO1xuICBhbnMuaXNNZW1vaXplZCA9IHRoaXMuaXNNZW1vaXplZDtcbiAgYW5zLmlzUm9vdE5vZGUgPSB0aGlzLmlzUm9vdE5vZGU7XG4gIGFucy50ZXJtaW5hdGVzTFIgPSB0aGlzLnRlcm1pbmF0ZXNMUjtcbiAgYW5zLnRlcm1pbmF0aW5nTFJFbnRyeSA9IHRoaXMudGVybWluYXRpbmdMUkVudHJ5O1xuICByZXR1cm4gYW5zO1xufTtcblxuLy8gUmVjb3JkIHRoZSB0cmFjZSBpbmZvcm1hdGlvbiBmb3IgdGhlIHRlcm1pbmF0aW5nIGNvbmRpdGlvbiBvZiB0aGUgTFIgbG9vcC5cblRyYWNlJDIucHJvdG90eXBlLnJlY29yZExSVGVybWluYXRpb24gPSBmdW5jdGlvbihydWxlQm9keVRyYWNlLCB2YWx1ZSkge1xuICB0aGlzLnRlcm1pbmF0aW5nTFJFbnRyeSA9IG5ldyBUcmFjZSQyKFxuICAgICAgdGhpcy5pbnB1dCxcbiAgICAgIHRoaXMucG9zLFxuICAgICAgdGhpcy5wb3MyLFxuICAgICAgdGhpcy5leHByLFxuICAgICAgZmFsc2UsXG4gICAgICBbdmFsdWVdLFxuICAgICAgW3J1bGVCb2R5VHJhY2VdXG4gICk7XG4gIHRoaXMudGVybWluYXRpbmdMUkVudHJ5LnRlcm1pbmF0ZXNMUiA9IHRydWU7XG59O1xuXG4vLyBSZWN1cnNpdmVseSB0cmF2ZXJzZSB0aGlzIHRyYWNlIG5vZGUgYW5kIGFsbCBpdHMgZGVzY2VuZGVudHMsIGNhbGxpbmcgYSB2aXNpdG9yIGZ1bmN0aW9uXG4vLyBmb3IgZWFjaCBub2RlIHRoYXQgaXMgdmlzaXRlZC4gSWYgYHZpc3Rvck9iak9yRm5gIGlzIGFuIG9iamVjdCwgdGhlbiBpdHMgJ2VudGVyJyBwcm9wZXJ0eVxuLy8gaXMgYSBmdW5jdGlvbiB0byBjYWxsIGJlZm9yZSB2aXNpdGluZyB0aGUgY2hpbGRyZW4gb2YgYSBub2RlLCBhbmQgaXRzICdleGl0JyBwcm9wZXJ0eSBpc1xuLy8gYSBmdW5jdGlvbiB0byBjYWxsIGFmdGVyd2FyZHMuIElmIGB2aXNpdG9yT2JqT3JGbmAgaXMgYSBmdW5jdGlvbiwgaXQgcmVwcmVzZW50cyB0aGUgJ2VudGVyJ1xuLy8gZnVuY3Rpb24uXG4vL1xuLy8gVGhlIGZ1bmN0aW9ucyBhcmUgY2FsbGVkIHdpdGggdGhyZWUgYXJndW1lbnRzOiB0aGUgVHJhY2Ugbm9kZSwgaXRzIHBhcmVudCBUcmFjZSwgYW5kIGEgbnVtYmVyXG4vLyByZXByZXNlbnRpbmcgdGhlIGRlcHRoIG9mIHRoZSBub2RlIGluIHRoZSB0cmVlLiAoVGhlIHJvb3Qgbm9kZSBoYXMgZGVwdGggMC4pIGBvcHRUaGlzQXJnYCwgaWZcbi8vIHNwZWNpZmllZCwgaXMgdGhlIHZhbHVlIHRvIHVzZSBmb3IgYHRoaXNgIHdoZW4gZXhlY3V0aW5nIHRoZSB2aXNpdG9yIGZ1bmN0aW9ucy5cblRyYWNlJDIucHJvdG90eXBlLndhbGsgPSBmdW5jdGlvbih2aXNpdG9yT2JqT3JGbiwgb3B0VGhpc0FyZykge1xuICBsZXQgdmlzaXRvciA9IHZpc2l0b3JPYmpPckZuO1xuICBpZiAodHlwZW9mIHZpc2l0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2aXNpdG9yID0ge2VudGVyOiB2aXNpdG9yfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF93YWxrKG5vZGUsIHBhcmVudCwgZGVwdGgpIHtcbiAgICBsZXQgcmVjdXJzZSA9IHRydWU7XG4gICAgaWYgKHZpc2l0b3IuZW50ZXIpIHtcbiAgICAgIGlmICh2aXNpdG9yLmVudGVyLmNhbGwob3B0VGhpc0FyZywgbm9kZSwgcGFyZW50LCBkZXB0aCkgPT09IFRyYWNlJDIucHJvdG90eXBlLlNLSVApIHtcbiAgICAgICAgcmVjdXJzZSA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocmVjdXJzZSkge1xuICAgICAgbm9kZS5jaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgICAgX3dhbGsoY2hpbGQsIG5vZGUsIGRlcHRoICsgMSk7XG4gICAgICB9KTtcbiAgICAgIGlmICh2aXNpdG9yLmV4aXQpIHtcbiAgICAgICAgdmlzaXRvci5leGl0LmNhbGwob3B0VGhpc0FyZywgbm9kZSwgcGFyZW50LCBkZXB0aCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICh0aGlzLmlzUm9vdE5vZGUpIHtcbiAgICAvLyBEb24ndCB2aXNpdCB0aGUgcm9vdCBub2RlIGl0c2VsZiwgb25seSBpdHMgY2hpbGRyZW4uXG4gICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKGMgPT4ge1xuICAgICAgX3dhbGsoYywgbnVsbCwgMCk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgX3dhbGsodGhpcywgbnVsbCwgMCk7XG4gIH1cbn07XG5cbi8vIFJldHVybiBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgdHJhY2UuXG4vLyBTYW1wbGU6XG4vLyAgICAgMTLii4Ur4ouFMuKLhSrii4UzIOKckyBleHAg4oeSICBcIjEyXCJcbi8vICAgICAxMuKLhSvii4Uy4ouFKuKLhTMgICDinJMgYWRkRXhwIChMUikg4oeSICBcIjEyXCJcbi8vICAgICAxMuKLhSvii4Uy4ouFKuKLhTMgICAgICAg4pyXIGFkZEV4cF9wbHVzXG5UcmFjZSQyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICBjb25zdCBzYiA9IG5ldyBjb21tb24kZi5TdHJpbmdCdWZmZXIoKTtcbiAgdGhpcy53YWxrKChub2RlLCBwYXJlbnQsIGRlcHRoKSA9PiB7XG4gICAgaWYgKCFub2RlKSB7XG4gICAgICByZXR1cm4gdGhpcy5TS0lQO1xuICAgIH1cbiAgICBjb25zdCBjdG9yTmFtZSA9IG5vZGUuZXhwci5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgIC8vIERvbid0IHByaW50IGFueXRoaW5nIGZvciBBbHQgbm9kZXMuXG4gICAgaWYgKGN0b3JOYW1lID09PSAnQWx0Jykge1xuICAgICAgcmV0dXJuOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gICAgfVxuICAgIHNiLmFwcGVuZChnZXRJbnB1dEV4Y2VycHQobm9kZS5pbnB1dCwgbm9kZS5wb3MsIDEwKSArIHNwYWNlcyhkZXB0aCAqIDIgKyAxKSk7XG4gICAgc2IuYXBwZW5kKChub2RlLnN1Y2NlZWRlZCA/IENIRUNLX01BUksgOiBCQUxMT1RfWCkgKyAnICcgKyBub2RlLmRpc3BsYXlTdHJpbmcpO1xuICAgIGlmIChub2RlLmlzSGVhZE9mTGVmdFJlY3Vyc2lvbikge1xuICAgICAgc2IuYXBwZW5kKCcgKExSKScpO1xuICAgIH1cbiAgICBpZiAobm9kZS5zdWNjZWVkZWQpIHtcbiAgICAgIGNvbnN0IGNvbnRlbnRzID0gYXNFc2NhcGVkU3RyaW5nKG5vZGUuc291cmNlLmNvbnRlbnRzKTtcbiAgICAgIHNiLmFwcGVuZCgnICcgKyBSSUdIVFdBUkRTX0RPVUJMRV9BUlJPVyArICcgICcpO1xuICAgICAgc2IuYXBwZW5kKHR5cGVvZiBjb250ZW50cyA9PT0gJ3N0cmluZycgPyAnXCInICsgY29udGVudHMgKyAnXCInIDogY29udGVudHMpO1xuICAgIH1cbiAgICBzYi5hcHBlbmQoJ1xcbicpO1xuICB9KTtcbiAgcmV0dXJuIHNiLmNvbnRlbnRzKCk7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gRXhwb3J0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIFRyYWNlXzEgPSBUcmFjZSQyO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSW1wb3J0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuY29uc3QgVHJhY2UkMSA9IFRyYWNlXzE7XG5jb25zdCBjb21tb24kZSA9IGNvbW1vbiRsO1xuY29uc3QgZXJyb3JzJDQgPSBlcnJvcnMkOTtcbmNvbnN0IG5vZGVzID0gbm9kZXMkMTtcbmNvbnN0IHBleHBycyRnID0gcGV4cHJzTWFpbjtcblxuY29uc3Qge1Rlcm1pbmFsTm9kZTogVGVybWluYWxOb2RlJDF9ID0gbm9kZXM7XG5jb25zdCB7Tm9udGVybWluYWxOb2RlfSA9IG5vZGVzO1xuY29uc3Qge0l0ZXJhdGlvbk5vZGU6IEl0ZXJhdGlvbk5vZGUkMX0gPSBub2RlcztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIE9wZXJhdGlvbnNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8qXG4gIEV2YWx1YXRlIHRoZSBleHByZXNzaW9uIGFuZCByZXR1cm4gYHRydWVgIGlmIGl0IHN1Y2NlZWRzLCBgZmFsc2VgIG90aGVyd2lzZS4gVGhpcyBtZXRob2Qgc2hvdWxkXG4gIG9ubHkgYmUgY2FsbGVkIGRpcmVjdGx5IGJ5IGBTdGF0ZS5wcm90b3R5cGUuZXZhbChleHByKWAsIHdoaWNoIGFsc28gdXBkYXRlcyB0aGUgZGF0YSBzdHJ1Y3R1cmVzXG4gIHRoYXQgYXJlIHVzZWQgZm9yIHRyYWNpbmcuIChNYWtpbmcgdGhvc2UgdXBkYXRlcyBpbiBhIG1ldGhvZCBvZiBgU3RhdGVgIGVuYWJsZXMgdGhlIHRyYWNlLXNwZWNpZmljXG4gIGRhdGEgc3RydWN0dXJlcyB0byBiZSBcInNlY3JldHNcIiBvZiB0aGF0IGNsYXNzLCB3aGljaCBpcyBnb29kIGZvciBtb2R1bGFyaXR5LilcblxuICBUaGUgY29udHJhY3Qgb2YgdGhpcyBtZXRob2QgaXMgYXMgZm9sbG93czpcbiAgKiBXaGVuIHRoZSByZXR1cm4gdmFsdWUgaXMgYHRydWVgLFxuICAgIC0gdGhlIHN0YXRlIG9iamVjdCB3aWxsIGhhdmUgYGV4cHIuZ2V0QXJpdHkoKWAgbW9yZSBiaW5kaW5ncyB0aGFuIGl0IGRpZCBiZWZvcmUgdGhlIGNhbGwuXG4gICogV2hlbiB0aGUgcmV0dXJuIHZhbHVlIGlzIGBmYWxzZWAsXG4gICAgLSB0aGUgc3RhdGUgb2JqZWN0IG1heSBoYXZlIG1vcmUgYmluZGluZ3MgdGhhbiBpdCBkaWQgYmVmb3JlIHRoZSBjYWxsLCBhbmRcbiAgICAtIGl0cyBpbnB1dCBzdHJlYW0ncyBwb3NpdGlvbiBtYXkgYmUgYW55d2hlcmUuXG5cbiAgTm90ZSB0aGF0IGBTdGF0ZS5wcm90b3R5cGUuZXZhbChleHByKWAsIHVubGlrZSB0aGlzIG1ldGhvZCwgZ3VhcmFudGVlcyB0aGF0IG5laXRoZXIgdGhlIHN0YXRlXG4gIG9iamVjdCdzIGJpbmRpbmdzIG5vciBpdHMgaW5wdXQgc3RyZWFtJ3MgcG9zaXRpb24gd2lsbCBjaGFuZ2UgaWYgdGhlIGV4cHJlc3Npb24gZmFpbHMgdG8gbWF0Y2guXG4qL1xucGV4cHJzJGcuUEV4cHIucHJvdG90eXBlLmV2YWwgPSBjb21tb24kZS5hYnN0cmFjdCgnZXZhbCcpOyAvLyBmdW5jdGlvbihzdGF0ZSkgeyAuLi4gfVxuXG5wZXhwcnMkZy5hbnkuZXZhbCA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gIGNvbnN0IHtpbnB1dFN0cmVhbX0gPSBzdGF0ZTtcbiAgY29uc3Qgb3JpZ1BvcyA9IGlucHV0U3RyZWFtLnBvcztcbiAgY29uc3QgY2ggPSBpbnB1dFN0cmVhbS5uZXh0KCk7XG4gIGlmIChjaCkge1xuICAgIHN0YXRlLnB1c2hCaW5kaW5nKG5ldyBUZXJtaW5hbE5vZGUkMShjaC5sZW5ndGgpLCBvcmlnUG9zKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBzdGF0ZS5wcm9jZXNzRmFpbHVyZShvcmlnUG9zLCB0aGlzKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbnBleHBycyRnLmVuZC5ldmFsID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgY29uc3Qge2lucHV0U3RyZWFtfSA9IHN0YXRlO1xuICBjb25zdCBvcmlnUG9zID0gaW5wdXRTdHJlYW0ucG9zO1xuICBpZiAoaW5wdXRTdHJlYW0uYXRFbmQoKSkge1xuICAgIHN0YXRlLnB1c2hCaW5kaW5nKG5ldyBUZXJtaW5hbE5vZGUkMSgwKSwgb3JpZ1Bvcyk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSB7XG4gICAgc3RhdGUucHJvY2Vzc0ZhaWx1cmUob3JpZ1BvcywgdGhpcyk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG5wZXhwcnMkZy5UZXJtaW5hbC5wcm90b3R5cGUuZXZhbCA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gIGNvbnN0IHtpbnB1dFN0cmVhbX0gPSBzdGF0ZTtcbiAgY29uc3Qgb3JpZ1BvcyA9IGlucHV0U3RyZWFtLnBvcztcbiAgaWYgKCFpbnB1dFN0cmVhbS5tYXRjaFN0cmluZyh0aGlzLm9iaikpIHtcbiAgICBzdGF0ZS5wcm9jZXNzRmFpbHVyZShvcmlnUG9zLCB0aGlzKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgc3RhdGUucHVzaEJpbmRpbmcobmV3IFRlcm1pbmFsTm9kZSQxKHRoaXMub2JqLmxlbmd0aCksIG9yaWdQb3MpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuXG5wZXhwcnMkZy5SYW5nZS5wcm90b3R5cGUuZXZhbCA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gIGNvbnN0IHtpbnB1dFN0cmVhbX0gPSBzdGF0ZTtcbiAgY29uc3Qgb3JpZ1BvcyA9IGlucHV0U3RyZWFtLnBvcztcblxuICAvLyBBIHJhbmdlIGNhbiBvcGVyYXRlIGluIG9uZSBvZiB0d28gbW9kZXM6IG1hdGNoaW5nIGEgc2luZ2xlLCAxNi1iaXQgX2NvZGUgdW5pdF8sXG4gIC8vIG9yIG1hdGNoaW5nIGEgX2NvZGUgcG9pbnRfLiAoQ29kZSBwb2ludHMgb3ZlciAweEZGRkYgdGFrZSB1cCB0d28gMTYtYml0IGNvZGUgdW5pdHMuKVxuICBjb25zdCBjcCA9IHRoaXMubWF0Y2hDb2RlUG9pbnQgPyBpbnB1dFN0cmVhbS5uZXh0Q29kZVBvaW50KCkgOiBpbnB1dFN0cmVhbS5uZXh0Q2hhckNvZGUoKTtcblxuICAvLyBBbHdheXMgY29tcGFyZSBieSBjb2RlIHBvaW50IHZhbHVlIHRvIGdldCB0aGUgY29ycmVjdCByZXN1bHQgaW4gYWxsIHNjZW5hcmlvcy5cbiAgLy8gTm90ZSB0aGF0IGZvciBzdHJpbmdzIG9mIGxlbmd0aCAxLCBjb2RlUG9pbnRBdCgwKSBhbmQgY2hhclBvaW50QXQoMCkgYXJlIGVxdWl2YWxlbnQuXG4gIGlmIChjcCAhPT0gdW5kZWZpbmVkICYmIHRoaXMuZnJvbS5jb2RlUG9pbnRBdCgwKSA8PSBjcCAmJiBjcCA8PSB0aGlzLnRvLmNvZGVQb2ludEF0KDApKSB7XG4gICAgc3RhdGUucHVzaEJpbmRpbmcobmV3IFRlcm1pbmFsTm9kZSQxKFN0cmluZy5mcm9tQ29kZVBvaW50KGNwKS5sZW5ndGgpLCBvcmlnUG9zKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBzdGF0ZS5wcm9jZXNzRmFpbHVyZShvcmlnUG9zLCB0aGlzKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbnBleHBycyRnLlBhcmFtLnByb3RvdHlwZS5ldmFsID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgcmV0dXJuIHN0YXRlLmV2YWwoc3RhdGUuY3VycmVudEFwcGxpY2F0aW9uKCkuYXJnc1t0aGlzLmluZGV4XSk7XG59O1xuXG5wZXhwcnMkZy5MZXgucHJvdG90eXBlLmV2YWwgPSBmdW5jdGlvbihzdGF0ZSkge1xuICBzdGF0ZS5lbnRlckxleGlmaWVkQ29udGV4dCgpO1xuICBjb25zdCBhbnMgPSBzdGF0ZS5ldmFsKHRoaXMuZXhwcik7XG4gIHN0YXRlLmV4aXRMZXhpZmllZENvbnRleHQoKTtcbiAgcmV0dXJuIGFucztcbn07XG5cbnBleHBycyRnLkFsdC5wcm90b3R5cGUuZXZhbCA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IHRoaXMudGVybXMubGVuZ3RoOyBpZHgrKykge1xuICAgIGlmIChzdGF0ZS5ldmFsKHRoaXMudGVybXNbaWR4XSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG5wZXhwcnMkZy5TZXEucHJvdG90eXBlLmV2YWwgPSBmdW5jdGlvbihzdGF0ZSkge1xuICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCB0aGlzLmZhY3RvcnMubGVuZ3RoOyBpZHgrKykge1xuICAgIGNvbnN0IGZhY3RvciA9IHRoaXMuZmFjdG9yc1tpZHhdO1xuICAgIGlmICghc3RhdGUuZXZhbChmYWN0b3IpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufTtcblxucGV4cHJzJGcuSXRlci5wcm90b3R5cGUuZXZhbCA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gIGNvbnN0IHtpbnB1dFN0cmVhbX0gPSBzdGF0ZTtcbiAgY29uc3Qgb3JpZ1BvcyA9IGlucHV0U3RyZWFtLnBvcztcbiAgY29uc3QgYXJpdHkgPSB0aGlzLmdldEFyaXR5KCk7XG4gIGNvbnN0IGNvbHMgPSBbXTtcbiAgY29uc3QgY29sT2Zmc2V0cyA9IFtdO1xuICB3aGlsZSAoY29scy5sZW5ndGggPCBhcml0eSkge1xuICAgIGNvbHMucHVzaChbXSk7XG4gICAgY29sT2Zmc2V0cy5wdXNoKFtdKTtcbiAgfVxuXG4gIGxldCBudW1NYXRjaGVzID0gMDtcbiAgbGV0IHByZXZQb3MgPSBvcmlnUG9zO1xuICBsZXQgaWR4O1xuICB3aGlsZSAobnVtTWF0Y2hlcyA8IHRoaXMubWF4TnVtTWF0Y2hlcyAmJiBzdGF0ZS5ldmFsKHRoaXMuZXhwcikpIHtcbiAgICBpZiAoaW5wdXRTdHJlYW0ucG9zID09PSBwcmV2UG9zKSB7XG4gICAgICB0aHJvdyBlcnJvcnMkNC5rbGVlbmVFeHBySGFzTnVsbGFibGVPcGVyYW5kKHRoaXMsIHN0YXRlLl9hcHBsaWNhdGlvblN0YWNrKTtcbiAgICB9XG4gICAgcHJldlBvcyA9IGlucHV0U3RyZWFtLnBvcztcbiAgICBudW1NYXRjaGVzKys7XG4gICAgY29uc3Qgcm93ID0gc3RhdGUuX2JpbmRpbmdzLnNwbGljZShzdGF0ZS5fYmluZGluZ3MubGVuZ3RoIC0gYXJpdHksIGFyaXR5KTtcbiAgICBjb25zdCByb3dPZmZzZXRzID0gc3RhdGUuX2JpbmRpbmdPZmZzZXRzLnNwbGljZShcbiAgICAgICAgc3RhdGUuX2JpbmRpbmdPZmZzZXRzLmxlbmd0aCAtIGFyaXR5LFxuICAgICAgICBhcml0eVxuICAgICk7XG4gICAgZm9yIChpZHggPSAwOyBpZHggPCByb3cubGVuZ3RoOyBpZHgrKykge1xuICAgICAgY29sc1tpZHhdLnB1c2gocm93W2lkeF0pO1xuICAgICAgY29sT2Zmc2V0c1tpZHhdLnB1c2gocm93T2Zmc2V0c1tpZHhdKTtcbiAgICB9XG4gIH1cbiAgaWYgKG51bU1hdGNoZXMgPCB0aGlzLm1pbk51bU1hdGNoZXMpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgbGV0IG9mZnNldCA9IHN0YXRlLnBvc1RvT2Zmc2V0KG9yaWdQb3MpO1xuICBsZXQgbWF0Y2hMZW5ndGggPSAwO1xuICBpZiAobnVtTWF0Y2hlcyA+IDApIHtcbiAgICBjb25zdCBsYXN0Q29sID0gY29sc1thcml0eSAtIDFdO1xuICAgIGNvbnN0IGxhc3RDb2xPZmZzZXRzID0gY29sT2Zmc2V0c1thcml0eSAtIDFdO1xuXG4gICAgY29uc3QgZW5kT2Zmc2V0ID1cbiAgICAgIGxhc3RDb2xPZmZzZXRzW2xhc3RDb2xPZmZzZXRzLmxlbmd0aCAtIDFdICsgbGFzdENvbFtsYXN0Q29sLmxlbmd0aCAtIDFdLm1hdGNoTGVuZ3RoO1xuICAgIG9mZnNldCA9IGNvbE9mZnNldHNbMF1bMF07XG4gICAgbWF0Y2hMZW5ndGggPSBlbmRPZmZzZXQgLSBvZmZzZXQ7XG4gIH1cbiAgY29uc3QgaXNPcHRpb25hbCA9IHRoaXMgaW5zdGFuY2VvZiBwZXhwcnMkZy5PcHQ7XG4gIGZvciAoaWR4ID0gMDsgaWR4IDwgY29scy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgc3RhdGUuX2JpbmRpbmdzLnB1c2goXG4gICAgICAgIG5ldyBJdGVyYXRpb25Ob2RlJDEoY29sc1tpZHhdLCBjb2xPZmZzZXRzW2lkeF0sIG1hdGNoTGVuZ3RoLCBpc09wdGlvbmFsKVxuICAgICk7XG4gICAgc3RhdGUuX2JpbmRpbmdPZmZzZXRzLnB1c2gob2Zmc2V0KTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbnBleHBycyRnLk5vdC5wcm90b3R5cGUuZXZhbCA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gIC8qXG4gICAgVE9ETzpcbiAgICAtIFJpZ2h0IG5vdyB3ZSdyZSBqdXN0IHRocm93aW5nIGF3YXkgYWxsIG9mIHRoZSBmYWlsdXJlcyB0aGF0IGhhcHBlbiBpbnNpZGUgYSBgbm90YCwgYW5kXG4gICAgICByZWNvcmRpbmcgYHRoaXNgIGFzIGEgZmFpbGVkIGV4cHJlc3Npb24uXG4gICAgLSBEb3VibGUgbmVnYXRpb24gc2hvdWxkIGJlIGVxdWl2YWxlbnQgdG8gbG9va2FoZWFkLCBidXQgdGhhdCdzIG5vdCB0aGUgY2FzZSByaWdodCBub3cgd3J0XG4gICAgICBmYWlsdXJlcy4gRS5nLiwgfn4nZm9vJyBwcm9kdWNlcyBhIGZhaWx1cmUgZm9yIH5+J2ZvbycsIGJ1dCBtYXliZSBpdCBzaG91bGQgcHJvZHVjZVxuICAgICAgYSBmYWlsdXJlIGZvciAnZm9vJyBpbnN0ZWFkLlxuICAqL1xuXG4gIGNvbnN0IHtpbnB1dFN0cmVhbX0gPSBzdGF0ZTtcbiAgY29uc3Qgb3JpZ1BvcyA9IGlucHV0U3RyZWFtLnBvcztcbiAgc3RhdGUucHVzaEZhaWx1cmVzSW5mbygpO1xuXG4gIGNvbnN0IGFucyA9IHN0YXRlLmV2YWwodGhpcy5leHByKTtcblxuICBzdGF0ZS5wb3BGYWlsdXJlc0luZm8oKTtcbiAgaWYgKGFucykge1xuICAgIHN0YXRlLnByb2Nlc3NGYWlsdXJlKG9yaWdQb3MsIHRoaXMpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlucHV0U3RyZWFtLnBvcyA9IG9yaWdQb3M7XG4gIHJldHVybiB0cnVlO1xufTtcblxucGV4cHJzJGcuTG9va2FoZWFkLnByb3RvdHlwZS5ldmFsID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgY29uc3Qge2lucHV0U3RyZWFtfSA9IHN0YXRlO1xuICBjb25zdCBvcmlnUG9zID0gaW5wdXRTdHJlYW0ucG9zO1xuICBpZiAoc3RhdGUuZXZhbCh0aGlzLmV4cHIpKSB7XG4gICAgaW5wdXRTdHJlYW0ucG9zID0gb3JpZ1BvcztcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbnBleHBycyRnLkFwcGx5LnByb3RvdHlwZS5ldmFsID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgY29uc3QgY2FsbGVyID0gc3RhdGUuY3VycmVudEFwcGxpY2F0aW9uKCk7XG4gIGNvbnN0IGFjdHVhbHMgPSBjYWxsZXIgPyBjYWxsZXIuYXJncyA6IFtdO1xuICBjb25zdCBhcHAgPSB0aGlzLnN1YnN0aXR1dGVQYXJhbXMoYWN0dWFscyk7XG5cbiAgY29uc3QgcG9zSW5mbyA9IHN0YXRlLmdldEN1cnJlbnRQb3NJbmZvKCk7XG4gIGlmIChwb3NJbmZvLmlzQWN0aXZlKGFwcCkpIHtcbiAgICAvLyBUaGlzIHJ1bGUgaXMgYWxyZWFkeSBhY3RpdmUgYXQgdGhpcyBwb3NpdGlvbiwgaS5lLiwgaXQgaXMgbGVmdC1yZWN1cnNpdmUuXG4gICAgcmV0dXJuIGFwcC5oYW5kbGVDeWNsZShzdGF0ZSk7XG4gIH1cblxuICBjb25zdCBtZW1vS2V5ID0gYXBwLnRvTWVtb0tleSgpO1xuICBjb25zdCBtZW1vUmVjID0gcG9zSW5mby5tZW1vW21lbW9LZXldO1xuXG4gIGlmIChtZW1vUmVjICYmIHBvc0luZm8uc2hvdWxkVXNlTWVtb2l6ZWRSZXN1bHQobWVtb1JlYykpIHtcbiAgICBpZiAoc3RhdGUuaGFzTmVjZXNzYXJ5SW5mbyhtZW1vUmVjKSkge1xuICAgICAgcmV0dXJuIHN0YXRlLnVzZU1lbW9pemVkUmVzdWx0KHN0YXRlLmlucHV0U3RyZWFtLnBvcywgbWVtb1JlYyk7XG4gICAgfVxuICAgIGRlbGV0ZSBwb3NJbmZvLm1lbW9bbWVtb0tleV07XG4gIH1cbiAgcmV0dXJuIGFwcC5yZWFsbHlFdmFsKHN0YXRlKTtcbn07XG5cbnBleHBycyRnLkFwcGx5LnByb3RvdHlwZS5oYW5kbGVDeWNsZSA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gIGNvbnN0IHBvc0luZm8gPSBzdGF0ZS5nZXRDdXJyZW50UG9zSW5mbygpO1xuICBjb25zdCB7Y3VycmVudExlZnRSZWN1cnNpb259ID0gcG9zSW5mbztcbiAgY29uc3QgbWVtb0tleSA9IHRoaXMudG9NZW1vS2V5KCk7XG4gIGxldCBtZW1vUmVjID0gcG9zSW5mby5tZW1vW21lbW9LZXldO1xuXG4gIGlmIChjdXJyZW50TGVmdFJlY3Vyc2lvbiAmJiBjdXJyZW50TGVmdFJlY3Vyc2lvbi5oZWFkQXBwbGljYXRpb24udG9NZW1vS2V5KCkgPT09IG1lbW9LZXkpIHtcbiAgICAvLyBXZSBhbHJlYWR5IGtub3cgYWJvdXQgdGhpcyBsZWZ0IHJlY3Vyc2lvbiwgYnV0IGl0J3MgcG9zc2libGUgdGhlcmUgYXJlIFwiaW52b2x2ZWRcbiAgICAvLyBhcHBsaWNhdGlvbnNcIiB0aGF0IHdlIGRvbid0IGFscmVhZHkga25vdyBhYm91dCwgc28uLi5cbiAgICBtZW1vUmVjLnVwZGF0ZUludm9sdmVkQXBwbGljYXRpb25NZW1vS2V5cygpO1xuICB9IGVsc2UgaWYgKCFtZW1vUmVjKSB7XG4gICAgLy8gTmV3IGxlZnQgcmVjdXJzaW9uIGRldGVjdGVkISBNZW1vaXplIGEgZmFpbHVyZSB0byB0cnkgdG8gZ2V0IGEgc2VlZCBwYXJzZS5cbiAgICBtZW1vUmVjID0gcG9zSW5mby5tZW1vaXplKG1lbW9LZXksIHtcbiAgICAgIG1hdGNoTGVuZ3RoOiAwLFxuICAgICAgZXhhbWluZWRMZW5ndGg6IDAsXG4gICAgICB2YWx1ZTogZmFsc2UsXG4gICAgICByaWdodG1vc3RGYWlsdXJlT2Zmc2V0OiAtMSxcbiAgICB9KTtcbiAgICBwb3NJbmZvLnN0YXJ0TGVmdFJlY3Vyc2lvbih0aGlzLCBtZW1vUmVjKTtcbiAgfVxuICByZXR1cm4gc3RhdGUudXNlTWVtb2l6ZWRSZXN1bHQoc3RhdGUuaW5wdXRTdHJlYW0ucG9zLCBtZW1vUmVjKTtcbn07XG5cbnBleHBycyRnLkFwcGx5LnByb3RvdHlwZS5yZWFsbHlFdmFsID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgY29uc3Qge2lucHV0U3RyZWFtfSA9IHN0YXRlO1xuICBjb25zdCBvcmlnUG9zID0gaW5wdXRTdHJlYW0ucG9zO1xuICBjb25zdCBvcmlnUG9zSW5mbyA9IHN0YXRlLmdldEN1cnJlbnRQb3NJbmZvKCk7XG4gIGNvbnN0IHJ1bGVJbmZvID0gc3RhdGUuZ3JhbW1hci5ydWxlc1t0aGlzLnJ1bGVOYW1lXTtcbiAgY29uc3Qge2JvZHl9ID0gcnVsZUluZm87XG4gIGNvbnN0IHtkZXNjcmlwdGlvbn0gPSBydWxlSW5mbztcblxuICBzdGF0ZS5lbnRlckFwcGxpY2F0aW9uKG9yaWdQb3NJbmZvLCB0aGlzKTtcblxuICBpZiAoZGVzY3JpcHRpb24pIHtcbiAgICBzdGF0ZS5wdXNoRmFpbHVyZXNJbmZvKCk7XG4gIH1cblxuICAvLyBSZXNldCB0aGUgaW5wdXQgc3RyZWFtJ3MgZXhhbWluZWRMZW5ndGggcHJvcGVydHkgc28gdGhhdCB3ZSBjYW4gdHJhY2tcbiAgLy8gdGhlIGV4YW1pbmVkIGxlbmd0aCBvZiB0aGlzIHBhcnRpY3VsYXIgYXBwbGljYXRpb24uXG4gIGNvbnN0IG9yaWdJbnB1dFN0cmVhbUV4YW1pbmVkTGVuZ3RoID0gaW5wdXRTdHJlYW0uZXhhbWluZWRMZW5ndGg7XG4gIGlucHV0U3RyZWFtLmV4YW1pbmVkTGVuZ3RoID0gMDtcblxuICBsZXQgdmFsdWUgPSB0aGlzLmV2YWxPbmNlKGJvZHksIHN0YXRlKTtcbiAgY29uc3QgY3VycmVudExSID0gb3JpZ1Bvc0luZm8uY3VycmVudExlZnRSZWN1cnNpb247XG4gIGNvbnN0IG1lbW9LZXkgPSB0aGlzLnRvTWVtb0tleSgpO1xuICBjb25zdCBpc0hlYWRPZkxlZnRSZWN1cnNpb24gPSBjdXJyZW50TFIgJiYgY3VycmVudExSLmhlYWRBcHBsaWNhdGlvbi50b01lbW9LZXkoKSA9PT0gbWVtb0tleTtcbiAgbGV0IG1lbW9SZWM7XG5cbiAgaWYgKGlzSGVhZE9mTGVmdFJlY3Vyc2lvbikge1xuICAgIHZhbHVlID0gdGhpcy5ncm93U2VlZFJlc3VsdChib2R5LCBzdGF0ZSwgb3JpZ1BvcywgY3VycmVudExSLCB2YWx1ZSk7XG4gICAgb3JpZ1Bvc0luZm8uZW5kTGVmdFJlY3Vyc2lvbigpO1xuICAgIG1lbW9SZWMgPSBjdXJyZW50TFI7XG4gICAgbWVtb1JlYy5leGFtaW5lZExlbmd0aCA9IGlucHV0U3RyZWFtLmV4YW1pbmVkTGVuZ3RoIC0gb3JpZ1BvcztcbiAgICBtZW1vUmVjLnJpZ2h0bW9zdEZhaWx1cmVPZmZzZXQgPSBzdGF0ZS5fZ2V0UmlnaHRtb3N0RmFpbHVyZU9mZnNldCgpO1xuICAgIG9yaWdQb3NJbmZvLm1lbW9pemUobWVtb0tleSwgbWVtb1JlYyk7IC8vIHVwZGF0ZXMgb3JpZ1Bvc0luZm8ncyBtYXhFeGFtaW5lZExlbmd0aFxuICB9IGVsc2UgaWYgKCFjdXJyZW50TFIgfHwgIWN1cnJlbnRMUi5pc0ludm9sdmVkKG1lbW9LZXkpKSB7XG4gICAgLy8gVGhpcyBhcHBsaWNhdGlvbiBpcyBub3QgaW52b2x2ZWQgaW4gbGVmdCByZWN1cnNpb24sIHNvIGl0J3Mgb2sgdG8gbWVtb2l6ZSBpdC5cbiAgICBtZW1vUmVjID0gb3JpZ1Bvc0luZm8ubWVtb2l6ZShtZW1vS2V5LCB7XG4gICAgICBtYXRjaExlbmd0aDogaW5wdXRTdHJlYW0ucG9zIC0gb3JpZ1BvcyxcbiAgICAgIGV4YW1pbmVkTGVuZ3RoOiBpbnB1dFN0cmVhbS5leGFtaW5lZExlbmd0aCAtIG9yaWdQb3MsXG4gICAgICB2YWx1ZSxcbiAgICAgIGZhaWx1cmVzQXRSaWdodG1vc3RQb3NpdGlvbjogc3RhdGUuY2xvbmVSZWNvcmRlZEZhaWx1cmVzKCksXG4gICAgICByaWdodG1vc3RGYWlsdXJlT2Zmc2V0OiBzdGF0ZS5fZ2V0UmlnaHRtb3N0RmFpbHVyZU9mZnNldCgpLFxuICAgIH0pO1xuICB9XG4gIGNvbnN0IHN1Y2NlZWRlZCA9ICEhdmFsdWU7XG5cbiAgaWYgKGRlc2NyaXB0aW9uKSB7XG4gICAgc3RhdGUucG9wRmFpbHVyZXNJbmZvKCk7XG4gICAgaWYgKCFzdWNjZWVkZWQpIHtcbiAgICAgIHN0YXRlLnByb2Nlc3NGYWlsdXJlKG9yaWdQb3MsIHRoaXMpO1xuICAgIH1cbiAgICBpZiAobWVtb1JlYykge1xuICAgICAgbWVtb1JlYy5mYWlsdXJlc0F0UmlnaHRtb3N0UG9zaXRpb24gPSBzdGF0ZS5jbG9uZVJlY29yZGVkRmFpbHVyZXMoKTtcbiAgICB9XG4gIH1cblxuICAvLyBSZWNvcmQgdHJhY2UgaW5mb3JtYXRpb24gaW4gdGhlIG1lbW8gdGFibGUsIHNvIHRoYXQgaXQgaXMgYXZhaWxhYmxlIGlmIHRoZSBtZW1vaXplZCByZXN1bHRcbiAgLy8gaXMgdXNlZCBsYXRlci5cbiAgaWYgKHN0YXRlLmlzVHJhY2luZygpICYmIG1lbW9SZWMpIHtcbiAgICBjb25zdCBlbnRyeSA9IHN0YXRlLmdldFRyYWNlRW50cnkob3JpZ1BvcywgdGhpcywgc3VjY2VlZGVkLCBzdWNjZWVkZWQgPyBbdmFsdWVdIDogW10pO1xuICAgIGlmIChpc0hlYWRPZkxlZnRSZWN1cnNpb24pIHtcbiAgICAgIGNvbW1vbiRlLmFzc2VydChlbnRyeS50ZXJtaW5hdGluZ0xSRW50cnkgIT0gbnVsbCB8fCAhc3VjY2VlZGVkKTtcbiAgICAgIGVudHJ5LmlzSGVhZE9mTGVmdFJlY3Vyc2lvbiA9IHRydWU7XG4gICAgfVxuICAgIG1lbW9SZWMudHJhY2VFbnRyeSA9IGVudHJ5O1xuICB9XG5cbiAgLy8gRml4IHRoZSBpbnB1dCBzdHJlYW0ncyBleGFtaW5lZExlbmd0aCAtLSBpdCBzaG91bGQgYmUgdGhlIG1heGltdW0gZXhhbWluZWQgbGVuZ3RoXG4gIC8vIGFjcm9zcyBhbGwgYXBwbGljYXRpb25zLCBub3QganVzdCB0aGlzIG9uZS5cbiAgaW5wdXRTdHJlYW0uZXhhbWluZWRMZW5ndGggPSBNYXRoLm1heChcbiAgICAgIGlucHV0U3RyZWFtLmV4YW1pbmVkTGVuZ3RoLFxuICAgICAgb3JpZ0lucHV0U3RyZWFtRXhhbWluZWRMZW5ndGhcbiAgKTtcblxuICBzdGF0ZS5leGl0QXBwbGljYXRpb24ob3JpZ1Bvc0luZm8sIHZhbHVlKTtcblxuICByZXR1cm4gc3VjY2VlZGVkO1xufTtcblxucGV4cHJzJGcuQXBwbHkucHJvdG90eXBlLmV2YWxPbmNlID0gZnVuY3Rpb24oZXhwciwgc3RhdGUpIHtcbiAgY29uc3Qge2lucHV0U3RyZWFtfSA9IHN0YXRlO1xuICBjb25zdCBvcmlnUG9zID0gaW5wdXRTdHJlYW0ucG9zO1xuXG4gIGlmIChzdGF0ZS5ldmFsKGV4cHIpKSB7XG4gICAgY29uc3QgYXJpdHkgPSBleHByLmdldEFyaXR5KCk7XG4gICAgY29uc3QgYmluZGluZ3MgPSBzdGF0ZS5fYmluZGluZ3Muc3BsaWNlKHN0YXRlLl9iaW5kaW5ncy5sZW5ndGggLSBhcml0eSwgYXJpdHkpO1xuICAgIGNvbnN0IG9mZnNldHMgPSBzdGF0ZS5fYmluZGluZ09mZnNldHMuc3BsaWNlKHN0YXRlLl9iaW5kaW5nT2Zmc2V0cy5sZW5ndGggLSBhcml0eSwgYXJpdHkpO1xuICAgIGNvbnN0IG1hdGNoTGVuZ3RoID0gaW5wdXRTdHJlYW0ucG9zIC0gb3JpZ1BvcztcbiAgICByZXR1cm4gbmV3IE5vbnRlcm1pbmFsTm9kZSh0aGlzLnJ1bGVOYW1lLCBiaW5kaW5ncywgb2Zmc2V0cywgbWF0Y2hMZW5ndGgpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxucGV4cHJzJGcuQXBwbHkucHJvdG90eXBlLmdyb3dTZWVkUmVzdWx0ID0gZnVuY3Rpb24oYm9keSwgc3RhdGUsIG9yaWdQb3MsIGxyTWVtb1JlYywgbmV3VmFsdWUpIHtcbiAgaWYgKCFuZXdWYWx1ZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IHtpbnB1dFN0cmVhbX0gPSBzdGF0ZTtcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIGxyTWVtb1JlYy5tYXRjaExlbmd0aCA9IGlucHV0U3RyZWFtLnBvcyAtIG9yaWdQb3M7XG4gICAgbHJNZW1vUmVjLnZhbHVlID0gbmV3VmFsdWU7XG4gICAgbHJNZW1vUmVjLmZhaWx1cmVzQXRSaWdodG1vc3RQb3NpdGlvbiA9IHN0YXRlLmNsb25lUmVjb3JkZWRGYWlsdXJlcygpO1xuXG4gICAgaWYgKHN0YXRlLmlzVHJhY2luZygpKSB7XG4gICAgICAvLyBCZWZvcmUgZXZhbHVhdGluZyB0aGUgYm9keSBhZ2FpbiwgYWRkIGEgdHJhY2Ugbm9kZSBmb3IgdGhpcyBhcHBsaWNhdGlvbiB0byB0aGUgbWVtbyBlbnRyeS5cbiAgICAgIC8vIEl0cyBvbmx5IGNoaWxkIGlzIGEgY29weSBvZiB0aGUgdHJhY2Ugbm9kZSBmcm9tIGBuZXdWYWx1ZWAsIHdoaWNoIHdpbGwgYWx3YXlzIGJlIHRoZSBsYXN0XG4gICAgICAvLyBlbGVtZW50IGluIGBzdGF0ZS50cmFjZWAuXG4gICAgICBjb25zdCBzZWVkVHJhY2UgPSBzdGF0ZS50cmFjZVtzdGF0ZS50cmFjZS5sZW5ndGggLSAxXTtcbiAgICAgIGxyTWVtb1JlYy50cmFjZUVudHJ5ID0gbmV3IFRyYWNlJDEoXG4gICAgICAgICAgc3RhdGUuaW5wdXQsXG4gICAgICAgICAgb3JpZ1BvcyxcbiAgICAgICAgICBpbnB1dFN0cmVhbS5wb3MsXG4gICAgICAgICAgdGhpcyxcbiAgICAgICAgICB0cnVlLFxuICAgICAgICAgIFtuZXdWYWx1ZV0sXG4gICAgICAgICAgW3NlZWRUcmFjZS5jbG9uZSgpXVxuICAgICAgKTtcbiAgICB9XG4gICAgaW5wdXRTdHJlYW0ucG9zID0gb3JpZ1BvcztcbiAgICBuZXdWYWx1ZSA9IHRoaXMuZXZhbE9uY2UoYm9keSwgc3RhdGUpO1xuICAgIGlmIChpbnB1dFN0cmVhbS5wb3MgLSBvcmlnUG9zIDw9IGxyTWVtb1JlYy5tYXRjaExlbmd0aCkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGlmIChzdGF0ZS5pc1RyYWNpbmcoKSkge1xuICAgICAgc3RhdGUudHJhY2Uuc3BsaWNlKC0yLCAxKTsgLy8gRHJvcCB0aGUgdHJhY2UgZm9yIHRoZSBvbGQgc2VlZC5cbiAgICB9XG4gIH1cbiAgaWYgKHN0YXRlLmlzVHJhY2luZygpKSB7XG4gICAgLy8gVGhlIGxhc3QgZW50cnkgaXMgZm9yIGFuIHVudXNlZCByZXN1bHQgLS0gcG9wIGl0IGFuZCBzYXZlIGl0IGluIHRoZSBcInJlYWxcIiBlbnRyeS5cbiAgICBsck1lbW9SZWMudHJhY2VFbnRyeS5yZWNvcmRMUlRlcm1pbmF0aW9uKHN0YXRlLnRyYWNlLnBvcCgpLCBuZXdWYWx1ZSk7XG4gIH1cbiAgaW5wdXRTdHJlYW0ucG9zID0gb3JpZ1BvcyArIGxyTWVtb1JlYy5tYXRjaExlbmd0aDtcbiAgcmV0dXJuIGxyTWVtb1JlYy52YWx1ZTtcbn07XG5cbnBleHBycyRnLlVuaWNvZGVDaGFyLnByb3RvdHlwZS5ldmFsID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgY29uc3Qge2lucHV0U3RyZWFtfSA9IHN0YXRlO1xuICBjb25zdCBvcmlnUG9zID0gaW5wdXRTdHJlYW0ucG9zO1xuICBjb25zdCBjaCA9IGlucHV0U3RyZWFtLm5leHQoKTtcbiAgaWYgKGNoICYmIHRoaXMucGF0dGVybi50ZXN0KGNoKSkge1xuICAgIHN0YXRlLnB1c2hCaW5kaW5nKG5ldyBUZXJtaW5hbE5vZGUkMShjaC5sZW5ndGgpLCBvcmlnUG9zKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBzdGF0ZS5wcm9jZXNzRmFpbHVyZShvcmlnUG9zLCB0aGlzKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBJbXBvcnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jb25zdCBjb21tb24kZCA9IGNvbW1vbiRsO1xuY29uc3QgcGV4cHJzJGYgPSBwZXhwcnNNYWluO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gT3BlcmF0aW9uc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxucGV4cHJzJGYuUEV4cHIucHJvdG90eXBlLmdldEFyaXR5ID0gY29tbW9uJGQuYWJzdHJhY3QoJ2dldEFyaXR5Jyk7XG5cbnBleHBycyRmLmFueS5nZXRBcml0eSA9XG4gIHBleHBycyRmLmVuZC5nZXRBcml0eSA9XG4gIHBleHBycyRmLlRlcm1pbmFsLnByb3RvdHlwZS5nZXRBcml0eSA9XG4gIHBleHBycyRmLlJhbmdlLnByb3RvdHlwZS5nZXRBcml0eSA9XG4gIHBleHBycyRmLlBhcmFtLnByb3RvdHlwZS5nZXRBcml0eSA9XG4gIHBleHBycyRmLkFwcGx5LnByb3RvdHlwZS5nZXRBcml0eSA9XG4gIHBleHBycyRmLlVuaWNvZGVDaGFyLnByb3RvdHlwZS5nZXRBcml0eSA9XG4gICAgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9O1xuXG5wZXhwcnMkZi5BbHQucHJvdG90eXBlLmdldEFyaXR5ID0gZnVuY3Rpb24oKSB7XG4gIC8vIFRoaXMgaXMgb2sgYi9jIGFsbCB0ZXJtcyBtdXN0IGhhdmUgdGhlIHNhbWUgYXJpdHkgLS0gdGhpcyBwcm9wZXJ0eSBpc1xuICAvLyBjaGVja2VkIGJ5IHRoZSBHcmFtbWFyIGNvbnN0cnVjdG9yLlxuICByZXR1cm4gdGhpcy50ZXJtcy5sZW5ndGggPT09IDAgPyAwIDogdGhpcy50ZXJtc1swXS5nZXRBcml0eSgpO1xufTtcblxucGV4cHJzJGYuU2VxLnByb3RvdHlwZS5nZXRBcml0eSA9IGZ1bmN0aW9uKCkge1xuICBsZXQgYXJpdHkgPSAwO1xuICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCB0aGlzLmZhY3RvcnMubGVuZ3RoOyBpZHgrKykge1xuICAgIGFyaXR5ICs9IHRoaXMuZmFjdG9yc1tpZHhdLmdldEFyaXR5KCk7XG4gIH1cbiAgcmV0dXJuIGFyaXR5O1xufTtcblxucGV4cHJzJGYuSXRlci5wcm90b3R5cGUuZ2V0QXJpdHkgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZXhwci5nZXRBcml0eSgpO1xufTtcblxucGV4cHJzJGYuTm90LnByb3RvdHlwZS5nZXRBcml0eSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gMDtcbn07XG5cbnBleHBycyRmLkxvb2thaGVhZC5wcm90b3R5cGUuZ2V0QXJpdHkgPSBwZXhwcnMkZi5MZXgucHJvdG90eXBlLmdldEFyaXR5ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmV4cHIuZ2V0QXJpdHkoKTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBJbXBvcnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jb25zdCBjb21tb24kYyA9IGNvbW1vbiRsO1xuY29uc3QgcGV4cHJzJGUgPSBwZXhwcnNNYWluO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUHJpdmF0ZSBzdHVmZlxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZnVuY3Rpb24gZ2V0TWV0YUluZm8oZXhwciwgZ3JhbW1hckludGVydmFsKSB7XG4gIGNvbnN0IG1ldGFJbmZvID0ge307XG4gIGlmIChleHByLnNvdXJjZSAmJiBncmFtbWFySW50ZXJ2YWwpIHtcbiAgICBjb25zdCBhZGp1c3RlZCA9IGV4cHIuc291cmNlLnJlbGF0aXZlVG8oZ3JhbW1hckludGVydmFsKTtcbiAgICBtZXRhSW5mby5zb3VyY2VJbnRlcnZhbCA9IFthZGp1c3RlZC5zdGFydElkeCwgYWRqdXN0ZWQuZW5kSWR4XTtcbiAgfVxuICByZXR1cm4gbWV0YUluZm87XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBPcGVyYXRpb25zXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5wZXhwcnMkZS5QRXhwci5wcm90b3R5cGUub3V0cHV0UmVjaXBlID0gY29tbW9uJGMuYWJzdHJhY3QoJ291dHB1dFJlY2lwZScpO1xuXG5wZXhwcnMkZS5hbnkub3V0cHV0UmVjaXBlID0gZnVuY3Rpb24oZm9ybWFscywgZ3JhbW1hckludGVydmFsKSB7XG4gIHJldHVybiBbJ2FueScsIGdldE1ldGFJbmZvKHRoaXMsIGdyYW1tYXJJbnRlcnZhbCldO1xufTtcblxucGV4cHJzJGUuZW5kLm91dHB1dFJlY2lwZSA9IGZ1bmN0aW9uKGZvcm1hbHMsIGdyYW1tYXJJbnRlcnZhbCkge1xuICByZXR1cm4gWydlbmQnLCBnZXRNZXRhSW5mbyh0aGlzLCBncmFtbWFySW50ZXJ2YWwpXTtcbn07XG5cbnBleHBycyRlLlRlcm1pbmFsLnByb3RvdHlwZS5vdXRwdXRSZWNpcGUgPSBmdW5jdGlvbihmb3JtYWxzLCBncmFtbWFySW50ZXJ2YWwpIHtcbiAgcmV0dXJuIFsndGVybWluYWwnLCBnZXRNZXRhSW5mbyh0aGlzLCBncmFtbWFySW50ZXJ2YWwpLCB0aGlzLm9ial07XG59O1xuXG5wZXhwcnMkZS5SYW5nZS5wcm90b3R5cGUub3V0cHV0UmVjaXBlID0gZnVuY3Rpb24oZm9ybWFscywgZ3JhbW1hckludGVydmFsKSB7XG4gIHJldHVybiBbJ3JhbmdlJywgZ2V0TWV0YUluZm8odGhpcywgZ3JhbW1hckludGVydmFsKSwgdGhpcy5mcm9tLCB0aGlzLnRvXTtcbn07XG5cbnBleHBycyRlLlBhcmFtLnByb3RvdHlwZS5vdXRwdXRSZWNpcGUgPSBmdW5jdGlvbihmb3JtYWxzLCBncmFtbWFySW50ZXJ2YWwpIHtcbiAgcmV0dXJuIFsncGFyYW0nLCBnZXRNZXRhSW5mbyh0aGlzLCBncmFtbWFySW50ZXJ2YWwpLCB0aGlzLmluZGV4XTtcbn07XG5cbnBleHBycyRlLkFsdC5wcm90b3R5cGUub3V0cHV0UmVjaXBlID0gZnVuY3Rpb24oZm9ybWFscywgZ3JhbW1hckludGVydmFsKSB7XG4gIHJldHVybiBbJ2FsdCcsIGdldE1ldGFJbmZvKHRoaXMsIGdyYW1tYXJJbnRlcnZhbCldLmNvbmNhdChcbiAgICAgIHRoaXMudGVybXMubWFwKHRlcm0gPT4gdGVybS5vdXRwdXRSZWNpcGUoZm9ybWFscywgZ3JhbW1hckludGVydmFsKSlcbiAgKTtcbn07XG5cbnBleHBycyRlLkV4dGVuZC5wcm90b3R5cGUub3V0cHV0UmVjaXBlID0gZnVuY3Rpb24oZm9ybWFscywgZ3JhbW1hckludGVydmFsKSB7XG4gIGNvbnN0IGV4dGVuc2lvbiA9IHRoaXMudGVybXNbMF07IC8vIFtleHRlbnNpb24sIG9yaWdpbmFsXVxuICByZXR1cm4gZXh0ZW5zaW9uLm91dHB1dFJlY2lwZShmb3JtYWxzLCBncmFtbWFySW50ZXJ2YWwpO1xufTtcblxucGV4cHJzJGUuU3BsaWNlLnByb3RvdHlwZS5vdXRwdXRSZWNpcGUgPSBmdW5jdGlvbihmb3JtYWxzLCBncmFtbWFySW50ZXJ2YWwpIHtcbiAgY29uc3QgYmVmb3JlVGVybXMgPSB0aGlzLnRlcm1zLnNsaWNlKDAsIHRoaXMuZXhwYW5zaW9uUG9zKTtcbiAgY29uc3QgYWZ0ZXJUZXJtcyA9IHRoaXMudGVybXMuc2xpY2UodGhpcy5leHBhbnNpb25Qb3MgKyAxKTtcbiAgcmV0dXJuIFtcbiAgICAnc3BsaWNlJyxcbiAgICBnZXRNZXRhSW5mbyh0aGlzLCBncmFtbWFySW50ZXJ2YWwpLFxuICAgIGJlZm9yZVRlcm1zLm1hcCh0ZXJtID0+IHRlcm0ub3V0cHV0UmVjaXBlKGZvcm1hbHMsIGdyYW1tYXJJbnRlcnZhbCkpLFxuICAgIGFmdGVyVGVybXMubWFwKHRlcm0gPT4gdGVybS5vdXRwdXRSZWNpcGUoZm9ybWFscywgZ3JhbW1hckludGVydmFsKSksXG4gIF07XG59O1xuXG5wZXhwcnMkZS5TZXEucHJvdG90eXBlLm91dHB1dFJlY2lwZSA9IGZ1bmN0aW9uKGZvcm1hbHMsIGdyYW1tYXJJbnRlcnZhbCkge1xuICByZXR1cm4gWydzZXEnLCBnZXRNZXRhSW5mbyh0aGlzLCBncmFtbWFySW50ZXJ2YWwpXS5jb25jYXQoXG4gICAgICB0aGlzLmZhY3RvcnMubWFwKGZhY3RvciA9PiBmYWN0b3Iub3V0cHV0UmVjaXBlKGZvcm1hbHMsIGdyYW1tYXJJbnRlcnZhbCkpXG4gICk7XG59O1xuXG5wZXhwcnMkZS5TdGFyLnByb3RvdHlwZS5vdXRwdXRSZWNpcGUgPVxuICBwZXhwcnMkZS5QbHVzLnByb3RvdHlwZS5vdXRwdXRSZWNpcGUgPVxuICBwZXhwcnMkZS5PcHQucHJvdG90eXBlLm91dHB1dFJlY2lwZSA9XG4gIHBleHBycyRlLk5vdC5wcm90b3R5cGUub3V0cHV0UmVjaXBlID1cbiAgcGV4cHJzJGUuTG9va2FoZWFkLnByb3RvdHlwZS5vdXRwdXRSZWNpcGUgPVxuICBwZXhwcnMkZS5MZXgucHJvdG90eXBlLm91dHB1dFJlY2lwZSA9XG4gICAgZnVuY3Rpb24oZm9ybWFscywgZ3JhbW1hckludGVydmFsKSB7XG4gICAgICByZXR1cm4gW1xuICAgICAgICB0aGlzLmNvbnN0cnVjdG9yLm5hbWUudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgZ2V0TWV0YUluZm8odGhpcywgZ3JhbW1hckludGVydmFsKSxcbiAgICAgICAgdGhpcy5leHByLm91dHB1dFJlY2lwZShmb3JtYWxzLCBncmFtbWFySW50ZXJ2YWwpLFxuICAgICAgXTtcbiAgICB9O1xuXG5wZXhwcnMkZS5BcHBseS5wcm90b3R5cGUub3V0cHV0UmVjaXBlID0gZnVuY3Rpb24oZm9ybWFscywgZ3JhbW1hckludGVydmFsKSB7XG4gIHJldHVybiBbXG4gICAgJ2FwcCcsXG4gICAgZ2V0TWV0YUluZm8odGhpcywgZ3JhbW1hckludGVydmFsKSxcbiAgICB0aGlzLnJ1bGVOYW1lLFxuICAgIHRoaXMuYXJncy5tYXAoYXJnID0+IGFyZy5vdXRwdXRSZWNpcGUoZm9ybWFscywgZ3JhbW1hckludGVydmFsKSksXG4gIF07XG59O1xuXG5wZXhwcnMkZS5Vbmljb2RlQ2hhci5wcm90b3R5cGUub3V0cHV0UmVjaXBlID0gZnVuY3Rpb24oZm9ybWFscywgZ3JhbW1hckludGVydmFsKSB7XG4gIHJldHVybiBbJ3VuaWNvZGVDaGFyJywgZ2V0TWV0YUluZm8odGhpcywgZ3JhbW1hckludGVydmFsKSwgdGhpcy5jYXRlZ29yeV07XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSW1wb3J0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuY29uc3QgY29tbW9uJGIgPSBjb21tb24kbDtcbmNvbnN0IHBleHBycyRkID0gcGV4cHJzTWFpbjtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIE9wZXJhdGlvbnNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8qXG4gIENhbGxlZCBhdCBncmFtbWFyIGNyZWF0aW9uIHRpbWUgdG8gcmV3cml0ZSBhIHJ1bGUgYm9keSwgcmVwbGFjaW5nIGVhY2ggcmVmZXJlbmNlIHRvIGEgZm9ybWFsXG4gIHBhcmFtZXRlciB3aXRoIGEgYFBhcmFtYCBub2RlLiBSZXR1cm5zIGEgUEV4cHIgLS0gZWl0aGVyIGEgbmV3IG9uZSwgb3IgdGhlIG9yaWdpbmFsIG9uZSBpZlxuICBpdCB3YXMgbW9kaWZpZWQgaW4gcGxhY2UuXG4qL1xucGV4cHJzJGQuUEV4cHIucHJvdG90eXBlLmludHJvZHVjZVBhcmFtcyA9IGNvbW1vbiRiLmFic3RyYWN0KCdpbnRyb2R1Y2VQYXJhbXMnKTtcblxucGV4cHJzJGQuYW55LmludHJvZHVjZVBhcmFtcyA9XG4gIHBleHBycyRkLmVuZC5pbnRyb2R1Y2VQYXJhbXMgPVxuICBwZXhwcnMkZC5UZXJtaW5hbC5wcm90b3R5cGUuaW50cm9kdWNlUGFyYW1zID1cbiAgcGV4cHJzJGQuUmFuZ2UucHJvdG90eXBlLmludHJvZHVjZVBhcmFtcyA9XG4gIHBleHBycyRkLlBhcmFtLnByb3RvdHlwZS5pbnRyb2R1Y2VQYXJhbXMgPVxuICBwZXhwcnMkZC5Vbmljb2RlQ2hhci5wcm90b3R5cGUuaW50cm9kdWNlUGFyYW1zID1cbiAgICBmdW5jdGlvbihmb3JtYWxzKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5wZXhwcnMkZC5BbHQucHJvdG90eXBlLmludHJvZHVjZVBhcmFtcyA9IGZ1bmN0aW9uKGZvcm1hbHMpIHtcbiAgdGhpcy50ZXJtcy5mb3JFYWNoKCh0ZXJtLCBpZHgsIHRlcm1zKSA9PiB7XG4gICAgdGVybXNbaWR4XSA9IHRlcm0uaW50cm9kdWNlUGFyYW1zKGZvcm1hbHMpO1xuICB9KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5wZXhwcnMkZC5TZXEucHJvdG90eXBlLmludHJvZHVjZVBhcmFtcyA9IGZ1bmN0aW9uKGZvcm1hbHMpIHtcbiAgdGhpcy5mYWN0b3JzLmZvckVhY2goKGZhY3RvciwgaWR4LCBmYWN0b3JzKSA9PiB7XG4gICAgZmFjdG9yc1tpZHhdID0gZmFjdG9yLmludHJvZHVjZVBhcmFtcyhmb3JtYWxzKTtcbiAgfSk7XG4gIHJldHVybiB0aGlzO1xufTtcblxucGV4cHJzJGQuSXRlci5wcm90b3R5cGUuaW50cm9kdWNlUGFyYW1zID1cbiAgcGV4cHJzJGQuTm90LnByb3RvdHlwZS5pbnRyb2R1Y2VQYXJhbXMgPVxuICBwZXhwcnMkZC5Mb29rYWhlYWQucHJvdG90eXBlLmludHJvZHVjZVBhcmFtcyA9XG4gIHBleHBycyRkLkxleC5wcm90b3R5cGUuaW50cm9kdWNlUGFyYW1zID1cbiAgICBmdW5jdGlvbihmb3JtYWxzKSB7XG4gICAgICB0aGlzLmV4cHIgPSB0aGlzLmV4cHIuaW50cm9kdWNlUGFyYW1zKGZvcm1hbHMpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxucGV4cHJzJGQuQXBwbHkucHJvdG90eXBlLmludHJvZHVjZVBhcmFtcyA9IGZ1bmN0aW9uKGZvcm1hbHMpIHtcbiAgY29uc3QgaW5kZXggPSBmb3JtYWxzLmluZGV4T2YodGhpcy5ydWxlTmFtZSk7XG4gIGlmIChpbmRleCA+PSAwKSB7XG4gICAgaWYgKHRoaXMuYXJncy5sZW5ndGggPiAwKSB7XG4gICAgICAvLyBUT0RPOiBTaG91bGQgdGhpcyBiZSBzdXBwb3J0ZWQ/IFNlZSBpc3N1ZSAjNjQuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BhcmFtZXRlcml6ZWQgcnVsZXMgY2Fubm90IGJlIHBhc3NlZCBhcyBhcmd1bWVudHMgdG8gYW5vdGhlciBydWxlLicpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IHBleHBycyRkLlBhcmFtKGluZGV4KS53aXRoU291cmNlKHRoaXMuc291cmNlKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmFyZ3MuZm9yRWFjaCgoYXJnLCBpZHgsIGFyZ3MpID0+IHtcbiAgICAgIGFyZ3NbaWR4XSA9IGFyZy5pbnRyb2R1Y2VQYXJhbXMoZm9ybWFscyk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBJbXBvcnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jb25zdCBjb21tb24kYSA9IGNvbW1vbiRsO1xuY29uc3QgcGV4cHJzJGMgPSBwZXhwcnNNYWluO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gT3BlcmF0aW9uc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gUmV0dXJucyBgdHJ1ZWAgaWYgdGhpcyBwYXJzaW5nIGV4cHJlc3Npb24gbWF5IGFjY2VwdCB3aXRob3V0IGNvbnN1bWluZyBhbnkgaW5wdXQuXG5wZXhwcnMkYy5QRXhwci5wcm90b3R5cGUuaXNOdWxsYWJsZSA9IGZ1bmN0aW9uKGdyYW1tYXIpIHtcbiAgcmV0dXJuIHRoaXMuX2lzTnVsbGFibGUoZ3JhbW1hciwgT2JqZWN0LmNyZWF0ZShudWxsKSk7XG59O1xuXG5wZXhwcnMkYy5QRXhwci5wcm90b3R5cGUuX2lzTnVsbGFibGUgPSBjb21tb24kYS5hYnN0cmFjdCgnX2lzTnVsbGFibGUnKTtcblxucGV4cHJzJGMuYW55Ll9pc051bGxhYmxlID1cbiAgcGV4cHJzJGMuUmFuZ2UucHJvdG90eXBlLl9pc051bGxhYmxlID1cbiAgcGV4cHJzJGMuUGFyYW0ucHJvdG90eXBlLl9pc051bGxhYmxlID1cbiAgcGV4cHJzJGMuUGx1cy5wcm90b3R5cGUuX2lzTnVsbGFibGUgPVxuICBwZXhwcnMkYy5Vbmljb2RlQ2hhci5wcm90b3R5cGUuX2lzTnVsbGFibGUgPVxuICAgIGZ1bmN0aW9uKGdyYW1tYXIsIG1lbW8pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuXG5wZXhwcnMkYy5lbmQuX2lzTnVsbGFibGUgPSBmdW5jdGlvbihncmFtbWFyLCBtZW1vKSB7XG4gIHJldHVybiB0cnVlO1xufTtcblxucGV4cHJzJGMuVGVybWluYWwucHJvdG90eXBlLl9pc051bGxhYmxlID0gZnVuY3Rpb24oZ3JhbW1hciwgbWVtbykge1xuICBpZiAodHlwZW9mIHRoaXMub2JqID09PSAnc3RyaW5nJykge1xuICAgIC8vIFRoaXMgaXMgYW4gb3Zlci1zaW1wbGlmaWNhdGlvbjogaXQncyBvbmx5IGNvcnJlY3QgaWYgdGhlIGlucHV0IGlzIGEgc3RyaW5nLiBJZiBpdCdzIGFuIGFycmF5XG4gICAgLy8gb3IgYW4gb2JqZWN0LCB0aGVuIHRoZSBlbXB0eSBzdHJpbmcgcGFyc2luZyBleHByZXNzaW9uIGlzIG5vdCBudWxsYWJsZS5cbiAgICByZXR1cm4gdGhpcy5vYmogPT09ICcnO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxucGV4cHJzJGMuQWx0LnByb3RvdHlwZS5faXNOdWxsYWJsZSA9IGZ1bmN0aW9uKGdyYW1tYXIsIG1lbW8pIHtcbiAgcmV0dXJuIHRoaXMudGVybXMubGVuZ3RoID09PSAwIHx8IHRoaXMudGVybXMuc29tZSh0ZXJtID0+IHRlcm0uX2lzTnVsbGFibGUoZ3JhbW1hciwgbWVtbykpO1xufTtcblxucGV4cHJzJGMuU2VxLnByb3RvdHlwZS5faXNOdWxsYWJsZSA9IGZ1bmN0aW9uKGdyYW1tYXIsIG1lbW8pIHtcbiAgcmV0dXJuIHRoaXMuZmFjdG9ycy5ldmVyeShmYWN0b3IgPT4gZmFjdG9yLl9pc051bGxhYmxlKGdyYW1tYXIsIG1lbW8pKTtcbn07XG5cbnBleHBycyRjLlN0YXIucHJvdG90eXBlLl9pc051bGxhYmxlID1cbiAgcGV4cHJzJGMuT3B0LnByb3RvdHlwZS5faXNOdWxsYWJsZSA9XG4gIHBleHBycyRjLk5vdC5wcm90b3R5cGUuX2lzTnVsbGFibGUgPVxuICBwZXhwcnMkYy5Mb29rYWhlYWQucHJvdG90eXBlLl9pc051bGxhYmxlID1cbiAgICBmdW5jdGlvbihncmFtbWFyLCBtZW1vKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG5wZXhwcnMkYy5MZXgucHJvdG90eXBlLl9pc051bGxhYmxlID0gZnVuY3Rpb24oZ3JhbW1hciwgbWVtbykge1xuICByZXR1cm4gdGhpcy5leHByLl9pc051bGxhYmxlKGdyYW1tYXIsIG1lbW8pO1xufTtcblxucGV4cHJzJGMuQXBwbHkucHJvdG90eXBlLl9pc051bGxhYmxlID0gZnVuY3Rpb24oZ3JhbW1hciwgbWVtbykge1xuICBjb25zdCBrZXkgPSB0aGlzLnRvTWVtb0tleSgpO1xuICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtZW1vLCBrZXkpKSB7XG4gICAgY29uc3Qge2JvZHl9ID0gZ3JhbW1hci5ydWxlc1t0aGlzLnJ1bGVOYW1lXTtcbiAgICBjb25zdCBpbmxpbmVkID0gYm9keS5zdWJzdGl0dXRlUGFyYW1zKHRoaXMuYXJncyk7XG4gICAgbWVtb1trZXldID0gZmFsc2U7IC8vIFByZXZlbnQgaW5maW5pdGUgcmVjdXJzaW9uIGZvciByZWN1cnNpdmUgcnVsZXMuXG4gICAgbWVtb1trZXldID0gaW5saW5lZC5faXNOdWxsYWJsZShncmFtbWFyLCBtZW1vKTtcbiAgfVxuICByZXR1cm4gbWVtb1trZXldO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEltcG9ydHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IGNvbW1vbiQ5ID0gY29tbW9uJGw7XG5jb25zdCBwZXhwcnMkYiA9IHBleHByc01haW47XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBPcGVyYXRpb25zXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vKlxuICBSZXR1cm5zIGEgUEV4cHIgdGhhdCByZXN1bHRzIGZyb20gcmVjdXJzaXZlbHkgcmVwbGFjaW5nIGV2ZXJ5IGZvcm1hbCBwYXJhbWV0ZXIgKGkuZS4sIGluc3RhbmNlXG4gIG9mIGBQYXJhbWApIGluc2lkZSB0aGlzIFBFeHByIHdpdGggaXRzIGFjdHVhbCB2YWx1ZSBmcm9tIGBhY3R1YWxzYCAoYW4gQXJyYXkpLlxuXG4gIFRoZSByZWNlaXZlciBtdXN0IG5vdCBiZSBtb2RpZmllZDsgYSBuZXcgUEV4cHIgbXVzdCBiZSByZXR1cm5lZCBpZiBhbnkgcmVwbGFjZW1lbnQgaXMgbmVjZXNzYXJ5LlxuKi9cbi8vIGZ1bmN0aW9uKGFjdHVhbHMpIHsgLi4uIH1cbnBleHBycyRiLlBFeHByLnByb3RvdHlwZS5zdWJzdGl0dXRlUGFyYW1zID0gY29tbW9uJDkuYWJzdHJhY3QoJ3N1YnN0aXR1dGVQYXJhbXMnKTtcblxucGV4cHJzJGIuYW55LnN1YnN0aXR1dGVQYXJhbXMgPVxuICBwZXhwcnMkYi5lbmQuc3Vic3RpdHV0ZVBhcmFtcyA9XG4gIHBleHBycyRiLlRlcm1pbmFsLnByb3RvdHlwZS5zdWJzdGl0dXRlUGFyYW1zID1cbiAgcGV4cHJzJGIuUmFuZ2UucHJvdG90eXBlLnN1YnN0aXR1dGVQYXJhbXMgPVxuICBwZXhwcnMkYi5Vbmljb2RlQ2hhci5wcm90b3R5cGUuc3Vic3RpdHV0ZVBhcmFtcyA9XG4gICAgZnVuY3Rpb24oYWN0dWFscykge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxucGV4cHJzJGIuUGFyYW0ucHJvdG90eXBlLnN1YnN0aXR1dGVQYXJhbXMgPSBmdW5jdGlvbihhY3R1YWxzKSB7XG4gIHJldHVybiBhY3R1YWxzW3RoaXMuaW5kZXhdO1xufTtcblxucGV4cHJzJGIuQWx0LnByb3RvdHlwZS5zdWJzdGl0dXRlUGFyYW1zID0gZnVuY3Rpb24oYWN0dWFscykge1xuICByZXR1cm4gbmV3IHBleHBycyRiLkFsdCh0aGlzLnRlcm1zLm1hcCh0ZXJtID0+IHRlcm0uc3Vic3RpdHV0ZVBhcmFtcyhhY3R1YWxzKSkpO1xufTtcblxucGV4cHJzJGIuU2VxLnByb3RvdHlwZS5zdWJzdGl0dXRlUGFyYW1zID0gZnVuY3Rpb24oYWN0dWFscykge1xuICByZXR1cm4gbmV3IHBleHBycyRiLlNlcSh0aGlzLmZhY3RvcnMubWFwKGZhY3RvciA9PiBmYWN0b3Iuc3Vic3RpdHV0ZVBhcmFtcyhhY3R1YWxzKSkpO1xufTtcblxucGV4cHJzJGIuSXRlci5wcm90b3R5cGUuc3Vic3RpdHV0ZVBhcmFtcyA9XG4gIHBleHBycyRiLk5vdC5wcm90b3R5cGUuc3Vic3RpdHV0ZVBhcmFtcyA9XG4gIHBleHBycyRiLkxvb2thaGVhZC5wcm90b3R5cGUuc3Vic3RpdHV0ZVBhcmFtcyA9XG4gIHBleHBycyRiLkxleC5wcm90b3R5cGUuc3Vic3RpdHV0ZVBhcmFtcyA9XG4gICAgZnVuY3Rpb24oYWN0dWFscykge1xuICAgICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMuZXhwci5zdWJzdGl0dXRlUGFyYW1zKGFjdHVhbHMpKTtcbiAgICB9O1xuXG5wZXhwcnMkYi5BcHBseS5wcm90b3R5cGUuc3Vic3RpdHV0ZVBhcmFtcyA9IGZ1bmN0aW9uKGFjdHVhbHMpIHtcbiAgaWYgKHRoaXMuYXJncy5sZW5ndGggPT09IDApIHtcbiAgICAvLyBBdm9pZCBtYWtpbmcgYSBjb3B5IG9mIHRoaXMgYXBwbGljYXRpb24sIGFzIGFuIG9wdGltaXphdGlvblxuICAgIHJldHVybiB0aGlzO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGFyZ3MgPSB0aGlzLmFyZ3MubWFwKGFyZyA9PiBhcmcuc3Vic3RpdHV0ZVBhcmFtcyhhY3R1YWxzKSk7XG4gICAgcmV0dXJuIG5ldyBwZXhwcnMkYi5BcHBseSh0aGlzLnJ1bGVOYW1lLCBhcmdzKTtcbiAgfVxufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEltcG9ydHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IGNvbW1vbiQ4ID0gY29tbW9uJGw7XG5jb25zdCBwZXhwcnMkYSA9IHBleHByc01haW47XG5cbmNvbnN0IHtjb3B5V2l0aG91dER1cGxpY2F0ZXN9ID0gY29tbW9uJDg7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBQcml2YXRlIHN0dWZmXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5mdW5jdGlvbiBpc1Jlc3RyaWN0ZWRKU0lkZW50aWZpZXIoc3RyKSB7XG4gIHJldHVybiAvXlthLXpBLVpfJF1bMC05YS16QS1aXyRdKiQvLnRlc3Qoc3RyKTtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUR1cGxpY2F0ZWROYW1lcyhhcmd1bWVudE5hbWVMaXN0KSB7XG4gIC8vIGBjb3VudGAgaXMgdXNlZCB0byByZWNvcmQgdGhlIG51bWJlciBvZiB0aW1lcyBlYWNoIGFyZ3VtZW50IG5hbWUgb2NjdXJzIGluIHRoZSBsaXN0LFxuICAvLyB0aGlzIGlzIHVzZWZ1bCBmb3IgY2hlY2tpbmcgZHVwbGljYXRlZCBhcmd1bWVudCBuYW1lLiBJdCBtYXBzIGFyZ3VtZW50IG5hbWVzIHRvIGludHMuXG4gIGNvbnN0IGNvdW50ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgYXJndW1lbnROYW1lTGlzdC5mb3JFYWNoKGFyZ05hbWUgPT4ge1xuICAgIGNvdW50W2FyZ05hbWVdID0gKGNvdW50W2FyZ05hbWVdIHx8IDApICsgMTtcbiAgfSk7XG5cbiAgLy8gQXBwZW5kIHN1YnNjcmlwdHMgKCdfMScsICdfMicsIC4uLikgdG8gZHVwbGljYXRlIGFyZ3VtZW50IG5hbWVzLlxuICBPYmplY3Qua2V5cyhjb3VudCkuZm9yRWFjaChkdXBBcmdOYW1lID0+IHtcbiAgICBpZiAoY291bnRbZHVwQXJnTmFtZV0gPD0gMSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFRoaXMgbmFtZSBzaG93cyB1cCBtb3JlIHRoYW4gb25jZSwgc28gYWRkIHN1YnNjcmlwdHMuXG4gICAgbGV0IHN1YnNjcmlwdCA9IDE7XG4gICAgYXJndW1lbnROYW1lTGlzdC5mb3JFYWNoKChhcmdOYW1lLCBpZHgpID0+IHtcbiAgICAgIGlmIChhcmdOYW1lID09PSBkdXBBcmdOYW1lKSB7XG4gICAgICAgIGFyZ3VtZW50TmFtZUxpc3RbaWR4XSA9IGFyZ05hbWUgKyAnXycgKyBzdWJzY3JpcHQrKztcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBPcGVyYXRpb25zXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vKlxuICBSZXR1cm5zIGEgbGlzdCBvZiBzdHJpbmdzIHRoYXQgd2lsbCBiZSB1c2VkIGFzIHRoZSBkZWZhdWx0IGFyZ3VtZW50IG5hbWVzIGZvciBpdHMgcmVjZWl2ZXJcbiAgKGEgcGV4cHIpIGluIGEgc2VtYW50aWMgYWN0aW9uLiBUaGlzIGlzIHVzZWQgZXhjbHVzaXZlbHkgYnkgdGhlIFNlbWFudGljcyBFZGl0b3IuXG5cbiAgYGZpcnN0QXJnSW5kZXhgIGlzIHRoZSAxLWJhc2VkIGluZGV4IG9mIHRoZSBmaXJzdCBhcmd1bWVudCBuYW1lIHRoYXQgd2lsbCBiZSBnZW5lcmF0ZWQgZm9yIHRoaXNcbiAgcGV4cHIuIEl0IGVuYWJsZXMgdXMgdG8gbmFtZSBhcmd1bWVudHMgcG9zaXRpb25hbGx5LCBlLmcuLCBpZiB0aGUgc2Vjb25kIGFyZ3VtZW50IGlzIGFcbiAgbm9uLWFscGhhbnVtZXJpYyB0ZXJtaW5hbCBsaWtlIFwiK1wiLCBpdCB3aWxsIGJlIG5hbWVkICckMicuXG5cbiAgYG5vRHVwQ2hlY2tgIGlzIHRydWUgaWYgdGhlIGNhbGxlciBvZiBgdG9Bcmd1bWVudE5hbWVMaXN0YCBpcyBub3QgYSB0b3AgbGV2ZWwgY2FsbGVyLiBJdCBlbmFibGVzXG4gIHVzIHRvIGF2b2lkIG5lc3RlZCBkdXBsaWNhdGlvbiBzdWJzY3JpcHRzIGFwcGVuZGluZywgZS5nLiwgJ18xXzEnLCAnXzFfMicsIGJ5IG9ubHkgY2hlY2tpbmdcbiAgZHVwbGljYXRlcyBhdCB0aGUgdG9wIGxldmVsLlxuXG4gIEhlcmUgaXMgYSBtb3JlIGVsYWJvcmF0ZSBleGFtcGxlIHRoYXQgaWxsdXN0cmF0ZXMgaG93IHRoaXMgbWV0aG9kIHdvcmtzOlxuICBgKGEgXCIrXCIgYikudG9Bcmd1bWVudE5hbWVMaXN0KDEpYCBldmFsdWF0ZXMgdG8gYFsnYScsICckMicsICdiJ11gIHdpdGggdGhlIGZvbGxvd2luZyByZWN1cnNpdmVcbiAgY2FsbHM6XG5cbiAgICAoYSkudG9Bcmd1bWVudE5hbWVMaXN0KDEpIC0+IFsnYSddLFxuICAgIChcIitcIikudG9Bcmd1bWVudE5hbWVMaXN0KDIpIC0+IFsnJDInXSxcbiAgICAoYikudG9Bcmd1bWVudE5hbWVMaXN0KDMpIC0+IFsnYiddXG5cbiAgTm90ZXM6XG4gICogVGhpcyBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCBvbiB3ZWxsLWZvcm1lZCBleHByZXNzaW9ucywgZS5nLiwgdGhlIHJlY2VpdmVyIG11c3RcbiAgICBub3QgaGF2ZSBhbnkgQWx0IHN1Yi1leHByZXNzaW9ucyB3aXRoIGluY29uc2lzdGVudCBhcml0aWVzLlxuICAqIGUuZ2V0QXJpdHkoKSA9PT0gZS50b0FyZ3VtZW50TmFtZUxpc3QoMSkubGVuZ3RoXG4qL1xuLy8gZnVuY3Rpb24oZmlyc3RBcmdJbmRleCwgbm9EdXBDaGVjaykgeyAuLi4gfVxucGV4cHJzJGEuUEV4cHIucHJvdG90eXBlLnRvQXJndW1lbnROYW1lTGlzdCA9IGNvbW1vbiQ4LmFic3RyYWN0KCd0b0FyZ3VtZW50TmFtZUxpc3QnKTtcblxucGV4cHJzJGEuYW55LnRvQXJndW1lbnROYW1lTGlzdCA9IGZ1bmN0aW9uKGZpcnN0QXJnSW5kZXgsIG5vRHVwQ2hlY2spIHtcbiAgcmV0dXJuIFsnYW55J107XG59O1xuXG5wZXhwcnMkYS5lbmQudG9Bcmd1bWVudE5hbWVMaXN0ID0gZnVuY3Rpb24oZmlyc3RBcmdJbmRleCwgbm9EdXBDaGVjaykge1xuICByZXR1cm4gWydlbmQnXTtcbn07XG5cbnBleHBycyRhLlRlcm1pbmFsLnByb3RvdHlwZS50b0FyZ3VtZW50TmFtZUxpc3QgPSBmdW5jdGlvbihmaXJzdEFyZ0luZGV4LCBub0R1cENoZWNrKSB7XG4gIGlmICh0eXBlb2YgdGhpcy5vYmogPT09ICdzdHJpbmcnICYmIC9eW19hLXpBLVowLTldKyQvLnRlc3QodGhpcy5vYmopKSB7XG4gICAgLy8gSWYgdGhpcyB0ZXJtaW5hbCBpcyBhIHZhbGlkIHN1ZmZpeCBmb3IgYSBKUyBpZGVudGlmaWVyLCBqdXN0IHByZXBlbmQgaXQgd2l0aCAnXydcbiAgICByZXR1cm4gWydfJyArIHRoaXMub2JqXTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPdGhlcndpc2UsIG5hbWUgaXQgcG9zaXRpb25hbGx5LlxuICAgIHJldHVybiBbJyQnICsgZmlyc3RBcmdJbmRleF07XG4gIH1cbn07XG5cbnBleHBycyRhLlJhbmdlLnByb3RvdHlwZS50b0FyZ3VtZW50TmFtZUxpc3QgPSBmdW5jdGlvbihmaXJzdEFyZ0luZGV4LCBub0R1cENoZWNrKSB7XG4gIGxldCBhcmdOYW1lID0gdGhpcy5mcm9tICsgJ190b18nICsgdGhpcy50bztcbiAgLy8gSWYgdGhlIGBhcmdOYW1lYCBpcyBub3QgdmFsaWQgdGhlbiB0cnkgdG8gcHJlcGVuZCBhIGBfYC5cbiAgaWYgKCFpc1Jlc3RyaWN0ZWRKU0lkZW50aWZpZXIoYXJnTmFtZSkpIHtcbiAgICBhcmdOYW1lID0gJ18nICsgYXJnTmFtZTtcbiAgfVxuICAvLyBJZiB0aGUgYGFyZ05hbWVgIHN0aWxsIG5vdCB2YWxpZCBhZnRlciBwcmVwZW5kaW5nIGEgYF9gLCB0aGVuIG5hbWUgaXQgcG9zaXRpb25hbGx5LlxuICBpZiAoIWlzUmVzdHJpY3RlZEpTSWRlbnRpZmllcihhcmdOYW1lKSkge1xuICAgIGFyZ05hbWUgPSAnJCcgKyBmaXJzdEFyZ0luZGV4O1xuICB9XG4gIHJldHVybiBbYXJnTmFtZV07XG59O1xuXG5wZXhwcnMkYS5BbHQucHJvdG90eXBlLnRvQXJndW1lbnROYW1lTGlzdCA9IGZ1bmN0aW9uKGZpcnN0QXJnSW5kZXgsIG5vRHVwQ2hlY2spIHtcbiAgLy8gYHRlcm1BcmdOYW1lTGlzdHNgIGlzIGFuIGFycmF5IG9mIGFycmF5cyB3aGVyZSBlYWNoIHJvdyBpcyB0aGVcbiAgLy8gYXJndW1lbnQgbmFtZSBsaXN0IHRoYXQgY29ycmVzcG9uZHMgdG8gYSB0ZXJtIGluIHRoaXMgYWx0ZXJuYXRpb24uXG4gIGNvbnN0IHRlcm1BcmdOYW1lTGlzdHMgPSB0aGlzLnRlcm1zLm1hcCh0ZXJtID0+XG4gICAgdGVybS50b0FyZ3VtZW50TmFtZUxpc3QoZmlyc3RBcmdJbmRleCwgdHJ1ZSlcbiAgKTtcblxuICBjb25zdCBhcmd1bWVudE5hbWVMaXN0ID0gW107XG4gIGNvbnN0IG51bUFyZ3MgPSB0ZXJtQXJnTmFtZUxpc3RzWzBdLmxlbmd0aDtcbiAgZm9yIChsZXQgY29sSWR4ID0gMDsgY29sSWR4IDwgbnVtQXJnczsgY29sSWR4KyspIHtcbiAgICBjb25zdCBjb2wgPSBbXTtcbiAgICBmb3IgKGxldCByb3dJZHggPSAwOyByb3dJZHggPCB0aGlzLnRlcm1zLmxlbmd0aDsgcm93SWR4KyspIHtcbiAgICAgIGNvbC5wdXNoKHRlcm1BcmdOYW1lTGlzdHNbcm93SWR4XVtjb2xJZHhdKTtcbiAgICB9XG4gICAgY29uc3QgdW5pcXVlTmFtZXMgPSBjb3B5V2l0aG91dER1cGxpY2F0ZXMoY29sKTtcbiAgICBhcmd1bWVudE5hbWVMaXN0LnB1c2godW5pcXVlTmFtZXMuam9pbignX29yXycpKTtcbiAgfVxuXG4gIGlmICghbm9EdXBDaGVjaykge1xuICAgIHJlc29sdmVEdXBsaWNhdGVkTmFtZXMoYXJndW1lbnROYW1lTGlzdCk7XG4gIH1cbiAgcmV0dXJuIGFyZ3VtZW50TmFtZUxpc3Q7XG59O1xuXG5wZXhwcnMkYS5TZXEucHJvdG90eXBlLnRvQXJndW1lbnROYW1lTGlzdCA9IGZ1bmN0aW9uKGZpcnN0QXJnSW5kZXgsIG5vRHVwQ2hlY2spIHtcbiAgLy8gR2VuZXJhdGUgdGhlIGFyZ3VtZW50IG5hbWUgbGlzdCwgd2l0aG91dCB3b3JyeWluZyBhYm91dCBkdXBsaWNhdGVzLlxuICBsZXQgYXJndW1lbnROYW1lTGlzdCA9IFtdO1xuICB0aGlzLmZhY3RvcnMuZm9yRWFjaChmYWN0b3IgPT4ge1xuICAgIGNvbnN0IGZhY3RvckFyZ3VtZW50TmFtZUxpc3QgPSBmYWN0b3IudG9Bcmd1bWVudE5hbWVMaXN0KGZpcnN0QXJnSW5kZXgsIHRydWUpO1xuICAgIGFyZ3VtZW50TmFtZUxpc3QgPSBhcmd1bWVudE5hbWVMaXN0LmNvbmNhdChmYWN0b3JBcmd1bWVudE5hbWVMaXN0KTtcblxuICAgIC8vIFNoaWZ0IHRoZSBmaXJzdEFyZ0luZGV4IHRvIHRha2UgdGhpcyBmYWN0b3IncyBhcmd1bWVudCBuYW1lcyBpbnRvIGFjY291bnQuXG4gICAgZmlyc3RBcmdJbmRleCArPSBmYWN0b3JBcmd1bWVudE5hbWVMaXN0Lmxlbmd0aDtcbiAgfSk7XG4gIGlmICghbm9EdXBDaGVjaykge1xuICAgIHJlc29sdmVEdXBsaWNhdGVkTmFtZXMoYXJndW1lbnROYW1lTGlzdCk7XG4gIH1cbiAgcmV0dXJuIGFyZ3VtZW50TmFtZUxpc3Q7XG59O1xuXG5wZXhwcnMkYS5JdGVyLnByb3RvdHlwZS50b0FyZ3VtZW50TmFtZUxpc3QgPSBmdW5jdGlvbihmaXJzdEFyZ0luZGV4LCBub0R1cENoZWNrKSB7XG4gIGNvbnN0IGFyZ3VtZW50TmFtZUxpc3QgPSB0aGlzLmV4cHJcbiAgICAgIC50b0FyZ3VtZW50TmFtZUxpc3QoZmlyc3RBcmdJbmRleCwgbm9EdXBDaGVjaylcbiAgICAgIC5tYXAoZXhwckFyZ3VtZW50U3RyaW5nID0+XG4gICAgICBleHByQXJndW1lbnRTdHJpbmdbZXhwckFyZ3VtZW50U3RyaW5nLmxlbmd0aCAtIDFdID09PSAncycgP1xuICAgICAgICBleHByQXJndW1lbnRTdHJpbmcgKyAnZXMnIDpcbiAgICAgICAgZXhwckFyZ3VtZW50U3RyaW5nICsgJ3MnXG4gICAgICApO1xuICBpZiAoIW5vRHVwQ2hlY2spIHtcbiAgICByZXNvbHZlRHVwbGljYXRlZE5hbWVzKGFyZ3VtZW50TmFtZUxpc3QpO1xuICB9XG4gIHJldHVybiBhcmd1bWVudE5hbWVMaXN0O1xufTtcblxucGV4cHJzJGEuT3B0LnByb3RvdHlwZS50b0FyZ3VtZW50TmFtZUxpc3QgPSBmdW5jdGlvbihmaXJzdEFyZ0luZGV4LCBub0R1cENoZWNrKSB7XG4gIHJldHVybiB0aGlzLmV4cHIudG9Bcmd1bWVudE5hbWVMaXN0KGZpcnN0QXJnSW5kZXgsIG5vRHVwQ2hlY2spLm1hcChhcmdOYW1lID0+IHtcbiAgICByZXR1cm4gJ29wdCcgKyBhcmdOYW1lWzBdLnRvVXBwZXJDYXNlKCkgKyBhcmdOYW1lLnNsaWNlKDEpO1xuICB9KTtcbn07XG5cbnBleHBycyRhLk5vdC5wcm90b3R5cGUudG9Bcmd1bWVudE5hbWVMaXN0ID0gZnVuY3Rpb24oZmlyc3RBcmdJbmRleCwgbm9EdXBDaGVjaykge1xuICByZXR1cm4gW107XG59O1xuXG5wZXhwcnMkYS5Mb29rYWhlYWQucHJvdG90eXBlLnRvQXJndW1lbnROYW1lTGlzdCA9IHBleHBycyRhLkxleC5wcm90b3R5cGUudG9Bcmd1bWVudE5hbWVMaXN0ID1cbiAgZnVuY3Rpb24oZmlyc3RBcmdJbmRleCwgbm9EdXBDaGVjaykge1xuICAgIHJldHVybiB0aGlzLmV4cHIudG9Bcmd1bWVudE5hbWVMaXN0KGZpcnN0QXJnSW5kZXgsIG5vRHVwQ2hlY2spO1xuICB9O1xuXG5wZXhwcnMkYS5BcHBseS5wcm90b3R5cGUudG9Bcmd1bWVudE5hbWVMaXN0ID0gZnVuY3Rpb24oZmlyc3RBcmdJbmRleCwgbm9EdXBDaGVjaykge1xuICByZXR1cm4gW3RoaXMucnVsZU5hbWVdO1xufTtcblxucGV4cHJzJGEuVW5pY29kZUNoYXIucHJvdG90eXBlLnRvQXJndW1lbnROYW1lTGlzdCA9IGZ1bmN0aW9uKGZpcnN0QXJnSW5kZXgsIG5vRHVwQ2hlY2spIHtcbiAgcmV0dXJuIFsnJCcgKyBmaXJzdEFyZ0luZGV4XTtcbn07XG5cbnBleHBycyRhLlBhcmFtLnByb3RvdHlwZS50b0FyZ3VtZW50TmFtZUxpc3QgPSBmdW5jdGlvbihmaXJzdEFyZ0luZGV4LCBub0R1cENoZWNrKSB7XG4gIHJldHVybiBbJ3BhcmFtJyArIHRoaXMuaW5kZXhdO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEltcG9ydHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IGNvbW1vbiQ3ID0gY29tbW9uJGw7XG5jb25zdCBwZXhwcnMkOSA9IHBleHByc01haW47XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBPcGVyYXRpb25zXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vLyBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgUEV4cHIsIGZvciB1c2UgYXMgYSBVSSBsYWJlbCwgZXRjLlxucGV4cHJzJDkuUEV4cHIucHJvdG90eXBlLnRvRGlzcGxheVN0cmluZyA9IGNvbW1vbiQ3LmFic3RyYWN0KCd0b0Rpc3BsYXlTdHJpbmcnKTtcblxucGV4cHJzJDkuQWx0LnByb3RvdHlwZS50b0Rpc3BsYXlTdHJpbmcgPSBwZXhwcnMkOS5TZXEucHJvdG90eXBlLnRvRGlzcGxheVN0cmluZyA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5zb3VyY2UpIHtcbiAgICByZXR1cm4gdGhpcy5zb3VyY2UudHJpbW1lZCgpLmNvbnRlbnRzO1xuICB9XG4gIHJldHVybiAnWycgKyB0aGlzLmNvbnN0cnVjdG9yLm5hbWUgKyAnXSc7XG59O1xuXG5wZXhwcnMkOS5hbnkudG9EaXNwbGF5U3RyaW5nID1cbiAgcGV4cHJzJDkuZW5kLnRvRGlzcGxheVN0cmluZyA9XG4gIHBleHBycyQ5Lkl0ZXIucHJvdG90eXBlLnRvRGlzcGxheVN0cmluZyA9XG4gIHBleHBycyQ5Lk5vdC5wcm90b3R5cGUudG9EaXNwbGF5U3RyaW5nID1cbiAgcGV4cHJzJDkuTG9va2FoZWFkLnByb3RvdHlwZS50b0Rpc3BsYXlTdHJpbmcgPVxuICBwZXhwcnMkOS5MZXgucHJvdG90eXBlLnRvRGlzcGxheVN0cmluZyA9XG4gIHBleHBycyQ5LlRlcm1pbmFsLnByb3RvdHlwZS50b0Rpc3BsYXlTdHJpbmcgPVxuICBwZXhwcnMkOS5SYW5nZS5wcm90b3R5cGUudG9EaXNwbGF5U3RyaW5nID1cbiAgcGV4cHJzJDkuUGFyYW0ucHJvdG90eXBlLnRvRGlzcGxheVN0cmluZyA9XG4gICAgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50b1N0cmluZygpO1xuICAgIH07XG5cbnBleHBycyQ5LkFwcGx5LnByb3RvdHlwZS50b0Rpc3BsYXlTdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuYXJncy5sZW5ndGggPiAwKSB7XG4gICAgY29uc3QgcHMgPSB0aGlzLmFyZ3MubWFwKGFyZyA9PiBhcmcudG9EaXNwbGF5U3RyaW5nKCkpO1xuICAgIHJldHVybiB0aGlzLnJ1bGVOYW1lICsgJzwnICsgcHMuam9pbignLCcpICsgJz4nO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0aGlzLnJ1bGVOYW1lO1xuICB9XG59O1xuXG5wZXhwcnMkOS5Vbmljb2RlQ2hhci5wcm90b3R5cGUudG9EaXNwbGF5U3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAnVW5pY29kZSBbJyArIHRoaXMuY2F0ZWdvcnkgKyAnXSBjaGFyYWN0ZXInO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEltcG9ydHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IEZhaWx1cmUkMSA9IEZhaWx1cmVfMTtcbmNvbnN0IGNvbW1vbiQ2ID0gY29tbW9uJGw7XG5jb25zdCBwZXhwcnMkOCA9IHBleHByc01haW47XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBPcGVyYXRpb25zXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5wZXhwcnMkOC5QRXhwci5wcm90b3R5cGUudG9GYWlsdXJlID0gY29tbW9uJDYuYWJzdHJhY3QoJ3RvRmFpbHVyZScpO1xuXG5wZXhwcnMkOC5hbnkudG9GYWlsdXJlID0gZnVuY3Rpb24oZ3JhbW1hcikge1xuICByZXR1cm4gbmV3IEZhaWx1cmUkMSh0aGlzLCAnYW55IG9iamVjdCcsICdkZXNjcmlwdGlvbicpO1xufTtcblxucGV4cHJzJDguZW5kLnRvRmFpbHVyZSA9IGZ1bmN0aW9uKGdyYW1tYXIpIHtcbiAgcmV0dXJuIG5ldyBGYWlsdXJlJDEodGhpcywgJ2VuZCBvZiBpbnB1dCcsICdkZXNjcmlwdGlvbicpO1xufTtcblxucGV4cHJzJDguVGVybWluYWwucHJvdG90eXBlLnRvRmFpbHVyZSA9IGZ1bmN0aW9uKGdyYW1tYXIpIHtcbiAgcmV0dXJuIG5ldyBGYWlsdXJlJDEodGhpcywgdGhpcy5vYmosICdzdHJpbmcnKTtcbn07XG5cbnBleHBycyQ4LlJhbmdlLnByb3RvdHlwZS50b0ZhaWx1cmUgPSBmdW5jdGlvbihncmFtbWFyKSB7XG4gIC8vIFRPRE86IGNvbWUgdXAgd2l0aCBzb21ldGhpbmcgYmV0dGVyXG4gIHJldHVybiBuZXcgRmFpbHVyZSQxKHRoaXMsIEpTT04uc3RyaW5naWZ5KHRoaXMuZnJvbSkgKyAnLi4nICsgSlNPTi5zdHJpbmdpZnkodGhpcy50byksICdjb2RlJyk7XG59O1xuXG5wZXhwcnMkOC5Ob3QucHJvdG90eXBlLnRvRmFpbHVyZSA9IGZ1bmN0aW9uKGdyYW1tYXIpIHtcbiAgY29uc3QgZGVzY3JpcHRpb24gPVxuICAgIHRoaXMuZXhwciA9PT0gcGV4cHJzJDguYW55ID8gJ25vdGhpbmcnIDogJ25vdCAnICsgdGhpcy5leHByLnRvRmFpbHVyZShncmFtbWFyKTtcbiAgcmV0dXJuIG5ldyBGYWlsdXJlJDEodGhpcywgZGVzY3JpcHRpb24sICdkZXNjcmlwdGlvbicpO1xufTtcblxucGV4cHJzJDguTG9va2FoZWFkLnByb3RvdHlwZS50b0ZhaWx1cmUgPSBmdW5jdGlvbihncmFtbWFyKSB7XG4gIHJldHVybiB0aGlzLmV4cHIudG9GYWlsdXJlKGdyYW1tYXIpO1xufTtcblxucGV4cHJzJDguQXBwbHkucHJvdG90eXBlLnRvRmFpbHVyZSA9IGZ1bmN0aW9uKGdyYW1tYXIpIHtcbiAgbGV0IHtkZXNjcmlwdGlvbn0gPSBncmFtbWFyLnJ1bGVzW3RoaXMucnVsZU5hbWVdO1xuICBpZiAoIWRlc2NyaXB0aW9uKSB7XG4gICAgY29uc3QgYXJ0aWNsZSA9IC9eW2FlaW91QUVJT1VdLy50ZXN0KHRoaXMucnVsZU5hbWUpID8gJ2FuJyA6ICdhJztcbiAgICBkZXNjcmlwdGlvbiA9IGFydGljbGUgKyAnICcgKyB0aGlzLnJ1bGVOYW1lO1xuICB9XG4gIHJldHVybiBuZXcgRmFpbHVyZSQxKHRoaXMsIGRlc2NyaXB0aW9uLCAnZGVzY3JpcHRpb24nKTtcbn07XG5cbnBleHBycyQ4LlVuaWNvZGVDaGFyLnByb3RvdHlwZS50b0ZhaWx1cmUgPSBmdW5jdGlvbihncmFtbWFyKSB7XG4gIHJldHVybiBuZXcgRmFpbHVyZSQxKHRoaXMsICdhIFVuaWNvZGUgWycgKyB0aGlzLmNhdGVnb3J5ICsgJ10gY2hhcmFjdGVyJywgJ2Rlc2NyaXB0aW9uJyk7XG59O1xuXG5wZXhwcnMkOC5BbHQucHJvdG90eXBlLnRvRmFpbHVyZSA9IGZ1bmN0aW9uKGdyYW1tYXIpIHtcbiAgY29uc3QgZnMgPSB0aGlzLnRlcm1zLm1hcCh0ID0+IHQudG9GYWlsdXJlKGdyYW1tYXIpKTtcbiAgY29uc3QgZGVzY3JpcHRpb24gPSAnKCcgKyBmcy5qb2luKCcgb3IgJykgKyAnKSc7XG4gIHJldHVybiBuZXcgRmFpbHVyZSQxKHRoaXMsIGRlc2NyaXB0aW9uLCAnZGVzY3JpcHRpb24nKTtcbn07XG5cbnBleHBycyQ4LlNlcS5wcm90b3R5cGUudG9GYWlsdXJlID0gZnVuY3Rpb24oZ3JhbW1hcikge1xuICBjb25zdCBmcyA9IHRoaXMuZmFjdG9ycy5tYXAoZiA9PiBmLnRvRmFpbHVyZShncmFtbWFyKSk7XG4gIGNvbnN0IGRlc2NyaXB0aW9uID0gJygnICsgZnMuam9pbignICcpICsgJyknO1xuICByZXR1cm4gbmV3IEZhaWx1cmUkMSh0aGlzLCBkZXNjcmlwdGlvbiwgJ2Rlc2NyaXB0aW9uJyk7XG59O1xuXG5wZXhwcnMkOC5JdGVyLnByb3RvdHlwZS50b0ZhaWx1cmUgPSBmdW5jdGlvbihncmFtbWFyKSB7XG4gIGNvbnN0IGRlc2NyaXB0aW9uID0gJygnICsgdGhpcy5leHByLnRvRmFpbHVyZShncmFtbWFyKSArIHRoaXMub3BlcmF0b3IgKyAnKSc7XG4gIHJldHVybiBuZXcgRmFpbHVyZSQxKHRoaXMsIGRlc2NyaXB0aW9uLCAnZGVzY3JpcHRpb24nKTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBJbXBvcnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jb25zdCBjb21tb24kNSA9IGNvbW1vbiRsO1xuY29uc3QgcGV4cHJzJDcgPSBwZXhwcnNNYWluO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gT3BlcmF0aW9uc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLypcbiAgZTEudG9TdHJpbmcoKSA9PT0gZTIudG9TdHJpbmcoKSA9PT4gZTEgYW5kIGUyIGFyZSBzZW1hbnRpY2FsbHkgZXF1aXZhbGVudC5cbiAgTm90ZSB0aGF0IHRoaXMgaXMgbm90IGFuIGlmZiAoPD09Pik6IGUuZy4sXG4gICh+XCJiXCIgXCJhXCIpLnRvU3RyaW5nKCkgIT09IChcImFcIikudG9TdHJpbmcoKSwgZXZlbiB0aG91Z2hcbiAgflwiYlwiIFwiYVwiIGFuZCBcImFcIiBhcmUgaW50ZXJjaGFuZ2VhYmxlIGluIGFueSBncmFtbWFyLFxuICBib3RoIGluIHRlcm1zIG9mIHRoZSBsYW5ndWFnZXMgdGhleSBhY2NlcHQgYW5kIHRoZWlyIGFyaXRpZXMuXG4qL1xucGV4cHJzJDcuUEV4cHIucHJvdG90eXBlLnRvU3RyaW5nID0gY29tbW9uJDUuYWJzdHJhY3QoJ3RvU3RyaW5nJyk7XG5cbnBleHBycyQ3LmFueS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gJ2FueSc7XG59O1xuXG5wZXhwcnMkNy5lbmQudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICdlbmQnO1xufTtcblxucGV4cHJzJDcuVGVybWluYWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLm9iaik7XG59O1xuXG5wZXhwcnMkNy5SYW5nZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMuZnJvbSkgKyAnLi4nICsgSlNPTi5zdHJpbmdpZnkodGhpcy50byk7XG59O1xuXG5wZXhwcnMkNy5QYXJhbS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICckJyArIHRoaXMuaW5kZXg7XG59O1xuXG5wZXhwcnMkNy5MZXgucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAnIygnICsgdGhpcy5leHByLnRvU3RyaW5nKCkgKyAnKSc7XG59O1xuXG5wZXhwcnMkNy5BbHQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnRlcm1zLmxlbmd0aCA9PT0gMSA/XG4gICAgdGhpcy50ZXJtc1swXS50b1N0cmluZygpIDpcbiAgICAnKCcgKyB0aGlzLnRlcm1zLm1hcCh0ZXJtID0+IHRlcm0udG9TdHJpbmcoKSkuam9pbignIHwgJykgKyAnKSc7XG59O1xuXG5wZXhwcnMkNy5TZXEucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmZhY3RvcnMubGVuZ3RoID09PSAxID9cbiAgICB0aGlzLmZhY3RvcnNbMF0udG9TdHJpbmcoKSA6XG4gICAgJygnICsgdGhpcy5mYWN0b3JzLm1hcChmYWN0b3IgPT4gZmFjdG9yLnRvU3RyaW5nKCkpLmpvaW4oJyAnKSArICcpJztcbn07XG5cbnBleHBycyQ3Lkl0ZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmV4cHIgKyB0aGlzLm9wZXJhdG9yO1xufTtcblxucGV4cHJzJDcuTm90LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gJ34nICsgdGhpcy5leHByO1xufTtcblxucGV4cHJzJDcuTG9va2FoZWFkLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gJyYnICsgdGhpcy5leHByO1xufTtcblxucGV4cHJzJDcuQXBwbHkucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLmFyZ3MubGVuZ3RoID4gMCkge1xuICAgIGNvbnN0IHBzID0gdGhpcy5hcmdzLm1hcChhcmcgPT4gYXJnLnRvU3RyaW5nKCkpO1xuICAgIHJldHVybiB0aGlzLnJ1bGVOYW1lICsgJzwnICsgcHMuam9pbignLCcpICsgJz4nO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0aGlzLnJ1bGVOYW1lO1xuICB9XG59O1xuXG5wZXhwcnMkNy5Vbmljb2RlQ2hhci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICdcXFxccHsnICsgdGhpcy5jYXRlZ29yeSArICd9Jztcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBSZS1leHBvcnQgY2xhc3Nlc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIHBleHBycyQ2ID0gcGV4cHJzTWFpbjtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEltcG9ydHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IEZhaWx1cmUgPSBGYWlsdXJlXzE7XG5jb25zdCB7VGVybWluYWxOb2RlfSA9IG5vZGVzJDE7XG5jb25zdCB7YXNzZXJ0OiBhc3NlcnQkMX0gPSBjb21tb24kbDtcbmNvbnN0IHtQRXhwciwgVGVybWluYWx9ID0gcGV4cHJzJDY7XG5cbmNsYXNzIENhc2VJbnNlbnNpdGl2ZVRlcm1pbmFsJDEgZXh0ZW5kcyBQRXhwciB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLm9iaiA9IHBhcmFtO1xuICB9XG5cbiAgX2dldFN0cmluZyhzdGF0ZSkge1xuICAgIGNvbnN0IHRlcm1pbmFsID0gc3RhdGUuY3VycmVudEFwcGxpY2F0aW9uKCkuYXJnc1t0aGlzLm9iai5pbmRleF07XG4gICAgYXNzZXJ0JDEodGVybWluYWwgaW5zdGFuY2VvZiBUZXJtaW5hbCwgJ2V4cGVjdGVkIGEgVGVybWluYWwgZXhwcmVzc2lvbicpO1xuICAgIHJldHVybiB0ZXJtaW5hbC5vYmo7XG4gIH1cblxuICAvLyBJbXBsZW1lbnRhdGlvbiBvZiB0aGUgUEV4cHIgQVBJXG5cbiAgYWxsb3dzU2tpcHBpbmdQcmVjZWRpbmdTcGFjZSgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGV2YWwoc3RhdGUpIHtcbiAgICBjb25zdCB7aW5wdXRTdHJlYW19ID0gc3RhdGU7XG4gICAgY29uc3Qgb3JpZ1BvcyA9IGlucHV0U3RyZWFtLnBvcztcbiAgICBjb25zdCBtYXRjaFN0ciA9IHRoaXMuX2dldFN0cmluZyhzdGF0ZSk7XG4gICAgaWYgKCFpbnB1dFN0cmVhbS5tYXRjaFN0cmluZyhtYXRjaFN0ciwgdHJ1ZSkpIHtcbiAgICAgIHN0YXRlLnByb2Nlc3NGYWlsdXJlKG9yaWdQb3MsIHRoaXMpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5wdXNoQmluZGluZyhuZXcgVGVybWluYWxOb2RlKG1hdGNoU3RyLmxlbmd0aCksIG9yaWdQb3MpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgZ2V0QXJpdHkoKSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cblxuICBzdWJzdGl0dXRlUGFyYW1zKGFjdHVhbHMpIHtcbiAgICByZXR1cm4gbmV3IENhc2VJbnNlbnNpdGl2ZVRlcm1pbmFsJDEodGhpcy5vYmouc3Vic3RpdHV0ZVBhcmFtcyhhY3R1YWxzKSk7XG4gIH1cblxuICB0b0Rpc3BsYXlTdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMub2JqLnRvRGlzcGxheVN0cmluZygpICsgJyAoY2FzZS1pbnNlbnNpdGl2ZSknO1xuICB9XG5cbiAgdG9GYWlsdXJlKGdyYW1tYXIpIHtcbiAgICByZXR1cm4gbmV3IEZhaWx1cmUoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIHRoaXMub2JqLnRvRmFpbHVyZShncmFtbWFyKSArICcgKGNhc2UtaW5zZW5zaXRpdmUpJyxcbiAgICAgICAgJ2Rlc2NyaXB0aW9uJ1xuICAgICk7XG4gIH1cblxuICBfaXNOdWxsYWJsZShncmFtbWFyLCBtZW1vKSB7XG4gICAgcmV0dXJuIHRoaXMub2JqLl9pc051bGxhYmxlKGdyYW1tYXIsIG1lbW8pO1xuICB9XG59XG5cbnZhciBDYXNlSW5zZW5zaXRpdmVUZXJtaW5hbF8xID0gQ2FzZUluc2Vuc2l0aXZlVGVybWluYWwkMTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEltcG9ydHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IEludGVydmFsJDEgPSBJbnRlcnZhbF8xO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUHJpdmF0ZSBzdHVmZlxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZnVuY3Rpb24gSW5wdXRTdHJlYW0kMyhzb3VyY2UpIHtcbiAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gIHRoaXMucG9zID0gMDtcbiAgdGhpcy5leGFtaW5lZExlbmd0aCA9IDA7XG59XG5cbklucHV0U3RyZWFtJDMucHJvdG90eXBlID0ge1xuICBhdEVuZCgpIHtcbiAgICBjb25zdCBhbnMgPSB0aGlzLnBvcyA9PT0gdGhpcy5zb3VyY2UubGVuZ3RoO1xuICAgIHRoaXMuZXhhbWluZWRMZW5ndGggPSBNYXRoLm1heCh0aGlzLmV4YW1pbmVkTGVuZ3RoLCB0aGlzLnBvcyArIDEpO1xuICAgIHJldHVybiBhbnM7XG4gIH0sXG5cbiAgbmV4dCgpIHtcbiAgICBjb25zdCBhbnMgPSB0aGlzLnNvdXJjZVt0aGlzLnBvcysrXTtcbiAgICB0aGlzLmV4YW1pbmVkTGVuZ3RoID0gTWF0aC5tYXgodGhpcy5leGFtaW5lZExlbmd0aCwgdGhpcy5wb3MpO1xuICAgIHJldHVybiBhbnM7XG4gIH0sXG5cbiAgbmV4dENoYXJDb2RlKCkge1xuICAgIGNvbnN0IG5leHRDaGFyID0gdGhpcy5uZXh0KCk7XG4gICAgcmV0dXJuIG5leHRDaGFyICYmIG5leHRDaGFyLmNoYXJDb2RlQXQoMCk7XG4gIH0sXG5cbiAgbmV4dENvZGVQb2ludCgpIHtcbiAgICBjb25zdCBjcCA9IHRoaXMuc291cmNlLnNsaWNlKHRoaXMucG9zKyspLmNvZGVQb2ludEF0KDApO1xuICAgIC8vIElmIHRoZSBjb2RlIHBvaW50IGlzIGJleW9uZCBwbGFuZSAwLCBpdCB0YWtlcyB1cCB0d28gY2hhcmFjdGVycy5cbiAgICBpZiAoY3AgPiAweGZmZmYpIHtcbiAgICAgIHRoaXMucG9zICs9IDE7XG4gICAgfVxuICAgIHRoaXMuZXhhbWluZWRMZW5ndGggPSBNYXRoLm1heCh0aGlzLmV4YW1pbmVkTGVuZ3RoLCB0aGlzLnBvcyk7XG4gICAgcmV0dXJuIGNwO1xuICB9LFxuXG4gIG1hdGNoU3RyaW5nKHMsIG9wdElnbm9yZUNhc2UpIHtcbiAgICBsZXQgaWR4O1xuICAgIGlmIChvcHRJZ25vcmVDYXNlKSB7XG4gICAgICAvKlxuICAgICAgICBDYXNlLWluc2Vuc2l0aXZlIGNvbXBhcmlzb24gaXMgYSB0cmlja3kgYnVzaW5lc3MuIFNvbWUgbm90YWJsZSBnb3RjaGFzIGluY2x1ZGUgdGhlXG4gICAgICAgIFwiVHVya2lzaCBJXCIgcHJvYmxlbSAoaHR0cDovL3d3dy5pMThuZ3V5LmNvbS91bmljb2RlL3R1cmtpc2gtaTE4bi5odG1sKSBhbmQgdGhlIGZhY3RcbiAgICAgICAgdGhhdCB0aGUgR2VybWFuIEVzc3pldCAow58pIHR1cm5zIGludG8gXCJTU1wiIGluIHVwcGVyIGNhc2UuXG5cbiAgICAgICAgVGhpcyBpcyBpbnRlbmRlZCB0byBiZSBhIGxvY2FsZS1pbnZhcmlhbnQgY29tcGFyaXNvbiwgd2hpY2ggbWVhbnMgaXQgbWF5IG5vdCBvYmV5XG4gICAgICAgIGxvY2FsZS1zcGVjaWZpYyBleHBlY3RhdGlvbnMgKGUuZy4gXCJpXCIgPT4gXCLEsFwiKS5cbiAgICAgICAqL1xuICAgICAgZm9yIChpZHggPSAwOyBpZHggPCBzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgY29uc3QgYWN0dWFsID0gdGhpcy5uZXh0KCk7XG4gICAgICAgIGNvbnN0IGV4cGVjdGVkID0gc1tpZHhdO1xuICAgICAgICBpZiAoYWN0dWFsID09IG51bGwgfHwgYWN0dWFsLnRvVXBwZXJDYXNlKCkgIT09IGV4cGVjdGVkLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvLyBEZWZhdWx0IGlzIGNhc2Utc2Vuc2l0aXZlIGNvbXBhcmlzb24uXG4gICAgZm9yIChpZHggPSAwOyBpZHggPCBzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgIGlmICh0aGlzLm5leHQoKSAhPT0gc1tpZHhdKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG5cbiAgc291cmNlU2xpY2Uoc3RhcnRJZHgsIGVuZElkeCkge1xuICAgIHJldHVybiB0aGlzLnNvdXJjZS5zbGljZShzdGFydElkeCwgZW5kSWR4KTtcbiAgfSxcblxuICBpbnRlcnZhbChzdGFydElkeCwgb3B0RW5kSWR4KSB7XG4gICAgcmV0dXJuIG5ldyBJbnRlcnZhbCQxKHRoaXMuc291cmNlLCBzdGFydElkeCwgb3B0RW5kSWR4ID8gb3B0RW5kSWR4IDogdGhpcy5wb3MpO1xuICB9LFxufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEV4cG9ydHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBJbnB1dFN0cmVhbV8xID0gSW5wdXRTdHJlYW0kMztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEltcG9ydHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IGNvbW1vbiQ0ID0gY29tbW9uJGw7XG5jb25zdCB1dGlsJDQgPSB1dGlsJDc7XG5jb25zdCBJbnRlcnZhbCA9IEludGVydmFsXzE7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBQcml2YXRlIHN0dWZmXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5mdW5jdGlvbiBNYXRjaFJlc3VsdCQyKFxuICAgIG1hdGNoZXIsXG4gICAgaW5wdXQsXG4gICAgc3RhcnRFeHByLFxuICAgIGNzdCxcbiAgICBjc3RPZmZzZXQsXG4gICAgcmlnaHRtb3N0RmFpbHVyZVBvc2l0aW9uLFxuICAgIG9wdFJlY29yZGVkRmFpbHVyZXNcbikge1xuICB0aGlzLm1hdGNoZXIgPSBtYXRjaGVyO1xuICB0aGlzLmlucHV0ID0gaW5wdXQ7XG4gIHRoaXMuc3RhcnRFeHByID0gc3RhcnRFeHByO1xuICB0aGlzLl9jc3QgPSBjc3Q7XG4gIHRoaXMuX2NzdE9mZnNldCA9IGNzdE9mZnNldDtcbiAgdGhpcy5fcmlnaHRtb3N0RmFpbHVyZVBvc2l0aW9uID0gcmlnaHRtb3N0RmFpbHVyZVBvc2l0aW9uO1xuICB0aGlzLl9yaWdodG1vc3RGYWlsdXJlcyA9IG9wdFJlY29yZGVkRmFpbHVyZXM7XG5cbiAgaWYgKHRoaXMuZmFpbGVkKCkpIHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1pbnZhbGlkLXRoaXMgKi9cbiAgICBjb21tb24kNC5kZWZpbmVMYXp5UHJvcGVydHkodGhpcywgJ21lc3NhZ2UnLCBmdW5jdGlvbigpIHtcbiAgICAgIGNvbnN0IGRldGFpbCA9ICdFeHBlY3RlZCAnICsgdGhpcy5nZXRFeHBlY3RlZFRleHQoKTtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHV0aWwkNC5nZXRMaW5lQW5kQ29sdW1uTWVzc2FnZSh0aGlzLmlucHV0LCB0aGlzLmdldFJpZ2h0bW9zdEZhaWx1cmVQb3NpdGlvbigpKSArIGRldGFpbFxuICAgICAgKTtcbiAgICB9KTtcbiAgICBjb21tb24kNC5kZWZpbmVMYXp5UHJvcGVydHkodGhpcywgJ3Nob3J0TWVzc2FnZScsIGZ1bmN0aW9uKCkge1xuICAgICAgY29uc3QgZGV0YWlsID0gJ2V4cGVjdGVkICcgKyB0aGlzLmdldEV4cGVjdGVkVGV4dCgpO1xuICAgICAgY29uc3QgZXJyb3JJbmZvID0gdXRpbCQ0LmdldExpbmVBbmRDb2x1bW4odGhpcy5pbnB1dCwgdGhpcy5nZXRSaWdodG1vc3RGYWlsdXJlUG9zaXRpb24oKSk7XG4gICAgICByZXR1cm4gJ0xpbmUgJyArIGVycm9ySW5mby5saW5lTnVtICsgJywgY29sICcgKyBlcnJvckluZm8uY29sTnVtICsgJzogJyArIGRldGFpbDtcbiAgICB9KTtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLWludmFsaWQtdGhpcyAqL1xuICB9XG59XG5cbk1hdGNoUmVzdWx0JDIucHJvdG90eXBlLnN1Y2NlZWRlZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gISF0aGlzLl9jc3Q7XG59O1xuXG5NYXRjaFJlc3VsdCQyLnByb3RvdHlwZS5mYWlsZWQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICF0aGlzLnN1Y2NlZWRlZCgpO1xufTtcblxuTWF0Y2hSZXN1bHQkMi5wcm90b3R5cGUuZ2V0UmlnaHRtb3N0RmFpbHVyZVBvc2l0aW9uID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl9yaWdodG1vc3RGYWlsdXJlUG9zaXRpb247XG59O1xuXG5NYXRjaFJlc3VsdCQyLnByb3RvdHlwZS5nZXRSaWdodG1vc3RGYWlsdXJlcyA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIXRoaXMuX3JpZ2h0bW9zdEZhaWx1cmVzKSB7XG4gICAgdGhpcy5tYXRjaGVyLnNldElucHV0KHRoaXMuaW5wdXQpO1xuICAgIGNvbnN0IG1hdGNoUmVzdWx0V2l0aEZhaWx1cmVzID0gdGhpcy5tYXRjaGVyLl9tYXRjaChcbiAgICAgICAgdGhpcy5zdGFydEV4cHIsXG4gICAgICAgIGZhbHNlLFxuICAgICAgICB0aGlzLmdldFJpZ2h0bW9zdEZhaWx1cmVQb3NpdGlvbigpXG4gICAgKTtcbiAgICB0aGlzLl9yaWdodG1vc3RGYWlsdXJlcyA9IG1hdGNoUmVzdWx0V2l0aEZhaWx1cmVzLmdldFJpZ2h0bW9zdEZhaWx1cmVzKCk7XG4gIH1cbiAgcmV0dXJuIHRoaXMuX3JpZ2h0bW9zdEZhaWx1cmVzO1xufTtcblxuTWF0Y2hSZXN1bHQkMi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc3VjY2VlZGVkKCkgP1xuICAgICdbbWF0Y2ggc3VjY2VlZGVkXScgOlxuICAgICdbbWF0Y2ggZmFpbGVkIGF0IHBvc2l0aW9uICcgKyB0aGlzLmdldFJpZ2h0bW9zdEZhaWx1cmVQb3NpdGlvbigpICsgJ10nO1xufTtcblxuLy8gUmV0dXJuIGEgc3RyaW5nIHN1bW1hcml6aW5nIHRoZSBleHBlY3RlZCBjb250ZW50cyBvZiB0aGUgaW5wdXQgc3RyZWFtIHdoZW5cbi8vIHRoZSBtYXRjaCBmYWlsdXJlIG9jY3VycmVkLlxuTWF0Y2hSZXN1bHQkMi5wcm90b3R5cGUuZ2V0RXhwZWN0ZWRUZXh0ID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLnN1Y2NlZWRlZCgpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjYW5ub3QgZ2V0IGV4cGVjdGVkIHRleHQgb2YgYSBzdWNjZXNzZnVsIE1hdGNoUmVzdWx0Jyk7XG4gIH1cblxuICBjb25zdCBzYiA9IG5ldyBjb21tb24kNC5TdHJpbmdCdWZmZXIoKTtcbiAgbGV0IGZhaWx1cmVzID0gdGhpcy5nZXRSaWdodG1vc3RGYWlsdXJlcygpO1xuXG4gIC8vIEZpbHRlciBvdXQgdGhlIGZsdWZmeSBmYWlsdXJlcyB0byBtYWtlIHRoZSBkZWZhdWx0IGVycm9yIG1lc3NhZ2VzIG1vcmUgdXNlZnVsXG4gIGZhaWx1cmVzID0gZmFpbHVyZXMuZmlsdGVyKGZhaWx1cmUgPT4gIWZhaWx1cmUuaXNGbHVmZnkoKSk7XG5cbiAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgZmFpbHVyZXMubGVuZ3RoOyBpZHgrKykge1xuICAgIGlmIChpZHggPiAwKSB7XG4gICAgICBpZiAoaWR4ID09PSBmYWlsdXJlcy5sZW5ndGggLSAxKSB7XG4gICAgICAgIHNiLmFwcGVuZChmYWlsdXJlcy5sZW5ndGggPiAyID8gJywgb3IgJyA6ICcgb3IgJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzYi5hcHBlbmQoJywgJyk7XG4gICAgICB9XG4gICAgfVxuICAgIHNiLmFwcGVuZChmYWlsdXJlc1tpZHhdLnRvU3RyaW5nKCkpO1xuICB9XG4gIHJldHVybiBzYi5jb250ZW50cygpO1xufTtcblxuTWF0Y2hSZXN1bHQkMi5wcm90b3R5cGUuZ2V0SW50ZXJ2YWwgPSBmdW5jdGlvbigpIHtcbiAgY29uc3QgcG9zID0gdGhpcy5nZXRSaWdodG1vc3RGYWlsdXJlUG9zaXRpb24oKTtcbiAgcmV0dXJuIG5ldyBJbnRlcnZhbCh0aGlzLmlucHV0LCBwb3MsIHBvcyk7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gRXhwb3J0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIE1hdGNoUmVzdWx0XzEgPSBNYXRjaFJlc3VsdCQyO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUHJpdmF0ZSBzdHVmZlxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZnVuY3Rpb24gUG9zSW5mbyQxKCkge1xuICB0aGlzLmFwcGxpY2F0aW9uTWVtb0tleVN0YWNrID0gW107IC8vIGFjdGl2ZSBhcHBsaWNhdGlvbnMgYXQgdGhpcyBwb3NpdGlvblxuICB0aGlzLm1lbW8gPSB7fTtcbiAgdGhpcy5tYXhFeGFtaW5lZExlbmd0aCA9IDA7XG4gIHRoaXMubWF4UmlnaHRtb3N0RmFpbHVyZU9mZnNldCA9IC0xO1xuICB0aGlzLmN1cnJlbnRMZWZ0UmVjdXJzaW9uID0gdW5kZWZpbmVkO1xufVxuXG5Qb3NJbmZvJDEucHJvdG90eXBlID0ge1xuICBpc0FjdGl2ZShhcHBsaWNhdGlvbikge1xuICAgIHJldHVybiB0aGlzLmFwcGxpY2F0aW9uTWVtb0tleVN0YWNrLmluZGV4T2YoYXBwbGljYXRpb24udG9NZW1vS2V5KCkpID49IDA7XG4gIH0sXG5cbiAgZW50ZXIoYXBwbGljYXRpb24pIHtcbiAgICB0aGlzLmFwcGxpY2F0aW9uTWVtb0tleVN0YWNrLnB1c2goYXBwbGljYXRpb24udG9NZW1vS2V5KCkpO1xuICB9LFxuXG4gIGV4aXQoKSB7XG4gICAgdGhpcy5hcHBsaWNhdGlvbk1lbW9LZXlTdGFjay5wb3AoKTtcbiAgfSxcblxuICBzdGFydExlZnRSZWN1cnNpb24oaGVhZEFwcGxpY2F0aW9uLCBtZW1vUmVjKSB7XG4gICAgbWVtb1JlYy5pc0xlZnRSZWN1cnNpb24gPSB0cnVlO1xuICAgIG1lbW9SZWMuaGVhZEFwcGxpY2F0aW9uID0gaGVhZEFwcGxpY2F0aW9uO1xuICAgIG1lbW9SZWMubmV4dExlZnRSZWN1cnNpb24gPSB0aGlzLmN1cnJlbnRMZWZ0UmVjdXJzaW9uO1xuICAgIHRoaXMuY3VycmVudExlZnRSZWN1cnNpb24gPSBtZW1vUmVjO1xuXG4gICAgY29uc3Qge2FwcGxpY2F0aW9uTWVtb0tleVN0YWNrfSA9IHRoaXM7XG4gICAgY29uc3QgaW5kZXhPZkZpcnN0SW52b2x2ZWRSdWxlID1cbiAgICAgIGFwcGxpY2F0aW9uTWVtb0tleVN0YWNrLmluZGV4T2YoaGVhZEFwcGxpY2F0aW9uLnRvTWVtb0tleSgpKSArIDE7XG4gICAgY29uc3QgaW52b2x2ZWRBcHBsaWNhdGlvbk1lbW9LZXlzID0gYXBwbGljYXRpb25NZW1vS2V5U3RhY2suc2xpY2UoXG4gICAgICAgIGluZGV4T2ZGaXJzdEludm9sdmVkUnVsZVxuICAgICk7XG5cbiAgICBtZW1vUmVjLmlzSW52b2x2ZWQgPSBmdW5jdGlvbihhcHBsaWNhdGlvbk1lbW9LZXkpIHtcbiAgICAgIHJldHVybiBpbnZvbHZlZEFwcGxpY2F0aW9uTWVtb0tleXMuaW5kZXhPZihhcHBsaWNhdGlvbk1lbW9LZXkpID49IDA7XG4gICAgfTtcblxuICAgIG1lbW9SZWMudXBkYXRlSW52b2x2ZWRBcHBsaWNhdGlvbk1lbW9LZXlzID0gZnVuY3Rpb24oKSB7XG4gICAgICBmb3IgKGxldCBpZHggPSBpbmRleE9mRmlyc3RJbnZvbHZlZFJ1bGU7IGlkeCA8IGFwcGxpY2F0aW9uTWVtb0tleVN0YWNrLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgY29uc3QgYXBwbGljYXRpb25NZW1vS2V5ID0gYXBwbGljYXRpb25NZW1vS2V5U3RhY2tbaWR4XTtcbiAgICAgICAgaWYgKCF0aGlzLmlzSW52b2x2ZWQoYXBwbGljYXRpb25NZW1vS2V5KSkge1xuICAgICAgICAgIGludm9sdmVkQXBwbGljYXRpb25NZW1vS2V5cy5wdXNoKGFwcGxpY2F0aW9uTWVtb0tleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9LFxuXG4gIGVuZExlZnRSZWN1cnNpb24oKSB7XG4gICAgdGhpcy5jdXJyZW50TGVmdFJlY3Vyc2lvbiA9IHRoaXMuY3VycmVudExlZnRSZWN1cnNpb24ubmV4dExlZnRSZWN1cnNpb247XG4gIH0sXG5cbiAgLy8gTm90ZTogdGhpcyBtZXRob2QgZG9lc24ndCBnZXQgY2FsbGVkIGZvciB0aGUgXCJoZWFkXCIgb2YgYSBsZWZ0IHJlY3Vyc2lvbiAtLSBmb3IgTFIgaGVhZHMsXG4gIC8vIHRoZSBtZW1vaXplZCByZXN1bHQgKHdoaWNoIHN0YXJ0cyBvdXQgYmVpbmcgYSBmYWlsdXJlKSBpcyBhbHdheXMgdXNlZC5cbiAgc2hvdWxkVXNlTWVtb2l6ZWRSZXN1bHQobWVtb1JlYykge1xuICAgIGlmICghbWVtb1JlYy5pc0xlZnRSZWN1cnNpb24pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjb25zdCB7YXBwbGljYXRpb25NZW1vS2V5U3RhY2t9ID0gdGhpcztcbiAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBhcHBsaWNhdGlvbk1lbW9LZXlTdGFjay5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICBjb25zdCBhcHBsaWNhdGlvbk1lbW9LZXkgPSBhcHBsaWNhdGlvbk1lbW9LZXlTdGFja1tpZHhdO1xuICAgICAgaWYgKG1lbW9SZWMuaXNJbnZvbHZlZChhcHBsaWNhdGlvbk1lbW9LZXkpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG5cbiAgbWVtb2l6ZShtZW1vS2V5LCBtZW1vUmVjKSB7XG4gICAgdGhpcy5tZW1vW21lbW9LZXldID0gbWVtb1JlYztcbiAgICB0aGlzLm1heEV4YW1pbmVkTGVuZ3RoID0gTWF0aC5tYXgodGhpcy5tYXhFeGFtaW5lZExlbmd0aCwgbWVtb1JlYy5leGFtaW5lZExlbmd0aCk7XG4gICAgdGhpcy5tYXhSaWdodG1vc3RGYWlsdXJlT2Zmc2V0ID0gTWF0aC5tYXgoXG4gICAgICAgIHRoaXMubWF4UmlnaHRtb3N0RmFpbHVyZU9mZnNldCxcbiAgICAgICAgbWVtb1JlYy5yaWdodG1vc3RGYWlsdXJlT2Zmc2V0XG4gICAgKTtcbiAgICByZXR1cm4gbWVtb1JlYztcbiAgfSxcblxuICBjbGVhck9ic29sZXRlRW50cmllcyhwb3MsIGludmFsaWRhdGVkSWR4KSB7XG4gICAgaWYgKHBvcyArIHRoaXMubWF4RXhhbWluZWRMZW5ndGggPD0gaW52YWxpZGF0ZWRJZHgpIHtcbiAgICAgIC8vIE9wdGltaXphdGlvbjogbm9uZSBvZiB0aGUgcnVsZSBhcHBsaWNhdGlvbnMgdGhhdCB3ZXJlIG1lbW9pemVkIGhlcmUgZXhhbWluZWQgdGhlXG4gICAgICAvLyBpbnRlcnZhbCBvZiB0aGUgaW5wdXQgdGhhdCBjaGFuZ2VkLCBzbyBub3RoaW5nIGhhcyB0byBiZSBpbnZhbGlkYXRlZC5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB7bWVtb30gPSB0aGlzO1xuICAgIHRoaXMubWF4RXhhbWluZWRMZW5ndGggPSAwO1xuICAgIHRoaXMubWF4UmlnaHRtb3N0RmFpbHVyZU9mZnNldCA9IC0xO1xuICAgIE9iamVjdC5rZXlzKG1lbW8pLmZvckVhY2goayA9PiB7XG4gICAgICBjb25zdCBtZW1vUmVjID0gbWVtb1trXTtcbiAgICAgIGlmIChwb3MgKyBtZW1vUmVjLmV4YW1pbmVkTGVuZ3RoID4gaW52YWxpZGF0ZWRJZHgpIHtcbiAgICAgICAgZGVsZXRlIG1lbW9ba107XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm1heEV4YW1pbmVkTGVuZ3RoID0gTWF0aC5tYXgodGhpcy5tYXhFeGFtaW5lZExlbmd0aCwgbWVtb1JlYy5leGFtaW5lZExlbmd0aCk7XG4gICAgICAgIHRoaXMubWF4UmlnaHRtb3N0RmFpbHVyZU9mZnNldCA9IE1hdGgubWF4KFxuICAgICAgICAgICAgdGhpcy5tYXhSaWdodG1vc3RGYWlsdXJlT2Zmc2V0LFxuICAgICAgICAgICAgbWVtb1JlYy5yaWdodG1vc3RGYWlsdXJlT2Zmc2V0XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gRXhwb3J0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIFBvc0luZm9fMSA9IFBvc0luZm8kMTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEltcG9ydHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IElucHV0U3RyZWFtJDIgPSBJbnB1dFN0cmVhbV8xO1xuY29uc3QgTWF0Y2hSZXN1bHQkMSA9IE1hdGNoUmVzdWx0XzE7XG5jb25zdCBQb3NJbmZvID0gUG9zSW5mb18xO1xuY29uc3QgVHJhY2UgPSBUcmFjZV8xO1xuY29uc3QgcGV4cHJzJDUgPSBwZXhwcnMkNjtcbmNvbnN0IHV0aWwkMyA9IHV0aWwkNztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFByaXZhdGUgc3R1ZmZcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmxldCBidWlsdEluQXBwbHlTeW50YWN0aWNCb2R5O1xuXG51dGlsJDMuYXdhaXRCdWlsdEluUnVsZXMoYnVpbHRJblJ1bGVzID0+IHtcbiAgYnVpbHRJbkFwcGx5U3ludGFjdGljQm9keSA9IGJ1aWx0SW5SdWxlcy5ydWxlcy5hcHBseVN5bnRhY3RpYy5ib2R5O1xufSk7XG5cbmNvbnN0IGFwcGx5U3BhY2VzID0gbmV3IHBleHBycyQ1LkFwcGx5KCdzcGFjZXMnKTtcblxuZnVuY3Rpb24gTWF0Y2hTdGF0ZSQxKG1hdGNoZXIsIHN0YXJ0RXhwciwgb3B0UG9zaXRpb25Ub1JlY29yZEZhaWx1cmVzKSB7XG4gIHRoaXMubWF0Y2hlciA9IG1hdGNoZXI7XG4gIHRoaXMuc3RhcnRFeHByID0gc3RhcnRFeHByO1xuXG4gIHRoaXMuZ3JhbW1hciA9IG1hdGNoZXIuZ3JhbW1hcjtcbiAgdGhpcy5pbnB1dCA9IG1hdGNoZXIuaW5wdXQ7XG4gIHRoaXMuaW5wdXRTdHJlYW0gPSBuZXcgSW5wdXRTdHJlYW0kMihtYXRjaGVyLmlucHV0KTtcbiAgdGhpcy5tZW1vVGFibGUgPSBtYXRjaGVyLm1lbW9UYWJsZTtcblxuICB0aGlzLl9iaW5kaW5ncyA9IFtdO1xuICB0aGlzLl9iaW5kaW5nT2Zmc2V0cyA9IFtdO1xuICB0aGlzLl9hcHBsaWNhdGlvblN0YWNrID0gW107XG4gIHRoaXMuX3Bvc1N0YWNrID0gWzBdO1xuICB0aGlzLmluTGV4aWZpZWRDb250ZXh0U3RhY2sgPSBbZmFsc2VdO1xuXG4gIHRoaXMucmlnaHRtb3N0RmFpbHVyZVBvc2l0aW9uID0gLTE7XG4gIHRoaXMuX3JpZ2h0bW9zdEZhaWx1cmVQb3NpdGlvblN0YWNrID0gW107XG4gIHRoaXMuX3JlY29yZGVkRmFpbHVyZXNTdGFjayA9IFtdO1xuXG4gIGlmIChvcHRQb3NpdGlvblRvUmVjb3JkRmFpbHVyZXMgIT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXMucG9zaXRpb25Ub1JlY29yZEZhaWx1cmVzID0gb3B0UG9zaXRpb25Ub1JlY29yZEZhaWx1cmVzO1xuICAgIHRoaXMucmVjb3JkZWRGYWlsdXJlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIH1cbn1cblxuTWF0Y2hTdGF0ZSQxLnByb3RvdHlwZSA9IHtcbiAgcG9zVG9PZmZzZXQocG9zKSB7XG4gICAgcmV0dXJuIHBvcyAtIHRoaXMuX3Bvc1N0YWNrW3RoaXMuX3Bvc1N0YWNrLmxlbmd0aCAtIDFdO1xuICB9LFxuXG4gIGVudGVyQXBwbGljYXRpb24ocG9zSW5mbywgYXBwKSB7XG4gICAgdGhpcy5fcG9zU3RhY2sucHVzaCh0aGlzLmlucHV0U3RyZWFtLnBvcyk7XG4gICAgdGhpcy5fYXBwbGljYXRpb25TdGFjay5wdXNoKGFwcCk7XG4gICAgdGhpcy5pbkxleGlmaWVkQ29udGV4dFN0YWNrLnB1c2goZmFsc2UpO1xuICAgIHBvc0luZm8uZW50ZXIoYXBwKTtcbiAgICB0aGlzLl9yaWdodG1vc3RGYWlsdXJlUG9zaXRpb25TdGFjay5wdXNoKHRoaXMucmlnaHRtb3N0RmFpbHVyZVBvc2l0aW9uKTtcbiAgICB0aGlzLnJpZ2h0bW9zdEZhaWx1cmVQb3NpdGlvbiA9IC0xO1xuICB9LFxuXG4gIGV4aXRBcHBsaWNhdGlvbihwb3NJbmZvLCBvcHROb2RlKSB7XG4gICAgY29uc3Qgb3JpZ1BvcyA9IHRoaXMuX3Bvc1N0YWNrLnBvcCgpO1xuICAgIHRoaXMuX2FwcGxpY2F0aW9uU3RhY2sucG9wKCk7XG4gICAgdGhpcy5pbkxleGlmaWVkQ29udGV4dFN0YWNrLnBvcCgpO1xuICAgIHBvc0luZm8uZXhpdCgpO1xuXG4gICAgdGhpcy5yaWdodG1vc3RGYWlsdXJlUG9zaXRpb24gPSBNYXRoLm1heChcbiAgICAgICAgdGhpcy5yaWdodG1vc3RGYWlsdXJlUG9zaXRpb24sXG4gICAgICAgIHRoaXMuX3JpZ2h0bW9zdEZhaWx1cmVQb3NpdGlvblN0YWNrLnBvcCgpXG4gICAgKTtcblxuICAgIGlmIChvcHROb2RlKSB7XG4gICAgICB0aGlzLnB1c2hCaW5kaW5nKG9wdE5vZGUsIG9yaWdQb3MpO1xuICAgIH1cbiAgfSxcblxuICBlbnRlckxleGlmaWVkQ29udGV4dCgpIHtcbiAgICB0aGlzLmluTGV4aWZpZWRDb250ZXh0U3RhY2sucHVzaCh0cnVlKTtcbiAgfSxcblxuICBleGl0TGV4aWZpZWRDb250ZXh0KCkge1xuICAgIHRoaXMuaW5MZXhpZmllZENvbnRleHRTdGFjay5wb3AoKTtcbiAgfSxcblxuICBjdXJyZW50QXBwbGljYXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FwcGxpY2F0aW9uU3RhY2tbdGhpcy5fYXBwbGljYXRpb25TdGFjay5sZW5ndGggLSAxXTtcbiAgfSxcblxuICBpblN5bnRhY3RpY0NvbnRleHQoKSB7XG4gICAgY29uc3QgY3VycmVudEFwcGxpY2F0aW9uID0gdGhpcy5jdXJyZW50QXBwbGljYXRpb24oKTtcbiAgICBpZiAoY3VycmVudEFwcGxpY2F0aW9uKSB7XG4gICAgICByZXR1cm4gY3VycmVudEFwcGxpY2F0aW9uLmlzU3ludGFjdGljKCkgJiYgIXRoaXMuaW5MZXhpZmllZENvbnRleHQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVGhlIHRvcC1sZXZlbCBjb250ZXh0IGlzIHN5bnRhY3RpYyBpZiB0aGUgc3RhcnQgYXBwbGljYXRpb24gaXMuXG4gICAgICByZXR1cm4gdGhpcy5zdGFydEV4cHIuZmFjdG9yc1swXS5pc1N5bnRhY3RpYygpO1xuICAgIH1cbiAgfSxcblxuICBpbkxleGlmaWVkQ29udGV4dCgpIHtcbiAgICByZXR1cm4gdGhpcy5pbkxleGlmaWVkQ29udGV4dFN0YWNrW3RoaXMuaW5MZXhpZmllZENvbnRleHRTdGFjay5sZW5ndGggLSAxXTtcbiAgfSxcblxuICBza2lwU3BhY2VzKCkge1xuICAgIHRoaXMucHVzaEZhaWx1cmVzSW5mbygpO1xuICAgIHRoaXMuZXZhbChhcHBseVNwYWNlcyk7XG4gICAgdGhpcy5wb3BCaW5kaW5nKCk7XG4gICAgdGhpcy5wb3BGYWlsdXJlc0luZm8oKTtcbiAgICByZXR1cm4gdGhpcy5pbnB1dFN0cmVhbS5wb3M7XG4gIH0sXG5cbiAgc2tpcFNwYWNlc0lmSW5TeW50YWN0aWNDb250ZXh0KCkge1xuICAgIHJldHVybiB0aGlzLmluU3ludGFjdGljQ29udGV4dCgpID8gdGhpcy5za2lwU3BhY2VzKCkgOiB0aGlzLmlucHV0U3RyZWFtLnBvcztcbiAgfSxcblxuICBtYXliZVNraXBTcGFjZXNCZWZvcmUoZXhwcikge1xuICAgIGlmIChleHByLmFsbG93c1NraXBwaW5nUHJlY2VkaW5nU3BhY2UoKSAmJiBleHByICE9PSBhcHBseVNwYWNlcykge1xuICAgICAgcmV0dXJuIHRoaXMuc2tpcFNwYWNlc0lmSW5TeW50YWN0aWNDb250ZXh0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmlucHV0U3RyZWFtLnBvcztcbiAgICB9XG4gIH0sXG5cbiAgcHVzaEJpbmRpbmcobm9kZSwgb3JpZ1Bvcykge1xuICAgIHRoaXMuX2JpbmRpbmdzLnB1c2gobm9kZSk7XG4gICAgdGhpcy5fYmluZGluZ09mZnNldHMucHVzaCh0aGlzLnBvc1RvT2Zmc2V0KG9yaWdQb3MpKTtcbiAgfSxcblxuICBwb3BCaW5kaW5nKCkge1xuICAgIHRoaXMuX2JpbmRpbmdzLnBvcCgpO1xuICAgIHRoaXMuX2JpbmRpbmdPZmZzZXRzLnBvcCgpO1xuICB9LFxuXG4gIG51bUJpbmRpbmdzKCkge1xuICAgIHJldHVybiB0aGlzLl9iaW5kaW5ncy5sZW5ndGg7XG4gIH0sXG5cbiAgdHJ1bmNhdGVCaW5kaW5ncyhuZXdMZW5ndGgpIHtcbiAgICAvLyBZZXMsIHRoaXMgaXMgdGhpcyByZWFsbHkgZmFzdGVyIHRoYW4gc2V0dGluZyB0aGUgYGxlbmd0aGAgcHJvcGVydHkgKHRlc3RlZCB3aXRoXG4gICAgLy8gYmluL2VzNWJlbmNoIG9uIE5vZGUgdjYuMS4wKS5cbiAgICAvLyBVcGRhdGUgMjAyMS0xMC0yNTogc3RpbGwgdHJ1ZSBvbiB2MTQuMTUuNSDigJQgaXQncyB+MjAlIHNwZWVkdXAgb24gZXM1YmVuY2guXG4gICAgd2hpbGUgKHRoaXMuX2JpbmRpbmdzLmxlbmd0aCA+IG5ld0xlbmd0aCkge1xuICAgICAgdGhpcy5wb3BCaW5kaW5nKCk7XG4gICAgfVxuICB9LFxuXG4gIGdldEN1cnJlbnRQb3NJbmZvKCkge1xuICAgIHJldHVybiB0aGlzLmdldFBvc0luZm8odGhpcy5pbnB1dFN0cmVhbS5wb3MpO1xuICB9LFxuXG4gIGdldFBvc0luZm8ocG9zKSB7XG4gICAgbGV0IHBvc0luZm8gPSB0aGlzLm1lbW9UYWJsZVtwb3NdO1xuICAgIGlmICghcG9zSW5mbykge1xuICAgICAgcG9zSW5mbyA9IHRoaXMubWVtb1RhYmxlW3Bvc10gPSBuZXcgUG9zSW5mbygpO1xuICAgIH1cbiAgICByZXR1cm4gcG9zSW5mbztcbiAgfSxcblxuICBwcm9jZXNzRmFpbHVyZShwb3MsIGV4cHIpIHtcbiAgICB0aGlzLnJpZ2h0bW9zdEZhaWx1cmVQb3NpdGlvbiA9IE1hdGgubWF4KHRoaXMucmlnaHRtb3N0RmFpbHVyZVBvc2l0aW9uLCBwb3MpO1xuXG4gICAgaWYgKHRoaXMucmVjb3JkZWRGYWlsdXJlcyAmJiBwb3MgPT09IHRoaXMucG9zaXRpb25Ub1JlY29yZEZhaWx1cmVzKSB7XG4gICAgICBjb25zdCBhcHAgPSB0aGlzLmN1cnJlbnRBcHBsaWNhdGlvbigpO1xuICAgICAgaWYgKGFwcCkge1xuICAgICAgICAvLyBTdWJzdGl0dXRlIHBhcmFtZXRlcnMgd2l0aCB0aGUgYWN0dWFsIHBleHBycyB0aGF0IHdlcmUgcGFzc2VkIHRvXG4gICAgICAgIC8vIHRoZSBjdXJyZW50IHJ1bGUuXG4gICAgICAgIGV4cHIgPSBleHByLnN1YnN0aXR1dGVQYXJhbXMoYXBwLmFyZ3MpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnJlY29yZEZhaWx1cmUoZXhwci50b0ZhaWx1cmUodGhpcy5ncmFtbWFyKSwgZmFsc2UpO1xuICAgIH1cbiAgfSxcblxuICByZWNvcmRGYWlsdXJlKGZhaWx1cmUsIHNob3VsZENsb25lSWZOZXcpIHtcbiAgICBjb25zdCBrZXkgPSBmYWlsdXJlLnRvS2V5KCk7XG4gICAgaWYgKCF0aGlzLnJlY29yZGVkRmFpbHVyZXNba2V5XSkge1xuICAgICAgdGhpcy5yZWNvcmRlZEZhaWx1cmVzW2tleV0gPSBzaG91bGRDbG9uZUlmTmV3ID8gZmFpbHVyZS5jbG9uZSgpIDogZmFpbHVyZTtcbiAgICB9IGVsc2UgaWYgKHRoaXMucmVjb3JkZWRGYWlsdXJlc1trZXldLmlzRmx1ZmZ5KCkgJiYgIWZhaWx1cmUuaXNGbHVmZnkoKSkge1xuICAgICAgdGhpcy5yZWNvcmRlZEZhaWx1cmVzW2tleV0uY2xlYXJGbHVmZnkoKTtcbiAgICB9XG4gIH0sXG5cbiAgcmVjb3JkRmFpbHVyZXMoZmFpbHVyZXMsIHNob3VsZENsb25lSWZOZXcpIHtcbiAgICBPYmplY3Qua2V5cyhmYWlsdXJlcykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgdGhpcy5yZWNvcmRGYWlsdXJlKGZhaWx1cmVzW2tleV0sIHNob3VsZENsb25lSWZOZXcpO1xuICAgIH0pO1xuICB9LFxuXG4gIGNsb25lUmVjb3JkZWRGYWlsdXJlcygpIHtcbiAgICBpZiAoIXRoaXMucmVjb3JkZWRGYWlsdXJlcykge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBjb25zdCBhbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIE9iamVjdC5rZXlzKHRoaXMucmVjb3JkZWRGYWlsdXJlcykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgYW5zW2tleV0gPSB0aGlzLnJlY29yZGVkRmFpbHVyZXNba2V5XS5jbG9uZSgpO1xuICAgIH0pO1xuICAgIHJldHVybiBhbnM7XG4gIH0sXG5cbiAgZ2V0UmlnaHRtb3N0RmFpbHVyZVBvc2l0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnJpZ2h0bW9zdEZhaWx1cmVQb3NpdGlvbjtcbiAgfSxcblxuICBfZ2V0UmlnaHRtb3N0RmFpbHVyZU9mZnNldCgpIHtcbiAgICByZXR1cm4gdGhpcy5yaWdodG1vc3RGYWlsdXJlUG9zaXRpb24gPj0gMCA/XG4gICAgICB0aGlzLnBvc1RvT2Zmc2V0KHRoaXMucmlnaHRtb3N0RmFpbHVyZVBvc2l0aW9uKSA6XG4gICAgICAtMTtcbiAgfSxcblxuICAvLyBSZXR1cm5zIHRoZSBtZW1vaXplZCB0cmFjZSBlbnRyeSBmb3IgYGV4cHJgIGF0IGBwb3NgLCBpZiBvbmUgZXhpc3RzLCBgbnVsbGAgb3RoZXJ3aXNlLlxuICBnZXRNZW1vaXplZFRyYWNlRW50cnkocG9zLCBleHByKSB7XG4gICAgY29uc3QgcG9zSW5mbyA9IHRoaXMubWVtb1RhYmxlW3Bvc107XG4gICAgaWYgKHBvc0luZm8gJiYgZXhwciBpbnN0YW5jZW9mIHBleHBycyQ1LkFwcGx5KSB7XG4gICAgICBjb25zdCBtZW1vUmVjID0gcG9zSW5mby5tZW1vW2V4cHIudG9NZW1vS2V5KCldO1xuICAgICAgaWYgKG1lbW9SZWMgJiYgbWVtb1JlYy50cmFjZUVudHJ5KSB7XG4gICAgICAgIGNvbnN0IGVudHJ5ID0gbWVtb1JlYy50cmFjZUVudHJ5LmNsb25lV2l0aEV4cHIoZXhwcik7XG4gICAgICAgIGVudHJ5LmlzTWVtb2l6ZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gZW50cnk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LFxuXG4gIC8vIFJldHVybnMgYSBuZXcgdHJhY2UgZW50cnksIHdpdGggdGhlIGN1cnJlbnRseSBhY3RpdmUgdHJhY2UgYXJyYXkgYXMgaXRzIGNoaWxkcmVuLlxuICBnZXRUcmFjZUVudHJ5KHBvcywgZXhwciwgc3VjY2VlZGVkLCBiaW5kaW5ncykge1xuICAgIGlmIChleHByIGluc3RhbmNlb2YgcGV4cHJzJDUuQXBwbHkpIHtcbiAgICAgIGNvbnN0IGFwcCA9IHRoaXMuY3VycmVudEFwcGxpY2F0aW9uKCk7XG4gICAgICBjb25zdCBhY3R1YWxzID0gYXBwID8gYXBwLmFyZ3MgOiBbXTtcbiAgICAgIGV4cHIgPSBleHByLnN1YnN0aXR1dGVQYXJhbXMoYWN0dWFscyk7XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICB0aGlzLmdldE1lbW9pemVkVHJhY2VFbnRyeShwb3MsIGV4cHIpIHx8XG4gICAgICBuZXcgVHJhY2UodGhpcy5pbnB1dCwgcG9zLCB0aGlzLmlucHV0U3RyZWFtLnBvcywgZXhwciwgc3VjY2VlZGVkLCBiaW5kaW5ncywgdGhpcy50cmFjZSlcbiAgICApO1xuICB9LFxuXG4gIGlzVHJhY2luZygpIHtcbiAgICByZXR1cm4gISF0aGlzLnRyYWNlO1xuICB9LFxuXG4gIGhhc05lY2Vzc2FyeUluZm8obWVtb1JlYykge1xuICAgIGlmICh0aGlzLnRyYWNlICYmICFtZW1vUmVjLnRyYWNlRW50cnkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICB0aGlzLnJlY29yZGVkRmFpbHVyZXMgJiZcbiAgICAgIHRoaXMuaW5wdXRTdHJlYW0ucG9zICsgbWVtb1JlYy5yaWdodG1vc3RGYWlsdXJlT2Zmc2V0ID09PSB0aGlzLnBvc2l0aW9uVG9SZWNvcmRGYWlsdXJlc1xuICAgICkge1xuICAgICAgcmV0dXJuICEhbWVtb1JlYy5mYWlsdXJlc0F0UmlnaHRtb3N0UG9zaXRpb247XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG5cbiAgdXNlTWVtb2l6ZWRSZXN1bHQob3JpZ1BvcywgbWVtb1JlYykge1xuICAgIGlmICh0aGlzLnRyYWNlKSB7XG4gICAgICB0aGlzLnRyYWNlLnB1c2gobWVtb1JlYy50cmFjZUVudHJ5KTtcbiAgICB9XG5cbiAgICBjb25zdCBtZW1vUmVjUmlnaHRtb3N0RmFpbHVyZVBvc2l0aW9uID1cbiAgICAgIHRoaXMuaW5wdXRTdHJlYW0ucG9zICsgbWVtb1JlYy5yaWdodG1vc3RGYWlsdXJlT2Zmc2V0O1xuICAgIHRoaXMucmlnaHRtb3N0RmFpbHVyZVBvc2l0aW9uID0gTWF0aC5tYXgoXG4gICAgICAgIHRoaXMucmlnaHRtb3N0RmFpbHVyZVBvc2l0aW9uLFxuICAgICAgICBtZW1vUmVjUmlnaHRtb3N0RmFpbHVyZVBvc2l0aW9uXG4gICAgKTtcbiAgICBpZiAoXG4gICAgICB0aGlzLnJlY29yZGVkRmFpbHVyZXMgJiZcbiAgICAgIHRoaXMucG9zaXRpb25Ub1JlY29yZEZhaWx1cmVzID09PSBtZW1vUmVjUmlnaHRtb3N0RmFpbHVyZVBvc2l0aW9uICYmXG4gICAgICBtZW1vUmVjLmZhaWx1cmVzQXRSaWdodG1vc3RQb3NpdGlvblxuICAgICkge1xuICAgICAgdGhpcy5yZWNvcmRGYWlsdXJlcyhtZW1vUmVjLmZhaWx1cmVzQXRSaWdodG1vc3RQb3NpdGlvbiwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgdGhpcy5pbnB1dFN0cmVhbS5leGFtaW5lZExlbmd0aCA9IE1hdGgubWF4KFxuICAgICAgICB0aGlzLmlucHV0U3RyZWFtLmV4YW1pbmVkTGVuZ3RoLFxuICAgICAgICBtZW1vUmVjLmV4YW1pbmVkTGVuZ3RoICsgb3JpZ1Bvc1xuICAgICk7XG5cbiAgICBpZiAobWVtb1JlYy52YWx1ZSkge1xuICAgICAgdGhpcy5pbnB1dFN0cmVhbS5wb3MgKz0gbWVtb1JlYy5tYXRjaExlbmd0aDtcbiAgICAgIHRoaXMucHVzaEJpbmRpbmcobWVtb1JlYy52YWx1ZSwgb3JpZ1Bvcyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIC8vIEV2YWx1YXRlIGBleHByYCBhbmQgcmV0dXJuIGB0cnVlYCBpZiBpdCBzdWNjZWVkZWQsIGBmYWxzZWAgb3RoZXJ3aXNlLiBPbiBzdWNjZXNzLCBgYmluZGluZ3NgXG4gIC8vIHdpbGwgaGF2ZSBgZXhwci5nZXRBcml0eSgpYCBtb3JlIGVsZW1lbnRzIHRoYW4gYmVmb3JlLCBhbmQgdGhlIGlucHV0IHN0cmVhbSdzIHBvc2l0aW9uIG1heVxuICAvLyBoYXZlIGluY3JlYXNlZC4gT24gZmFpbHVyZSwgYGJpbmRpbmdzYCBhbmQgcG9zaXRpb24gd2lsbCBiZSB1bmNoYW5nZWQuXG4gIGV2YWwoZXhwcikge1xuICAgIGNvbnN0IHtpbnB1dFN0cmVhbX0gPSB0aGlzO1xuICAgIGNvbnN0IG9yaWdOdW1CaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzLmxlbmd0aDtcblxuICAgIGxldCBvcmlnUmVjb3JkZWRGYWlsdXJlcztcbiAgICBpZiAodGhpcy5yZWNvcmRlZEZhaWx1cmVzKSB7XG4gICAgICBvcmlnUmVjb3JkZWRGYWlsdXJlcyA9IHRoaXMucmVjb3JkZWRGYWlsdXJlcztcbiAgICAgIHRoaXMucmVjb3JkZWRGYWlsdXJlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfVxuXG4gICAgY29uc3Qgb3JpZ1BvcyA9IGlucHV0U3RyZWFtLnBvcztcbiAgICBjb25zdCBtZW1vUG9zID0gdGhpcy5tYXliZVNraXBTcGFjZXNCZWZvcmUoZXhwcik7XG5cbiAgICBsZXQgb3JpZ1RyYWNlO1xuICAgIGlmICh0aGlzLnRyYWNlKSB7XG4gICAgICBvcmlnVHJhY2UgPSB0aGlzLnRyYWNlO1xuICAgICAgdGhpcy50cmFjZSA9IFtdO1xuICAgIH1cblxuICAgIC8vIERvIHRoZSBhY3R1YWwgZXZhbHVhdGlvbi5cbiAgICBjb25zdCBhbnMgPSBleHByLmV2YWwodGhpcyk7XG5cbiAgICBpZiAodGhpcy50cmFjZSkge1xuICAgICAgY29uc3QgYmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncy5zbGljZShvcmlnTnVtQmluZGluZ3MpO1xuICAgICAgY29uc3QgdHJhY2VFbnRyeSA9IHRoaXMuZ2V0VHJhY2VFbnRyeShtZW1vUG9zLCBleHByLCBhbnMsIGJpbmRpbmdzKTtcbiAgICAgIHRyYWNlRW50cnkuaXNJbXBsaWNpdFNwYWNlcyA9IGV4cHIgPT09IGFwcGx5U3BhY2VzO1xuICAgICAgdHJhY2VFbnRyeS5pc1Jvb3ROb2RlID0gZXhwciA9PT0gdGhpcy5zdGFydEV4cHI7XG4gICAgICBvcmlnVHJhY2UucHVzaCh0cmFjZUVudHJ5KTtcbiAgICAgIHRoaXMudHJhY2UgPSBvcmlnVHJhY2U7XG4gICAgfVxuXG4gICAgaWYgKGFucykge1xuICAgICAgaWYgKHRoaXMucmVjb3JkZWRGYWlsdXJlcyAmJiBpbnB1dFN0cmVhbS5wb3MgPT09IHRoaXMucG9zaXRpb25Ub1JlY29yZEZhaWx1cmVzKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMucmVjb3JkZWRGYWlsdXJlcykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgIHRoaXMucmVjb3JkZWRGYWlsdXJlc1trZXldLm1ha2VGbHVmZnkoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlc2V0IHRoZSBwb3NpdGlvbiBhbmQgdGhlIGJpbmRpbmdzLlxuICAgICAgaW5wdXRTdHJlYW0ucG9zID0gb3JpZ1BvcztcbiAgICAgIHRoaXMudHJ1bmNhdGVCaW5kaW5ncyhvcmlnTnVtQmluZGluZ3MpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnJlY29yZGVkRmFpbHVyZXMpIHtcbiAgICAgIHRoaXMucmVjb3JkRmFpbHVyZXMob3JpZ1JlY29yZGVkRmFpbHVyZXMsIGZhbHNlKTtcbiAgICB9XG5cbiAgICAvLyBUaGUgYnVpbHQtaW4gYXBwbHlTeW50YWN0aWMgcnVsZSBuZWVkcyBzcGVjaWFsIGhhbmRsaW5nOiB3ZSB3YW50IHRvIHNraXBcbiAgICAvLyB0cmFpbGluZyBzcGFjZXMsIGp1c3QgYXMgd2l0aCB0aGUgdG9wLWxldmVsIGFwcGxpY2F0aW9uIG9mIGEgc3ludGFjdGljIHJ1bGUuXG4gICAgaWYgKGV4cHIgPT09IGJ1aWx0SW5BcHBseVN5bnRhY3RpY0JvZHkpIHtcbiAgICAgIHRoaXMuc2tpcFNwYWNlcygpO1xuICAgIH1cblxuICAgIHJldHVybiBhbnM7XG4gIH0sXG5cbiAgZ2V0TWF0Y2hSZXN1bHQoKSB7XG4gICAgdGhpcy5ldmFsKHRoaXMuc3RhcnRFeHByKTtcbiAgICBsZXQgcmlnaHRtb3N0RmFpbHVyZXM7XG4gICAgaWYgKHRoaXMucmVjb3JkZWRGYWlsdXJlcykge1xuICAgICAgcmlnaHRtb3N0RmFpbHVyZXMgPSBPYmplY3Qua2V5cyh0aGlzLnJlY29yZGVkRmFpbHVyZXMpLm1hcChcbiAgICAgICAgICBrZXkgPT4gdGhpcy5yZWNvcmRlZEZhaWx1cmVzW2tleV1cbiAgICAgICk7XG4gICAgfVxuICAgIGNvbnN0IGNzdCA9IHRoaXMuX2JpbmRpbmdzWzBdO1xuICAgIGlmIChjc3QpIHtcbiAgICAgIGNzdC5ncmFtbWFyID0gdGhpcy5ncmFtbWFyO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IE1hdGNoUmVzdWx0JDEoXG4gICAgICAgIHRoaXMubWF0Y2hlcixcbiAgICAgICAgdGhpcy5pbnB1dCxcbiAgICAgICAgdGhpcy5zdGFydEV4cHIsXG4gICAgICAgIGNzdCxcbiAgICAgICAgdGhpcy5fYmluZGluZ09mZnNldHNbMF0sXG4gICAgICAgIHRoaXMucmlnaHRtb3N0RmFpbHVyZVBvc2l0aW9uLFxuICAgICAgICByaWdodG1vc3RGYWlsdXJlc1xuICAgICk7XG4gIH0sXG5cbiAgZ2V0VHJhY2UoKSB7XG4gICAgdGhpcy50cmFjZSA9IFtdO1xuICAgIGNvbnN0IG1hdGNoUmVzdWx0ID0gdGhpcy5nZXRNYXRjaFJlc3VsdCgpO1xuXG4gICAgLy8gVGhlIHRyYWNlIG5vZGUgZm9yIHRoZSBzdGFydCBydWxlIGlzIGFsd2F5cyB0aGUgbGFzdCBlbnRyeS4gSWYgaXQgaXMgYSBzeW50YWN0aWMgcnVsZSxcbiAgICAvLyB0aGUgZmlyc3QgZW50cnkgaXMgZm9yIGFuIGFwcGxpY2F0aW9uIG9mICdzcGFjZXMnLlxuICAgIC8vIFRPRE8ocGR1YnJveSk6IENsZWFuIHRoaXMgdXAgYnkgaW50cm9kdWNpbmcgYSBzcGVjaWFsIGBNYXRjaDxzdGFydEFwcGw+YCBydWxlLCB3aGljaCB3aWxsXG4gICAgLy8gZW5zdXJlIHRoYXQgdGhlcmUgaXMgYWx3YXlzIGEgc2luZ2xlIHJvb3QgdHJhY2Ugbm9kZS5cbiAgICBjb25zdCByb290VHJhY2UgPSB0aGlzLnRyYWNlW3RoaXMudHJhY2UubGVuZ3RoIC0gMV07XG4gICAgcm9vdFRyYWNlLnJlc3VsdCA9IG1hdGNoUmVzdWx0O1xuICAgIHJldHVybiByb290VHJhY2U7XG4gIH0sXG5cbiAgcHVzaEZhaWx1cmVzSW5mbygpIHtcbiAgICB0aGlzLl9yaWdodG1vc3RGYWlsdXJlUG9zaXRpb25TdGFjay5wdXNoKHRoaXMucmlnaHRtb3N0RmFpbHVyZVBvc2l0aW9uKTtcbiAgICB0aGlzLl9yZWNvcmRlZEZhaWx1cmVzU3RhY2sucHVzaCh0aGlzLnJlY29yZGVkRmFpbHVyZXMpO1xuICB9LFxuXG4gIHBvcEZhaWx1cmVzSW5mbygpIHtcbiAgICB0aGlzLnJpZ2h0bW9zdEZhaWx1cmVQb3NpdGlvbiA9IHRoaXMuX3JpZ2h0bW9zdEZhaWx1cmVQb3NpdGlvblN0YWNrLnBvcCgpO1xuICAgIHRoaXMucmVjb3JkZWRGYWlsdXJlcyA9IHRoaXMuX3JlY29yZGVkRmFpbHVyZXNTdGFjay5wb3AoKTtcbiAgfSxcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBFeHBvcnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgTWF0Y2hTdGF0ZV8xID0gTWF0Y2hTdGF0ZSQxO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSW1wb3J0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuY29uc3QgTWF0Y2hTdGF0ZSA9IE1hdGNoU3RhdGVfMTtcblxuY29uc3QgcGV4cHJzJDQgPSBwZXhwcnMkNjtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFByaXZhdGUgc3R1ZmZcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmZ1bmN0aW9uIE1hdGNoZXIkMShncmFtbWFyKSB7XG4gIHRoaXMuZ3JhbW1hciA9IGdyYW1tYXI7XG4gIHRoaXMubWVtb1RhYmxlID0gW107XG4gIHRoaXMuaW5wdXQgPSAnJztcbn1cblxuTWF0Y2hlciQxLnByb3RvdHlwZS5nZXRJbnB1dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5pbnB1dDtcbn07XG5cbk1hdGNoZXIkMS5wcm90b3R5cGUuc2V0SW5wdXQgPSBmdW5jdGlvbihzdHIpIHtcbiAgaWYgKHRoaXMuaW5wdXQgIT09IHN0cikge1xuICAgIHRoaXMucmVwbGFjZUlucHV0UmFuZ2UoMCwgdGhpcy5pbnB1dC5sZW5ndGgsIHN0cik7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5NYXRjaGVyJDEucHJvdG90eXBlLnJlcGxhY2VJbnB1dFJhbmdlID0gZnVuY3Rpb24oc3RhcnRJZHgsIGVuZElkeCwgc3RyKSB7XG4gIGNvbnN0IGN1cnJlbnRJbnB1dCA9IHRoaXMuaW5wdXQ7XG4gIGlmIChcbiAgICBzdGFydElkeCA8IDAgfHxcbiAgICBzdGFydElkeCA+IGN1cnJlbnRJbnB1dC5sZW5ndGggfHxcbiAgICBlbmRJZHggPCAwIHx8XG4gICAgZW5kSWR4ID4gY3VycmVudElucHV0Lmxlbmd0aCB8fFxuICAgIHN0YXJ0SWR4ID4gZW5kSWR4XG4gICkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBpbmRpY2VzOiAnICsgc3RhcnRJZHggKyAnIGFuZCAnICsgZW5kSWR4KTtcbiAgfVxuXG4gIC8vIHVwZGF0ZSBpbnB1dFxuICB0aGlzLmlucHV0ID0gY3VycmVudElucHV0LnNsaWNlKDAsIHN0YXJ0SWR4KSArIHN0ciArIGN1cnJlbnRJbnB1dC5zbGljZShlbmRJZHgpO1xuXG4gIC8vIHVwZGF0ZSBtZW1vIHRhYmxlIChzaW1pbGFyIHRvIHRoZSBhYm92ZSlcbiAgY29uc3QgcmVzdE9mTWVtb1RhYmxlID0gdGhpcy5tZW1vVGFibGUuc2xpY2UoZW5kSWR4KTtcbiAgdGhpcy5tZW1vVGFibGUubGVuZ3RoID0gc3RhcnRJZHg7XG4gIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IHN0ci5sZW5ndGg7IGlkeCsrKSB7XG4gICAgdGhpcy5tZW1vVGFibGUucHVzaCh1bmRlZmluZWQpO1xuICB9XG4gIHJlc3RPZk1lbW9UYWJsZS5mb3JFYWNoKGZ1bmN0aW9uKHBvc0luZm8pIHtcbiAgICB0aGlzLm1lbW9UYWJsZS5wdXNoKHBvc0luZm8pO1xuICB9LCB0aGlzKTtcblxuICAvLyBJbnZhbGlkYXRlIG1lbW9SZWNzXG4gIGZvciAobGV0IHBvcyA9IDA7IHBvcyA8IHN0YXJ0SWR4OyBwb3MrKykge1xuICAgIGNvbnN0IHBvc0luZm8gPSB0aGlzLm1lbW9UYWJsZVtwb3NdO1xuICAgIGlmIChwb3NJbmZvKSB7XG4gICAgICBwb3NJbmZvLmNsZWFyT2Jzb2xldGVFbnRyaWVzKHBvcywgc3RhcnRJZHgpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuTWF0Y2hlciQxLnByb3RvdHlwZS5tYXRjaCA9IGZ1bmN0aW9uKG9wdFN0YXJ0QXBwbGljYXRpb25TdHIpIHtcbiAgcmV0dXJuIHRoaXMuX21hdGNoKHRoaXMuX2dldFN0YXJ0RXhwcihvcHRTdGFydEFwcGxpY2F0aW9uU3RyKSwgZmFsc2UpO1xufTtcblxuTWF0Y2hlciQxLnByb3RvdHlwZS50cmFjZSA9IGZ1bmN0aW9uKG9wdFN0YXJ0QXBwbGljYXRpb25TdHIpIHtcbiAgcmV0dXJuIHRoaXMuX21hdGNoKHRoaXMuX2dldFN0YXJ0RXhwcihvcHRTdGFydEFwcGxpY2F0aW9uU3RyKSwgdHJ1ZSk7XG59O1xuXG5NYXRjaGVyJDEucHJvdG90eXBlLl9tYXRjaCA9IGZ1bmN0aW9uKHN0YXJ0RXhwciwgdHJhY2luZywgb3B0UG9zaXRpb25Ub1JlY29yZEZhaWx1cmVzKSB7XG4gIGNvbnN0IHN0YXRlID0gbmV3IE1hdGNoU3RhdGUodGhpcywgc3RhcnRFeHByLCBvcHRQb3NpdGlvblRvUmVjb3JkRmFpbHVyZXMpO1xuICByZXR1cm4gdHJhY2luZyA/IHN0YXRlLmdldFRyYWNlKCkgOiBzdGF0ZS5nZXRNYXRjaFJlc3VsdCgpO1xufTtcblxuLypcbiAgUmV0dXJucyB0aGUgc3RhcnRpbmcgZXhwcmVzc2lvbiBmb3IgdGhpcyBNYXRjaGVyJ3MgYXNzb2NpYXRlZCBncmFtbWFyLiBJZiBgb3B0U3RhcnRBcHBsaWNhdGlvblN0cmBcbiAgaXMgc3BlY2lmaWVkLCBpdCBpcyBhIHN0cmluZyBleHByZXNzaW5nIGEgcnVsZSBhcHBsaWNhdGlvbiBpbiB0aGUgZ3JhbW1hci4gSWYgbm90IHNwZWNpZmllZCwgdGhlXG4gIGdyYW1tYXIncyBkZWZhdWx0IHN0YXJ0IHJ1bGUgd2lsbCBiZSB1c2VkLlxuKi9cbk1hdGNoZXIkMS5wcm90b3R5cGUuX2dldFN0YXJ0RXhwciA9IGZ1bmN0aW9uKG9wdFN0YXJ0QXBwbGljYXRpb25TdHIpIHtcbiAgY29uc3QgYXBwbGljYXRpb25TdHIgPSBvcHRTdGFydEFwcGxpY2F0aW9uU3RyIHx8IHRoaXMuZ3JhbW1hci5kZWZhdWx0U3RhcnRSdWxlO1xuICBpZiAoIWFwcGxpY2F0aW9uU3RyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIHN0YXJ0IHJ1bGUgYXJndW1lbnQgLS0gdGhlIGdyYW1tYXIgaGFzIG5vIGRlZmF1bHQgc3RhcnQgcnVsZS4nKTtcbiAgfVxuXG4gIGNvbnN0IHN0YXJ0QXBwID0gdGhpcy5ncmFtbWFyLnBhcnNlQXBwbGljYXRpb24oYXBwbGljYXRpb25TdHIpO1xuICByZXR1cm4gbmV3IHBleHBycyQ0LlNlcShbc3RhcnRBcHAsIHBleHBycyQ0LmVuZF0pO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEV4cG9ydHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBNYXRjaGVyXzEgPSBNYXRjaGVyJDE7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBJbXBvcnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jb25zdCBJbnB1dFN0cmVhbSQxID0gSW5wdXRTdHJlYW1fMTtcbmNvbnN0IHtJdGVyYXRpb25Ob2RlfSA9IG5vZGVzJDE7XG5jb25zdCBNYXRjaFJlc3VsdCA9IE1hdGNoUmVzdWx0XzE7XG5jb25zdCBjb21tb24kMyA9IGNvbW1vbiRsO1xuY29uc3QgZXJyb3JzJDMgPSBlcnJvcnMkOTtcbmNvbnN0IHV0aWwkMiA9IHV0aWwkNztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFByaXZhdGUgc3R1ZmZcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IGdsb2JhbEFjdGlvblN0YWNrID0gW107XG5cbmNvbnN0IGhhc093blByb3BlcnR5ID0gKHgsIHByb3ApID0+IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh4LCBwcm9wKTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0gV3JhcHBlcnMgLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gV3JhcHBlcnMgZGVjb3JhdGUgQ1NUIG5vZGVzIHdpdGggYWxsIG9mIHRoZSBmdW5jdGlvbmFsaXR5IChpLmUuLCBvcGVyYXRpb25zIGFuZCBhdHRyaWJ1dGVzKVxuLy8gcHJvdmlkZWQgYnkgYSBTZW1hbnRpY3MgKHNlZSBiZWxvdykuIGBXcmFwcGVyYCBpcyB0aGUgYWJzdHJhY3Qgc3VwZXJjbGFzcyBvZiBhbGwgd3JhcHBlcnMuIEFcbi8vIGBXcmFwcGVyYCBtdXN0IGhhdmUgYF9ub2RlYCBhbmQgYF9zZW1hbnRpY3NgIGluc3RhbmNlIHZhcmlhYmxlcywgd2hpY2ggcmVmZXIgdG8gdGhlIENTVCBub2RlIGFuZFxuLy8gU2VtYW50aWNzIChyZXNwLikgZm9yIHdoaWNoIGl0IHdhcyBjcmVhdGVkLCBhbmQgYSBgX2NoaWxkV3JhcHBlcnNgIGluc3RhbmNlIHZhcmlhYmxlIHdoaWNoIGlzXG4vLyB1c2VkIHRvIGNhY2hlIHRoZSB3cmFwcGVyIGluc3RhbmNlcyB0aGF0IGFyZSBjcmVhdGVkIGZvciBpdHMgY2hpbGQgbm9kZXMuIFNldHRpbmcgdGhlc2UgaW5zdGFuY2Vcbi8vIHZhcmlhYmxlcyBpcyB0aGUgcmVzcG9uc2liaWxpdHkgb2YgdGhlIGNvbnN0cnVjdG9yIG9mIGVhY2ggU2VtYW50aWNzLXNwZWNpZmljIHN1YmNsYXNzIG9mXG4vLyBgV3JhcHBlcmAuXG5jbGFzcyBXcmFwcGVyIHtcbiAgY29uc3RydWN0b3Iobm9kZSwgc291cmNlSW50ZXJ2YWwsIGJhc2VJbnRlcnZhbCkge1xuICAgIHRoaXMuX25vZGUgPSBub2RlO1xuICAgIHRoaXMuc291cmNlID0gc291cmNlSW50ZXJ2YWw7XG5cbiAgICAvLyBUaGUgaW50ZXJ2YWwgdGhhdCB0aGUgY2hpbGRPZmZzZXRzIG9mIGBub2RlYCBhcmUgcmVsYXRpdmUgdG8uIEl0IHNob3VsZCBiZSB0aGUgc291cmNlXG4gICAgLy8gb2YgdGhlIGNsb3Nlc3QgTm9udGVybWluYWwgbm9kZS5cbiAgICB0aGlzLl9iYXNlSW50ZXJ2YWwgPSBiYXNlSW50ZXJ2YWw7XG5cbiAgICBpZiAobm9kZS5pc05vbnRlcm1pbmFsKCkpIHtcbiAgICAgIGNvbW1vbiQzLmFzc2VydChzb3VyY2VJbnRlcnZhbCA9PT0gYmFzZUludGVydmFsKTtcbiAgICB9XG4gICAgdGhpcy5fY2hpbGRXcmFwcGVycyA9IFtdO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICdbc2VtYW50aWNzIHdyYXBwZXIgZm9yICcgKyB0aGlzLl9ub2RlLmdyYW1tYXIubmFtZSArICddJztcbiAgfVxuXG4gIF9mb3JnZXRNZW1vaXplZFJlc3VsdEZvcihhdHRyaWJ1dGVOYW1lKSB7XG4gICAgLy8gUmVtb3ZlIHRoZSBtZW1vaXplZCBhdHRyaWJ1dGUgZnJvbSB0aGUgY3N0Tm9kZSBhbmQgYWxsIGl0cyBjaGlsZHJlbi5cbiAgICBkZWxldGUgdGhpcy5fbm9kZVt0aGlzLl9zZW1hbnRpY3MuYXR0cmlidXRlS2V5c1thdHRyaWJ1dGVOYW1lXV07XG4gICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgIGNoaWxkLl9mb3JnZXRNZW1vaXplZFJlc3VsdEZvcihhdHRyaWJ1dGVOYW1lKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIFJldHVybnMgdGhlIHdyYXBwZXIgb2YgdGhlIHNwZWNpZmllZCBjaGlsZCBub2RlLiBDaGlsZCB3cmFwcGVycyBhcmUgY3JlYXRlZCBsYXppbHkgYW5kXG4gIC8vIGNhY2hlZCBpbiB0aGUgcGFyZW50IHdyYXBwZXIncyBgX2NoaWxkV3JhcHBlcnNgIGluc3RhbmNlIHZhcmlhYmxlLlxuICBjaGlsZChpZHgpIHtcbiAgICBpZiAoISgwIDw9IGlkeCAmJiBpZHggPCB0aGlzLl9ub2RlLm51bUNoaWxkcmVuKCkpKSB7XG4gICAgICAvLyBUT0RPOiBDb25zaWRlciB0aHJvd2luZyBhbiBleGNlcHRpb24gaGVyZS5cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGxldCBjaGlsZFdyYXBwZXIgPSB0aGlzLl9jaGlsZFdyYXBwZXJzW2lkeF07XG4gICAgaWYgKCFjaGlsZFdyYXBwZXIpIHtcbiAgICAgIGNvbnN0IGNoaWxkTm9kZSA9IHRoaXMuX25vZGUuY2hpbGRBdChpZHgpO1xuICAgICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy5fbm9kZS5jaGlsZE9mZnNldHNbaWR4XTtcblxuICAgICAgY29uc3Qgc291cmNlID0gdGhpcy5fYmFzZUludGVydmFsLnN1YkludGVydmFsKG9mZnNldCwgY2hpbGROb2RlLm1hdGNoTGVuZ3RoKTtcbiAgICAgIGNvbnN0IGJhc2UgPSBjaGlsZE5vZGUuaXNOb250ZXJtaW5hbCgpID8gc291cmNlIDogdGhpcy5fYmFzZUludGVydmFsO1xuICAgICAgY2hpbGRXcmFwcGVyID0gdGhpcy5fY2hpbGRXcmFwcGVyc1tpZHhdID0gdGhpcy5fc2VtYW50aWNzLndyYXAoY2hpbGROb2RlLCBzb3VyY2UsIGJhc2UpO1xuICAgIH1cbiAgICByZXR1cm4gY2hpbGRXcmFwcGVyO1xuICB9XG5cbiAgLy8gUmV0dXJucyBhbiBhcnJheSBjb250YWluaW5nIHRoZSB3cmFwcGVycyBvZiBhbGwgb2YgdGhlIGNoaWxkcmVuIG9mIHRoZSBub2RlIGFzc29jaWF0ZWRcbiAgLy8gd2l0aCB0aGlzIHdyYXBwZXIuXG4gIF9jaGlsZHJlbigpIHtcbiAgICAvLyBGb3JjZSB0aGUgY3JlYXRpb24gb2YgYWxsIGNoaWxkIHdyYXBwZXJzXG4gICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgdGhpcy5fbm9kZS5udW1DaGlsZHJlbigpOyBpZHgrKykge1xuICAgICAgdGhpcy5jaGlsZChpZHgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fY2hpbGRXcmFwcGVycztcbiAgfVxuXG4gIC8vIFJldHVybnMgYHRydWVgIGlmIHRoZSBDU1Qgbm9kZSBhc3NvY2lhdGVkIHdpdGggdGhpcyB3cmFwcGVyIGNvcnJlc3BvbmRzIHRvIGFuIGl0ZXJhdGlvblxuICAvLyBleHByZXNzaW9uLCBpLmUuLCBhIEtsZWVuZS0qLCBLbGVlbmUtKywgb3IgYW4gb3B0aW9uYWwuIFJldHVybnMgYGZhbHNlYCBvdGhlcndpc2UuXG4gIGlzSXRlcmF0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9ub2RlLmlzSXRlcmF0aW9uKCk7XG4gIH1cblxuICAvLyBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgQ1NUIG5vZGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMgd3JhcHBlciBpcyBhIHRlcm1pbmFsIG5vZGUsIGBmYWxzZWBcbiAgLy8gb3RoZXJ3aXNlLlxuICBpc1Rlcm1pbmFsKCkge1xuICAgIHJldHVybiB0aGlzLl9ub2RlLmlzVGVybWluYWwoKTtcbiAgfVxuXG4gIC8vIFJldHVybnMgYHRydWVgIGlmIHRoZSBDU1Qgbm9kZSBhc3NvY2lhdGVkIHdpdGggdGhpcyB3cmFwcGVyIGlzIGEgbm9udGVybWluYWwgbm9kZSwgYGZhbHNlYFxuICAvLyBvdGhlcndpc2UuXG4gIGlzTm9udGVybWluYWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuX25vZGUuaXNOb250ZXJtaW5hbCgpO1xuICB9XG5cbiAgLy8gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIENTVCBub2RlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHdyYXBwZXIgaXMgYSBub250ZXJtaW5hbCBub2RlXG4gIC8vIGNvcnJlc3BvbmRpbmcgdG8gYSBzeW50YWN0aWMgcnVsZSwgYGZhbHNlYCBvdGhlcndpc2UuXG4gIGlzU3ludGFjdGljKCkge1xuICAgIHJldHVybiB0aGlzLmlzTm9udGVybWluYWwoKSAmJiB0aGlzLl9ub2RlLmlzU3ludGFjdGljKCk7XG4gIH1cblxuICAvLyBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgQ1NUIG5vZGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMgd3JhcHBlciBpcyBhIG5vbnRlcm1pbmFsIG5vZGVcbiAgLy8gY29ycmVzcG9uZGluZyB0byBhIGxleGljYWwgcnVsZSwgYGZhbHNlYCBvdGhlcndpc2UuXG4gIGlzTGV4aWNhbCgpIHtcbiAgICByZXR1cm4gdGhpcy5pc05vbnRlcm1pbmFsKCkgJiYgdGhpcy5fbm9kZS5pc0xleGljYWwoKTtcbiAgfVxuXG4gIC8vIFJldHVybnMgYHRydWVgIGlmIHRoZSBDU1Qgbm9kZSBhc3NvY2lhdGVkIHdpdGggdGhpcyB3cmFwcGVyIGlzIGFuIGl0ZXJhdG9yIG5vZGVcbiAgLy8gaGF2aW5nIGVpdGhlciBvbmUgb3Igbm8gY2hpbGQgKD8gb3BlcmF0b3IpLCBgZmFsc2VgIG90aGVyd2lzZS5cbiAgLy8gT3RoZXJ3aXNlLCB0aHJvd3MgYW4gZXhjZXB0aW9uLlxuICBpc09wdGlvbmFsKCkge1xuICAgIHJldHVybiB0aGlzLl9ub2RlLmlzT3B0aW9uYWwoKTtcbiAgfVxuXG4gIC8vIENyZWF0ZSBhIG5ldyBfaXRlciB3cmFwcGVyIGluIHRoZSBzYW1lIHNlbWFudGljcyBhcyB0aGlzIHdyYXBwZXIuXG4gIGl0ZXJhdGlvbihvcHRDaGlsZFdyYXBwZXJzKSB7XG4gICAgY29uc3QgY2hpbGRXcmFwcGVycyA9IG9wdENoaWxkV3JhcHBlcnMgfHwgW107XG5cbiAgICBjb25zdCBjaGlsZE5vZGVzID0gY2hpbGRXcmFwcGVycy5tYXAoYyA9PiBjLl9ub2RlKTtcbiAgICBjb25zdCBpdGVyID0gbmV3IEl0ZXJhdGlvbk5vZGUoY2hpbGROb2RlcywgW10sIC0xLCBmYWxzZSk7XG5cbiAgICBjb25zdCB3cmFwcGVyID0gdGhpcy5fc2VtYW50aWNzLndyYXAoaXRlciwgbnVsbCwgbnVsbCk7XG4gICAgd3JhcHBlci5fY2hpbGRXcmFwcGVycyA9IGNoaWxkV3JhcHBlcnM7XG4gICAgcmV0dXJuIHdyYXBwZXI7XG4gIH1cblxuICAvLyBSZXR1cm5zIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIGNoaWxkcmVuIG9mIHRoaXMgQ1NUIG5vZGUuXG4gIGdldCBjaGlsZHJlbigpIHtcbiAgICByZXR1cm4gdGhpcy5fY2hpbGRyZW4oKTtcbiAgfVxuXG4gIC8vIFJldHVybnMgdGhlIG5hbWUgb2YgZ3JhbW1hciBydWxlIHRoYXQgY3JlYXRlZCB0aGlzIENTVCBub2RlLlxuICBnZXQgY3Rvck5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX25vZGUuY3Rvck5hbWU7XG4gIH1cblxuICAvLyBUT0RPOiBSZW1vdmUgdGhpcyBldmVudHVhbGx5IChkZXByZWNhdGVkIGluIHYwLjEyKS5cbiAgZ2V0IGludGVydmFsKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignVGhlIGBpbnRlcnZhbGAgcHJvcGVydHkgaXMgZGVwcmVjYXRlZCAtLSB1c2UgYHNvdXJjZWAgaW5zdGVhZCcpO1xuICB9XG5cbiAgLy8gUmV0dXJucyB0aGUgbnVtYmVyIG9mIGNoaWxkcmVuIG9mIHRoaXMgQ1NUIG5vZGUuXG4gIGdldCBudW1DaGlsZHJlbigpIHtcbiAgICByZXR1cm4gdGhpcy5fbm9kZS5udW1DaGlsZHJlbigpO1xuICB9XG5cbiAgLy8gUmV0dXJucyB0aGUgY29udGVudHMgb2YgdGhlIGlucHV0IHN0cmVhbSBjb25zdW1lZCBieSB0aGlzIENTVCBub2RlLlxuICBnZXQgc291cmNlU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLnNvdXJjZS5jb250ZW50cztcbiAgfVxufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLSBTZW1hbnRpY3MgLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gQSBTZW1hbnRpY3MgaXMgYSBjb250YWluZXIgZm9yIGEgZmFtaWx5IG9mIE9wZXJhdGlvbnMgYW5kIEF0dHJpYnV0ZXMgZm9yIGEgZ2l2ZW4gZ3JhbW1hci5cbi8vIFNlbWFudGljcyBlbmFibGUgbW9kdWxhcml0eSAoZGlmZmVyZW50IGNsaWVudHMgb2YgYSBncmFtbWFyIGNhbiBjcmVhdGUgdGhlaXIgc2V0IG9mIG9wZXJhdGlvbnNcbi8vIGFuZCBhdHRyaWJ1dGVzIGluIGlzb2xhdGlvbikgYW5kIGV4dGVuc2liaWxpdHkgZXZlbiB3aGVuIG9wZXJhdGlvbnMgYW5kIGF0dHJpYnV0ZXMgYXJlIG11dHVhbGx5LVxuLy8gcmVjdXJzaXZlLiBUaGlzIGNvbnN0cnVjdG9yIHNob3VsZCBub3QgYmUgY2FsbGVkIGRpcmVjdGx5IGV4Y2VwdCBmcm9tXG4vLyBgU2VtYW50aWNzLmNyZWF0ZVNlbWFudGljc2AuIFRoZSBub3JtYWwgd2F5cyB0byBjcmVhdGUgYSBTZW1hbnRpY3MsIGdpdmVuIGEgZ3JhbW1hciAnZycsIGFyZVxuLy8gYGcuY3JlYXRlU2VtYW50aWNzKClgIGFuZCBgZy5leHRlbmRTZW1hbnRpY3MocGFyZW50U2VtYW50aWNzKWAuXG5mdW5jdGlvbiBTZW1hbnRpY3MkMihncmFtbWFyLCBzdXBlclNlbWFudGljcykge1xuICBjb25zdCBzZWxmID0gdGhpcztcbiAgdGhpcy5ncmFtbWFyID0gZ3JhbW1hcjtcbiAgdGhpcy5jaGVja2VkQWN0aW9uRGljdHMgPSBmYWxzZTtcblxuICAvLyBDb25zdHJ1Y3RvciBmb3Igd3JhcHBlciBpbnN0YW5jZXMsIHdoaWNoIGFyZSBwYXNzZWQgYXMgdGhlIGFyZ3VtZW50cyB0byB0aGUgc2VtYW50aWMgYWN0aW9uc1xuICAvLyBvZiBhbiBvcGVyYXRpb24gb3IgYXR0cmlidXRlLiBPcGVyYXRpb25zIGFuZCBhdHRyaWJ1dGVzIHJlcXVpcmUgZG91YmxlIGRpc3BhdGNoOiB0aGUgc2VtYW50aWNcbiAgLy8gYWN0aW9uIGlzIGNob3NlbiBiYXNlZCBvbiBib3RoIHRoZSBub2RlJ3MgdHlwZSBhbmQgdGhlIHNlbWFudGljcy4gV3JhcHBlcnMgZW5zdXJlIHRoYXRcbiAgLy8gdGhlIGBleGVjdXRlYCBtZXRob2QgaXMgY2FsbGVkIHdpdGggdGhlIGNvcnJlY3QgKG1vc3Qgc3BlY2lmaWMpIHNlbWFudGljcyBvYmplY3QgYXMgYW5cbiAgLy8gYXJndW1lbnQuXG4gIHRoaXMuV3JhcHBlciA9IGNsYXNzIGV4dGVuZHMgKHN1cGVyU2VtYW50aWNzID8gc3VwZXJTZW1hbnRpY3MuV3JhcHBlciA6IFdyYXBwZXIpIHtcbiAgICBjb25zdHJ1Y3Rvcihub2RlLCBzb3VyY2VJbnRlcnZhbCwgYmFzZUludGVydmFsKSB7XG4gICAgICBzdXBlcihub2RlLCBzb3VyY2VJbnRlcnZhbCwgYmFzZUludGVydmFsKTtcbiAgICAgIHNlbGYuY2hlY2tBY3Rpb25EaWN0c0lmSGF2ZW50QWxyZWFkeSgpO1xuICAgICAgdGhpcy5fc2VtYW50aWNzID0gc2VsZjtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5zdXBlciA9IHN1cGVyU2VtYW50aWNzO1xuICBpZiAoc3VwZXJTZW1hbnRpY3MpIHtcbiAgICBpZiAoIShncmFtbWFyLmVxdWFscyh0aGlzLnN1cGVyLmdyYW1tYXIpIHx8IGdyYW1tYXIuX2luaGVyaXRzRnJvbSh0aGlzLnN1cGVyLmdyYW1tYXIpKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIFwiQ2Fubm90IGV4dGVuZCBhIHNlbWFudGljcyBmb3IgZ3JhbW1hciAnXCIgK1xuICAgICAgICAgIHRoaXMuc3VwZXIuZ3JhbW1hci5uYW1lICtcbiAgICAgICAgICBcIicgZm9yIHVzZSB3aXRoIGdyYW1tYXIgJ1wiICtcbiAgICAgICAgICBncmFtbWFyLm5hbWUgK1xuICAgICAgICAgIFwiJyAobm90IGEgc3ViLWdyYW1tYXIpXCJcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMub3BlcmF0aW9ucyA9IE9iamVjdC5jcmVhdGUodGhpcy5zdXBlci5vcGVyYXRpb25zKTtcbiAgICB0aGlzLmF0dHJpYnV0ZXMgPSBPYmplY3QuY3JlYXRlKHRoaXMuc3VwZXIuYXR0cmlidXRlcyk7XG4gICAgdGhpcy5hdHRyaWJ1dGVLZXlzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgIC8vIEFzc2lnbiB1bmlxdWUgc3ltYm9scyBmb3IgZWFjaCBvZiB0aGUgYXR0cmlidXRlcyBpbmhlcml0ZWQgZnJvbSB0aGUgc3VwZXItc2VtYW50aWNzIHNvIHRoYXRcbiAgICAvLyB0aGV5IGFyZSBtZW1vaXplZCBpbmRlcGVuZGVudGx5LlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW5cbiAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZU5hbWUgaW4gdGhpcy5hdHRyaWJ1dGVzKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5hdHRyaWJ1dGVLZXlzLCBhdHRyaWJ1dGVOYW1lLCB7XG4gICAgICAgIHZhbHVlOiB1dGlsJDIudW5pcXVlSWQoYXR0cmlidXRlTmFtZSksXG4gICAgICB9KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5vcGVyYXRpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLmF0dHJpYnV0ZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuYXR0cmlidXRlS2V5cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIH1cbn1cblxuU2VtYW50aWNzJDIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAnW3NlbWFudGljcyBmb3IgJyArIHRoaXMuZ3JhbW1hci5uYW1lICsgJ10nO1xufTtcblxuU2VtYW50aWNzJDIucHJvdG90eXBlLmNoZWNrQWN0aW9uRGljdHNJZkhhdmVudEFscmVhZHkgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCF0aGlzLmNoZWNrZWRBY3Rpb25EaWN0cykge1xuICAgIHRoaXMuY2hlY2tBY3Rpb25EaWN0cygpO1xuICAgIHRoaXMuY2hlY2tlZEFjdGlvbkRpY3RzID0gdHJ1ZTtcbiAgfVxufTtcblxuLy8gQ2hlY2tzIHRoYXQgdGhlIGFjdGlvbiBkaWN0aW9uYXJpZXMgZm9yIGFsbCBvcGVyYXRpb25zIGFuZCBhdHRyaWJ1dGVzIGluIHRoaXMgc2VtYW50aWNzLFxuLy8gaW5jbHVkaW5nIHRoZSBvbmVzIHRoYXQgd2VyZSBpbmhlcml0ZWQgZnJvbSB0aGUgc3VwZXItc2VtYW50aWNzLCBhZ3JlZSB3aXRoIHRoZSBncmFtbWFyLlxuLy8gVGhyb3dzIGFuIGV4Y2VwdGlvbiBpZiBvbmUgb3IgbW9yZSBvZiB0aGVtIGRvZXNuJ3QuXG5TZW1hbnRpY3MkMi5wcm90b3R5cGUuY2hlY2tBY3Rpb25EaWN0cyA9IGZ1bmN0aW9uKCkge1xuICBsZXQgbmFtZTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGd1YXJkLWZvci1pblxuICBmb3IgKG5hbWUgaW4gdGhpcy5vcGVyYXRpb25zKSB7XG4gICAgdGhpcy5vcGVyYXRpb25zW25hbWVdLmNoZWNrQWN0aW9uRGljdCh0aGlzLmdyYW1tYXIpO1xuICB9XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW5cbiAgZm9yIChuYW1lIGluIHRoaXMuYXR0cmlidXRlcykge1xuICAgIHRoaXMuYXR0cmlidXRlc1tuYW1lXS5jaGVja0FjdGlvbkRpY3QodGhpcy5ncmFtbWFyKTtcbiAgfVxufTtcblxuU2VtYW50aWNzJDIucHJvdG90eXBlLnRvUmVjaXBlID0gZnVuY3Rpb24oc2VtYW50aWNzT25seSkge1xuICBmdW5jdGlvbiBoYXNTdXBlclNlbWFudGljcyhzKSB7XG4gICAgcmV0dXJuIHMuc3VwZXIgIT09IFNlbWFudGljcyQyLkJ1aWx0SW5TZW1hbnRpY3MuX2dldFNlbWFudGljcygpO1xuICB9XG5cbiAgbGV0IHN0ciA9ICcoZnVuY3Rpb24oZykge1xcbic7XG4gIGlmIChoYXNTdXBlclNlbWFudGljcyh0aGlzKSkge1xuICAgIHN0ciArPSAnICB2YXIgc2VtYW50aWNzID0gJyArIHRoaXMuc3VwZXIudG9SZWNpcGUodHJ1ZSkgKyAnKGcnO1xuXG4gICAgY29uc3Qgc3VwZXJTZW1hbnRpY3NHcmFtbWFyID0gdGhpcy5zdXBlci5ncmFtbWFyO1xuICAgIGxldCByZWxhdGVkR3JhbW1hciA9IHRoaXMuZ3JhbW1hcjtcbiAgICB3aGlsZSAocmVsYXRlZEdyYW1tYXIgIT09IHN1cGVyU2VtYW50aWNzR3JhbW1hcikge1xuICAgICAgc3RyICs9ICcuc3VwZXJHcmFtbWFyJztcbiAgICAgIHJlbGF0ZWRHcmFtbWFyID0gcmVsYXRlZEdyYW1tYXIuc3VwZXJHcmFtbWFyO1xuICAgIH1cblxuICAgIHN0ciArPSAnKTtcXG4nO1xuICAgIHN0ciArPSAnICByZXR1cm4gZy5leHRlbmRTZW1hbnRpY3Moc2VtYW50aWNzKSc7XG4gIH0gZWxzZSB7XG4gICAgc3RyICs9ICcgIHJldHVybiBnLmNyZWF0ZVNlbWFudGljcygpJztcbiAgfVxuICBbJ09wZXJhdGlvbicsICdBdHRyaWJ1dGUnXS5mb3JFYWNoKHR5cGUgPT4ge1xuICAgIGNvbnN0IHNlbWFudGljT3BlcmF0aW9ucyA9IHRoaXNbdHlwZS50b0xvd2VyQ2FzZSgpICsgJ3MnXTtcbiAgICBPYmplY3Qua2V5cyhzZW1hbnRpY09wZXJhdGlvbnMpLmZvckVhY2gobmFtZSA9PiB7XG4gICAgICBjb25zdCB7YWN0aW9uRGljdCwgZm9ybWFscywgYnVpbHRJbkRlZmF1bHR9ID0gc2VtYW50aWNPcGVyYXRpb25zW25hbWVdO1xuXG4gICAgICBsZXQgc2lnbmF0dXJlID0gbmFtZTtcbiAgICAgIGlmIChmb3JtYWxzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgc2lnbmF0dXJlICs9ICcoJyArIGZvcm1hbHMuam9pbignLCAnKSArICcpJztcbiAgICAgIH1cblxuICAgICAgbGV0IG1ldGhvZDtcbiAgICAgIGlmIChoYXNTdXBlclNlbWFudGljcyh0aGlzKSAmJiB0aGlzLnN1cGVyW3R5cGUudG9Mb3dlckNhc2UoKSArICdzJ11bbmFtZV0pIHtcbiAgICAgICAgbWV0aG9kID0gJ2V4dGVuZCcgKyB0eXBlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWV0aG9kID0gJ2FkZCcgKyB0eXBlO1xuICAgICAgfVxuICAgICAgc3RyICs9ICdcXG4gICAgLicgKyBtZXRob2QgKyAnKCcgKyBKU09OLnN0cmluZ2lmeShzaWduYXR1cmUpICsgJywgeyc7XG5cbiAgICAgIGNvbnN0IHNyY0FycmF5ID0gW107XG4gICAgICBPYmplY3Qua2V5cyhhY3Rpb25EaWN0KS5mb3JFYWNoKGFjdGlvbk5hbWUgPT4ge1xuICAgICAgICBpZiAoYWN0aW9uRGljdFthY3Rpb25OYW1lXSAhPT0gYnVpbHRJbkRlZmF1bHQpIHtcbiAgICAgICAgICBsZXQgc291cmNlID0gYWN0aW9uRGljdFthY3Rpb25OYW1lXS50b1N0cmluZygpLnRyaW0oKTtcblxuICAgICAgICAgIC8vIENvbnZlcnQgbWV0aG9kIHNob3J0aGFuZCB0byBwbGFpbiBvbGQgZnVuY3Rpb24gc3ludGF4LlxuICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9oYXJjL29obS9pc3N1ZXMvMjYzXG4gICAgICAgICAgc291cmNlID0gc291cmNlLnJlcGxhY2UoL14uKlxcKC8sICdmdW5jdGlvbignKTtcblxuICAgICAgICAgIHNyY0FycmF5LnB1c2goJ1xcbiAgICAgICcgKyBKU09OLnN0cmluZ2lmeShhY3Rpb25OYW1lKSArICc6ICcgKyBzb3VyY2UpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHN0ciArPSBzcmNBcnJheS5qb2luKCcsJykgKyAnXFxuICAgIH0pJztcbiAgICB9KTtcbiAgfSk7XG4gIHN0ciArPSAnO1xcbiAgfSknO1xuXG4gIGlmICghc2VtYW50aWNzT25seSkge1xuICAgIHN0ciA9XG4gICAgICAnKGZ1bmN0aW9uKCkge1xcbicgK1xuICAgICAgJyAgdmFyIGdyYW1tYXIgPSB0aGlzLmZyb21SZWNpcGUoJyArXG4gICAgICB0aGlzLmdyYW1tYXIudG9SZWNpcGUoKSArXG4gICAgICAnKTtcXG4nICtcbiAgICAgICcgIHZhciBzZW1hbnRpY3MgPSAnICtcbiAgICAgIHN0ciArXG4gICAgICAnKGdyYW1tYXIpO1xcbicgK1xuICAgICAgJyAgcmV0dXJuIHNlbWFudGljcztcXG4nICtcbiAgICAgICd9KTtcXG4nO1xuICB9XG5cbiAgcmV0dXJuIHN0cjtcbn07XG5cbmZ1bmN0aW9uIHBhcnNlU2lnbmF0dXJlJDEoc2lnbmF0dXJlLCB0eXBlKSB7XG4gIGlmICghU2VtYW50aWNzJDIucHJvdG90eXBlR3JhbW1hcikge1xuICAgIC8vIFRoZSBPcGVyYXRpb25zIGFuZCBBdHRyaWJ1dGVzIGdyYW1tYXIgd29uJ3QgYmUgYXZhaWxhYmxlIHdoaWxlIE9obSBpcyBsb2FkaW5nLFxuICAgIC8vIGJ1dCB3ZSBjYW4gZ2V0IGF3YXkgdGhlIGZvbGxvd2luZyBzaW1wbGlmaWNhdGlvbiBiL2Mgbm9uZSBvZiB0aGUgb3BlcmF0aW9uc1xuICAgIC8vIHRoYXQgYXJlIHVzZWQgd2hpbGUgbG9hZGluZyB0YWtlIGFyZ3VtZW50cy5cbiAgICBjb21tb24kMy5hc3NlcnQoc2lnbmF0dXJlLmluZGV4T2YoJygnKSA9PT0gLTEpO1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBzaWduYXR1cmUsXG4gICAgICBmb3JtYWxzOiBbXSxcbiAgICB9O1xuICB9XG5cbiAgY29uc3QgciA9IFNlbWFudGljcyQyLnByb3RvdHlwZUdyYW1tYXIubWF0Y2goXG4gICAgICBzaWduYXR1cmUsXG4gICAgdHlwZSA9PT0gJ29wZXJhdGlvbicgPyAnT3BlcmF0aW9uU2lnbmF0dXJlJyA6ICdBdHRyaWJ1dGVTaWduYXR1cmUnXG4gICk7XG4gIGlmIChyLmZhaWxlZCgpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHIubWVzc2FnZSk7XG4gIH1cblxuICByZXR1cm4gU2VtYW50aWNzJDIucHJvdG90eXBlR3JhbW1hclNlbWFudGljcyhyKS5wYXJzZSgpO1xufVxuXG5mdW5jdGlvbiBuZXdEZWZhdWx0QWN0aW9uKHR5cGUsIG5hbWUsIGRvSXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKC4uLmNoaWxkcmVuKSB7XG4gICAgY29uc3QgdGhpc1RoaW5nID0gdGhpcy5fc2VtYW50aWNzLm9wZXJhdGlvbnNbbmFtZV0gfHwgdGhpcy5fc2VtYW50aWNzLmF0dHJpYnV0ZXNbbmFtZV07XG4gICAgY29uc3QgYXJncyA9IHRoaXNUaGluZy5mb3JtYWxzLm1hcChmb3JtYWwgPT4gdGhpcy5hcmdzW2Zvcm1hbF0pO1xuXG4gICAgaWYgKCF0aGlzLmlzSXRlcmF0aW9uKCkgJiYgY2hpbGRyZW4ubGVuZ3RoID09PSAxKSB7XG4gICAgICAvLyBUaGlzIENTVCBub2RlIGNvcnJlc3BvbmRzIHRvIGEgbm9uLXRlcm1pbmFsIGluIHRoZSBncmFtbWFyIChlLmcuLCBBZGRFeHByKS4gVGhlIGZhY3QgdGhhdFxuICAgICAgLy8gd2UgZ290IGhlcmUgbWVhbnMgdGhhdCB0aGlzIGFjdGlvbiBkaWN0aW9uYXJ5IGRvZXNuJ3QgaGF2ZSBhbiBhY3Rpb24gZm9yIHRoaXMgcGFydGljdWxhclxuICAgICAgLy8gbm9uLXRlcm1pbmFsIG9yIGEgZ2VuZXJpYyBgX25vbnRlcm1pbmFsYCBhY3Rpb24uXG4gICAgICAvLyBBcyBhIGNvbnZlbmllbmNlLCBpZiB0aGlzIG5vZGUgb25seSBoYXMgb25lIGNoaWxkLCB3ZSBqdXN0IHJldHVybiB0aGUgcmVzdWx0IG9mIGFwcGx5aW5nXG4gICAgICAvLyB0aGlzIG9wZXJhdGlvbiAvIGF0dHJpYnV0ZSB0byB0aGUgY2hpbGQgbm9kZS5cbiAgICAgIHJldHVybiBkb0l0LmFwcGx5KGNoaWxkcmVuWzBdLCBhcmdzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT3RoZXJ3aXNlLCB3ZSB0aHJvdyBhbiBleGNlcHRpb24gdG8gbGV0IHRoZSBwcm9ncmFtbWVyIGtub3cgdGhhdCB3ZSBkb24ndCBrbm93IHdoYXRcbiAgICAgIC8vIHRvIGRvIHdpdGggdGhpcyBub2RlLlxuICAgICAgdGhyb3cgZXJyb3JzJDMubWlzc2luZ1NlbWFudGljQWN0aW9uKHRoaXMuY3Rvck5hbWUsIG5hbWUsIHR5cGUsIGdsb2JhbEFjdGlvblN0YWNrKTtcbiAgICB9XG4gIH07XG59XG5cblNlbWFudGljcyQyLnByb3RvdHlwZS5hZGRPcGVyYXRpb25PckF0dHJpYnV0ZSA9IGZ1bmN0aW9uKHR5cGUsIHNpZ25hdHVyZSwgYWN0aW9uRGljdCkge1xuICBjb25zdCB0eXBlUGx1cmFsID0gdHlwZSArICdzJztcblxuICBjb25zdCBwYXJzZWROYW1lQW5kRm9ybWFsQXJncyA9IHBhcnNlU2lnbmF0dXJlJDEoc2lnbmF0dXJlLCB0eXBlKTtcbiAgY29uc3Qge25hbWV9ID0gcGFyc2VkTmFtZUFuZEZvcm1hbEFyZ3M7XG4gIGNvbnN0IHtmb3JtYWxzfSA9IHBhcnNlZE5hbWVBbmRGb3JtYWxBcmdzO1xuXG4gIC8vIFRPRE86IGNoZWNrIHRoYXQgdGhlcmUgYXJlIG5vIGR1cGxpY2F0ZSBmb3JtYWwgYXJndW1lbnRzXG5cbiAgdGhpcy5hc3NlcnROZXdOYW1lKG5hbWUsIHR5cGUpO1xuXG4gIC8vIENyZWF0ZSB0aGUgYWN0aW9uIGRpY3Rpb25hcnkgZm9yIHRoaXMgb3BlcmF0aW9uIC8gYXR0cmlidXRlIHRoYXQgY29udGFpbnMgYSBgX2RlZmF1bHRgIGFjdGlvblxuICAvLyB3aGljaCBkZWZpbmVzIHRoZSBkZWZhdWx0IGJlaGF2aW9yIG9mIGl0ZXJhdGlvbiwgdGVybWluYWwsIGFuZCBub24tdGVybWluYWwgbm9kZXMuLi5cbiAgY29uc3QgYnVpbHRJbkRlZmF1bHQgPSBuZXdEZWZhdWx0QWN0aW9uKHR5cGUsIG5hbWUsIGRvSXQpO1xuICBjb25zdCByZWFsQWN0aW9uRGljdCA9IHtfZGVmYXVsdDogYnVpbHRJbkRlZmF1bHR9O1xuICAvLyAuLi4gYW5kIGFkZCBpbiB0aGUgYWN0aW9ucyBzdXBwbGllZCBieSB0aGUgcHJvZ3JhbW1lciwgd2hpY2ggbWF5IG92ZXJyaWRlIHNvbWUgb3IgYWxsIG9mIHRoZVxuICAvLyBkZWZhdWx0IG9uZXMuXG4gIE9iamVjdC5rZXlzKGFjdGlvbkRpY3QpLmZvckVhY2gobmFtZSA9PiB7XG4gICAgcmVhbEFjdGlvbkRpY3RbbmFtZV0gPSBhY3Rpb25EaWN0W25hbWVdO1xuICB9KTtcblxuICBjb25zdCBlbnRyeSA9XG4gICAgdHlwZSA9PT0gJ29wZXJhdGlvbicgP1xuICAgICAgbmV3IE9wZXJhdGlvbihuYW1lLCBmb3JtYWxzLCByZWFsQWN0aW9uRGljdCwgYnVpbHRJbkRlZmF1bHQpIDpcbiAgICAgIG5ldyBBdHRyaWJ1dGUobmFtZSwgcmVhbEFjdGlvbkRpY3QsIGJ1aWx0SW5EZWZhdWx0KTtcblxuICAvLyBUaGUgZm9sbG93aW5nIGNoZWNrIGlzIG5vdCBzdHJpY3RseSBuZWNlc3NhcnkgKGl0IHdpbGwgaGFwcGVuIGxhdGVyIGFueXdheSkgYnV0IGl0J3MgYmV0dGVyIHRvXG4gIC8vIGNhdGNoIGVycm9ycyBlYXJseS5cbiAgZW50cnkuY2hlY2tBY3Rpb25EaWN0KHRoaXMuZ3JhbW1hcik7XG5cbiAgdGhpc1t0eXBlUGx1cmFsXVtuYW1lXSA9IGVudHJ5O1xuXG4gIGZ1bmN0aW9uIGRvSXQoLi4uYXJncykge1xuICAgIC8vIERpc3BhdGNoIHRvIG1vc3Qgc3BlY2lmaWMgdmVyc2lvbiBvZiB0aGlzIG9wZXJhdGlvbiAvIGF0dHJpYnV0ZSAtLSBpdCBtYXkgaGF2ZSBiZWVuXG4gICAgLy8gb3ZlcnJpZGRlbiBieSBhIHN1Yi1zZW1hbnRpY3MuXG4gICAgY29uc3QgdGhpc1RoaW5nID0gdGhpcy5fc2VtYW50aWNzW3R5cGVQbHVyYWxdW25hbWVdO1xuXG4gICAgLy8gQ2hlY2sgdGhhdCB0aGUgY2FsbGVyIHBhc3NlZCB0aGUgY29ycmVjdCBudW1iZXIgb2YgYXJndW1lbnRzLlxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoICE9PSB0aGlzVGhpbmcuZm9ybWFscy5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnSW52YWxpZCBudW1iZXIgb2YgYXJndW1lbnRzIHBhc3NlZCB0byAnICtcbiAgICAgICAgICBuYW1lICtcbiAgICAgICAgICAnICcgK1xuICAgICAgICAgIHR5cGUgK1xuICAgICAgICAgICcgKGV4cGVjdGVkICcgK1xuICAgICAgICAgIHRoaXNUaGluZy5mb3JtYWxzLmxlbmd0aCArXG4gICAgICAgICAgJywgZ290ICcgK1xuICAgICAgICAgIGFyZ3VtZW50cy5sZW5ndGggK1xuICAgICAgICAgICcpJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgYW4gXCJhcmd1bWVudHMgb2JqZWN0XCIgZnJvbSB0aGUgYXJndW1lbnRzIHRoYXQgd2VyZSBwYXNzZWQgdG8gdGhpc1xuICAgIC8vIG9wZXJhdGlvbiAvIGF0dHJpYnV0ZS5cbiAgICBjb25zdCBhcmdzT2JqID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBmb3IgKGNvbnN0IFtpZHgsIHZhbF0gb2YgT2JqZWN0LmVudHJpZXMoYXJncykpIHtcbiAgICAgIGNvbnN0IGZvcm1hbCA9IHRoaXNUaGluZy5mb3JtYWxzW2lkeF07XG4gICAgICBhcmdzT2JqW2Zvcm1hbF0gPSB2YWw7XG4gICAgfVxuXG4gICAgY29uc3Qgb2xkQXJncyA9IHRoaXMuYXJncztcbiAgICB0aGlzLmFyZ3MgPSBhcmdzT2JqO1xuICAgIGNvbnN0IGFucyA9IHRoaXNUaGluZy5leGVjdXRlKHRoaXMuX3NlbWFudGljcywgdGhpcyk7XG4gICAgdGhpcy5hcmdzID0gb2xkQXJncztcbiAgICByZXR1cm4gYW5zO1xuICB9XG5cbiAgaWYgKHR5cGUgPT09ICdvcGVyYXRpb24nKSB7XG4gICAgdGhpcy5XcmFwcGVyLnByb3RvdHlwZVtuYW1lXSA9IGRvSXQ7XG4gICAgdGhpcy5XcmFwcGVyLnByb3RvdHlwZVtuYW1lXS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICdbJyArIG5hbWUgKyAnIG9wZXJhdGlvbl0nO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMuV3JhcHBlci5wcm90b3R5cGUsIG5hbWUsIHtcbiAgICAgIGdldDogZG9JdCxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgLy8gU28gdGhlIHByb3BlcnR5IGNhbiBiZSBkZWxldGVkLlxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLmF0dHJpYnV0ZUtleXMsIG5hbWUsIHtcbiAgICAgIHZhbHVlOiB1dGlsJDIudW5pcXVlSWQobmFtZSksXG4gICAgfSk7XG4gIH1cbn07XG5cblNlbWFudGljcyQyLnByb3RvdHlwZS5leHRlbmRPcGVyYXRpb25PckF0dHJpYnV0ZSA9IGZ1bmN0aW9uKHR5cGUsIG5hbWUsIGFjdGlvbkRpY3QpIHtcbiAgY29uc3QgdHlwZVBsdXJhbCA9IHR5cGUgKyAncyc7XG5cbiAgLy8gTWFrZSBzdXJlIHRoYXQgYG5hbWVgIHJlYWxseSBpcyBqdXN0IGEgbmFtZSwgaS5lLiwgdGhhdCBpdCBkb2Vzbid0IGFsc28gY29udGFpbiBmb3JtYWxzLlxuICBwYXJzZVNpZ25hdHVyZSQxKG5hbWUsICdhdHRyaWJ1dGUnKTtcblxuICBpZiAoISh0aGlzLnN1cGVyICYmIG5hbWUgaW4gdGhpcy5zdXBlclt0eXBlUGx1cmFsXSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdDYW5ub3QgZXh0ZW5kICcgK1xuICAgICAgICB0eXBlICtcbiAgICAgICAgXCIgJ1wiICtcbiAgICAgICAgbmFtZSArXG4gICAgICAgIFwiJzogZGlkIG5vdCBpbmhlcml0IGFuIFwiICtcbiAgICAgICAgdHlwZSArXG4gICAgICAgICcgd2l0aCB0aGF0IG5hbWUnXG4gICAgKTtcbiAgfVxuICBpZiAoaGFzT3duUHJvcGVydHkodGhpc1t0eXBlUGx1cmFsXSwgbmFtZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBleHRlbmQgJyArIHR5cGUgKyBcIiAnXCIgKyBuYW1lICsgXCInIGFnYWluXCIpO1xuICB9XG5cbiAgLy8gQ3JlYXRlIGEgbmV3IG9wZXJhdGlvbiAvIGF0dHJpYnV0ZSB3aG9zZSBhY3Rpb25EaWN0IGRlbGVnYXRlcyB0byB0aGUgc3VwZXIgb3BlcmF0aW9uIC9cbiAgLy8gYXR0cmlidXRlJ3MgYWN0aW9uRGljdCwgYW5kIHdoaWNoIGhhcyBhbGwgdGhlIGtleXMgZnJvbSBgaW5oZXJpdGVkQWN0aW9uRGljdGAuXG4gIGNvbnN0IGluaGVyaXRlZEZvcm1hbHMgPSB0aGlzW3R5cGVQbHVyYWxdW25hbWVdLmZvcm1hbHM7XG4gIGNvbnN0IGluaGVyaXRlZEFjdGlvbkRpY3QgPSB0aGlzW3R5cGVQbHVyYWxdW25hbWVdLmFjdGlvbkRpY3Q7XG4gIGNvbnN0IG5ld0FjdGlvbkRpY3QgPSBPYmplY3QuY3JlYXRlKGluaGVyaXRlZEFjdGlvbkRpY3QpO1xuICBPYmplY3Qua2V5cyhhY3Rpb25EaWN0KS5mb3JFYWNoKG5hbWUgPT4ge1xuICAgIG5ld0FjdGlvbkRpY3RbbmFtZV0gPSBhY3Rpb25EaWN0W25hbWVdO1xuICB9KTtcblxuICB0aGlzW3R5cGVQbHVyYWxdW25hbWVdID1cbiAgICB0eXBlID09PSAnb3BlcmF0aW9uJyA/XG4gICAgICBuZXcgT3BlcmF0aW9uKG5hbWUsIGluaGVyaXRlZEZvcm1hbHMsIG5ld0FjdGlvbkRpY3QpIDpcbiAgICAgIG5ldyBBdHRyaWJ1dGUobmFtZSwgbmV3QWN0aW9uRGljdCk7XG5cbiAgLy8gVGhlIGZvbGxvd2luZyBjaGVjayBpcyBub3Qgc3RyaWN0bHkgbmVjZXNzYXJ5IChpdCB3aWxsIGhhcHBlbiBsYXRlciBhbnl3YXkpIGJ1dCBpdCdzIGJldHRlciB0b1xuICAvLyBjYXRjaCBlcnJvcnMgZWFybHkuXG4gIHRoaXNbdHlwZVBsdXJhbF1bbmFtZV0uY2hlY2tBY3Rpb25EaWN0KHRoaXMuZ3JhbW1hcik7XG59O1xuXG5TZW1hbnRpY3MkMi5wcm90b3R5cGUuYXNzZXJ0TmV3TmFtZSA9IGZ1bmN0aW9uKG5hbWUsIHR5cGUpIHtcbiAgaWYgKGhhc093blByb3BlcnR5KFdyYXBwZXIucHJvdG90eXBlLCBuYW1lKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGFkZCAnICsgdHlwZSArIFwiICdcIiArIG5hbWUgKyBcIic6IHRoYXQncyBhIHJlc2VydmVkIG5hbWVcIik7XG4gIH1cbiAgaWYgKG5hbWUgaW4gdGhpcy5vcGVyYXRpb25zKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnQ2Fubm90IGFkZCAnICsgdHlwZSArIFwiICdcIiArIG5hbWUgKyBcIic6IGFuIG9wZXJhdGlvbiB3aXRoIHRoYXQgbmFtZSBhbHJlYWR5IGV4aXN0c1wiXG4gICAgKTtcbiAgfVxuICBpZiAobmFtZSBpbiB0aGlzLmF0dHJpYnV0ZXMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdDYW5ub3QgYWRkICcgKyB0eXBlICsgXCIgJ1wiICsgbmFtZSArIFwiJzogYW4gYXR0cmlidXRlIHdpdGggdGhhdCBuYW1lIGFscmVhZHkgZXhpc3RzXCJcbiAgICApO1xuICB9XG59O1xuXG4vLyBSZXR1cm5zIGEgd3JhcHBlciBmb3IgdGhlIGdpdmVuIENTVCBgbm9kZWAgaW4gdGhpcyBzZW1hbnRpY3MuXG4vLyBJZiBgbm9kZWAgaXMgYWxyZWFkeSBhIHdyYXBwZXIsIHJldHVybnMgYG5vZGVgIGl0c2VsZi4gIC8vIFRPRE86IHdoeSBpcyB0aGlzIG5lZWRlZD9cblNlbWFudGljcyQyLnByb3RvdHlwZS53cmFwID0gZnVuY3Rpb24obm9kZSwgc291cmNlLCBvcHRCYXNlSW50ZXJ2YWwpIHtcbiAgY29uc3QgYmFzZUludGVydmFsID0gb3B0QmFzZUludGVydmFsIHx8IHNvdXJjZTtcbiAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiB0aGlzLldyYXBwZXIgPyBub2RlIDogbmV3IHRoaXMuV3JhcHBlcihub2RlLCBzb3VyY2UsIGJhc2VJbnRlcnZhbCk7XG59O1xuXG4vLyBDcmVhdGVzIGEgbmV3IFNlbWFudGljcyBpbnN0YW5jZSBmb3IgYGdyYW1tYXJgLCBpbmhlcml0aW5nIG9wZXJhdGlvbnMgYW5kIGF0dHJpYnV0ZXMgZnJvbVxuLy8gYG9wdFN1cGVyU2VtYW50aWNzYCwgaWYgaXQgaXMgc3BlY2lmaWVkLiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBhY3RzIGFzIGEgcHJveHkgZm9yIHRoZSBuZXdcbi8vIFNlbWFudGljcyBpbnN0YW5jZS4gV2hlbiB0aGF0IGZ1bmN0aW9uIGlzIGludm9rZWQgd2l0aCBhIENTVCBub2RlIGFzIGFuIGFyZ3VtZW50LCBpdCByZXR1cm5zXG4vLyBhIHdyYXBwZXIgZm9yIHRoYXQgbm9kZSB3aGljaCBnaXZlcyBhY2Nlc3MgdG8gdGhlIG9wZXJhdGlvbnMgYW5kIGF0dHJpYnV0ZXMgcHJvdmlkZWQgYnkgdGhpc1xuLy8gc2VtYW50aWNzLlxuU2VtYW50aWNzJDIuY3JlYXRlU2VtYW50aWNzID0gZnVuY3Rpb24oZ3JhbW1hciwgb3B0U3VwZXJTZW1hbnRpY3MpIHtcbiAgY29uc3QgcyA9IG5ldyBTZW1hbnRpY3MkMihcbiAgICAgIGdyYW1tYXIsXG4gICAgb3B0U3VwZXJTZW1hbnRpY3MgIT09IHVuZGVmaW5lZCA/XG4gICAgICBvcHRTdXBlclNlbWFudGljcyA6XG4gICAgICBTZW1hbnRpY3MkMi5CdWlsdEluU2VtYW50aWNzLl9nZXRTZW1hbnRpY3MoKVxuICApO1xuXG4gIC8vIFRvIGVuYWJsZSBjbGllbnRzIHRvIGludm9rZSBhIHNlbWFudGljcyBsaWtlIGEgZnVuY3Rpb24sIHJldHVybiBhIGZ1bmN0aW9uIHRoYXQgYWN0cyBhcyBhIHByb3h5XG4gIC8vIGZvciBgc2AsIHdoaWNoIGlzIHRoZSByZWFsIGBTZW1hbnRpY3NgIGluc3RhbmNlLlxuICBjb25zdCBwcm94eSA9IGZ1bmN0aW9uIEFTZW1hbnRpY3MobWF0Y2hSZXN1bHQpIHtcbiAgICBpZiAoIShtYXRjaFJlc3VsdCBpbnN0YW5jZW9mIE1hdGNoUmVzdWx0KSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICAnU2VtYW50aWNzIGV4cGVjdGVkIGEgTWF0Y2hSZXN1bHQsIGJ1dCBnb3QgJyArXG4gICAgICAgICAgY29tbW9uJDMudW5leHBlY3RlZE9ialRvU3RyaW5nKG1hdGNoUmVzdWx0KVxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKG1hdGNoUmVzdWx0LmZhaWxlZCgpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdjYW5ub3QgYXBwbHkgU2VtYW50aWNzIHRvICcgKyBtYXRjaFJlc3VsdC50b1N0cmluZygpKTtcbiAgICB9XG5cbiAgICBjb25zdCBjc3QgPSBtYXRjaFJlc3VsdC5fY3N0O1xuICAgIGlmIChjc3QuZ3JhbW1hciAhPT0gZ3JhbW1hcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIFwiQ2Fubm90IHVzZSBhIE1hdGNoUmVzdWx0IGZyb20gZ3JhbW1hciAnXCIgK1xuICAgICAgICAgIGNzdC5ncmFtbWFyLm5hbWUgK1xuICAgICAgICAgIFwiJyB3aXRoIGEgc2VtYW50aWNzIGZvciAnXCIgK1xuICAgICAgICAgIGdyYW1tYXIubmFtZSArXG4gICAgICAgICAgXCInXCJcbiAgICAgICk7XG4gICAgfVxuICAgIGNvbnN0IGlucHV0U3RyZWFtID0gbmV3IElucHV0U3RyZWFtJDEobWF0Y2hSZXN1bHQuaW5wdXQpO1xuICAgIHJldHVybiBzLndyYXAoY3N0LCBpbnB1dFN0cmVhbS5pbnRlcnZhbChtYXRjaFJlc3VsdC5fY3N0T2Zmc2V0LCBtYXRjaFJlc3VsdC5pbnB1dC5sZW5ndGgpKTtcbiAgfTtcblxuICAvLyBGb3J3YXJkIHB1YmxpYyBtZXRob2RzIGZyb20gdGhlIHByb3h5IHRvIHRoZSBzZW1hbnRpY3MgaW5zdGFuY2UuXG4gIHByb3h5LmFkZE9wZXJhdGlvbiA9IGZ1bmN0aW9uKHNpZ25hdHVyZSwgYWN0aW9uRGljdCkge1xuICAgIHMuYWRkT3BlcmF0aW9uT3JBdHRyaWJ1dGUoJ29wZXJhdGlvbicsIHNpZ25hdHVyZSwgYWN0aW9uRGljdCk7XG4gICAgcmV0dXJuIHByb3h5O1xuICB9O1xuICBwcm94eS5leHRlbmRPcGVyYXRpb24gPSBmdW5jdGlvbihuYW1lLCBhY3Rpb25EaWN0KSB7XG4gICAgcy5leHRlbmRPcGVyYXRpb25PckF0dHJpYnV0ZSgnb3BlcmF0aW9uJywgbmFtZSwgYWN0aW9uRGljdCk7XG4gICAgcmV0dXJuIHByb3h5O1xuICB9O1xuICBwcm94eS5hZGRBdHRyaWJ1dGUgPSBmdW5jdGlvbihuYW1lLCBhY3Rpb25EaWN0KSB7XG4gICAgcy5hZGRPcGVyYXRpb25PckF0dHJpYnV0ZSgnYXR0cmlidXRlJywgbmFtZSwgYWN0aW9uRGljdCk7XG4gICAgcmV0dXJuIHByb3h5O1xuICB9O1xuICBwcm94eS5leHRlbmRBdHRyaWJ1dGUgPSBmdW5jdGlvbihuYW1lLCBhY3Rpb25EaWN0KSB7XG4gICAgcy5leHRlbmRPcGVyYXRpb25PckF0dHJpYnV0ZSgnYXR0cmlidXRlJywgbmFtZSwgYWN0aW9uRGljdCk7XG4gICAgcmV0dXJuIHByb3h5O1xuICB9O1xuICBwcm94eS5fZ2V0QWN0aW9uRGljdCA9IGZ1bmN0aW9uKG9wZXJhdGlvbk9yQXR0cmlidXRlTmFtZSkge1xuICAgIGNvbnN0IGFjdGlvbiA9XG4gICAgICBzLm9wZXJhdGlvbnNbb3BlcmF0aW9uT3JBdHRyaWJ1dGVOYW1lXSB8fCBzLmF0dHJpYnV0ZXNbb3BlcmF0aW9uT3JBdHRyaWJ1dGVOYW1lXTtcbiAgICBpZiAoIWFjdGlvbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdcIicgK1xuICAgICAgICAgIG9wZXJhdGlvbk9yQXR0cmlidXRlTmFtZSArXG4gICAgICAgICAgJ1wiIGlzIG5vdCBhIHZhbGlkIG9wZXJhdGlvbiBvciBhdHRyaWJ1dGUgJyArXG4gICAgICAgICAgJ25hbWUgaW4gdGhpcyBzZW1hbnRpY3MgZm9yIFwiJyArXG4gICAgICAgICAgZ3JhbW1hci5uYW1lICtcbiAgICAgICAgICAnXCInXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gYWN0aW9uLmFjdGlvbkRpY3Q7XG4gIH07XG4gIHByb3h5Ll9yZW1vdmUgPSBmdW5jdGlvbihvcGVyYXRpb25PckF0dHJpYnV0ZU5hbWUpIHtcbiAgICBsZXQgc2VtYW50aWM7XG4gICAgaWYgKG9wZXJhdGlvbk9yQXR0cmlidXRlTmFtZSBpbiBzLm9wZXJhdGlvbnMpIHtcbiAgICAgIHNlbWFudGljID0gcy5vcGVyYXRpb25zW29wZXJhdGlvbk9yQXR0cmlidXRlTmFtZV07XG4gICAgICBkZWxldGUgcy5vcGVyYXRpb25zW29wZXJhdGlvbk9yQXR0cmlidXRlTmFtZV07XG4gICAgfSBlbHNlIGlmIChvcGVyYXRpb25PckF0dHJpYnV0ZU5hbWUgaW4gcy5hdHRyaWJ1dGVzKSB7XG4gICAgICBzZW1hbnRpYyA9IHMuYXR0cmlidXRlc1tvcGVyYXRpb25PckF0dHJpYnV0ZU5hbWVdO1xuICAgICAgZGVsZXRlIHMuYXR0cmlidXRlc1tvcGVyYXRpb25PckF0dHJpYnV0ZU5hbWVdO1xuICAgIH1cbiAgICBkZWxldGUgcy5XcmFwcGVyLnByb3RvdHlwZVtvcGVyYXRpb25PckF0dHJpYnV0ZU5hbWVdO1xuICAgIHJldHVybiBzZW1hbnRpYztcbiAgfTtcbiAgcHJveHkuZ2V0T3BlcmF0aW9uTmFtZXMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMocy5vcGVyYXRpb25zKTtcbiAgfTtcbiAgcHJveHkuZ2V0QXR0cmlidXRlTmFtZXMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMocy5hdHRyaWJ1dGVzKTtcbiAgfTtcbiAgcHJveHkuZ2V0R3JhbW1hciA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzLmdyYW1tYXI7XG4gIH07XG4gIHByb3h5LnRvUmVjaXBlID0gZnVuY3Rpb24oc2VtYW50aWNzT25seSkge1xuICAgIHJldHVybiBzLnRvUmVjaXBlKHNlbWFudGljc09ubHkpO1xuICB9O1xuXG4gIC8vIE1ha2UgdGhlIHByb3h5J3MgdG9TdHJpbmcoKSB3b3JrLlxuICBwcm94eS50b1N0cmluZyA9IHMudG9TdHJpbmcuYmluZChzKTtcblxuICAvLyBSZXR1cm5zIHRoZSBzZW1hbnRpY3MgZm9yIHRoZSBwcm94eS5cbiAgcHJveHkuX2dldFNlbWFudGljcyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzO1xuICB9O1xuXG4gIHJldHVybiBwcm94eTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tIE9wZXJhdGlvbiAtLS0tLS0tLS0tLS0tLS0tLVxuXG4vLyBBbiBPcGVyYXRpb24gcmVwcmVzZW50cyBhIGZ1bmN0aW9uIHRvIGJlIGFwcGxpZWQgdG8gYSBjb25jcmV0ZSBzeW50YXggdHJlZSAoQ1NUKSAtLSBpdCdzIHZlcnlcbi8vIHNpbWlsYXIgdG8gYSBWaXNpdG9yIChodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1Zpc2l0b3JfcGF0dGVybikuIEFuIG9wZXJhdGlvbiBpcyBleGVjdXRlZCBieVxuLy8gcmVjdXJzaXZlbHkgd2Fsa2luZyB0aGUgQ1NULCBhbmQgYXQgZWFjaCBub2RlLCBpbnZva2luZyB0aGUgbWF0Y2hpbmcgc2VtYW50aWMgYWN0aW9uIGZyb21cbi8vIGBhY3Rpb25EaWN0YC4gU2VlIGBPcGVyYXRpb24ucHJvdG90eXBlLmV4ZWN1dGVgIGZvciBkZXRhaWxzIG9mIGhvdyBhIENTVCBub2RlJ3MgbWF0Y2hpbmcgc2VtYW50aWNcbi8vIGFjdGlvbiBpcyBmb3VuZC5cbmNsYXNzIE9wZXJhdGlvbiB7XG4gIGNvbnN0cnVjdG9yKG5hbWUsIGZvcm1hbHMsIGFjdGlvbkRpY3QsIGJ1aWx0SW5EZWZhdWx0KSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLmZvcm1hbHMgPSBmb3JtYWxzO1xuICAgIHRoaXMuYWN0aW9uRGljdCA9IGFjdGlvbkRpY3Q7XG4gICAgdGhpcy5idWlsdEluRGVmYXVsdCA9IGJ1aWx0SW5EZWZhdWx0O1xuICB9XG5cbiAgY2hlY2tBY3Rpb25EaWN0KGdyYW1tYXIpIHtcbiAgICBncmFtbWFyLl9jaGVja1RvcERvd25BY3Rpb25EaWN0KHRoaXMudHlwZU5hbWUsIHRoaXMubmFtZSwgdGhpcy5hY3Rpb25EaWN0KTtcbiAgfVxuXG4gIC8vIEV4ZWN1dGUgdGhpcyBvcGVyYXRpb24gb24gdGhlIENTVCBub2RlIGFzc29jaWF0ZWQgd2l0aCBgbm9kZVdyYXBwZXJgIGluIHRoZSBjb250ZXh0IG9mIHRoZVxuICAvLyBnaXZlbiBTZW1hbnRpY3MgaW5zdGFuY2UuXG4gIGV4ZWN1dGUoc2VtYW50aWNzLCBub2RlV3JhcHBlcikge1xuICAgIHRyeSB7XG4gICAgICAvLyBMb29rIGZvciBhIHNlbWFudGljIGFjdGlvbiB3aG9zZSBuYW1lIG1hdGNoZXMgdGhlIG5vZGUncyBjb25zdHJ1Y3RvciBuYW1lLCB3aGljaCBpcyBlaXRoZXJcbiAgICAgIC8vIHRoZSBuYW1lIG9mIGEgcnVsZSBpbiB0aGUgZ3JhbW1hciwgb3IgJ190ZXJtaW5hbCcgKGZvciBhIHRlcm1pbmFsIG5vZGUpLCBvciAnX2l0ZXInIChmb3IgYW5cbiAgICAgIC8vIGl0ZXJhdGlvbiBub2RlKS5cbiAgICAgIGNvbnN0IHtjdG9yTmFtZX0gPSBub2RlV3JhcHBlci5fbm9kZTtcbiAgICAgIGxldCBhY3Rpb25GbiA9IHRoaXMuYWN0aW9uRGljdFtjdG9yTmFtZV07XG4gICAgICBpZiAoYWN0aW9uRm4pIHtcbiAgICAgICAgZ2xvYmFsQWN0aW9uU3RhY2sucHVzaChbdGhpcywgY3Rvck5hbWVdKTtcbiAgICAgICAgcmV0dXJuIGFjdGlvbkZuLmFwcGx5KG5vZGVXcmFwcGVyLCBub2RlV3JhcHBlci5fY2hpbGRyZW4oKSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBhY3Rpb24gZGljdGlvbmFyeSBkb2VzIG5vdCBjb250YWluIGEgc2VtYW50aWMgYWN0aW9uIGZvciB0aGlzIHNwZWNpZmljIHR5cGUgb2Ygbm9kZS5cbiAgICAgIC8vIElmIHRoaXMgaXMgYSBub250ZXJtaW5hbCBub2RlIGFuZCB0aGUgcHJvZ3JhbW1lciBoYXMgcHJvdmlkZWQgYSBgX25vbnRlcm1pbmFsYCBzZW1hbnRpY1xuICAgICAgLy8gYWN0aW9uLCB3ZSBpbnZva2UgaXQ6XG4gICAgICBpZiAobm9kZVdyYXBwZXIuaXNOb250ZXJtaW5hbCgpKSB7XG4gICAgICAgIGFjdGlvbkZuID0gdGhpcy5hY3Rpb25EaWN0Ll9ub250ZXJtaW5hbDtcbiAgICAgICAgaWYgKGFjdGlvbkZuKSB7XG4gICAgICAgICAgZ2xvYmFsQWN0aW9uU3RhY2sucHVzaChbdGhpcywgJ19ub250ZXJtaW5hbCcsIGN0b3JOYW1lXSk7XG4gICAgICAgICAgcmV0dXJuIGFjdGlvbkZuLmFwcGx5KG5vZGVXcmFwcGVyLCBub2RlV3JhcHBlci5fY2hpbGRyZW4oKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gT3RoZXJ3aXNlLCB3ZSBpbnZva2UgdGhlICdfZGVmYXVsdCcgc2VtYW50aWMgYWN0aW9uLlxuICAgICAgZ2xvYmFsQWN0aW9uU3RhY2sucHVzaChbdGhpcywgJ2RlZmF1bHQgYWN0aW9uJywgY3Rvck5hbWVdKTtcbiAgICAgIHJldHVybiB0aGlzLmFjdGlvbkRpY3QuX2RlZmF1bHQuYXBwbHkobm9kZVdyYXBwZXIsIG5vZGVXcmFwcGVyLl9jaGlsZHJlbigpKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgZ2xvYmFsQWN0aW9uU3RhY2sucG9wKCk7XG4gICAgfVxuICB9XG59XG5cbk9wZXJhdGlvbi5wcm90b3R5cGUudHlwZU5hbWUgPSAnb3BlcmF0aW9uJztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0gQXR0cmlidXRlIC0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vIEF0dHJpYnV0ZXMgYXJlIE9wZXJhdGlvbnMgd2hvc2UgcmVzdWx0cyBhcmUgbWVtb2l6ZWQuIFRoaXMgbWVhbnMgdGhhdCwgZm9yIGFueSBnaXZlbiBzZW1hbnRpY3MsXG4vLyB0aGUgc2VtYW50aWMgYWN0aW9uIGZvciBhIENTVCBub2RlIHdpbGwgYmUgaW52b2tlZCBubyBtb3JlIHRoYW4gb25jZS5cbmNsYXNzIEF0dHJpYnV0ZSBleHRlbmRzIE9wZXJhdGlvbiB7XG4gIGNvbnN0cnVjdG9yKG5hbWUsIGFjdGlvbkRpY3QsIGJ1aWx0SW5EZWZhdWx0KSB7XG4gICAgc3VwZXIobmFtZSwgW10sIGFjdGlvbkRpY3QsIGJ1aWx0SW5EZWZhdWx0KTtcbiAgfVxuXG4gIGV4ZWN1dGUoc2VtYW50aWNzLCBub2RlV3JhcHBlcikge1xuICAgIGNvbnN0IG5vZGUgPSBub2RlV3JhcHBlci5fbm9kZTtcbiAgICBjb25zdCBrZXkgPSBzZW1hbnRpY3MuYXR0cmlidXRlS2V5c1t0aGlzLm5hbWVdO1xuICAgIGlmICghaGFzT3duUHJvcGVydHkobm9kZSwga2V5KSkge1xuICAgICAgLy8gVGhlIGZvbGxvd2luZyBpcyBhIHN1cGVyLXNlbmQgLS0gaXNuJ3QgSlMgYmVhdXRpZnVsPyA6L1xuICAgICAgbm9kZVtrZXldID0gT3BlcmF0aW9uLnByb3RvdHlwZS5leGVjdXRlLmNhbGwodGhpcywgc2VtYW50aWNzLCBub2RlV3JhcHBlcik7XG4gICAgfVxuICAgIHJldHVybiBub2RlW2tleV07XG4gIH1cbn1cblxuQXR0cmlidXRlLnByb3RvdHlwZS50eXBlTmFtZSA9ICdhdHRyaWJ1dGUnO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gRXhwb3J0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIFNlbWFudGljc18xID0gU2VtYW50aWNzJDI7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBJbXBvcnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jb25zdCBDYXNlSW5zZW5zaXRpdmVUZXJtaW5hbCA9IENhc2VJbnNlbnNpdGl2ZVRlcm1pbmFsXzE7XG5jb25zdCBNYXRjaGVyID0gTWF0Y2hlcl8xO1xuY29uc3QgU2VtYW50aWNzJDEgPSBTZW1hbnRpY3NfMTtcbmNvbnN0IGNvbW1vbiQyID0gY29tbW9uJGw7XG5jb25zdCBlcnJvcnMkMiA9IGVycm9ycyQ5O1xuY29uc3QgcGV4cHJzJDMgPSBwZXhwcnMkNjtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFByaXZhdGUgc3R1ZmZcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IFNQRUNJQUxfQUNUSU9OX05BTUVTID0gWydfaXRlcicsICdfdGVybWluYWwnLCAnX25vbnRlcm1pbmFsJywgJ19kZWZhdWx0J107XG5cbmZ1bmN0aW9uIGdldFNvcnRlZFJ1bGVWYWx1ZXMoZ3JhbW1hcikge1xuICByZXR1cm4gT2JqZWN0LmtleXMoZ3JhbW1hci5ydWxlcylcbiAgICAgIC5zb3J0KClcbiAgICAgIC5tYXAobmFtZSA9PiBncmFtbWFyLnJ1bGVzW25hbWVdKTtcbn1cblxuLy8gVW50aWwgRVMyMDE5LCBKU09OIHdhcyBub3QgYSB2YWxpZCBzdWJzZXQgb2YgSmF2YVNjcmlwdCBiZWNhdXNlIFUrMjAyOCAobGluZSBzZXBhcmF0b3IpXG4vLyBhbmQgVSsyMDI5IChwYXJhZ3JhcGggc2VwYXJhdG9yKSBhcmUgYWxsb3dlZCBpbiBKU09OIHN0cmluZyBsaXRlcmFscywgYnV0IG5vdCBpbiBKUy5cbi8vIFRoaXMgZnVuY3Rpb24gcHJvcGVybHkgZW5jb2RlcyB0aG9zZSB0d28gY2hhcmFjdGVycyBzbyB0aGF0IHRoZSByZXN1bHRpbmcgc3RyaW5nIGlzXG4vLyByZXByZXNlbnRzIGJvdGggdmFsaWQgSlNPTiwgYW5kIHZhbGlkIEphdmFTY3JpcHQgKGZvciBFUzIwMTggYW5kIGJlbG93KS5cbi8vIFNlZSBodHRwczovL3Y4LmRldi9mZWF0dXJlcy9zdWJzdW1lLWpzb24gZm9yIG1vcmUgZGV0YWlscy5cbmNvbnN0IGpzb25Ub0pTID0gc3RyID0+IHN0ci5yZXBsYWNlKC9cXHUyMDI4L2csICdcXFxcdTIwMjgnKS5yZXBsYWNlKC9cXHUyMDI5L2csICdcXFxcdTIwMjknKTtcblxuZnVuY3Rpb24gR3JhbW1hciQ0KG5hbWUsIHN1cGVyR3JhbW1hciwgcnVsZXMsIG9wdERlZmF1bHRTdGFydFJ1bGUpIHtcbiAgdGhpcy5uYW1lID0gbmFtZTtcbiAgdGhpcy5zdXBlckdyYW1tYXIgPSBzdXBlckdyYW1tYXI7XG4gIHRoaXMucnVsZXMgPSBydWxlcztcbiAgaWYgKG9wdERlZmF1bHRTdGFydFJ1bGUpIHtcbiAgICBpZiAoIShvcHREZWZhdWx0U3RhcnRSdWxlIGluIHJ1bGVzKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIFwiSW52YWxpZCBzdGFydCBydWxlOiAnXCIgK1xuICAgICAgICAgIG9wdERlZmF1bHRTdGFydFJ1bGUgK1xuICAgICAgICAgIFwiJyBpcyBub3QgYSBydWxlIGluIGdyYW1tYXIgJ1wiICtcbiAgICAgICAgICBuYW1lICtcbiAgICAgICAgICBcIidcIlxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5kZWZhdWx0U3RhcnRSdWxlID0gb3B0RGVmYXVsdFN0YXJ0UnVsZTtcbiAgfVxufVxuXG5sZXQgb2htR3JhbW1hciQyO1xubGV0IGJ1aWxkR3JhbW1hciQxO1xuXG4vLyBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgZnJvbSBtYWluLmpzIG9uY2UgT2htIGhhcyBsb2FkZWQuXG5HcmFtbWFyJDQuaW5pdEFwcGxpY2F0aW9uUGFyc2VyID0gZnVuY3Rpb24oZ3JhbW1hciwgYnVpbGRlckZuKSB7XG4gIG9obUdyYW1tYXIkMiA9IGdyYW1tYXI7XG4gIGJ1aWxkR3JhbW1hciQxID0gYnVpbGRlckZuO1xufTtcblxuR3JhbW1hciQ0LnByb3RvdHlwZSA9IHtcbiAgbWF0Y2hlcigpIHtcbiAgICByZXR1cm4gbmV3IE1hdGNoZXIodGhpcyk7XG4gIH0sXG5cbiAgLy8gUmV0dXJuIHRydWUgaWYgdGhlIGdyYW1tYXIgaXMgYSBidWlsdC1pbiBncmFtbWFyLCBvdGhlcndpc2UgZmFsc2UuXG4gIC8vIE5PVEU6IFRoaXMgbWlnaHQgZ2l2ZSBhbiB1bmV4cGVjdGVkIHJlc3VsdCBpZiBjYWxsZWQgYmVmb3JlIEJ1aWx0SW5SdWxlcyBpcyBkZWZpbmVkIVxuICBpc0J1aWx0SW4oKSB7XG4gICAgcmV0dXJuIHRoaXMgPT09IEdyYW1tYXIkNC5Qcm90b0J1aWx0SW5SdWxlcyB8fCB0aGlzID09PSBHcmFtbWFyJDQuQnVpbHRJblJ1bGVzO1xuICB9LFxuXG4gIGVxdWFscyhnKSB7XG4gICAgaWYgKHRoaXMgPT09IGcpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvLyBEbyB0aGUgY2hlYXBlc3QgY29tcGFyaXNvbnMgZmlyc3QuXG4gICAgaWYgKFxuICAgICAgZyA9PSBudWxsIHx8XG4gICAgICB0aGlzLm5hbWUgIT09IGcubmFtZSB8fFxuICAgICAgdGhpcy5kZWZhdWx0U3RhcnRSdWxlICE9PSBnLmRlZmF1bHRTdGFydFJ1bGUgfHxcbiAgICAgICEodGhpcy5zdXBlckdyYW1tYXIgPT09IGcuc3VwZXJHcmFtbWFyIHx8IHRoaXMuc3VwZXJHcmFtbWFyLmVxdWFscyhnLnN1cGVyR3JhbW1hcikpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IG15UnVsZXMgPSBnZXRTb3J0ZWRSdWxlVmFsdWVzKHRoaXMpO1xuICAgIGNvbnN0IG90aGVyUnVsZXMgPSBnZXRTb3J0ZWRSdWxlVmFsdWVzKGcpO1xuICAgIHJldHVybiAoXG4gICAgICBteVJ1bGVzLmxlbmd0aCA9PT0gb3RoZXJSdWxlcy5sZW5ndGggJiZcbiAgICAgIG15UnVsZXMuZXZlcnkoKHJ1bGUsIGkpID0+IHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICBydWxlLmRlc2NyaXB0aW9uID09PSBvdGhlclJ1bGVzW2ldLmRlc2NyaXB0aW9uICYmXG4gICAgICAgICAgcnVsZS5mb3JtYWxzLmpvaW4oJywnKSA9PT0gb3RoZXJSdWxlc1tpXS5mb3JtYWxzLmpvaW4oJywnKSAmJlxuICAgICAgICAgIHJ1bGUuYm9keS50b1N0cmluZygpID09PSBvdGhlclJ1bGVzW2ldLmJvZHkudG9TdHJpbmcoKVxuICAgICAgICApO1xuICAgICAgfSlcbiAgICApO1xuICB9LFxuXG4gIG1hdGNoKGlucHV0LCBvcHRTdGFydEFwcGxpY2F0aW9uKSB7XG4gICAgY29uc3QgbSA9IHRoaXMubWF0Y2hlcigpO1xuICAgIG0ucmVwbGFjZUlucHV0UmFuZ2UoMCwgMCwgaW5wdXQpO1xuICAgIHJldHVybiBtLm1hdGNoKG9wdFN0YXJ0QXBwbGljYXRpb24pO1xuICB9LFxuXG4gIHRyYWNlKGlucHV0LCBvcHRTdGFydEFwcGxpY2F0aW9uKSB7XG4gICAgY29uc3QgbSA9IHRoaXMubWF0Y2hlcigpO1xuICAgIG0ucmVwbGFjZUlucHV0UmFuZ2UoMCwgMCwgaW5wdXQpO1xuICAgIHJldHVybiBtLnRyYWNlKG9wdFN0YXJ0QXBwbGljYXRpb24pO1xuICB9LFxuXG4gIGNyZWF0ZVNlbWFudGljcygpIHtcbiAgICByZXR1cm4gU2VtYW50aWNzJDEuY3JlYXRlU2VtYW50aWNzKHRoaXMpO1xuICB9LFxuXG4gIGV4dGVuZFNlbWFudGljcyhzdXBlclNlbWFudGljcykge1xuICAgIHJldHVybiBTZW1hbnRpY3MkMS5jcmVhdGVTZW1hbnRpY3ModGhpcywgc3VwZXJTZW1hbnRpY3MuX2dldFNlbWFudGljcygpKTtcbiAgfSxcblxuICAvLyBDaGVjayB0aGF0IGV2ZXJ5IGtleSBpbiBgYWN0aW9uRGljdGAgY29ycmVzcG9uZHMgdG8gYSBzZW1hbnRpYyBhY3Rpb24sIGFuZCB0aGF0IGl0IG1hcHMgdG9cbiAgLy8gYSBmdW5jdGlvbiBvZiB0aGUgY29ycmVjdCBhcml0eS4gSWYgbm90LCB0aHJvdyBhbiBleGNlcHRpb24uXG4gIF9jaGVja1RvcERvd25BY3Rpb25EaWN0KHdoYXQsIG5hbWUsIGFjdGlvbkRpY3QpIHtcbiAgICBjb25zdCBwcm9ibGVtcyA9IFtdO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGd1YXJkLWZvci1pblxuICAgIGZvciAoY29uc3QgayBpbiBhY3Rpb25EaWN0KSB7XG4gICAgICBjb25zdCB2ID0gYWN0aW9uRGljdFtrXTtcbiAgICAgIGNvbnN0IGlzU3BlY2lhbEFjdGlvbiA9IFNQRUNJQUxfQUNUSU9OX05BTUVTLmluY2x1ZGVzKGspO1xuXG4gICAgICBpZiAoIWlzU3BlY2lhbEFjdGlvbiAmJiAhKGsgaW4gdGhpcy5ydWxlcykpIHtcbiAgICAgICAgcHJvYmxlbXMucHVzaChgJyR7a30nIGlzIG5vdCBhIHZhbGlkIHNlbWFudGljIGFjdGlvbiBmb3IgJyR7dGhpcy5uYW1lfSdgKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHYgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcHJvYmxlbXMucHVzaChgJyR7a30nIG11c3QgYmUgYSBmdW5jdGlvbiBpbiBhbiBhY3Rpb24gZGljdGlvbmFyeSBmb3IgJyR7dGhpcy5uYW1lfSdgKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBjb25zdCBhY3R1YWwgPSB2Lmxlbmd0aDtcbiAgICAgIGNvbnN0IGV4cGVjdGVkID0gdGhpcy5fdG9wRG93bkFjdGlvbkFyaXR5KGspO1xuICAgICAgaWYgKGFjdHVhbCAhPT0gZXhwZWN0ZWQpIHtcbiAgICAgICAgbGV0IGRldGFpbHM7XG4gICAgICAgIGlmIChrID09PSAnX2l0ZXInIHx8IGsgPT09ICdfbm9udGVybWluYWwnKSB7XG4gICAgICAgICAgZGV0YWlscyA9XG4gICAgICAgICAgICBgaXQgc2hvdWxkIHVzZSBhIHJlc3QgcGFyYW1ldGVyLCBlLmcuIFxcYCR7a30oLi4uY2hpbGRyZW4pIHt9XFxgLiBgICtcbiAgICAgICAgICAgICdOT1RFOiB0aGlzIGlzIG5ldyBpbiBPaG0gdjE2IOKAlCBzZWUgaHR0cHM6Ly9vaG1qcy5vcmcvZC9hdGkgZm9yIGRldGFpbHMuJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZXRhaWxzID0gYGV4cGVjdGVkICR7ZXhwZWN0ZWR9LCBnb3QgJHthY3R1YWx9YDtcbiAgICAgICAgfVxuICAgICAgICBwcm9ibGVtcy5wdXNoKGBTZW1hbnRpYyBhY3Rpb24gJyR7a30nIGhhcyB0aGUgd3JvbmcgYXJpdHk6ICR7ZGV0YWlsc31gKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb2JsZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IHByZXR0eVByb2JsZW1zID0gcHJvYmxlbXMubWFwKHByb2JsZW0gPT4gJy0gJyArIHByb2JsZW0pO1xuICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgICAgW1xuICAgICAgICAgICAgYEZvdW5kIGVycm9ycyBpbiB0aGUgYWN0aW9uIGRpY3Rpb25hcnkgb2YgdGhlICcke25hbWV9JyAke3doYXR9OmAsXG4gICAgICAgICAgICAuLi5wcmV0dHlQcm9ibGVtcyxcbiAgICAgICAgICBdLmpvaW4oJ1xcbicpXG4gICAgICApO1xuICAgICAgZXJyb3IucHJvYmxlbXMgPSBwcm9ibGVtcztcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfSxcblxuICAvLyBSZXR1cm4gdGhlIGV4cGVjdGVkIGFyaXR5IGZvciBhIHNlbWFudGljIGFjdGlvbiBuYW1lZCBgYWN0aW9uTmFtZWAsIHdoaWNoXG4gIC8vIGlzIGVpdGhlciBhIHJ1bGUgbmFtZSBvciBhIHNwZWNpYWwgYWN0aW9uIG5hbWUgbGlrZSAnX25vbnRlcm1pbmFsJy5cbiAgX3RvcERvd25BY3Rpb25Bcml0eShhY3Rpb25OYW1lKSB7XG4gICAgLy8gQWxsIHNwZWNpYWwgYWN0aW9ucyBoYXZlIGFuIGV4cGVjdGVkIGFyaXR5IG9mIDAsIHRob3VnaCBhbGwgYnV0IF90ZXJtaW5hbFxuICAgIC8vIGFyZSBleHBlY3RlZCB0byB1c2UgdGhlIHJlc3QgcGFyYW1ldGVyIHN5bnRheCAoZS5nLiBgX2l0ZXIoLi4uY2hpbGRyZW4pYCkuXG4gICAgLy8gVGhpcyBpcyBjb25zaWRlcmVkIHRvIGhhdmUgYXJpdHkgMCwgaS5lLiBgKCguLi5hcmdzKSA9PiB7fSkubGVuZ3RoYCBpcyAwLlxuICAgIHJldHVybiBTUEVDSUFMX0FDVElPTl9OQU1FUy5pbmNsdWRlcyhhY3Rpb25OYW1lKSA/XG4gICAgICAwIDpcbiAgICAgIHRoaXMucnVsZXNbYWN0aW9uTmFtZV0uYm9keS5nZXRBcml0eSgpO1xuICB9LFxuXG4gIF9pbmhlcml0c0Zyb20oZ3JhbW1hcikge1xuICAgIGxldCBnID0gdGhpcy5zdXBlckdyYW1tYXI7XG4gICAgd2hpbGUgKGcpIHtcbiAgICAgIGlmIChnLmVxdWFscyhncmFtbWFyLCB0cnVlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGcgPSBnLnN1cGVyR3JhbW1hcjtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIHRvUmVjaXBlKHN1cGVyR3JhbW1hckV4cHIgPSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCBtZXRhSW5mbyA9IHt9O1xuICAgIC8vIEluY2x1ZGUgdGhlIGdyYW1tYXIgc291cmNlIGlmIGl0IGlzIGF2YWlsYWJsZS5cbiAgICBpZiAodGhpcy5zb3VyY2UpIHtcbiAgICAgIG1ldGFJbmZvLnNvdXJjZSA9IHRoaXMuc291cmNlLmNvbnRlbnRzO1xuICAgIH1cblxuICAgIGxldCBzdGFydFJ1bGUgPSBudWxsO1xuICAgIGlmICh0aGlzLmRlZmF1bHRTdGFydFJ1bGUpIHtcbiAgICAgIHN0YXJ0UnVsZSA9IHRoaXMuZGVmYXVsdFN0YXJ0UnVsZTtcbiAgICB9XG5cbiAgICBjb25zdCBydWxlcyA9IHt9O1xuICAgIE9iamVjdC5rZXlzKHRoaXMucnVsZXMpLmZvckVhY2gocnVsZU5hbWUgPT4ge1xuICAgICAgY29uc3QgcnVsZUluZm8gPSB0aGlzLnJ1bGVzW3J1bGVOYW1lXTtcbiAgICAgIGNvbnN0IHtib2R5fSA9IHJ1bGVJbmZvO1xuICAgICAgY29uc3QgaXNEZWZpbml0aW9uID0gIXRoaXMuc3VwZXJHcmFtbWFyIHx8ICF0aGlzLnN1cGVyR3JhbW1hci5ydWxlc1tydWxlTmFtZV07XG5cbiAgICAgIGxldCBvcGVyYXRpb247XG4gICAgICBpZiAoaXNEZWZpbml0aW9uKSB7XG4gICAgICAgIG9wZXJhdGlvbiA9ICdkZWZpbmUnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3BlcmF0aW9uID0gYm9keSBpbnN0YW5jZW9mIHBleHBycyQzLkV4dGVuZCA/ICdleHRlbmQnIDogJ292ZXJyaWRlJztcbiAgICAgIH1cblxuICAgICAgY29uc3QgbWV0YUluZm8gPSB7fTtcbiAgICAgIGlmIChydWxlSW5mby5zb3VyY2UgJiYgdGhpcy5zb3VyY2UpIHtcbiAgICAgICAgY29uc3QgYWRqdXN0ZWQgPSBydWxlSW5mby5zb3VyY2UucmVsYXRpdmVUbyh0aGlzLnNvdXJjZSk7XG4gICAgICAgIG1ldGFJbmZvLnNvdXJjZUludGVydmFsID0gW2FkanVzdGVkLnN0YXJ0SWR4LCBhZGp1c3RlZC5lbmRJZHhdO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBkZXNjcmlwdGlvbiA9IGlzRGVmaW5pdGlvbiA/IHJ1bGVJbmZvLmRlc2NyaXB0aW9uIDogbnVsbDtcbiAgICAgIGNvbnN0IGJvZHlSZWNpcGUgPSBib2R5Lm91dHB1dFJlY2lwZShydWxlSW5mby5mb3JtYWxzLCB0aGlzLnNvdXJjZSk7XG5cbiAgICAgIHJ1bGVzW3J1bGVOYW1lXSA9IFtcbiAgICAgICAgb3BlcmF0aW9uLCAvLyBcImRlZmluZVwiL1wiZXh0ZW5kXCIvXCJvdmVycmlkZVwiXG4gICAgICAgIG1ldGFJbmZvLFxuICAgICAgICBkZXNjcmlwdGlvbixcbiAgICAgICAgcnVsZUluZm8uZm9ybWFscyxcbiAgICAgICAgYm9keVJlY2lwZSxcbiAgICAgIF07XG4gICAgfSk7XG5cbiAgICAvLyBJZiB0aGUgY2FsbGVyIHByb3ZpZGVkIGFuIGV4cHJlc3Npb24gdG8gdXNlIGZvciB0aGUgc3VwZXJncmFtbWFyLCB1c2UgdGhhdC5cbiAgICAvLyBPdGhlcndpc2UsIGlmIHRoZSBzdXBlcmdyYW1tYXIgaXMgYSB1c2VyIGdyYW1tYXIsIHVzZSBpdHMgcmVjaXBlIGlubGluZS5cbiAgICBsZXQgc3VwZXJHcmFtbWFyT3V0cHV0ID0gJ251bGwnO1xuICAgIGlmIChzdXBlckdyYW1tYXJFeHByKSB7XG4gICAgICBzdXBlckdyYW1tYXJPdXRwdXQgPSBzdXBlckdyYW1tYXJFeHByO1xuICAgIH0gZWxzZSBpZiAodGhpcy5zdXBlckdyYW1tYXIgJiYgIXRoaXMuc3VwZXJHcmFtbWFyLmlzQnVpbHRJbigpKSB7XG4gICAgICBzdXBlckdyYW1tYXJPdXRwdXQgPSB0aGlzLnN1cGVyR3JhbW1hci50b1JlY2lwZSgpO1xuICAgIH1cblxuICAgIGNvbnN0IHJlY2lwZUVsZW1lbnRzID0gW1xuICAgICAgLi4uWydncmFtbWFyJywgbWV0YUluZm8sIHRoaXMubmFtZV0ubWFwKEpTT04uc3RyaW5naWZ5KSxcbiAgICAgIHN1cGVyR3JhbW1hck91dHB1dCxcbiAgICAgIC4uLltzdGFydFJ1bGUsIHJ1bGVzXS5tYXAoSlNPTi5zdHJpbmdpZnkpLFxuICAgIF07XG4gICAgcmV0dXJuIGpzb25Ub0pTKGBbJHtyZWNpcGVFbGVtZW50cy5qb2luKCcsJyl9XWApO1xuICB9LFxuXG4gIC8vIFRPRE86IENvbWUgdXAgd2l0aCBiZXR0ZXIgbmFtZXMgZm9yIHRoZXNlIG1ldGhvZHMuXG4gIC8vIFRPRE86IFdyaXRlIHRoZSBhbmFsb2cgb2YgdGhlc2UgbWV0aG9kcyBmb3IgaW5oZXJpdGVkIGF0dHJpYnV0ZXMuXG4gIHRvT3BlcmF0aW9uQWN0aW9uRGljdGlvbmFyeVRlbXBsYXRlKCkge1xuICAgIHJldHVybiB0aGlzLl90b09wZXJhdGlvbk9yQXR0cmlidXRlQWN0aW9uRGljdGlvbmFyeVRlbXBsYXRlKCk7XG4gIH0sXG4gIHRvQXR0cmlidXRlQWN0aW9uRGljdGlvbmFyeVRlbXBsYXRlKCkge1xuICAgIHJldHVybiB0aGlzLl90b09wZXJhdGlvbk9yQXR0cmlidXRlQWN0aW9uRGljdGlvbmFyeVRlbXBsYXRlKCk7XG4gIH0sXG5cbiAgX3RvT3BlcmF0aW9uT3JBdHRyaWJ1dGVBY3Rpb25EaWN0aW9uYXJ5VGVtcGxhdGUoKSB7XG4gICAgLy8gVE9ETzogYWRkIHRoZSBzdXBlci1ncmFtbWFyJ3MgdGVtcGxhdGVzIGF0IHRoZSByaWdodCBwbGFjZSwgZS5nLiwgYSBjYXNlIGZvciBBZGRFeHByX3BsdXNcbiAgICAvLyBzaG91bGQgYXBwZWFyIG5leHQgdG8gb3RoZXIgY2FzZXMgb2YgQWRkRXhwci5cblxuICAgIGNvbnN0IHNiID0gbmV3IGNvbW1vbiQyLlN0cmluZ0J1ZmZlcigpO1xuICAgIHNiLmFwcGVuZCgneycpO1xuXG4gICAgbGV0IGZpcnN0ID0gdHJ1ZTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ3VhcmQtZm9yLWluXG4gICAgZm9yIChjb25zdCBydWxlTmFtZSBpbiB0aGlzLnJ1bGVzKSB7XG4gICAgICBjb25zdCB7Ym9keX0gPSB0aGlzLnJ1bGVzW3J1bGVOYW1lXTtcbiAgICAgIGlmIChmaXJzdCkge1xuICAgICAgICBmaXJzdCA9IGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2IuYXBwZW5kKCcsJyk7XG4gICAgICB9XG4gICAgICBzYi5hcHBlbmQoJ1xcbicpO1xuICAgICAgc2IuYXBwZW5kKCcgICcpO1xuICAgICAgdGhpcy5hZGRTZW1hbnRpY0FjdGlvblRlbXBsYXRlKHJ1bGVOYW1lLCBib2R5LCBzYik7XG4gICAgfVxuXG4gICAgc2IuYXBwZW5kKCdcXG59Jyk7XG4gICAgcmV0dXJuIHNiLmNvbnRlbnRzKCk7XG4gIH0sXG5cbiAgYWRkU2VtYW50aWNBY3Rpb25UZW1wbGF0ZShydWxlTmFtZSwgYm9keSwgc2IpIHtcbiAgICBzYi5hcHBlbmQocnVsZU5hbWUpO1xuICAgIHNiLmFwcGVuZCgnOiBmdW5jdGlvbignKTtcbiAgICBjb25zdCBhcml0eSA9IHRoaXMuX3RvcERvd25BY3Rpb25Bcml0eShydWxlTmFtZSk7XG4gICAgc2IuYXBwZW5kKGNvbW1vbiQyLnJlcGVhdCgnXycsIGFyaXR5KS5qb2luKCcsICcpKTtcbiAgICBzYi5hcHBlbmQoJykge1xcbicpO1xuICAgIHNiLmFwcGVuZCgnICB9Jyk7XG4gIH0sXG5cbiAgLy8gUGFyc2UgYSBzdHJpbmcgd2hpY2ggZXhwcmVzc2VzIGEgcnVsZSBhcHBsaWNhdGlvbiBpbiB0aGlzIGdyYW1tYXIsIGFuZCByZXR1cm4gdGhlXG4gIC8vIHJlc3VsdGluZyBBcHBseSBub2RlLlxuICBwYXJzZUFwcGxpY2F0aW9uKHN0cikge1xuICAgIGxldCBhcHA7XG4gICAgaWYgKHN0ci5pbmRleE9mKCc8JykgPT09IC0xKSB7XG4gICAgICAvLyBzaW1wbGUgYXBwbGljYXRpb25cbiAgICAgIGFwcCA9IG5ldyBwZXhwcnMkMy5BcHBseShzdHIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBwYXJhbWV0ZXJpemVkIGFwcGxpY2F0aW9uXG4gICAgICBjb25zdCBjc3QgPSBvaG1HcmFtbWFyJDIubWF0Y2goc3RyLCAnQmFzZV9hcHBsaWNhdGlvbicpO1xuICAgICAgYXBwID0gYnVpbGRHcmFtbWFyJDEoY3N0LCB7fSk7XG4gICAgfVxuXG4gICAgLy8gRW5zdXJlIHRoYXQgdGhlIGFwcGxpY2F0aW9uIGlzIHZhbGlkLlxuICAgIGlmICghKGFwcC5ydWxlTmFtZSBpbiB0aGlzLnJ1bGVzKSkge1xuICAgICAgdGhyb3cgZXJyb3JzJDIudW5kZWNsYXJlZFJ1bGUoYXBwLnJ1bGVOYW1lLCB0aGlzLm5hbWUpO1xuICAgIH1cbiAgICBjb25zdCB7Zm9ybWFsc30gPSB0aGlzLnJ1bGVzW2FwcC5ydWxlTmFtZV07XG4gICAgaWYgKGZvcm1hbHMubGVuZ3RoICE9PSBhcHAuYXJncy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IHtzb3VyY2V9ID0gdGhpcy5ydWxlc1thcHAucnVsZU5hbWVdO1xuICAgICAgdGhyb3cgZXJyb3JzJDIud3JvbmdOdW1iZXJPZlBhcmFtZXRlcnMoXG4gICAgICAgICAgYXBwLnJ1bGVOYW1lLFxuICAgICAgICAgIGZvcm1hbHMubGVuZ3RoLFxuICAgICAgICAgIGFwcC5hcmdzLmxlbmd0aCxcbiAgICAgICAgICBzb3VyY2VcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBhcHA7XG4gIH0sXG59O1xuXG4vLyBUaGUgZm9sbG93aW5nIGdyYW1tYXIgY29udGFpbnMgYSBmZXcgcnVsZXMgdGhhdCBjb3VsZG4ndCBiZSB3cml0dGVuICBpbiBcInVzZXJsYW5kXCIuXG4vLyBBdCB0aGUgYm90dG9tIG9mIHNyYy9tYWluLmpzLCB3ZSBjcmVhdGUgYSBzdWItZ3JhbW1hciBvZiB0aGlzIGdyYW1tYXIgdGhhdCdzIGNhbGxlZFxuLy8gYEJ1aWx0SW5SdWxlc2AuIFRoYXQgZ3JhbW1hciBjb250YWlucyBzZXZlcmFsIGNvbnZlbmllbmNlIHJ1bGVzLCBlLmcuLCBgbGV0dGVyYCBhbmRcbi8vIGBkaWdpdGAsIGFuZCBpcyBpbXBsaWNpdGx5IHRoZSBzdXBlci1ncmFtbWFyIG9mIGFueSBncmFtbWFyIHdob3NlIHN1cGVyLWdyYW1tYXJcbi8vIGlzbid0IHNwZWNpZmllZC5cbkdyYW1tYXIkNC5Qcm90b0J1aWx0SW5SdWxlcyA9IG5ldyBHcmFtbWFyJDQoXG4gICAgJ1Byb3RvQnVpbHRJblJ1bGVzJywgLy8gbmFtZVxuICAgIHVuZGVmaW5lZCwgLy8gc3VwZXJncmFtbWFyXG4gICAge1xuICAgICAgYW55OiB7XG4gICAgICAgIGJvZHk6IHBleHBycyQzLmFueSxcbiAgICAgICAgZm9ybWFsczogW10sXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnYW55IGNoYXJhY3RlcicsXG4gICAgICAgIHByaW1pdGl2ZTogdHJ1ZSxcbiAgICAgIH0sXG4gICAgICBlbmQ6IHtcbiAgICAgICAgYm9keTogcGV4cHJzJDMuZW5kLFxuICAgICAgICBmb3JtYWxzOiBbXSxcbiAgICAgICAgZGVzY3JpcHRpb246ICdlbmQgb2YgaW5wdXQnLFxuICAgICAgICBwcmltaXRpdmU6IHRydWUsXG4gICAgICB9LFxuXG4gICAgICBjYXNlSW5zZW5zaXRpdmU6IHtcbiAgICAgICAgYm9keTogbmV3IENhc2VJbnNlbnNpdGl2ZVRlcm1pbmFsKG5ldyBwZXhwcnMkMy5QYXJhbSgwKSksXG4gICAgICAgIGZvcm1hbHM6IFsnc3RyJ10sXG4gICAgICAgIHByaW1pdGl2ZTogdHJ1ZSxcbiAgICAgIH0sXG4gICAgICBsb3dlcjoge1xuICAgICAgICBib2R5OiBuZXcgcGV4cHJzJDMuVW5pY29kZUNoYXIoJ0xsJyksXG4gICAgICAgIGZvcm1hbHM6IFtdLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ2EgbG93ZXJjYXNlIGxldHRlcicsXG4gICAgICAgIHByaW1pdGl2ZTogdHJ1ZSxcbiAgICAgIH0sXG4gICAgICB1cHBlcjoge1xuICAgICAgICBib2R5OiBuZXcgcGV4cHJzJDMuVW5pY29kZUNoYXIoJ0x1JyksXG4gICAgICAgIGZvcm1hbHM6IFtdLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ2FuIHVwcGVyY2FzZSBsZXR0ZXInLFxuICAgICAgICBwcmltaXRpdmU6IHRydWUsXG4gICAgICB9LFxuICAgICAgLy8gVW5pb24gb2YgTHQgKHRpdGxlY2FzZSksIExtIChtb2RpZmllciksIGFuZCBMbyAob3RoZXIpLCBpLmUuIGFueSBsZXR0ZXIgbm90IGluIExsIG9yIEx1LlxuICAgICAgdW5pY29kZUx0bW86IHtcbiAgICAgICAgYm9keTogbmV3IHBleHBycyQzLlVuaWNvZGVDaGFyKCdMdG1vJyksXG4gICAgICAgIGZvcm1hbHM6IFtdLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ2EgVW5pY29kZSBjaGFyYWN0ZXIgaW4gTHQsIExtLCBvciBMbycsXG4gICAgICAgIHByaW1pdGl2ZTogdHJ1ZSxcbiAgICAgIH0sXG5cbiAgICAgIC8vIFRoZXNlIHJ1bGVzIGFyZSBub3QgdHJ1bHkgcHJpbWl0aXZlICh0aGV5IGNvdWxkIGJlIHdyaXR0ZW4gaW4gdXNlcmxhbmQpIGJ1dCBhcmUgZGVmaW5lZFxuICAgICAgLy8gaGVyZSBmb3IgYm9vdHN0cmFwcGluZyBwdXJwb3Nlcy5cbiAgICAgIHNwYWNlczoge1xuICAgICAgICBib2R5OiBuZXcgcGV4cHJzJDMuU3RhcihuZXcgcGV4cHJzJDMuQXBwbHkoJ3NwYWNlJykpLFxuICAgICAgICBmb3JtYWxzOiBbXSxcbiAgICAgIH0sXG4gICAgICBzcGFjZToge1xuICAgICAgICBib2R5OiBuZXcgcGV4cHJzJDMuUmFuZ2UoJ1xceDAwJywgJyAnKSxcbiAgICAgICAgZm9ybWFsczogW10sXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnYSBzcGFjZScsXG4gICAgICB9LFxuICAgIH1cbik7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBFeHBvcnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgR3JhbW1hcl8xID0gR3JhbW1hciQ0O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSW1wb3J0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuY29uc3QgR3JhbW1hciQzID0gR3JhbW1hcl8xO1xuY29uc3QgSW5wdXRTdHJlYW0gPSBJbnB1dFN0cmVhbV8xO1xuY29uc3QgY29tbW9uJDEgPSBjb21tb24kbDtcbmNvbnN0IGVycm9ycyQxID0gZXJyb3JzJDk7XG5jb25zdCBwZXhwcnMkMiA9IHBleHBycyQ2O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUHJpdmF0ZSBTdHVmZlxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gQ29uc3RydWN0b3JzXG5cbmZ1bmN0aW9uIEdyYW1tYXJEZWNsJDEobmFtZSkge1xuICB0aGlzLm5hbWUgPSBuYW1lO1xufVxuXG4vLyBIZWxwZXJzXG5cbkdyYW1tYXJEZWNsJDEucHJvdG90eXBlLnNvdXJjZUludGVydmFsID0gZnVuY3Rpb24oc3RhcnRJZHgsIGVuZElkeCkge1xuICByZXR1cm4gdGhpcy5zb3VyY2Uuc3ViSW50ZXJ2YWwoc3RhcnRJZHgsIGVuZElkeCAtIHN0YXJ0SWR4KTtcbn07XG5cbkdyYW1tYXJEZWNsJDEucHJvdG90eXBlLmVuc3VyZVN1cGVyR3JhbW1hciA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIXRoaXMuc3VwZXJHcmFtbWFyKSB7XG4gICAgdGhpcy53aXRoU3VwZXJHcmFtbWFyKFxuICAgICAgLy8gVE9ETzogVGhlIGNvbmRpdGlvbmFsIGV4cHJlc3Npb24gYmVsb3cgaXMgYW4gdWdseSBoYWNrLiBJdCdzIGtpbmQgb2Ygb2sgYmVjYXVzZVxuICAgICAgLy8gSSBkb3VidCBhbnlvbmUgd2lsbCBldmVyIHRyeSB0byBkZWNsYXJlIGEgZ3JhbW1hciBjYWxsZWQgYEJ1aWx0SW5SdWxlc2AuIFN0aWxsLFxuICAgICAgLy8gd2Ugc2hvdWxkIHRyeSB0byBmaW5kIGEgYmV0dGVyIHdheSB0byBkbyB0aGlzLlxuICAgICAgdGhpcy5uYW1lID09PSAnQnVpbHRJblJ1bGVzJyA/IEdyYW1tYXIkMy5Qcm90b0J1aWx0SW5SdWxlcyA6IEdyYW1tYXIkMy5CdWlsdEluUnVsZXNcbiAgICApO1xuICB9XG4gIHJldHVybiB0aGlzLnN1cGVyR3JhbW1hcjtcbn07XG5cbkdyYW1tYXJEZWNsJDEucHJvdG90eXBlLmVuc3VyZVN1cGVyR3JhbW1hclJ1bGVGb3JPdmVycmlkaW5nID0gZnVuY3Rpb24obmFtZSwgc291cmNlKSB7XG4gIGNvbnN0IHJ1bGVJbmZvID0gdGhpcy5lbnN1cmVTdXBlckdyYW1tYXIoKS5ydWxlc1tuYW1lXTtcbiAgaWYgKCFydWxlSW5mbykge1xuICAgIHRocm93IGVycm9ycyQxLmNhbm5vdE92ZXJyaWRlVW5kZWNsYXJlZFJ1bGUobmFtZSwgdGhpcy5zdXBlckdyYW1tYXIubmFtZSwgc291cmNlKTtcbiAgfVxuICByZXR1cm4gcnVsZUluZm87XG59O1xuXG5HcmFtbWFyRGVjbCQxLnByb3RvdHlwZS5pbnN0YWxsT3ZlcnJpZGRlbk9yRXh0ZW5kZWRSdWxlID0gZnVuY3Rpb24oXG4gICAgbmFtZSxcbiAgICBmb3JtYWxzLFxuICAgIGJvZHksXG4gICAgc291cmNlXG4pIHtcbiAgY29uc3QgZHVwbGljYXRlUGFyYW1ldGVyTmFtZXMgPSBjb21tb24kMS5nZXREdXBsaWNhdGVzKGZvcm1hbHMpO1xuICBpZiAoZHVwbGljYXRlUGFyYW1ldGVyTmFtZXMubGVuZ3RoID4gMCkge1xuICAgIHRocm93IGVycm9ycyQxLmR1cGxpY2F0ZVBhcmFtZXRlck5hbWVzKG5hbWUsIGR1cGxpY2F0ZVBhcmFtZXRlck5hbWVzLCBzb3VyY2UpO1xuICB9XG4gIGNvbnN0IHJ1bGVJbmZvID0gdGhpcy5lbnN1cmVTdXBlckdyYW1tYXIoKS5ydWxlc1tuYW1lXTtcbiAgY29uc3QgZXhwZWN0ZWRGb3JtYWxzID0gcnVsZUluZm8uZm9ybWFscztcbiAgY29uc3QgZXhwZWN0ZWROdW1Gb3JtYWxzID0gZXhwZWN0ZWRGb3JtYWxzID8gZXhwZWN0ZWRGb3JtYWxzLmxlbmd0aCA6IDA7XG4gIGlmIChmb3JtYWxzLmxlbmd0aCAhPT0gZXhwZWN0ZWROdW1Gb3JtYWxzKSB7XG4gICAgdGhyb3cgZXJyb3JzJDEud3JvbmdOdW1iZXJPZlBhcmFtZXRlcnMobmFtZSwgZXhwZWN0ZWROdW1Gb3JtYWxzLCBmb3JtYWxzLmxlbmd0aCwgc291cmNlKTtcbiAgfVxuICByZXR1cm4gdGhpcy5pbnN0YWxsKG5hbWUsIGZvcm1hbHMsIGJvZHksIHJ1bGVJbmZvLmRlc2NyaXB0aW9uLCBzb3VyY2UpO1xufTtcblxuR3JhbW1hckRlY2wkMS5wcm90b3R5cGUuaW5zdGFsbCA9IGZ1bmN0aW9uKG5hbWUsIGZvcm1hbHMsIGJvZHksIGRlc2NyaXB0aW9uLCBzb3VyY2UpIHtcbiAgdGhpcy5ydWxlc1tuYW1lXSA9IHtcbiAgICBib2R5OiBib2R5LmludHJvZHVjZVBhcmFtcyhmb3JtYWxzKSxcbiAgICBmb3JtYWxzLFxuICAgIGRlc2NyaXB0aW9uLFxuICAgIHNvdXJjZSxcbiAgfTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBTdHVmZiB0aGF0IHlvdSBzaG91bGQgb25seSBkbyBvbmNlXG5cbkdyYW1tYXJEZWNsJDEucHJvdG90eXBlLndpdGhTdXBlckdyYW1tYXIgPSBmdW5jdGlvbihzdXBlckdyYW1tYXIpIHtcbiAgaWYgKHRoaXMuc3VwZXJHcmFtbWFyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd0aGUgc3VwZXIgZ3JhbW1hciBvZiBhIEdyYW1tYXJEZWNsIGNhbm5vdCBiZSBzZXQgbW9yZSB0aGFuIG9uY2UnKTtcbiAgfVxuICB0aGlzLnN1cGVyR3JhbW1hciA9IHN1cGVyR3JhbW1hcjtcbiAgdGhpcy5ydWxlcyA9IE9iamVjdC5jcmVhdGUoc3VwZXJHcmFtbWFyLnJ1bGVzKTtcblxuICAvLyBHcmFtbWFycyB3aXRoIGFuIGV4cGxpY2l0IHN1cGVyZ3JhbW1hciBpbmhlcml0IGEgZGVmYXVsdCBzdGFydCBydWxlLlxuICBpZiAoIXN1cGVyR3JhbW1hci5pc0J1aWx0SW4oKSkge1xuICAgIHRoaXMuZGVmYXVsdFN0YXJ0UnVsZSA9IHN1cGVyR3JhbW1hci5kZWZhdWx0U3RhcnRSdWxlO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuR3JhbW1hckRlY2wkMS5wcm90b3R5cGUud2l0aERlZmF1bHRTdGFydFJ1bGUgPSBmdW5jdGlvbihydWxlTmFtZSkge1xuICB0aGlzLmRlZmF1bHRTdGFydFJ1bGUgPSBydWxlTmFtZTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5HcmFtbWFyRGVjbCQxLnByb3RvdHlwZS53aXRoU291cmNlID0gZnVuY3Rpb24oc291cmNlKSB7XG4gIHRoaXMuc291cmNlID0gbmV3IElucHV0U3RyZWFtKHNvdXJjZSkuaW50ZXJ2YWwoMCwgc291cmNlLmxlbmd0aCk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gQ3JlYXRlcyBhIEdyYW1tYXIgaW5zdGFuY2UsIGFuZCBpZiBpdCBwYXNzZXMgdGhlIHNhbml0eSBjaGVja3MsIHJldHVybnMgaXQuXG5HcmFtbWFyRGVjbCQxLnByb3RvdHlwZS5idWlsZCA9IGZ1bmN0aW9uKCkge1xuICBjb25zdCBncmFtbWFyID0gbmV3IEdyYW1tYXIkMyhcbiAgICAgIHRoaXMubmFtZSxcbiAgICAgIHRoaXMuZW5zdXJlU3VwZXJHcmFtbWFyKCksXG4gICAgICB0aGlzLnJ1bGVzLFxuICAgICAgdGhpcy5kZWZhdWx0U3RhcnRSdWxlXG4gICk7XG5cbiAgLy8gVE9ETzogY2hhbmdlIHRoZSBwZXhwci5wcm90b3R5cGUuYXNzZXJ0Li4uIG1ldGhvZHMgdG8gbWFrZSB0aGVtIGFkZFxuICAvLyBleGNlcHRpb25zIHRvIGFuIGFycmF5IHRoYXQncyBwcm92aWRlZCBhcyBhbiBhcmcuIFRoZW4gd2UnbGwgYmUgYWJsZSB0b1xuICAvLyBzaG93IG1vcmUgdGhhbiBvbmUgZXJyb3Igb2YgdGhlIHNhbWUgdHlwZSBhdCBhIHRpbWUuXG4gIC8vIFRPRE86IGluY2x1ZGUgdGhlIG9mZmVuZGluZyBwZXhwciBpbiB0aGUgZXJyb3JzLCB0aGF0IHdheSB3ZSBjYW4gc2hvd1xuICAvLyB0aGUgcGFydCBvZiB0aGUgc291cmNlIHRoYXQgY2F1c2VkIGl0LlxuICBjb25zdCBncmFtbWFyRXJyb3JzID0gW107XG4gIGxldCBncmFtbWFySGFzSW52YWxpZEFwcGxpY2F0aW9ucyA9IGZhbHNlO1xuICBPYmplY3Qua2V5cyhncmFtbWFyLnJ1bGVzKS5mb3JFYWNoKHJ1bGVOYW1lID0+IHtcbiAgICBjb25zdCB7Ym9keX0gPSBncmFtbWFyLnJ1bGVzW3J1bGVOYW1lXTtcbiAgICB0cnkge1xuICAgICAgYm9keS5hc3NlcnRDaG9pY2VzSGF2ZVVuaWZvcm1Bcml0eShydWxlTmFtZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZ3JhbW1hckVycm9ycy5wdXNoKGUpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgYm9keS5hc3NlcnRBbGxBcHBsaWNhdGlvbnNBcmVWYWxpZChydWxlTmFtZSwgZ3JhbW1hcik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZ3JhbW1hckVycm9ycy5wdXNoKGUpO1xuICAgICAgZ3JhbW1hckhhc0ludmFsaWRBcHBsaWNhdGlvbnMgPSB0cnVlO1xuICAgIH1cbiAgfSk7XG4gIGlmICghZ3JhbW1hckhhc0ludmFsaWRBcHBsaWNhdGlvbnMpIHtcbiAgICAvLyBUaGUgZm9sbG93aW5nIGNoZWNrIGNhbiBvbmx5IGJlIGRvbmUgaWYgdGhlIGdyYW1tYXIgaGFzIG5vIGludmFsaWQgYXBwbGljYXRpb25zLlxuICAgIE9iamVjdC5rZXlzKGdyYW1tYXIucnVsZXMpLmZvckVhY2gocnVsZU5hbWUgPT4ge1xuICAgICAgY29uc3Qge2JvZHl9ID0gZ3JhbW1hci5ydWxlc1tydWxlTmFtZV07XG4gICAgICB0cnkge1xuICAgICAgICBib2R5LmFzc2VydEl0ZXJhdGVkRXhwcnNBcmVOb3ROdWxsYWJsZShncmFtbWFyLCBbXSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGdyYW1tYXJFcnJvcnMucHVzaChlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBpZiAoZ3JhbW1hckVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgZXJyb3JzJDEudGhyb3dFcnJvcnMoZ3JhbW1hckVycm9ycyk7XG4gIH1cbiAgaWYgKHRoaXMuc291cmNlKSB7XG4gICAgZ3JhbW1hci5zb3VyY2UgPSB0aGlzLnNvdXJjZTtcbiAgfVxuXG4gIHJldHVybiBncmFtbWFyO1xufTtcblxuLy8gUnVsZSBkZWNsYXJhdGlvbnNcblxuR3JhbW1hckRlY2wkMS5wcm90b3R5cGUuZGVmaW5lID0gZnVuY3Rpb24obmFtZSwgZm9ybWFscywgYm9keSwgZGVzY3JpcHRpb24sIHNvdXJjZSkge1xuICB0aGlzLmVuc3VyZVN1cGVyR3JhbW1hcigpO1xuICBpZiAodGhpcy5zdXBlckdyYW1tYXIucnVsZXNbbmFtZV0pIHtcbiAgICB0aHJvdyBlcnJvcnMkMS5kdXBsaWNhdGVSdWxlRGVjbGFyYXRpb24obmFtZSwgdGhpcy5uYW1lLCB0aGlzLnN1cGVyR3JhbW1hci5uYW1lLCBzb3VyY2UpO1xuICB9IGVsc2UgaWYgKHRoaXMucnVsZXNbbmFtZV0pIHtcbiAgICB0aHJvdyBlcnJvcnMkMS5kdXBsaWNhdGVSdWxlRGVjbGFyYXRpb24obmFtZSwgdGhpcy5uYW1lLCB0aGlzLm5hbWUsIHNvdXJjZSk7XG4gIH1cbiAgY29uc3QgZHVwbGljYXRlUGFyYW1ldGVyTmFtZXMgPSBjb21tb24kMS5nZXREdXBsaWNhdGVzKGZvcm1hbHMpO1xuICBpZiAoZHVwbGljYXRlUGFyYW1ldGVyTmFtZXMubGVuZ3RoID4gMCkge1xuICAgIHRocm93IGVycm9ycyQxLmR1cGxpY2F0ZVBhcmFtZXRlck5hbWVzKG5hbWUsIGR1cGxpY2F0ZVBhcmFtZXRlck5hbWVzLCBzb3VyY2UpO1xuICB9XG4gIHJldHVybiB0aGlzLmluc3RhbGwobmFtZSwgZm9ybWFscywgYm9keSwgZGVzY3JpcHRpb24sIHNvdXJjZSk7XG59O1xuXG5HcmFtbWFyRGVjbCQxLnByb3RvdHlwZS5vdmVycmlkZSA9IGZ1bmN0aW9uKG5hbWUsIGZvcm1hbHMsIGJvZHksIGRlc2NJZ25vcmVkLCBzb3VyY2UpIHtcbiAgdGhpcy5lbnN1cmVTdXBlckdyYW1tYXJSdWxlRm9yT3ZlcnJpZGluZyhuYW1lLCBzb3VyY2UpO1xuICB0aGlzLmluc3RhbGxPdmVycmlkZGVuT3JFeHRlbmRlZFJ1bGUobmFtZSwgZm9ybWFscywgYm9keSwgc291cmNlKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5HcmFtbWFyRGVjbCQxLnByb3RvdHlwZS5leHRlbmQgPSBmdW5jdGlvbihuYW1lLCBmb3JtYWxzLCBmcmFnbWVudCwgZGVzY0lnbm9yZWQsIHNvdXJjZSkge1xuICBjb25zdCBydWxlSW5mbyA9IHRoaXMuZW5zdXJlU3VwZXJHcmFtbWFyKCkucnVsZXNbbmFtZV07XG4gIGlmICghcnVsZUluZm8pIHtcbiAgICB0aHJvdyBlcnJvcnMkMS5jYW5ub3RFeHRlbmRVbmRlY2xhcmVkUnVsZShuYW1lLCB0aGlzLnN1cGVyR3JhbW1hci5uYW1lLCBzb3VyY2UpO1xuICB9XG4gIGNvbnN0IGJvZHkgPSBuZXcgcGV4cHJzJDIuRXh0ZW5kKHRoaXMuc3VwZXJHcmFtbWFyLCBuYW1lLCBmcmFnbWVudCk7XG4gIGJvZHkuc291cmNlID0gZnJhZ21lbnQuc291cmNlO1xuICB0aGlzLmluc3RhbGxPdmVycmlkZGVuT3JFeHRlbmRlZFJ1bGUobmFtZSwgZm9ybWFscywgYm9keSwgc291cmNlKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gRXhwb3J0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIEdyYW1tYXJEZWNsXzEgPSBHcmFtbWFyRGVjbCQxO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSW1wb3J0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuY29uc3QgR3JhbW1hciQyID0gR3JhbW1hcl8xO1xuY29uc3QgR3JhbW1hckRlY2wgPSBHcmFtbWFyRGVjbF8xO1xuY29uc3QgcGV4cHJzJDEgPSBwZXhwcnMkNjtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFByaXZhdGUgc3R1ZmZcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmZ1bmN0aW9uIEJ1aWxkZXIkMigpIHt9XG5cbkJ1aWxkZXIkMi5wcm90b3R5cGUgPSB7XG4gIGN1cnJlbnREZWNsOiBudWxsLFxuICBjdXJyZW50UnVsZU5hbWU6IG51bGwsXG5cbiAgbmV3R3JhbW1hcihuYW1lKSB7XG4gICAgcmV0dXJuIG5ldyBHcmFtbWFyRGVjbChuYW1lKTtcbiAgfSxcblxuICBncmFtbWFyKG1ldGFJbmZvLCBuYW1lLCBzdXBlckdyYW1tYXIsIGRlZmF1bHRTdGFydFJ1bGUsIHJ1bGVzKSB7XG4gICAgY29uc3QgZ0RlY2wgPSBuZXcgR3JhbW1hckRlY2wobmFtZSk7XG4gICAgaWYgKHN1cGVyR3JhbW1hcikge1xuICAgICAgLy8gYHN1cGVyR3JhbW1hcmAgbWF5IGJlIGEgcmVjaXBlIChpLmUuIGFuIEFycmF5KSwgb3IgYW4gYWN0dWFsIGdyYW1tYXIgaW5zdGFuY2UuXG4gICAgICBnRGVjbC53aXRoU3VwZXJHcmFtbWFyKFxuICAgICAgICBzdXBlckdyYW1tYXIgaW5zdGFuY2VvZiBHcmFtbWFyJDIgPyBzdXBlckdyYW1tYXIgOiB0aGlzLmZyb21SZWNpcGUoc3VwZXJHcmFtbWFyKVxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKGRlZmF1bHRTdGFydFJ1bGUpIHtcbiAgICAgIGdEZWNsLndpdGhEZWZhdWx0U3RhcnRSdWxlKGRlZmF1bHRTdGFydFJ1bGUpO1xuICAgIH1cbiAgICBpZiAobWV0YUluZm8gJiYgbWV0YUluZm8uc291cmNlKSB7XG4gICAgICBnRGVjbC53aXRoU291cmNlKG1ldGFJbmZvLnNvdXJjZSk7XG4gICAgfVxuXG4gICAgdGhpcy5jdXJyZW50RGVjbCA9IGdEZWNsO1xuICAgIE9iamVjdC5rZXlzKHJ1bGVzKS5mb3JFYWNoKHJ1bGVOYW1lID0+IHtcbiAgICAgIHRoaXMuY3VycmVudFJ1bGVOYW1lID0gcnVsZU5hbWU7XG4gICAgICBjb25zdCBydWxlUmVjaXBlID0gcnVsZXNbcnVsZU5hbWVdO1xuXG4gICAgICBjb25zdCBhY3Rpb24gPSBydWxlUmVjaXBlWzBdOyAvLyBkZWZpbmUvZXh0ZW5kL292ZXJyaWRlXG4gICAgICBjb25zdCBtZXRhSW5mbyA9IHJ1bGVSZWNpcGVbMV07XG4gICAgICBjb25zdCBkZXNjcmlwdGlvbiA9IHJ1bGVSZWNpcGVbMl07XG4gICAgICBjb25zdCBmb3JtYWxzID0gcnVsZVJlY2lwZVszXTtcbiAgICAgIGNvbnN0IGJvZHkgPSB0aGlzLmZyb21SZWNpcGUocnVsZVJlY2lwZVs0XSk7XG5cbiAgICAgIGxldCBzb3VyY2U7XG4gICAgICBpZiAoZ0RlY2wuc291cmNlICYmIG1ldGFJbmZvICYmIG1ldGFJbmZvLnNvdXJjZUludGVydmFsKSB7XG4gICAgICAgIHNvdXJjZSA9IGdEZWNsLnNvdXJjZS5zdWJJbnRlcnZhbChcbiAgICAgICAgICAgIG1ldGFJbmZvLnNvdXJjZUludGVydmFsWzBdLFxuICAgICAgICAgICAgbWV0YUluZm8uc291cmNlSW50ZXJ2YWxbMV0gLSBtZXRhSW5mby5zb3VyY2VJbnRlcnZhbFswXVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgZ0RlY2xbYWN0aW9uXShydWxlTmFtZSwgZm9ybWFscywgYm9keSwgZGVzY3JpcHRpb24sIHNvdXJjZSk7XG4gICAgfSk7XG4gICAgdGhpcy5jdXJyZW50UnVsZU5hbWUgPSB0aGlzLmN1cnJlbnREZWNsID0gbnVsbDtcbiAgICByZXR1cm4gZ0RlY2wuYnVpbGQoKTtcbiAgfSxcblxuICB0ZXJtaW5hbCh4KSB7XG4gICAgcmV0dXJuIG5ldyBwZXhwcnMkMS5UZXJtaW5hbCh4KTtcbiAgfSxcblxuICByYW5nZShmcm9tLCB0bykge1xuICAgIHJldHVybiBuZXcgcGV4cHJzJDEuUmFuZ2UoZnJvbSwgdG8pO1xuICB9LFxuXG4gIHBhcmFtKGluZGV4KSB7XG4gICAgcmV0dXJuIG5ldyBwZXhwcnMkMS5QYXJhbShpbmRleCk7XG4gIH0sXG5cbiAgYWx0KC4uLnRlcm1BcmdzKSB7XG4gICAgbGV0IHRlcm1zID0gW107XG4gICAgZm9yIChsZXQgYXJnIG9mIHRlcm1BcmdzKSB7XG4gICAgICBpZiAoIShhcmcgaW5zdGFuY2VvZiBwZXhwcnMkMS5QRXhwcikpIHtcbiAgICAgICAgYXJnID0gdGhpcy5mcm9tUmVjaXBlKGFyZyk7XG4gICAgICB9XG4gICAgICBpZiAoYXJnIGluc3RhbmNlb2YgcGV4cHJzJDEuQWx0KSB7XG4gICAgICAgIHRlcm1zID0gdGVybXMuY29uY2F0KGFyZy50ZXJtcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0ZXJtcy5wdXNoKGFyZyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0ZXJtcy5sZW5ndGggPT09IDEgPyB0ZXJtc1swXSA6IG5ldyBwZXhwcnMkMS5BbHQodGVybXMpO1xuICB9LFxuXG4gIHNlcSguLi5mYWN0b3JBcmdzKSB7XG4gICAgbGV0IGZhY3RvcnMgPSBbXTtcbiAgICBmb3IgKGxldCBhcmcgb2YgZmFjdG9yQXJncykge1xuICAgICAgaWYgKCEoYXJnIGluc3RhbmNlb2YgcGV4cHJzJDEuUEV4cHIpKSB7XG4gICAgICAgIGFyZyA9IHRoaXMuZnJvbVJlY2lwZShhcmcpO1xuICAgICAgfVxuICAgICAgaWYgKGFyZyBpbnN0YW5jZW9mIHBleHBycyQxLlNlcSkge1xuICAgICAgICBmYWN0b3JzID0gZmFjdG9ycy5jb25jYXQoYXJnLmZhY3RvcnMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmFjdG9ycy5wdXNoKGFyZyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWN0b3JzLmxlbmd0aCA9PT0gMSA/IGZhY3RvcnNbMF0gOiBuZXcgcGV4cHJzJDEuU2VxKGZhY3RvcnMpO1xuICB9LFxuXG4gIHN0YXIoZXhwcikge1xuICAgIGlmICghKGV4cHIgaW5zdGFuY2VvZiBwZXhwcnMkMS5QRXhwcikpIHtcbiAgICAgIGV4cHIgPSB0aGlzLmZyb21SZWNpcGUoZXhwcik7XG4gICAgfVxuICAgIHJldHVybiBuZXcgcGV4cHJzJDEuU3RhcihleHByKTtcbiAgfSxcblxuICBwbHVzKGV4cHIpIHtcbiAgICBpZiAoIShleHByIGluc3RhbmNlb2YgcGV4cHJzJDEuUEV4cHIpKSB7XG4gICAgICBleHByID0gdGhpcy5mcm9tUmVjaXBlKGV4cHIpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IHBleHBycyQxLlBsdXMoZXhwcik7XG4gIH0sXG5cbiAgb3B0KGV4cHIpIHtcbiAgICBpZiAoIShleHByIGluc3RhbmNlb2YgcGV4cHJzJDEuUEV4cHIpKSB7XG4gICAgICBleHByID0gdGhpcy5mcm9tUmVjaXBlKGV4cHIpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IHBleHBycyQxLk9wdChleHByKTtcbiAgfSxcblxuICBub3QoZXhwcikge1xuICAgIGlmICghKGV4cHIgaW5zdGFuY2VvZiBwZXhwcnMkMS5QRXhwcikpIHtcbiAgICAgIGV4cHIgPSB0aGlzLmZyb21SZWNpcGUoZXhwcik7XG4gICAgfVxuICAgIHJldHVybiBuZXcgcGV4cHJzJDEuTm90KGV4cHIpO1xuICB9LFxuXG4gIGxhKGV4cHIpIHtcbiAgICAvLyBUT0RPOiB0ZW1wb3JhcnkgdG8gc3RpbGwgYmUgYWJsZSB0byByZWFkIG9sZCByZWNpcGVzXG4gICAgcmV0dXJuIHRoaXMubG9va2FoZWFkKGV4cHIpO1xuICB9LFxuXG4gIGxvb2thaGVhZChleHByKSB7XG4gICAgaWYgKCEoZXhwciBpbnN0YW5jZW9mIHBleHBycyQxLlBFeHByKSkge1xuICAgICAgZXhwciA9IHRoaXMuZnJvbVJlY2lwZShleHByKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBwZXhwcnMkMS5Mb29rYWhlYWQoZXhwcik7XG4gIH0sXG5cbiAgbGV4KGV4cHIpIHtcbiAgICBpZiAoIShleHByIGluc3RhbmNlb2YgcGV4cHJzJDEuUEV4cHIpKSB7XG4gICAgICBleHByID0gdGhpcy5mcm9tUmVjaXBlKGV4cHIpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IHBleHBycyQxLkxleChleHByKTtcbiAgfSxcblxuICBhcHAocnVsZU5hbWUsIG9wdFBhcmFtcykge1xuICAgIGlmIChvcHRQYXJhbXMgJiYgb3B0UGFyYW1zLmxlbmd0aCA+IDApIHtcbiAgICAgIG9wdFBhcmFtcyA9IG9wdFBhcmFtcy5tYXAoZnVuY3Rpb24ocGFyYW0pIHtcbiAgICAgICAgcmV0dXJuIHBhcmFtIGluc3RhbmNlb2YgcGV4cHJzJDEuUEV4cHIgPyBwYXJhbSA6IHRoaXMuZnJvbVJlY2lwZShwYXJhbSk7XG4gICAgICB9LCB0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBwZXhwcnMkMS5BcHBseShydWxlTmFtZSwgb3B0UGFyYW1zKTtcbiAgfSxcblxuICAvLyBOb3RlIHRoYXQgdW5saWtlIG90aGVyIG1ldGhvZHMgaW4gdGhpcyBjbGFzcywgdGhpcyBtZXRob2QgY2Fubm90IGJlIHVzZWQgYXMgYVxuICAvLyBjb252ZW5pZW5jZSBjb25zdHJ1Y3Rvci4gSXQgb25seSB3b3JrcyB3aXRoIHJlY2lwZXMsIGJlY2F1c2UgaXQgcmVsaWVzIG9uXG4gIC8vIGB0aGlzLmN1cnJlbnREZWNsYCBhbmQgYHRoaXMuY3VycmVudFJ1bGVOYW1lYCBiZWluZyBzZXQuXG4gIHNwbGljZShiZWZvcmVUZXJtcywgYWZ0ZXJUZXJtcykge1xuICAgIHJldHVybiBuZXcgcGV4cHJzJDEuU3BsaWNlKFxuICAgICAgICB0aGlzLmN1cnJlbnREZWNsLnN1cGVyR3JhbW1hcixcbiAgICAgICAgdGhpcy5jdXJyZW50UnVsZU5hbWUsXG4gICAgICAgIGJlZm9yZVRlcm1zLm1hcCh0ZXJtID0+IHRoaXMuZnJvbVJlY2lwZSh0ZXJtKSksXG4gICAgICAgIGFmdGVyVGVybXMubWFwKHRlcm0gPT4gdGhpcy5mcm9tUmVjaXBlKHRlcm0pKVxuICAgICk7XG4gIH0sXG5cbiAgZnJvbVJlY2lwZShyZWNpcGUpIHtcbiAgICAvLyB0aGUgbWV0YS1pbmZvIG9mICdncmFtbWFyJyBpcyBwcm9jZXNzZWQgaW4gQnVpbGRlci5ncmFtbWFyXG4gICAgY29uc3QgYXJncyA9IHJlY2lwZVswXSA9PT0gJ2dyYW1tYXInID8gcmVjaXBlLnNsaWNlKDEpIDogcmVjaXBlLnNsaWNlKDIpO1xuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXNbcmVjaXBlWzBdXSguLi5hcmdzKTtcblxuICAgIGNvbnN0IG1ldGFJbmZvID0gcmVjaXBlWzFdO1xuICAgIGlmIChtZXRhSW5mbykge1xuICAgICAgaWYgKG1ldGFJbmZvLnNvdXJjZUludGVydmFsICYmIHRoaXMuY3VycmVudERlY2wpIHtcbiAgICAgICAgcmVzdWx0LndpdGhTb3VyY2UodGhpcy5jdXJyZW50RGVjbC5zb3VyY2VJbnRlcnZhbCguLi5tZXRhSW5mby5zb3VyY2VJbnRlcnZhbCkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LFxufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEV4cG9ydHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBCdWlsZGVyXzEgPSBCdWlsZGVyJDI7XG5cbnZhciBuYW1lID0gXCJvaG0tanNcIjtcbnZhciB2ZXJzaW9uJDIgPSBcIjE2LjMuNFwiO1xudmFyIGRlc2NyaXB0aW9uID0gXCJBbiBvYmplY3Qtb3JpZW50ZWQgbGFuZ3VhZ2UgZm9yIHBhcnNpbmcgYW5kIHBhdHRlcm4gbWF0Y2hpbmdcIjtcbnZhciByZXBvc2l0b3J5ID0gXCJodHRwczovL2dpdGh1Yi5jb20vaGFyYy9vaG1cIjtcbnZhciBrZXl3b3JkcyA9IFtcblx0XCJwYXJzZXJcIixcblx0XCJjb21waWxlclwiLFxuXHRcInBhdHRlcm4gbWF0Y2hpbmdcIixcblx0XCJwYXR0ZXJuLW1hdGNoaW5nXCIsXG5cdFwib21ldGFcIixcblx0XCJvbWV0YS9qc1wiLFxuXHRcIm9tZXRhLWpzXCIsXG5cdFwib21ldGFqc1wiLFxuXHRcInJhcGlkXCIsXG5cdFwicHJvdG90eXBpbmdcIlxuXTtcbnZhciBob21lcGFnZSA9IFwiaHR0cHM6Ly9vaG1qcy5vcmdcIjtcbnZhciBidWdzID0gXCJodHRwczovL2dpdGh1Yi5jb20vaGFyYy9vaG0vaXNzdWVzXCI7XG52YXIgbWFpbiA9IFwiaW5kZXguanNcIjtcbnZhciBtb2R1bGUgPSBcImRpc3Qvb2htLmVzbS5qc1wiO1xudmFyIGZpbGVzID0gW1xuXHRcInNyY1wiLFxuXHRcImRpc3RcIixcblx0XCJleHRyYXNcIixcblx0XCJ0aGlyZF9wYXJ0eVwiLFxuXHRcImluZGV4LmQudHNcIlxuXTtcbnZhciB0eXBlcyA9IFwiaW5kZXguZC50c1wiO1xudmFyIHNjcmlwdHMgPSB7XG5cdHByZWJvb3RzdHJhcDogXCJiYXNoIHNjcmlwdHMvcHJlYm9vdHN0cmFwXCIsXG5cdGJvb3RzdHJhcDogXCJiYXNoIHNjcmlwdHMvYm9vdHN0cmFwIC0tdGVzdCB8fCAoZWNobyAnQm9vdHN0cmFwIGZhaWxlZC4nICYmIG12IC12IGRpc3Qvb2htLWdyYW1tYXIuanMub2xkIGRpc3Qvb2htLWdyYW1tYXIuanMgJiYgbXYgLXYgZGlzdC9idWlsdC1pbi1ydWxlcy5qcy5vbGQgZGlzdC9idWlsdC1pbi1ydWxlcy5qcyAmJiBtdiAtdiBkaXN0L29wZXJhdGlvbnMtYW5kLWF0dHJpYnV0ZXMuanMub2xkIGRpc3Qvb3BlcmF0aW9ucy1hbmQtYXR0cmlidXRlcy5qcylcIixcblx0YnVpbGQ6IFwieWFybiBidWlsZC1kZWJ1ZyAmJiB3ZWJwYWNrIC0tbW9kZT1wcm9kdWN0aW9uXCIsXG5cdFwiYnVpbGQtZGVidWdcIjogXCJ3ZWJwYWNrIC0tbW9kZT1kZXZlbG9wbWVudCAmJiB5YXJuIGJ1aWxkLWVzbSAmJiBub2RlIHNjcmlwdHMvZ2VuZXJhdGUtdHlwZXMubWpzXCIsXG5cdFwiYnVpbGQtZXNtXCI6IFwicm9sbHVwIC1jIHJvbGx1cC5jb25maWcubWpzXCIsXG5cdGNsZWFuOiBcInJtIC1mIGRpc3Qvb2htLmpzIGRpc3Qvb2htLm1pbi5qc1wiLFxuXHRsaW50OiBcImVzbGludCAuIC0taWdub3JlLXBhdGggLi4vLmVzbGludGlnbm9yZVwiLFxuXHRmb3JtYXQ6IFwicHJldHRpZXIgLiAtLXdyaXRlIC0taWdub3JlLXBhdGggLi4vLnByZXR0aWVyaWdub3JlIC0tY29uZmlnIC4uLy5wcmV0dGllcnJjICYmIGVzbGludCAuIC0taWdub3JlLXBhdGggLi4vLmVzbGludGlnbm9yZSAtLWZpeFwiLFxuXHR0ZXN0OiBcImF2YSAmJiBhdmEgLS1jb25maWcgYXZhLXRzLmNvbmZpZy5qcyB0ZXN0L3Rlc3QtdHlwaW5ncy50c1wiLFxuXHRcInRlc3Qtd2F0Y2hcIjogXCJhdmEgLS13YXRjaFwiLFxuXHRcInByZS1jb21taXRcIjogXCJ5YXJuIHJ1biBsaW50ICYmIHlhcm4gcnVuIGJ1aWxkICYmIHlhcm4gcnVuIHRlc3RcIixcblx0cHJlcHVibGlzaE9ubHk6IFwiYmFzaCBzY3JpcHRzL3ByZXB1Ymxpc2hPbmx5XCIsXG5cdHByZXBhY2s6IFwiY3AgLi4vLi4vUkVBRE1FLm1kIC4gJiYgeWFybiBidWlsZFwiLFxuXHRwb3N0cGFjazogXCJybSBSRUFETUUubWRcIixcblx0cG9zdHB1Ymxpc2g6IFwiZWNobyAn8J+RiSAgTm93IGdvIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9oYXJjL29obS9yZWxlYXNlcyBhbmQgY3JlYXRlIGEgcmVsZWFzZS4nXCIsXG5cdFwidW5zYWZlLWJvb3RzdHJhcFwiOiBcImJhc2ggc2NyaXB0cy9ib290c3RyYXBcIixcblx0XCJ1cGRhdGUtY29udHJpYnV0b3JzXCI6IFwiYmFzaCBzY3JpcHRzL3VwZGF0ZS1jb250cmlidXRvcnNcIixcblx0d2F0Y2g6IFwid2VicGFjayAtLW1vZGU9ZGV2ZWxvcG1lbnQgLS13YXRjaFwiXG59O1xudmFyIGxpY2Vuc2UgPSBcIk1JVFwiO1xudmFyIGF1dGhvciA9IFwiQWxleCBXYXJ0aCA8YWxleHdhcnRoQGdtYWlsLmNvbT4gKGh0dHA6Ly90aW5saXp6aWUub3JnL35hd2FydGgpXCI7XG52YXIgY29udHJpYnV0b3JzID0gW1xuXHRcIlBhdHJpY2sgRHVicm95IDxwZHVicm95QGdtYWlsLmNvbT5cIixcblx0XCJNZWl4aWFuIExpIDxsbWVpeGlhbkBnbWFpbC5jb20+XCIsXG5cdFwiTWFya28gUsO2ZGVyIDxtLnJvZWRlckBwaG90b24tc29mdHdhcmUuZGU+XCIsXG5cdFwiVG9ueSBHYXJub2NrLUpvbmVzIDx0b255Z2Fybm9ja2pvbmVzQGdtYWlsLmNvbT5cIixcblx0XCJTYWtldGggS2FzaWJhdGxhIDxzYWtlLmthc2lAZ21haWwuY29tPlwiLFxuXHRcIkxpb25lbCBMYW5kd2VybGluIDxsbGFuZHdlcmxpbkBnbWFpbC5jb20+XCIsXG5cdFwiUmF5IFRvYWwgPHJ0b2FsQGxtdS5lZHU+XCIsXG5cdFwiSmFzb24gTWVycmlsbCA8andtZXJyaWxsQGdtYWlsLmNvbT5cIixcblx0XCJZb3NoaWtpIE9oc2hpbWEgPFlvc2hpa2kuT2hzaGltYUBhY20ub3JnPlwiLFxuXHRcIm1lZ2FidXogPDMyOTk4ODkrbWVnYWJ1ekB1c2Vycy5ub3JlcGx5LmdpdGh1Yi5jb20+XCIsXG5cdFwiTWlsYW4gTGFqdG/FoSA8bWlsYW4ubGFqdG9zQG1lLmNvbT5cIixcblx0XCJOZWlsIEpld2VycyA8bmpqZXdlcnNAdXdhdGVybG9vLmNhPlwiLFxuXHRcIkpvbmF0aGFuIEVkd2FyZHMgPEpvbmF0aGFuTUVkd2FyZHNAZ21haWwuY29tPlwiLFxuXHRcInN0YWdhcyA8Z3N0YWdhc0BnbWFpbC5jb20+XCIsXG5cdFwiRGFuaWVsIFRvbWxpbnNvbiA8RGFuaWVsVG9tbGluc29uQG1lLmNvbT5cIixcblx0XCJQaWVycmUgRG9uaWFzIDxwaWVycmUuZG9uaWFzQGdtYWlsLmNvbT5cIixcblx0XCJDYXNleSBPbHNvbiA8Y2FzZXkubS5vbHNvbkBnbWFpbC5jb20+XCIsXG5cdFwiQXJ0aHVyIENhcmFib3R0IDxhcnRodXJjQGdtYWlsLmNvbT5cIixcblx0XCJTdGFuIFJvemVucmF1a2ggPHN0YW5Ac3RhbmlzdGFuLmNvbT5cIixcblx0XCJTdGVwaGFuIFNlaWR0IDxzdGVwaGFuLnNlaWR0QGdtYWlsLmNvbT5cIixcblx0XCJMZXNsaWUgWWluZyA8YWNldG9waG9yZUB1c2Vycy5ub3JlcGx5LmdpdGh1Yi5jb20+XCIsXG5cdFwiU3p5bW9uIEthbGlza2kgPGthbGlza2lzenltb25AZ21haWwuY29tPlwiLFxuXHRcIlRob21hcyBOeWJlcmcgPHRvbW55YmVyZ0BnbWFpbC5jb20+XCIsXG5cdFwiQW5ncnlQb3dtYW4gPGFuZ3J5cG93bWFuQHFxLmNvbT5cIixcblx0XCJWc2UgTW96aGV0IEJ5dCA8dnNlbW96aGV0Ynl0QGdtYWlsLmNvbT5cIixcblx0XCJXaWwgQ2h1bmcgPDEwNDQ2K2lhbXdpbGhlbG1AdXNlcnMubm9yZXBseS5naXRodWIuY29tPlwiLFxuXHRcIlphY2hhcnkgU2Frb3dpdHogPHpzYWtvd2l0ekBnbWFpbC5jb20+XCIsXG5cdFwiYWJlZ28gPHViQGFiZWdvLXNvZnR3YXJlLmRlPlwiLFxuXHRcImFjc2xrIDxkX3ZkNDE1QGhvdG1haWwuY29tPlwiLFxuXHRcImNvZGVaZWlsZW4gPGNvZGVaZWlsZW5AdXNlcnMubm9yZXBseS5naXRodWIuY29tPlwiLFxuXHRcImthc3NhZGluIDxrYXNzYWRpbkBmb3htYWlsLmNvbT5cIixcblx0XCJvd2NoIDxib3dlbnJhaW55ZGF5QGdtYWlsLmNvbT5cIixcblx0XCJzZmlubmllIDxzY290dC5maW5uaWVAZ21haWwuY29tPlwiLFxuXHRcIlN0ZXZlIFBoaWxsaXBzIDxzdGV2ZUB0cnlpbmd0b2JlYXdlc29tZS5jb20+XCIsXG5cdFwiSnVzdGluIENoYXNlIDxqdXN0aW4ubS5jaGFzZUBnbWFpbC5jb20+XCIsXG5cdFwiTHVjYSBHdXp6b24gPGx1Y2EuZ3V6em9uQGdtYWlsLmNvbT5cIixcblx0XCJJYW4gSGFycmlzIDxpYW5AZm9mZ29mLnh5ej5cIixcblx0XCJNaWtlIE5pZWJsaW5nIDwobm9uZSk+XCIsXG5cdFwiUGF0cmljayBEdWJyb3kgPHBhdHJpY2tAc291cmNlZ3JhcGguY29tPlwiXG5dO1xudmFyIGRlcGVuZGVuY2llcyA9IHtcbn07XG52YXIgZGV2RGVwZW5kZW5jaWVzID0ge1xuXHRcIkBvaG0tanMvY2xpXCI6IFwiXjEuMC4wXCIsXG5cdFwiQHJvbGx1cC9wbHVnaW4tY29tbW9uanNcIjogXCJeMjEuMC4xXCIsXG5cdFwiQHJvbGx1cC9wbHVnaW4tanNvblwiOiBcIl40LjEuMFwiLFxuXHRcIkByb2xsdXAvcGx1Z2luLW5vZGUtcmVzb2x2ZVwiOiBcIl4xMy4xLjNcIixcblx0YXZhOiBcIl4zLjE1LjBcIixcblx0XCJhdmEtc3BlY1wiOiBcIl4xLjEuMVwiLFxuXHRkZWRlbnQ6IFwiXjAuNy4wXCIsXG5cdGVzbGludDogXCJeNy45LjBcIixcblx0XCJlc2xpbnQtY29uZmlnLWdvb2dsZVwiOiBcIl4wLjE0LjBcIixcblx0XCJlc2xpbnQtcGx1Z2luLWF2YVwiOiBcIl4xMS4wLjBcIixcblx0XCJlc2xpbnQtcGx1Z2luLWNhbWVsY2FzZS1vaG1cIjogXCJeMC4yLjFcIixcblx0XCJlc2xpbnQtcGx1Z2luLW5vLWV4dGVuc2lvbi1pbi1yZXF1aXJlXCI6IFwiXjAuMi4wXCIsXG5cdGh1c2t5OiBcIl40LjIuNVwiLFxuXHRqc2RvbTogXCJeOS45LjFcIixcblx0anNvbjogXCJeOS4wLjZcIixcblx0bWFya3NjcmlwdDogXCJeMC41LjBcIixcblx0XCJub2RlLXN0YXRpY1wiOiBcIl4wLjcuMTFcIixcblx0XCJvaG0tZ3JhbW1hci1lY21hc2NyaXB0XCI6IFwiXjEuMC4wXCIsXG5cdHJvbGx1cDogXCJeMi42My4wXCIsXG5cdFwidHMtbG9hZGVyXCI6IFwiXjguMC40XCIsXG5cdFwidHMtbm9kZVwiOiBcIl45LjAuMFwiLFxuXHR0eXBlc2NyaXB0OiBcIl40LjAuM1wiLFxuXHRcIndhbGstc3luY1wiOiBcIl4yLjIuMFwiLFxuXHR3ZWJwYWNrOiBcIl40LjQ0LjJcIixcblx0XCJ3ZWJwYWNrLWNsaVwiOiBcIl4zLjMuMTJcIlxufTtcbnZhciBlbmdpbmVzID0ge1xuXHRub2RlOiBcIj49MC4xMi4xXCJcbn07XG52YXIgcmVxdWlyZSQkMCA9IHtcblx0bmFtZTogbmFtZSxcblx0dmVyc2lvbjogdmVyc2lvbiQyLFxuXHRkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24sXG5cdHJlcG9zaXRvcnk6IHJlcG9zaXRvcnksXG5cdGtleXdvcmRzOiBrZXl3b3Jkcyxcblx0aG9tZXBhZ2U6IGhvbWVwYWdlLFxuXHRidWdzOiBidWdzLFxuXHRtYWluOiBtYWluLFxuXHRtb2R1bGU6IG1vZHVsZSxcblx0ZmlsZXM6IGZpbGVzLFxuXHR0eXBlczogdHlwZXMsXG5cdHNjcmlwdHM6IHNjcmlwdHMsXG5cdGxpY2Vuc2U6IGxpY2Vuc2UsXG5cdGF1dGhvcjogYXV0aG9yLFxuXHRjb250cmlidXRvcnM6IGNvbnRyaWJ1dG9ycyxcblx0ZGVwZW5kZW5jaWVzOiBkZXBlbmRlbmNpZXMsXG5cdGRldkRlcGVuZGVuY2llczogZGV2RGVwZW5kZW5jaWVzLFxuXHRlbmdpbmVzOiBlbmdpbmVzXG59O1xuXG4vKiBnbG9iYWwgX19HTE9CQUxfT0hNX1ZFUlNJT05fXyAqL1xuXG4vLyBXaGVuIHJ1bm5pbmcgdW5kZXIgTm9kZSwgcmVhZCB0aGUgdmVyc2lvbiBmcm9tIHBhY2thZ2UuanNvbi4gRm9yIHRoZSBicm93c2VyLFxuLy8gdXNlIGEgc3BlY2lhbCBnbG9iYWwgdmFyaWFibGUgZGVmaW5lZCBpbiB0aGUgYnVpbGQgcHJvY2VzcyAoc2VlIHdlYnBhY2suY29uZmlnLmpzKS5cbnZhciB2ZXJzaW9uJDEgPVxuICB0eXBlb2YgX19HTE9CQUxfT0hNX1ZFUlNJT05fXyA9PT0gJ3N0cmluZycgP1xuICAgIF9fR0xPQkFMX09ITV9WRVJTSU9OX18gOlxuICAgIHJlcXVpcmUkJDAudmVyc2lvbjtcblxudmFyIG1ha2VSZWNpcGUkNSA9IHt9O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSW1wb3J0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuY29uc3QgQnVpbGRlciQxID0gQnVpbGRlcl8xO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUHJpdmF0ZSBzdHVmZlxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZnVuY3Rpb24gbWFrZVJlY2lwZSQ0KHJlY2lwZSkge1xuICBpZiAodHlwZW9mIHJlY2lwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiByZWNpcGUuY2FsbChuZXcgQnVpbGRlciQxKCkpO1xuICB9IGVsc2Uge1xuICAgIGlmICh0eXBlb2YgcmVjaXBlID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gc3RyaW5naWZpZWQgSlNPTiByZWNpcGVcbiAgICAgIHJlY2lwZSA9IEpTT04ucGFyc2UocmVjaXBlKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBCdWlsZGVyJDEoKS5mcm9tUmVjaXBlKHJlY2lwZSk7XG4gIH1cbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEV4cG9ydHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbm1ha2VSZWNpcGUkNS5tYWtlUmVjaXBlID0gbWFrZVJlY2lwZSQ0O1xuXG52YXIge21ha2VSZWNpcGU6IG1ha2VSZWNpcGUkM30gPSBtYWtlUmVjaXBlJDU7XG52YXIgYnVpbHRJblJ1bGVzID0gbWFrZVJlY2lwZSQzKFtcImdyYW1tYXJcIix7XCJzb3VyY2VcIjpcIkJ1aWx0SW5SdWxlcyB7XFxuXFxuICBhbG51bSAgKGFuIGFscGhhLW51bWVyaWMgY2hhcmFjdGVyKVxcbiAgICA9IGxldHRlclxcbiAgICB8IGRpZ2l0XFxuXFxuICBsZXR0ZXIgIChhIGxldHRlcilcXG4gICAgPSBsb3dlclxcbiAgICB8IHVwcGVyXFxuICAgIHwgdW5pY29kZUx0bW9cXG5cXG4gIGRpZ2l0ICAoYSBkaWdpdClcXG4gICAgPSBcXFwiMFxcXCIuLlxcXCI5XFxcIlxcblxcbiAgaGV4RGlnaXQgIChhIGhleGFkZWNpbWFsIGRpZ2l0KVxcbiAgICA9IGRpZ2l0XFxuICAgIHwgXFxcImFcXFwiLi5cXFwiZlxcXCJcXG4gICAgfCBcXFwiQVxcXCIuLlxcXCJGXFxcIlxcblxcbiAgTGlzdE9mPGVsZW0sIHNlcD5cXG4gICAgPSBOb25lbXB0eUxpc3RPZjxlbGVtLCBzZXA+XFxuICAgIHwgRW1wdHlMaXN0T2Y8ZWxlbSwgc2VwPlxcblxcbiAgTm9uZW1wdHlMaXN0T2Y8ZWxlbSwgc2VwPlxcbiAgICA9IGVsZW0gKHNlcCBlbGVtKSpcXG5cXG4gIEVtcHR5TGlzdE9mPGVsZW0sIHNlcD5cXG4gICAgPSAvKiBub3RoaW5nICovXFxuXFxuICBsaXN0T2Y8ZWxlbSwgc2VwPlxcbiAgICA9IG5vbmVtcHR5TGlzdE9mPGVsZW0sIHNlcD5cXG4gICAgfCBlbXB0eUxpc3RPZjxlbGVtLCBzZXA+XFxuXFxuICBub25lbXB0eUxpc3RPZjxlbGVtLCBzZXA+XFxuICAgID0gZWxlbSAoc2VwIGVsZW0pKlxcblxcbiAgZW1wdHlMaXN0T2Y8ZWxlbSwgc2VwPlxcbiAgICA9IC8qIG5vdGhpbmcgKi9cXG5cXG4gIC8vIEFsbG93cyBhIHN5bnRhY3RpYyBydWxlIGFwcGxpY2F0aW9uIHdpdGhpbiBhIGxleGljYWwgY29udGV4dC5cXG4gIGFwcGx5U3ludGFjdGljPGFwcD4gPSBhcHBcXG59XCJ9LFwiQnVpbHRJblJ1bGVzXCIsbnVsbCxudWxsLHtcImFsbnVtXCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTgsNzhdfSxcImFuIGFscGhhLW51bWVyaWMgY2hhcmFjdGVyXCIsW10sW1wiYWx0XCIse1wic291cmNlSW50ZXJ2YWxcIjpbNjAsNzhdfSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls2MCw2Nl19LFwibGV0dGVyXCIsW11dLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzczLDc4XX0sXCJkaWdpdFwiLFtdXV1dLFwibGV0dGVyXCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbODIsMTQyXX0sXCJhIGxldHRlclwiLFtdLFtcImFsdFwiLHtcInNvdXJjZUludGVydmFsXCI6WzEwNywxNDJdfSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMDcsMTEyXX0sXCJsb3dlclwiLFtdXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMTksMTI0XX0sXCJ1cHBlclwiLFtdXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMzEsMTQyXX0sXCJ1bmljb2RlTHRtb1wiLFtdXV1dLFwiZGlnaXRcIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxNDYsMTc3XX0sXCJhIGRpZ2l0XCIsW10sW1wicmFuZ2VcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxNjksMTc3XX0sXCIwXCIsXCI5XCJdXSxcImhleERpZ2l0XCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTgxLDI1NF19LFwiYSBoZXhhZGVjaW1hbCBkaWdpdFwiLFtdLFtcImFsdFwiLHtcInNvdXJjZUludGVydmFsXCI6WzIxOSwyNTRdfSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyMTksMjI0XX0sXCJkaWdpdFwiLFtdXSxbXCJyYW5nZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzIzMSwyMzldfSxcImFcIixcImZcIl0sW1wicmFuZ2VcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNDYsMjU0XX0sXCJBXCIsXCJGXCJdXV0sXCJMaXN0T2ZcIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNTgsMzM2XX0sbnVsbCxbXCJlbGVtXCIsXCJzZXBcIl0sW1wiYWx0XCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjgyLDMzNl19LFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzI4MiwzMDddfSxcIk5vbmVtcHR5TGlzdE9mXCIsW1tcInBhcmFtXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjk3LDMwMV19LDBdLFtcInBhcmFtXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMzAzLDMwNl19LDFdXV0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMzE0LDMzNl19LFwiRW1wdHlMaXN0T2ZcIixbW1wicGFyYW1cIix7XCJzb3VyY2VJbnRlcnZhbFwiOlszMjYsMzMwXX0sMF0sW1wicGFyYW1cIix7XCJzb3VyY2VJbnRlcnZhbFwiOlszMzIsMzM1XX0sMV1dXV1dLFwiTm9uZW1wdHlMaXN0T2ZcIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlszNDAsMzg4XX0sbnVsbCxbXCJlbGVtXCIsXCJzZXBcIl0sW1wic2VxXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMzcyLDM4OF19LFtcInBhcmFtXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMzcyLDM3Nl19LDBdLFtcInN0YXJcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlszNzcsMzg4XX0sW1wic2VxXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMzc4LDM4Nl19LFtcInBhcmFtXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMzc4LDM4MV19LDFdLFtcInBhcmFtXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMzgyLDM4Nl19LDBdXV1dXSxcIkVtcHR5TGlzdE9mXCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMzkyLDQzNF19LG51bGwsW1wiZWxlbVwiLFwic2VwXCJdLFtcInNlcVwiLHtcInNvdXJjZUludGVydmFsXCI6WzQzOCw0MzhdfV1dLFwibGlzdE9mXCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNDM4LDUxNl19LG51bGwsW1wiZWxlbVwiLFwic2VwXCJdLFtcImFsdFwiLHtcInNvdXJjZUludGVydmFsXCI6WzQ2Miw1MTZdfSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls0NjIsNDg3XX0sXCJub25lbXB0eUxpc3RPZlwiLFtbXCJwYXJhbVwiLHtcInNvdXJjZUludGVydmFsXCI6WzQ3Nyw0ODFdfSwwXSxbXCJwYXJhbVwiLHtcInNvdXJjZUludGVydmFsXCI6WzQ4Myw0ODZdfSwxXV1dLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzQ5NCw1MTZdfSxcImVtcHR5TGlzdE9mXCIsW1tcInBhcmFtXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNTA2LDUxMF19LDBdLFtcInBhcmFtXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNTEyLDUxNV19LDFdXV1dXSxcIm5vbmVtcHR5TGlzdE9mXCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNTIwLDU2OF19LG51bGwsW1wiZWxlbVwiLFwic2VwXCJdLFtcInNlcVwiLHtcInNvdXJjZUludGVydmFsXCI6WzU1Miw1NjhdfSxbXCJwYXJhbVwiLHtcInNvdXJjZUludGVydmFsXCI6WzU1Miw1NTZdfSwwXSxbXCJzdGFyXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNTU3LDU2OF19LFtcInNlcVwiLHtcInNvdXJjZUludGVydmFsXCI6WzU1OCw1NjZdfSxbXCJwYXJhbVwiLHtcInNvdXJjZUludGVydmFsXCI6WzU1OCw1NjFdfSwxXSxbXCJwYXJhbVwiLHtcInNvdXJjZUludGVydmFsXCI6WzU2Miw1NjZdfSwwXV1dXV0sXCJlbXB0eUxpc3RPZlwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzU3Miw2ODJdfSxudWxsLFtcImVsZW1cIixcInNlcFwiXSxbXCJzZXFcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls2ODUsNjg1XX1dXSxcImFwcGx5U3ludGFjdGljXCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNjg1LDcxMF19LG51bGwsW1wiYXBwXCJdLFtcInBhcmFtXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNzA3LDcxMF19LDBdXX1dKTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEltcG9ydHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IEdyYW1tYXIkMSA9IEdyYW1tYXJfMTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFByaXZhdGUgc3R1ZmZcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbkdyYW1tYXIkMS5CdWlsdEluUnVsZXMgPSBidWlsdEluUnVsZXM7XG5cbnZhciB7bWFrZVJlY2lwZTogbWFrZVJlY2lwZSQyfSA9IG1ha2VSZWNpcGUkNTtcbnZhciBvcGVyYXRpb25zQW5kQXR0cmlidXRlcyA9IG1ha2VSZWNpcGUkMihbXCJncmFtbWFyXCIse1wic291cmNlXCI6XCJPcGVyYXRpb25zQW5kQXR0cmlidXRlcyB7XFxuXFxuICBBdHRyaWJ1dGVTaWduYXR1cmUgPVxcbiAgICBuYW1lXFxuXFxuICBPcGVyYXRpb25TaWduYXR1cmUgPVxcbiAgICBuYW1lIEZvcm1hbHM/XFxuXFxuICBGb3JtYWxzXFxuICAgID0gXFxcIihcXFwiIExpc3RPZjxuYW1lLCBcXFwiLFxcXCI+IFxcXCIpXFxcIlxcblxcbiAgbmFtZSAgKGEgbmFtZSlcXG4gICAgPSBuYW1lRmlyc3QgbmFtZVJlc3QqXFxuXFxuICBuYW1lRmlyc3RcXG4gICAgPSBcXFwiX1xcXCJcXG4gICAgfCBsZXR0ZXJcXG5cXG4gIG5hbWVSZXN0XFxuICAgID0gXFxcIl9cXFwiXFxuICAgIHwgYWxudW1cXG5cXG59XCJ9LFwiT3BlcmF0aW9uc0FuZEF0dHJpYnV0ZXNcIixudWxsLFwiQXR0cmlidXRlU2lnbmF0dXJlXCIse1wiQXR0cmlidXRlU2lnbmF0dXJlXCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjksNThdfSxudWxsLFtdLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzU0LDU4XX0sXCJuYW1lXCIsW11dXSxcIk9wZXJhdGlvblNpZ25hdHVyZVwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzYyLDEwMF19LG51bGwsW10sW1wic2VxXCIse1wic291cmNlSW50ZXJ2YWxcIjpbODcsMTAwXX0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbODcsOTFdfSxcIm5hbWVcIixbXV0sW1wib3B0XCIse1wic291cmNlSW50ZXJ2YWxcIjpbOTIsMTAwXX0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbOTIsOTldfSxcIkZvcm1hbHNcIixbXV1dXV0sXCJGb3JtYWxzXCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTA0LDE0M119LG51bGwsW10sW1wic2VxXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTE4LDE0M119LFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTE4LDEyMV19LFwiKFwiXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMjIsMTM5XX0sXCJMaXN0T2ZcIixbW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTI5LDEzM119LFwibmFtZVwiLFtdXSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzEzNSwxMzhdfSxcIixcIl1dXSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzE0MCwxNDNdfSxcIilcIl1dXSxcIm5hbWVcIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxNDcsMTg3XX0sXCJhIG5hbWVcIixbXSxbXCJzZXFcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxNjgsMTg3XX0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTY4LDE3N119LFwibmFtZUZpcnN0XCIsW11dLFtcInN0YXJcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxNzgsMTg3XX0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTc4LDE4Nl19LFwibmFtZVJlc3RcIixbXV1dXV0sXCJuYW1lRmlyc3RcIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxOTEsMjIzXX0sbnVsbCxbXSxbXCJhbHRcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyMDcsMjIzXX0sW1widGVybWluYWxcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyMDcsMjEwXX0sXCJfXCJdLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzIxNywyMjNdfSxcImxldHRlclwiLFtdXV1dLFwibmFtZVJlc3RcIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyMjcsMjU3XX0sbnVsbCxbXSxbXCJhbHRcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNDIsMjU3XX0sW1widGVybWluYWxcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNDIsMjQ1XX0sXCJfXCJdLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzI1MiwyNTddfSxcImFsbnVtXCIsW11dXV19XSk7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBJbXBvcnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jb25zdCBTZW1hbnRpY3MgPSBTZW1hbnRpY3NfMTtcbmNvbnN0IHV0aWwkMSA9IHV0aWwkNztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0gRGVmZXJyZWQgaW5pdGlhbGl6YXRpb24gLS0tLS0tLS0tLS0tLS0tLS1cblxudXRpbCQxLmF3YWl0QnVpbHRJblJ1bGVzKGJ1aWx0SW5SdWxlcyA9PiB7XG4gIGNvbnN0IG9wZXJhdGlvbnNBbmRBdHRyaWJ1dGVzR3JhbW1hciA9IG9wZXJhdGlvbnNBbmRBdHRyaWJ1dGVzO1xuICBpbml0QnVpbHRJblNlbWFudGljcyhidWlsdEluUnVsZXMpO1xuICBpbml0UHJvdG90eXBlUGFyc2VyKG9wZXJhdGlvbnNBbmRBdHRyaWJ1dGVzR3JhbW1hcik7IC8vIHJlcXVpcmVzIEJ1aWx0SW5TZW1hbnRpY3Ncbn0pO1xuXG5mdW5jdGlvbiBpbml0QnVpbHRJblNlbWFudGljcyhidWlsdEluUnVsZXMpIHtcbiAgY29uc3QgYWN0aW9ucyA9IHtcbiAgICBlbXB0eSgpIHtcbiAgICAgIHJldHVybiB0aGlzLml0ZXJhdGlvbigpO1xuICAgIH0sXG4gICAgbm9uRW1wdHkoZmlyc3QsIF8sIHJlc3QpIHtcbiAgICAgIHJldHVybiB0aGlzLml0ZXJhdGlvbihbZmlyc3RdLmNvbmNhdChyZXN0LmNoaWxkcmVuKSk7XG4gICAgfSxcbiAgfTtcblxuICBTZW1hbnRpY3MuQnVpbHRJblNlbWFudGljcyA9IFNlbWFudGljcy5jcmVhdGVTZW1hbnRpY3MoYnVpbHRJblJ1bGVzLCBudWxsKS5hZGRPcGVyYXRpb24oXG4gICAgICAnYXNJdGVyYXRpb24nLFxuICAgICAge1xuICAgICAgICBlbXB0eUxpc3RPZjogYWN0aW9ucy5lbXB0eSxcbiAgICAgICAgbm9uZW1wdHlMaXN0T2Y6IGFjdGlvbnMubm9uRW1wdHksXG4gICAgICAgIEVtcHR5TGlzdE9mOiBhY3Rpb25zLmVtcHR5LFxuICAgICAgICBOb25lbXB0eUxpc3RPZjogYWN0aW9ucy5ub25FbXB0eSxcbiAgICAgIH1cbiAgKTtcbn1cblxuZnVuY3Rpb24gaW5pdFByb3RvdHlwZVBhcnNlcihncmFtbWFyKSB7XG4gIFNlbWFudGljcy5wcm90b3R5cGVHcmFtbWFyU2VtYW50aWNzID0gZ3JhbW1hci5jcmVhdGVTZW1hbnRpY3MoKS5hZGRPcGVyYXRpb24oJ3BhcnNlJywge1xuICAgIEF0dHJpYnV0ZVNpZ25hdHVyZShuYW1lKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBuYW1lLnBhcnNlKCksXG4gICAgICAgIGZvcm1hbHM6IFtdLFxuICAgICAgfTtcbiAgICB9LFxuICAgIE9wZXJhdGlvblNpZ25hdHVyZShuYW1lLCBvcHRGb3JtYWxzKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBuYW1lLnBhcnNlKCksXG4gICAgICAgIGZvcm1hbHM6IG9wdEZvcm1hbHMuY2hpbGRyZW4ubWFwKGMgPT4gYy5wYXJzZSgpKVswXSB8fCBbXSxcbiAgICAgIH07XG4gICAgfSxcbiAgICBGb3JtYWxzKG9wYXJlbiwgZnMsIGNwYXJlbikge1xuICAgICAgcmV0dXJuIGZzLmFzSXRlcmF0aW9uKCkuY2hpbGRyZW4ubWFwKGMgPT4gYy5wYXJzZSgpKTtcbiAgICB9LFxuICAgIG5hbWUoZmlyc3QsIHJlc3QpIHtcbiAgICAgIHJldHVybiB0aGlzLnNvdXJjZVN0cmluZztcbiAgICB9LFxuICB9KTtcbiAgU2VtYW50aWNzLnByb3RvdHlwZUdyYW1tYXIgPSBncmFtbWFyO1xufVxuXG52YXIge21ha2VSZWNpcGU6IG1ha2VSZWNpcGUkMX0gPSBtYWtlUmVjaXBlJDU7XG52YXIgb2htR3JhbW1hciQxID0gbWFrZVJlY2lwZSQxKFtcImdyYW1tYXJcIix7XCJzb3VyY2VcIjpcIk9obSB7XFxuXFxuICBHcmFtbWFyc1xcbiAgICA9IEdyYW1tYXIqXFxuXFxuICBHcmFtbWFyXFxuICAgID0gaWRlbnQgU3VwZXJHcmFtbWFyPyBcXFwie1xcXCIgUnVsZSogXFxcIn1cXFwiXFxuXFxuICBTdXBlckdyYW1tYXJcXG4gICAgPSBcXFwiPDpcXFwiIGlkZW50XFxuXFxuICBSdWxlXFxuICAgID0gaWRlbnQgRm9ybWFscz8gcnVsZURlc2NyPyBcXFwiPVxcXCIgIFJ1bGVCb2R5ICAtLSBkZWZpbmVcXG4gICAgfCBpZGVudCBGb3JtYWxzPyAgICAgICAgICAgIFxcXCI6PVxcXCIgT3ZlcnJpZGVSdWxlQm9keSAgLS0gb3ZlcnJpZGVcXG4gICAgfCBpZGVudCBGb3JtYWxzPyAgICAgICAgICAgIFxcXCIrPVxcXCIgUnVsZUJvZHkgIC0tIGV4dGVuZFxcblxcbiAgUnVsZUJvZHlcXG4gICAgPSBcXFwifFxcXCI/IE5vbmVtcHR5TGlzdE9mPFRvcExldmVsVGVybSwgXFxcInxcXFwiPlxcblxcbiAgVG9wTGV2ZWxUZXJtXFxuICAgID0gU2VxIGNhc2VOYW1lICAtLSBpbmxpbmVcXG4gICAgfCBTZXFcXG5cXG4gIE92ZXJyaWRlUnVsZUJvZHlcXG4gICAgPSBcXFwifFxcXCI/IE5vbmVtcHR5TGlzdE9mPE92ZXJyaWRlVG9wTGV2ZWxUZXJtLCBcXFwifFxcXCI+XFxuXFxuICBPdmVycmlkZVRvcExldmVsVGVybVxcbiAgICA9IFxcXCIuLi5cXFwiICAtLSBzdXBlclNwbGljZVxcbiAgICB8IFRvcExldmVsVGVybVxcblxcbiAgRm9ybWFsc1xcbiAgICA9IFxcXCI8XFxcIiBMaXN0T2Y8aWRlbnQsIFxcXCIsXFxcIj4gXFxcIj5cXFwiXFxuXFxuICBQYXJhbXNcXG4gICAgPSBcXFwiPFxcXCIgTGlzdE9mPFNlcSwgXFxcIixcXFwiPiBcXFwiPlxcXCJcXG5cXG4gIEFsdFxcbiAgICA9IE5vbmVtcHR5TGlzdE9mPFNlcSwgXFxcInxcXFwiPlxcblxcbiAgU2VxXFxuICAgID0gSXRlcipcXG5cXG4gIEl0ZXJcXG4gICAgPSBQcmVkIFxcXCIqXFxcIiAgLS0gc3RhclxcbiAgICB8IFByZWQgXFxcIitcXFwiICAtLSBwbHVzXFxuICAgIHwgUHJlZCBcXFwiP1xcXCIgIC0tIG9wdFxcbiAgICB8IFByZWRcXG5cXG4gIFByZWRcXG4gICAgPSBcXFwiflxcXCIgTGV4ICAtLSBub3RcXG4gICAgfCBcXFwiJlxcXCIgTGV4ICAtLSBsb29rYWhlYWRcXG4gICAgfCBMZXhcXG5cXG4gIExleFxcbiAgICA9IFxcXCIjXFxcIiBCYXNlICAtLSBsZXhcXG4gICAgfCBCYXNlXFxuXFxuICBCYXNlXFxuICAgID0gaWRlbnQgUGFyYW1zPyB+KHJ1bGVEZXNjcj8gXFxcIj1cXFwiIHwgXFxcIjo9XFxcIiB8IFxcXCIrPVxcXCIpICAtLSBhcHBsaWNhdGlvblxcbiAgICB8IG9uZUNoYXJUZXJtaW5hbCBcXFwiLi5cXFwiIG9uZUNoYXJUZXJtaW5hbCAgICAgICAgICAgLS0gcmFuZ2VcXG4gICAgfCB0ZXJtaW5hbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tIHRlcm1pbmFsXFxuICAgIHwgXFxcIihcXFwiIEFsdCBcXFwiKVxcXCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLSBwYXJlblxcblxcbiAgcnVsZURlc2NyICAoYSBydWxlIGRlc2NyaXB0aW9uKVxcbiAgICA9IFxcXCIoXFxcIiBydWxlRGVzY3JUZXh0IFxcXCIpXFxcIlxcblxcbiAgcnVsZURlc2NyVGV4dFxcbiAgICA9ICh+XFxcIilcXFwiIGFueSkqXFxuXFxuICBjYXNlTmFtZVxcbiAgICA9IFxcXCItLVxcXCIgKH5cXFwiXFxcXG5cXFwiIHNwYWNlKSogbmFtZSAoflxcXCJcXFxcblxcXCIgc3BhY2UpKiAoXFxcIlxcXFxuXFxcIiB8ICZcXFwifVxcXCIpXFxuXFxuICBuYW1lICAoYSBuYW1lKVxcbiAgICA9IG5hbWVGaXJzdCBuYW1lUmVzdCpcXG5cXG4gIG5hbWVGaXJzdFxcbiAgICA9IFxcXCJfXFxcIlxcbiAgICB8IGxldHRlclxcblxcbiAgbmFtZVJlc3RcXG4gICAgPSBcXFwiX1xcXCJcXG4gICAgfCBhbG51bVxcblxcbiAgaWRlbnQgIChhbiBpZGVudGlmaWVyKVxcbiAgICA9IG5hbWVcXG5cXG4gIHRlcm1pbmFsXFxuICAgID0gXFxcIlxcXFxcXFwiXFxcIiB0ZXJtaW5hbENoYXIqIFxcXCJcXFxcXFxcIlxcXCJcXG5cXG4gIG9uZUNoYXJUZXJtaW5hbFxcbiAgICA9IFxcXCJcXFxcXFxcIlxcXCIgdGVybWluYWxDaGFyIFxcXCJcXFxcXFxcIlxcXCJcXG5cXG4gIHRlcm1pbmFsQ2hhclxcbiAgICA9IGVzY2FwZUNoYXJcXG4gICAgICB8IH5cXFwiXFxcXFxcXFxcXFwiIH5cXFwiXFxcXFxcXCJcXFwiIH5cXFwiXFxcXG5cXFwiIFxcXCJcXFxcdXswfVxcXCIuLlxcXCJcXFxcdXsxMEZGRkZ9XFxcIlxcblxcbiAgZXNjYXBlQ2hhciAgKGFuIGVzY2FwZSBzZXF1ZW5jZSlcXG4gICAgPSBcXFwiXFxcXFxcXFxcXFxcXFxcXFxcXCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0gYmFja3NsYXNoXFxuICAgIHwgXFxcIlxcXFxcXFxcXFxcXFxcXCJcXFwiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tIGRvdWJsZVF1b3RlXFxuICAgIHwgXFxcIlxcXFxcXFxcXFxcXCdcXFwiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tIHNpbmdsZVF1b3RlXFxuICAgIHwgXFxcIlxcXFxcXFxcYlxcXCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tIGJhY2tzcGFjZVxcbiAgICB8IFxcXCJcXFxcXFxcXG5cXFwiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLSBsaW5lRmVlZFxcbiAgICB8IFxcXCJcXFxcXFxcXHJcXFwiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLSBjYXJyaWFnZVJldHVyblxcbiAgICB8IFxcXCJcXFxcXFxcXHRcXFwiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLSB0YWJcXG4gICAgfCBcXFwiXFxcXFxcXFx1e1xcXCIgaGV4RGlnaXQgaGV4RGlnaXQ/IGhleERpZ2l0P1xcbiAgICAgICAgICAgICBoZXhEaWdpdD8gaGV4RGlnaXQ/IGhleERpZ2l0PyBcXFwifVxcXCIgICAtLSB1bmljb2RlQ29kZVBvaW50XFxuICAgIHwgXFxcIlxcXFxcXFxcdVxcXCIgaGV4RGlnaXQgaGV4RGlnaXQgaGV4RGlnaXQgaGV4RGlnaXQgIC0tIHVuaWNvZGVFc2NhcGVcXG4gICAgfCBcXFwiXFxcXFxcXFx4XFxcIiBoZXhEaWdpdCBoZXhEaWdpdCAgICAgICAgICAgICAgICAgICAgLS0gaGV4RXNjYXBlXFxuXFxuICBzcGFjZVxcbiAgICs9IGNvbW1lbnRcXG5cXG4gIGNvbW1lbnRcXG4gICAgPSBcXFwiLy9cXFwiICh+XFxcIlxcXFxuXFxcIiBhbnkpKiAmKFxcXCJcXFxcblxcXCIgfCBlbmQpICAtLSBzaW5nbGVMaW5lXFxuICAgIHwgXFxcIi8qXFxcIiAoflxcXCIqL1xcXCIgYW55KSogXFxcIiovXFxcIiAgLS0gbXVsdGlMaW5lXFxuXFxuICB0b2tlbnMgPSB0b2tlbipcXG5cXG4gIHRva2VuID0gY2FzZU5hbWUgfCBjb21tZW50IHwgaWRlbnQgfCBvcGVyYXRvciB8IHB1bmN0dWF0aW9uIHwgdGVybWluYWwgfCBhbnlcXG5cXG4gIG9wZXJhdG9yID0gXFxcIjw6XFxcIiB8IFxcXCI9XFxcIiB8IFxcXCI6PVxcXCIgfCBcXFwiKz1cXFwiIHwgXFxcIipcXFwiIHwgXFxcIitcXFwiIHwgXFxcIj9cXFwiIHwgXFxcIn5cXFwiIHwgXFxcIiZcXFwiXFxuXFxuICBwdW5jdHVhdGlvbiA9IFxcXCI8XFxcIiB8IFxcXCI+XFxcIiB8IFxcXCIsXFxcIiB8IFxcXCItLVxcXCJcXG59XCJ9LFwiT2htXCIsbnVsbCxcIkdyYW1tYXJzXCIse1wiR3JhbW1hcnNcIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls5LDMyXX0sbnVsbCxbXSxbXCJzdGFyXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjQsMzJdfSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNCwzMV19LFwiR3JhbW1hclwiLFtdXV1dLFwiR3JhbW1hclwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzM2LDgzXX0sbnVsbCxbXSxbXCJzZXFcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls1MCw4M119LFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzUwLDU1XX0sXCJpZGVudFwiLFtdXSxbXCJvcHRcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls1Niw2OV19LFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzU2LDY4XX0sXCJTdXBlckdyYW1tYXJcIixbXV1dLFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNzAsNzNdfSxcIntcIl0sW1wic3RhclwiLHtcInNvdXJjZUludGVydmFsXCI6Wzc0LDc5XX0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNzQsNzhdfSxcIlJ1bGVcIixbXV1dLFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbODAsODNdfSxcIn1cIl1dXSxcIlN1cGVyR3JhbW1hclwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6Wzg3LDExNl19LG51bGwsW10sW1wic2VxXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTA2LDExNl19LFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTA2LDExMF19LFwiPDpcIl0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTExLDExNl19LFwiaWRlbnRcIixbXV1dXSxcIlJ1bGVfZGVmaW5lXCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTMxLDE4MV19LG51bGwsW10sW1wic2VxXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTMxLDE3MF19LFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzEzMSwxMzZdfSxcImlkZW50XCIsW11dLFtcIm9wdFwiLHtcInNvdXJjZUludGVydmFsXCI6WzEzNywxNDVdfSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMzcsMTQ0XX0sXCJGb3JtYWxzXCIsW11dXSxbXCJvcHRcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxNDYsMTU2XX0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTQ2LDE1NV19LFwicnVsZURlc2NyXCIsW11dXSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzE1NywxNjBdfSxcIj1cIl0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTYyLDE3MF19LFwiUnVsZUJvZHlcIixbXV1dXSxcIlJ1bGVfb3ZlcnJpZGVcIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxODgsMjQ4XX0sbnVsbCxbXSxbXCJzZXFcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxODgsMjM1XX0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTg4LDE5M119LFwiaWRlbnRcIixbXV0sW1wib3B0XCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTk0LDIwMl19LFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzE5NCwyMDFdfSxcIkZvcm1hbHNcIixbXV1dLFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjE0LDIxOF19LFwiOj1cIl0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjE5LDIzNV19LFwiT3ZlcnJpZGVSdWxlQm9keVwiLFtdXV1dLFwiUnVsZV9leHRlbmRcIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNTUsMzA1XX0sbnVsbCxbXSxbXCJzZXFcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNTUsMjk0XX0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjU1LDI2MF19LFwiaWRlbnRcIixbXV0sW1wib3B0XCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjYxLDI2OV19LFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzI2MSwyNjhdfSxcIkZvcm1hbHNcIixbXV1dLFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjgxLDI4NV19LFwiKz1cIl0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjg2LDI5NF19LFwiUnVsZUJvZHlcIixbXV1dXSxcIlJ1bGVcIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMjAsMzA1XX0sbnVsbCxbXSxbXCJhbHRcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMzEsMzA1XX0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTMxLDE3MF19LFwiUnVsZV9kZWZpbmVcIixbXV0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTg4LDIzNV19LFwiUnVsZV9vdmVycmlkZVwiLFtdXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNTUsMjk0XX0sXCJSdWxlX2V4dGVuZFwiLFtdXV1dLFwiUnVsZUJvZHlcIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlszMDksMzYyXX0sbnVsbCxbXSxbXCJzZXFcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlszMjQsMzYyXX0sW1wib3B0XCIse1wic291cmNlSW50ZXJ2YWxcIjpbMzI0LDMyOF19LFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMzI0LDMyN119LFwifFwiXV0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMzI5LDM2Ml19LFwiTm9uZW1wdHlMaXN0T2ZcIixbW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMzQ0LDM1Nl19LFwiVG9wTGV2ZWxUZXJtXCIsW11dLFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMzU4LDM2MV19LFwifFwiXV1dXV0sXCJUb3BMZXZlbFRlcm1faW5saW5lXCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMzg1LDQwOF19LG51bGwsW10sW1wic2VxXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMzg1LDM5N119LFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzM4NSwzODhdfSxcIlNlcVwiLFtdXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlszODksMzk3XX0sXCJjYXNlTmFtZVwiLFtdXV1dLFwiVG9wTGV2ZWxUZXJtXCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMzY2LDQxOF19LG51bGwsW10sW1wiYWx0XCIse1wic291cmNlSW50ZXJ2YWxcIjpbMzg1LDQxOF19LFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzM4NSwzOTddfSxcIlRvcExldmVsVGVybV9pbmxpbmVcIixbXV0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNDE1LDQxOF19LFwiU2VxXCIsW11dXV0sXCJPdmVycmlkZVJ1bGVCb2R5XCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNDIyLDQ5MV19LG51bGwsW10sW1wic2VxXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNDQ1LDQ5MV19LFtcIm9wdFwiLHtcInNvdXJjZUludGVydmFsXCI6WzQ0NSw0NDldfSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzQ0NSw0NDhdfSxcInxcIl1dLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzQ1MCw0OTFdfSxcIk5vbmVtcHR5TGlzdE9mXCIsW1tcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzQ2NSw0ODVdfSxcIk92ZXJyaWRlVG9wTGV2ZWxUZXJtXCIsW11dLFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNDg3LDQ5MF19LFwifFwiXV1dXV0sXCJPdmVycmlkZVRvcExldmVsVGVybV9zdXBlclNwbGljZVwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzUyMiw1NDNdfSxudWxsLFtdLFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNTIyLDUyN119LFwiLi4uXCJdXSxcIk92ZXJyaWRlVG9wTGV2ZWxUZXJtXCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNDk1LDU2Ml19LG51bGwsW10sW1wiYWx0XCIse1wic291cmNlSW50ZXJ2YWxcIjpbNTIyLDU2Ml19LFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzUyMiw1MjddfSxcIk92ZXJyaWRlVG9wTGV2ZWxUZXJtX3N1cGVyU3BsaWNlXCIsW11dLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzU1MCw1NjJdfSxcIlRvcExldmVsVGVybVwiLFtdXV1dLFwiRm9ybWFsc1wiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzU2Niw2MDZdfSxudWxsLFtdLFtcInNlcVwiLHtcInNvdXJjZUludGVydmFsXCI6WzU4MCw2MDZdfSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzU4MCw1ODNdfSxcIjxcIl0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNTg0LDYwMl19LFwiTGlzdE9mXCIsW1tcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzU5MSw1OTZdfSxcImlkZW50XCIsW11dLFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNTk4LDYwMV19LFwiLFwiXV1dLFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNjAzLDYwNl19LFwiPlwiXV1dLFwiUGFyYW1zXCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNjEwLDY0N119LG51bGwsW10sW1wic2VxXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNjIzLDY0N119LFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNjIzLDYyNl19LFwiPFwiXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls2MjcsNjQzXX0sXCJMaXN0T2ZcIixbW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNjM0LDYzN119LFwiU2VxXCIsW11dLFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNjM5LDY0Ml19LFwiLFwiXV1dLFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNjQ0LDY0N119LFwiPlwiXV1dLFwiQWx0XCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNjUxLDY4NV19LG51bGwsW10sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNjYxLDY4NV19LFwiTm9uZW1wdHlMaXN0T2ZcIixbW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNjc2LDY3OV19LFwiU2VxXCIsW11dLFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNjgxLDY4NF19LFwifFwiXV1dXSxcIlNlcVwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzY4OSw3MDRdfSxudWxsLFtdLFtcInN0YXJcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls2OTksNzA0XX0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNjk5LDcwM119LFwiSXRlclwiLFtdXV1dLFwiSXRlcl9zdGFyXCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNzE5LDczNl19LG51bGwsW10sW1wic2VxXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNzE5LDcyN119LFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzcxOSw3MjNdfSxcIlByZWRcIixbXV0sW1widGVybWluYWxcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls3MjQsNzI3XX0sXCIqXCJdXV0sXCJJdGVyX3BsdXNcIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls3NDMsNzYwXX0sbnVsbCxbXSxbXCJzZXFcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls3NDMsNzUxXX0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNzQzLDc0N119LFwiUHJlZFwiLFtdXSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6Wzc0OCw3NTFdfSxcIitcIl1dXSxcIkl0ZXJfb3B0XCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNzY3LDc4M119LG51bGwsW10sW1wic2VxXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNzY3LDc3NV19LFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6Wzc2Nyw3NzFdfSxcIlByZWRcIixbXV0sW1widGVybWluYWxcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls3NzIsNzc1XX0sXCI/XCJdXV0sXCJJdGVyXCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNzA4LDc5NF19LG51bGwsW10sW1wiYWx0XCIse1wic291cmNlSW50ZXJ2YWxcIjpbNzE5LDc5NF19LFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzcxOSw3MjddfSxcIkl0ZXJfc3RhclwiLFtdXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls3NDMsNzUxXX0sXCJJdGVyX3BsdXNcIixbXV0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNzY3LDc3NV19LFwiSXRlcl9vcHRcIixbXV0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNzkwLDc5NF19LFwiUHJlZFwiLFtdXV1dLFwiUHJlZF9ub3RcIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls4MDksODI0XX0sbnVsbCxbXSxbXCJzZXFcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls4MDksODE2XX0sW1widGVybWluYWxcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls4MDksODEyXX0sXCJ+XCJdLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzgxMyw4MTZdfSxcIkxleFwiLFtdXV1dLFwiUHJlZF9sb29rYWhlYWRcIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls4MzEsODUyXX0sbnVsbCxbXSxbXCJzZXFcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls4MzEsODM4XX0sW1widGVybWluYWxcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls4MzEsODM0XX0sXCImXCJdLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzgzNSw4MzhdfSxcIkxleFwiLFtdXV1dLFwiUHJlZFwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6Wzc5OCw4NjJdfSxudWxsLFtdLFtcImFsdFwiLHtcInNvdXJjZUludGVydmFsXCI6WzgwOSw4NjJdfSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls4MDksODE2XX0sXCJQcmVkX25vdFwiLFtdXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls4MzEsODM4XX0sXCJQcmVkX2xvb2thaGVhZFwiLFtdXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls4NTksODYyXX0sXCJMZXhcIixbXV1dXSxcIkxleF9sZXhcIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls4NzYsODkyXX0sbnVsbCxbXSxbXCJzZXFcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls4NzYsODg0XX0sW1widGVybWluYWxcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls4NzYsODc5XX0sXCIjXCJdLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6Wzg4MCw4ODRdfSxcIkJhc2VcIixbXV1dXSxcIkxleFwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6Wzg2Niw5MDNdfSxudWxsLFtdLFtcImFsdFwiLHtcInNvdXJjZUludGVydmFsXCI6Wzg3Niw5MDNdfSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls4NzYsODg0XX0sXCJMZXhfbGV4XCIsW11dLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6Wzg5OSw5MDNdfSxcIkJhc2VcIixbXV1dXSxcIkJhc2VfYXBwbGljYXRpb25cIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls5MTgsOTc5XX0sbnVsbCxbXSxbXCJzZXFcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls5MTgsOTYzXX0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbOTE4LDkyM119LFwiaWRlbnRcIixbXV0sW1wib3B0XCIse1wic291cmNlSW50ZXJ2YWxcIjpbOTI0LDkzMV19LFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzkyNCw5MzBdfSxcIlBhcmFtc1wiLFtdXV0sW1wibm90XCIse1wic291cmNlSW50ZXJ2YWxcIjpbOTMyLDk2M119LFtcImFsdFwiLHtcInNvdXJjZUludGVydmFsXCI6WzkzNCw5NjJdfSxbXCJzZXFcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls5MzQsOTQ4XX0sW1wib3B0XCIse1wic291cmNlSW50ZXJ2YWxcIjpbOTM0LDk0NF19LFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzkzNCw5NDNdfSxcInJ1bGVEZXNjclwiLFtdXV0sW1widGVybWluYWxcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls5NDUsOTQ4XX0sXCI9XCJdXSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6Wzk1MSw5NTVdfSxcIjo9XCJdLFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbOTU4LDk2Ml19LFwiKz1cIl1dXV1dLFwiQmFzZV9yYW5nZVwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6Wzk4NiwxMDQxXX0sbnVsbCxbXSxbXCJzZXFcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls5ODYsMTAyMl19LFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6Wzk4NiwxMDAxXX0sXCJvbmVDaGFyVGVybWluYWxcIixbXV0sW1widGVybWluYWxcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMDAyLDEwMDZdfSxcIi4uXCJdLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzEwMDcsMTAyMl19LFwib25lQ2hhclRlcm1pbmFsXCIsW11dXV0sXCJCYXNlX3Rlcm1pbmFsXCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTA0OCwxMTA2XX0sbnVsbCxbXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMDQ4LDEwNTZdfSxcInRlcm1pbmFsXCIsW11dXSxcIkJhc2VfcGFyZW5cIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMTEzLDExNjhdfSxudWxsLFtdLFtcInNlcVwiLHtcInNvdXJjZUludGVydmFsXCI6WzExMTMsMTEyNF19LFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTExMywxMTE2XX0sXCIoXCJdLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzExMTcsMTEyMF19LFwiQWx0XCIsW11dLFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTEyMSwxMTI0XX0sXCIpXCJdXV0sXCJCYXNlXCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbOTA3LDExNjhdfSxudWxsLFtdLFtcImFsdFwiLHtcInNvdXJjZUludGVydmFsXCI6WzkxOCwxMTY4XX0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbOTE4LDk2M119LFwiQmFzZV9hcHBsaWNhdGlvblwiLFtdXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls5ODYsMTAyMl19LFwiQmFzZV9yYW5nZVwiLFtdXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMDQ4LDEwNTZdfSxcIkJhc2VfdGVybWluYWxcIixbXV0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTExMywxMTI0XX0sXCJCYXNlX3BhcmVuXCIsW11dXV0sXCJydWxlRGVzY3JcIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMTcyLDEyMzFdfSxcImEgcnVsZSBkZXNjcmlwdGlvblwiLFtdLFtcInNlcVwiLHtcInNvdXJjZUludGVydmFsXCI6WzEyMTAsMTIzMV19LFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTIxMCwxMjEzXX0sXCIoXCJdLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzEyMTQsMTIyN119LFwicnVsZURlc2NyVGV4dFwiLFtdXSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzEyMjgsMTIzMV19LFwiKVwiXV1dLFwicnVsZURlc2NyVGV4dFwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzEyMzUsMTI2Nl19LG51bGwsW10sW1wic3RhclwiLHtcInNvdXJjZUludGVydmFsXCI6WzEyNTUsMTI2Nl19LFtcInNlcVwiLHtcInNvdXJjZUludGVydmFsXCI6WzEyNTYsMTI2NF19LFtcIm5vdFwiLHtcInNvdXJjZUludGVydmFsXCI6WzEyNTYsMTI2MF19LFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTI1NywxMjYwXX0sXCIpXCJdXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMjYxLDEyNjRdfSxcImFueVwiLFtdXV1dXSxcImNhc2VOYW1lXCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTI3MCwxMzM4XX0sbnVsbCxbXSxbXCJzZXFcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMjg1LDEzMzhdfSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzEyODUsMTI4OV19LFwiLS1cIl0sW1wic3RhclwiLHtcInNvdXJjZUludGVydmFsXCI6WzEyOTAsMTMwNF19LFtcInNlcVwiLHtcInNvdXJjZUludGVydmFsXCI6WzEyOTEsMTMwMl19LFtcIm5vdFwiLHtcInNvdXJjZUludGVydmFsXCI6WzEyOTEsMTI5Nl19LFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTI5MiwxMjk2XX0sXCJcXG5cIl1dLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzEyOTcsMTMwMl19LFwic3BhY2VcIixbXV1dXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMzA1LDEzMDldfSxcIm5hbWVcIixbXV0sW1wic3RhclwiLHtcInNvdXJjZUludGVydmFsXCI6WzEzMTAsMTMyNF19LFtcInNlcVwiLHtcInNvdXJjZUludGVydmFsXCI6WzEzMTEsMTMyMl19LFtcIm5vdFwiLHtcInNvdXJjZUludGVydmFsXCI6WzEzMTEsMTMxNl19LFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTMxMiwxMzE2XX0sXCJcXG5cIl1dLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzEzMTcsMTMyMl19LFwic3BhY2VcIixbXV1dXSxbXCJhbHRcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMzI2LDEzMzddfSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzEzMjYsMTMzMF19LFwiXFxuXCJdLFtcImxvb2thaGVhZFwiLHtcInNvdXJjZUludGVydmFsXCI6WzEzMzMsMTMzN119LFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTMzNCwxMzM3XX0sXCJ9XCJdXV1dXSxcIm5hbWVcIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMzQyLDEzODJdfSxcImEgbmFtZVwiLFtdLFtcInNlcVwiLHtcInNvdXJjZUludGVydmFsXCI6WzEzNjMsMTM4Ml19LFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzEzNjMsMTM3Ml19LFwibmFtZUZpcnN0XCIsW11dLFtcInN0YXJcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMzczLDEzODJdfSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMzczLDEzODFdfSxcIm5hbWVSZXN0XCIsW11dXV1dLFwibmFtZUZpcnN0XCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTM4NiwxNDE4XX0sbnVsbCxbXSxbXCJhbHRcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxNDAyLDE0MThdfSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzE0MDIsMTQwNV19LFwiX1wiXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxNDEyLDE0MThdfSxcImxldHRlclwiLFtdXV1dLFwibmFtZVJlc3RcIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxNDIyLDE0NTJdfSxudWxsLFtdLFtcImFsdFwiLHtcInNvdXJjZUludGVydmFsXCI6WzE0MzcsMTQ1Ml19LFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTQzNywxNDQwXX0sXCJfXCJdLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzE0NDcsMTQ1Ml19LFwiYWxudW1cIixbXV1dXSxcImlkZW50XCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTQ1NiwxNDg5XX0sXCJhbiBpZGVudGlmaWVyXCIsW10sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTQ4NSwxNDg5XX0sXCJuYW1lXCIsW11dXSxcInRlcm1pbmFsXCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTQ5MywxNTMxXX0sbnVsbCxbXSxbXCJzZXFcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxNTA4LDE1MzFdfSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzE1MDgsMTUxMl19LFwiXFxcIlwiXSxbXCJzdGFyXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTUxMywxNTI2XX0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTUxMywxNTI1XX0sXCJ0ZXJtaW5hbENoYXJcIixbXV1dLFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTUyNywxNTMxXX0sXCJcXFwiXCJdXV0sXCJvbmVDaGFyVGVybWluYWxcIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxNTM1LDE1NzldfSxudWxsLFtdLFtcInNlcVwiLHtcInNvdXJjZUludGVydmFsXCI6WzE1NTcsMTU3OV19LFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTU1NywxNTYxXX0sXCJcXFwiXCJdLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzE1NjIsMTU3NF19LFwidGVybWluYWxDaGFyXCIsW11dLFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTU3NSwxNTc5XX0sXCJcXFwiXCJdXV0sXCJ0ZXJtaW5hbENoYXJcIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxNTgzLDE2NjBdfSxudWxsLFtdLFtcImFsdFwiLHtcInNvdXJjZUludGVydmFsXCI6WzE2MDIsMTY2MF19LFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzE2MDIsMTYxMl19LFwiZXNjYXBlQ2hhclwiLFtdXSxbXCJzZXFcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxNjIxLDE2NjBdfSxbXCJub3RcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxNjIxLDE2MjZdfSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzE2MjIsMTYyNl19LFwiXFxcXFwiXV0sW1wibm90XCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTYyNywxNjMyXX0sW1widGVybWluYWxcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxNjI4LDE2MzJdfSxcIlxcXCJcIl1dLFtcIm5vdFwiLHtcInNvdXJjZUludGVydmFsXCI6WzE2MzMsMTYzOF19LFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTYzNCwxNjM4XX0sXCJcXG5cIl1dLFtcInJhbmdlXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTYzOSwxNjYwXX0sXCJcXHUwMDAwXCIsXCL0j7+/XCJdXV1dLFwiZXNjYXBlQ2hhcl9iYWNrc2xhc2hcIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxNzAzLDE3NThdfSxudWxsLFtdLFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTcwMywxNzA5XX0sXCJcXFxcXFxcXFwiXV0sXCJlc2NhcGVDaGFyX2RvdWJsZVF1b3RlXCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTc2NSwxODIyXX0sbnVsbCxbXSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzE3NjUsMTc3MV19LFwiXFxcXFxcXCJcIl1dLFwiZXNjYXBlQ2hhcl9zaW5nbGVRdW90ZVwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzE4MjksMTg4Nl19LG51bGwsW10sW1widGVybWluYWxcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxODI5LDE4MzVdfSxcIlxcXFwnXCJdXSxcImVzY2FwZUNoYXJfYmFja3NwYWNlXCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTg5MywxOTQ4XX0sbnVsbCxbXSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzE4OTMsMTg5OF19LFwiXFxcXGJcIl1dLFwiZXNjYXBlQ2hhcl9saW5lRmVlZFwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzE5NTUsMjAwOV19LG51bGwsW10sW1widGVybWluYWxcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxOTU1LDE5NjBdfSxcIlxcXFxuXCJdXSxcImVzY2FwZUNoYXJfY2FycmlhZ2VSZXR1cm5cIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyMDE2LDIwNzZdfSxudWxsLFtdLFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjAxNiwyMDIxXX0sXCJcXFxcclwiXV0sXCJlc2NhcGVDaGFyX3RhYlwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzIwODMsMjEzMl19LG51bGwsW10sW1widGVybWluYWxcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyMDgzLDIwODhdfSxcIlxcXFx0XCJdXSxcImVzY2FwZUNoYXJfdW5pY29kZUNvZGVQb2ludFwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzIxMzksMjI0M119LG51bGwsW10sW1wic2VxXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjEzOSwyMjIxXX0sW1widGVybWluYWxcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyMTM5LDIxNDVdfSxcIlxcXFx1e1wiXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyMTQ2LDIxNTRdfSxcImhleERpZ2l0XCIsW11dLFtcIm9wdFwiLHtcInNvdXJjZUludGVydmFsXCI6WzIxNTUsMjE2NF19LFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzIxNTUsMjE2M119LFwiaGV4RGlnaXRcIixbXV1dLFtcIm9wdFwiLHtcInNvdXJjZUludGVydmFsXCI6WzIxNjUsMjE3NF19LFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzIxNjUsMjE3M119LFwiaGV4RGlnaXRcIixbXV1dLFtcIm9wdFwiLHtcInNvdXJjZUludGVydmFsXCI6WzIxODgsMjE5N119LFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzIxODgsMjE5Nl19LFwiaGV4RGlnaXRcIixbXV1dLFtcIm9wdFwiLHtcInNvdXJjZUludGVydmFsXCI6WzIxOTgsMjIwN119LFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzIxOTgsMjIwNl19LFwiaGV4RGlnaXRcIixbXV1dLFtcIm9wdFwiLHtcInNvdXJjZUludGVydmFsXCI6WzIyMDgsMjIxN119LFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzIyMDgsMjIxNl19LFwiaGV4RGlnaXRcIixbXV1dLFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjIxOCwyMjIxXX0sXCJ9XCJdXV0sXCJlc2NhcGVDaGFyX3VuaWNvZGVFc2NhcGVcIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyMjUwLDIzMDldfSxudWxsLFtdLFtcInNlcVwiLHtcInNvdXJjZUludGVydmFsXCI6WzIyNTAsMjI5MV19LFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjI1MCwyMjU1XX0sXCJcXFxcdVwiXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyMjU2LDIyNjRdfSxcImhleERpZ2l0XCIsW11dLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzIyNjUsMjI3M119LFwiaGV4RGlnaXRcIixbXV0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjI3NCwyMjgyXX0sXCJoZXhEaWdpdFwiLFtdXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyMjgzLDIyOTFdfSxcImhleERpZ2l0XCIsW11dXV0sXCJlc2NhcGVDaGFyX2hleEVzY2FwZVwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzIzMTYsMjM3MV19LG51bGwsW10sW1wic2VxXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjMxNiwyMzM5XX0sW1widGVybWluYWxcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyMzE2LDIzMjFdfSxcIlxcXFx4XCJdLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzIzMjIsMjMzMF19LFwiaGV4RGlnaXRcIixbXV0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjMzMSwyMzM5XX0sXCJoZXhEaWdpdFwiLFtdXV1dLFwiZXNjYXBlQ2hhclwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzE2NjQsMjM3MV19LFwiYW4gZXNjYXBlIHNlcXVlbmNlXCIsW10sW1wiYWx0XCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTcwMywyMzcxXX0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTcwMywxNzA5XX0sXCJlc2NhcGVDaGFyX2JhY2tzbGFzaFwiLFtdXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxNzY1LDE3NzFdfSxcImVzY2FwZUNoYXJfZG91YmxlUXVvdGVcIixbXV0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTgyOSwxODM1XX0sXCJlc2NhcGVDaGFyX3NpbmdsZVF1b3RlXCIsW11dLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzE4OTMsMTg5OF19LFwiZXNjYXBlQ2hhcl9iYWNrc3BhY2VcIixbXV0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTk1NSwxOTYwXX0sXCJlc2NhcGVDaGFyX2xpbmVGZWVkXCIsW11dLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzIwMTYsMjAyMV19LFwiZXNjYXBlQ2hhcl9jYXJyaWFnZVJldHVyblwiLFtdXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyMDgzLDIwODhdfSxcImVzY2FwZUNoYXJfdGFiXCIsW11dLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzIxMzksMjIyMV19LFwiZXNjYXBlQ2hhcl91bmljb2RlQ29kZVBvaW50XCIsW11dLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzIyNTAsMjI5MV19LFwiZXNjYXBlQ2hhcl91bmljb2RlRXNjYXBlXCIsW11dLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzIzMTYsMjMzOV19LFwiZXNjYXBlQ2hhcl9oZXhFc2NhcGVcIixbXV1dXSxcInNwYWNlXCI6W1wiZXh0ZW5kXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjM3NSwyMzk0XX0sbnVsbCxbXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyMzg3LDIzOTRdfSxcImNvbW1lbnRcIixbXV1dLFwiY29tbWVudF9zaW5nbGVMaW5lXCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjQxMiwyNDU4XX0sbnVsbCxbXSxbXCJzZXFcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNDEyLDI0NDNdfSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzI0MTIsMjQxNl19LFwiLy9cIl0sW1wic3RhclwiLHtcInNvdXJjZUludGVydmFsXCI6WzI0MTcsMjQyOV19LFtcInNlcVwiLHtcInNvdXJjZUludGVydmFsXCI6WzI0MTgsMjQyN119LFtcIm5vdFwiLHtcInNvdXJjZUludGVydmFsXCI6WzI0MTgsMjQyM119LFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjQxOSwyNDIzXX0sXCJcXG5cIl1dLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzI0MjQsMjQyN119LFwiYW55XCIsW11dXV0sW1wibG9va2FoZWFkXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjQzMCwyNDQzXX0sW1wiYWx0XCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjQzMiwyNDQyXX0sW1widGVybWluYWxcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNDMyLDI0MzZdfSxcIlxcblwiXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNDM5LDI0NDJdfSxcImVuZFwiLFtdXV1dXV0sXCJjb21tZW50X211bHRpTGluZVwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzI0NjUsMjUwMV19LG51bGwsW10sW1wic2VxXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjQ2NSwyNDg3XX0sW1widGVybWluYWxcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNDY1LDI0NjldfSxcIi8qXCJdLFtcInN0YXJcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNDcwLDI0ODJdfSxbXCJzZXFcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNDcxLDI0ODBdfSxbXCJub3RcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNDcxLDI0NzZdfSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzI0NzIsMjQ3Nl19LFwiKi9cIl1dLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzI0NzcsMjQ4MF19LFwiYW55XCIsW11dXV0sW1widGVybWluYWxcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNDgzLDI0ODddfSxcIiovXCJdXV0sXCJjb21tZW50XCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjM5OCwyNTAxXX0sbnVsbCxbXSxbXCJhbHRcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNDEyLDI1MDFdfSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNDEyLDI0NDNdfSxcImNvbW1lbnRfc2luZ2xlTGluZVwiLFtdXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNDY1LDI0ODddfSxcImNvbW1lbnRfbXVsdGlMaW5lXCIsW11dXV0sXCJ0b2tlbnNcIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNTA1LDI1MjBdfSxudWxsLFtdLFtcInN0YXJcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNTE0LDI1MjBdfSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNTE0LDI1MTldfSxcInRva2VuXCIsW11dXV0sXCJ0b2tlblwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzI1MjQsMjYwMF19LG51bGwsW10sW1wiYWx0XCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjUzMiwyNjAwXX0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjUzMiwyNTQwXX0sXCJjYXNlTmFtZVwiLFtdXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNTQzLDI1NTBdfSxcImNvbW1lbnRcIixbXV0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjU1MywyNTU4XX0sXCJpZGVudFwiLFtdXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNTYxLDI1NjldfSxcIm9wZXJhdG9yXCIsW11dLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzI1NzIsMjU4M119LFwicHVuY3R1YXRpb25cIixbXV0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjU4NiwyNTk0XX0sXCJ0ZXJtaW5hbFwiLFtdXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNTk3LDI2MDBdfSxcImFueVwiLFtdXV1dLFwib3BlcmF0b3JcIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNjA0LDI2NjldfSxudWxsLFtdLFtcImFsdFwiLHtcInNvdXJjZUludGVydmFsXCI6WzI2MTUsMjY2OV19LFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjYxNSwyNjE5XX0sXCI8OlwiXSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzI2MjIsMjYyNV19LFwiPVwiXSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzI2MjgsMjYzMl19LFwiOj1cIl0sW1widGVybWluYWxcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNjM1LDI2MzldfSxcIis9XCJdLFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjY0MiwyNjQ1XX0sXCIqXCJdLFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjY0OCwyNjUxXX0sXCIrXCJdLFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjY1NCwyNjU3XX0sXCI/XCJdLFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjY2MCwyNjYzXX0sXCJ+XCJdLFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjY2NiwyNjY5XX0sXCImXCJdXV0sXCJwdW5jdHVhdGlvblwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzI2NzMsMjcwOV19LG51bGwsW10sW1wiYWx0XCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjY4NywyNzA5XX0sW1widGVybWluYWxcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNjg3LDI2OTBdfSxcIjxcIl0sW1widGVybWluYWxcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNjkzLDI2OTZdfSxcIj5cIl0sW1widGVybWluYWxcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNjk5LDI3MDJdfSxcIixcIl0sW1widGVybWluYWxcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNzA1LDI3MDldfSxcIi0tXCJdXV19XSk7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBJbXBvcnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jb25zdCBCdWlsZGVyID0gQnVpbGRlcl8xO1xuY29uc3QgR3JhbW1hciA9IEdyYW1tYXJfMTtcbmNvbnN0IE5hbWVzcGFjZSA9IE5hbWVzcGFjZV8xO1xuY29uc3QgY29tbW9uID0gY29tbW9uJGw7XG5jb25zdCBlcnJvcnMgPSBlcnJvcnMkOTtcbmNvbnN0IHBleHBycyA9IHBleHBycyQ2O1xuY29uc3QgdXRpbCA9IHV0aWwkNztcbmNvbnN0IHZlcnNpb24gPSB2ZXJzaW9uJDE7XG5jb25zdCB7bWFrZVJlY2lwZX0gPSBtYWtlUmVjaXBlJDU7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBQcml2YXRlIHN0dWZmXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vLyBUaGUgbWV0YWdyYW1tYXIsIGkuZS4gdGhlIGdyYW1tYXIgZm9yIE9obSBncmFtbWFycy4gSW5pdGlhbGl6ZWQgYXQgdGhlXG4vLyBib3R0b20gb2YgdGhpcyBmaWxlIGJlY2F1c2UgbG9hZGluZyB0aGUgZ3JhbW1hciByZXF1aXJlcyBPaG0gaXRzZWxmLlxubGV0IG9obUdyYW1tYXI7XG5cbmNvbnN0IHN1cGVyU3BsaWNlUGxhY2Vob2xkZXIgPSBPYmplY3QuY3JlYXRlKHBleHBycy5QRXhwci5wcm90b3R5cGUpO1xuXG5jb25zdCBpc0J1ZmZlciA9IG9iaiA9PlxuICAhIW9iai5jb25zdHJ1Y3RvciAmJlxuICB0eXBlb2Ygb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmXG4gIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlcihvYmopO1xuXG4vLyBSZXR1cm5zIGEgR3JhbW1hciBpbnN0YW5jZSAoaS5lLiwgYW4gb2JqZWN0IHdpdGggYSBgbWF0Y2hgIG1ldGhvZCkgZm9yXG4vLyBgdHJlZWAsIHdoaWNoIGlzIHRoZSBjb25jcmV0ZSBzeW50YXggdHJlZSBvZiBhIHVzZXItd3JpdHRlbiBncmFtbWFyLlxuLy8gVGhlIGdyYW1tYXIgd2lsbCBiZSBhc3NpZ25lZCBpbnRvIGBuYW1lc3BhY2VgIHVuZGVyIHRoZSBuYW1lIG9mIHRoZSBncmFtbWFyXG4vLyBhcyBzcGVjaWZpZWQgaW4gdGhlIHNvdXJjZS5cbmZ1bmN0aW9uIGJ1aWxkR3JhbW1hcihtYXRjaCwgbmFtZXNwYWNlLCBvcHRPaG1HcmFtbWFyRm9yVGVzdGluZykge1xuICBjb25zdCBidWlsZGVyID0gbmV3IEJ1aWxkZXIoKTtcbiAgbGV0IGRlY2w7XG4gIGxldCBjdXJyZW50UnVsZU5hbWU7XG4gIGxldCBjdXJyZW50UnVsZUZvcm1hbHM7XG4gIGxldCBvdmVycmlkaW5nID0gZmFsc2U7XG4gIGNvbnN0IG1ldGFHcmFtbWFyID0gb3B0T2htR3JhbW1hckZvclRlc3RpbmcgfHwgb2htR3JhbW1hcjtcblxuICAvLyBBIHZpc2l0b3IgdGhhdCBwcm9kdWNlcyBhIEdyYW1tYXIgaW5zdGFuY2UgZnJvbSB0aGUgQ1NULlxuICBjb25zdCBoZWxwZXJzID0gbWV0YUdyYW1tYXIuY3JlYXRlU2VtYW50aWNzKCkuYWRkT3BlcmF0aW9uKCd2aXNpdCcsIHtcbiAgICBHcmFtbWFycyhncmFtbWFySXRlcikge1xuICAgICAgcmV0dXJuIGdyYW1tYXJJdGVyLmNoaWxkcmVuLm1hcChjID0+IGMudmlzaXQoKSk7XG4gICAgfSxcbiAgICBHcmFtbWFyKGlkLCBzLCBfb3BlbiwgcnVsZXMsIF9jbG9zZSkge1xuICAgICAgY29uc3QgZ3JhbW1hck5hbWUgPSBpZC52aXNpdCgpO1xuICAgICAgZGVjbCA9IGJ1aWxkZXIubmV3R3JhbW1hcihncmFtbWFyTmFtZSwgbmFtZXNwYWNlKTtcbiAgICAgIHMuY2hpbGQoMCkgJiYgcy5jaGlsZCgwKS52aXNpdCgpO1xuICAgICAgcnVsZXMuY2hpbGRyZW4ubWFwKGMgPT4gYy52aXNpdCgpKTtcbiAgICAgIGNvbnN0IGcgPSBkZWNsLmJ1aWxkKCk7XG4gICAgICBnLnNvdXJjZSA9IHRoaXMuc291cmNlLnRyaW1tZWQoKTtcbiAgICAgIGlmIChncmFtbWFyTmFtZSBpbiBuYW1lc3BhY2UpIHtcbiAgICAgICAgdGhyb3cgZXJyb3JzLmR1cGxpY2F0ZUdyYW1tYXJEZWNsYXJhdGlvbihnLCBuYW1lc3BhY2UpO1xuICAgICAgfVxuICAgICAgbmFtZXNwYWNlW2dyYW1tYXJOYW1lXSA9IGc7XG4gICAgICByZXR1cm4gZztcbiAgICB9LFxuXG4gICAgU3VwZXJHcmFtbWFyKF8sIG4pIHtcbiAgICAgIGNvbnN0IHN1cGVyR3JhbW1hck5hbWUgPSBuLnZpc2l0KCk7XG4gICAgICBpZiAoc3VwZXJHcmFtbWFyTmFtZSA9PT0gJ251bGwnKSB7XG4gICAgICAgIGRlY2wud2l0aFN1cGVyR3JhbW1hcihudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghbmFtZXNwYWNlIHx8ICEoc3VwZXJHcmFtbWFyTmFtZSBpbiBuYW1lc3BhY2UpKSB7XG4gICAgICAgICAgdGhyb3cgZXJyb3JzLnVuZGVjbGFyZWRHcmFtbWFyKHN1cGVyR3JhbW1hck5hbWUsIG5hbWVzcGFjZSwgbi5zb3VyY2UpO1xuICAgICAgICB9XG4gICAgICAgIGRlY2wud2l0aFN1cGVyR3JhbW1hcihuYW1lc3BhY2Vbc3VwZXJHcmFtbWFyTmFtZV0pO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBSdWxlX2RlZmluZShuLCBmcywgZCwgXywgYikge1xuICAgICAgY3VycmVudFJ1bGVOYW1lID0gbi52aXNpdCgpO1xuICAgICAgY3VycmVudFJ1bGVGb3JtYWxzID0gZnMuY2hpbGRyZW4ubWFwKGMgPT4gYy52aXNpdCgpKVswXSB8fCBbXTtcbiAgICAgIC8vIElmIHRoZXJlIGlzIG5vIGRlZmF1bHQgc3RhcnQgcnVsZSB5ZXQsIHNldCBpdCBub3cuIFRoaXMgbXVzdCBiZSBkb25lIGJlZm9yZSB2aXNpdGluZ1xuICAgICAgLy8gdGhlIGJvZHksIGJlY2F1c2UgaXQgbWlnaHQgY29udGFpbiBhbiBpbmxpbmUgcnVsZSBkZWZpbml0aW9uLlxuICAgICAgaWYgKCFkZWNsLmRlZmF1bHRTdGFydFJ1bGUgJiYgZGVjbC5lbnN1cmVTdXBlckdyYW1tYXIoKSAhPT0gR3JhbW1hci5Qcm90b0J1aWx0SW5SdWxlcykge1xuICAgICAgICBkZWNsLndpdGhEZWZhdWx0U3RhcnRSdWxlKGN1cnJlbnRSdWxlTmFtZSk7XG4gICAgICB9XG4gICAgICBjb25zdCBib2R5ID0gYi52aXNpdCgpO1xuICAgICAgY29uc3QgZGVzY3JpcHRpb24gPSBkLmNoaWxkcmVuLm1hcChjID0+IGMudmlzaXQoKSlbMF07XG4gICAgICBjb25zdCBzb3VyY2UgPSB0aGlzLnNvdXJjZS50cmltbWVkKCk7XG4gICAgICByZXR1cm4gZGVjbC5kZWZpbmUoY3VycmVudFJ1bGVOYW1lLCBjdXJyZW50UnVsZUZvcm1hbHMsIGJvZHksIGRlc2NyaXB0aW9uLCBzb3VyY2UpO1xuICAgIH0sXG4gICAgUnVsZV9vdmVycmlkZShuLCBmcywgXywgYikge1xuICAgICAgY3VycmVudFJ1bGVOYW1lID0gbi52aXNpdCgpO1xuICAgICAgY3VycmVudFJ1bGVGb3JtYWxzID0gZnMuY2hpbGRyZW4ubWFwKGMgPT4gYy52aXNpdCgpKVswXSB8fCBbXTtcblxuICAgICAgY29uc3Qgc291cmNlID0gdGhpcy5zb3VyY2UudHJpbW1lZCgpO1xuICAgICAgZGVjbC5lbnN1cmVTdXBlckdyYW1tYXJSdWxlRm9yT3ZlcnJpZGluZyhjdXJyZW50UnVsZU5hbWUsIHNvdXJjZSk7XG5cbiAgICAgIG92ZXJyaWRpbmcgPSB0cnVlO1xuICAgICAgY29uc3QgYm9keSA9IGIudmlzaXQoKTtcbiAgICAgIG92ZXJyaWRpbmcgPSBmYWxzZTtcbiAgICAgIHJldHVybiBkZWNsLm92ZXJyaWRlKGN1cnJlbnRSdWxlTmFtZSwgY3VycmVudFJ1bGVGb3JtYWxzLCBib2R5LCBudWxsLCBzb3VyY2UpO1xuICAgIH0sXG4gICAgUnVsZV9leHRlbmQobiwgZnMsIF8sIGIpIHtcbiAgICAgIGN1cnJlbnRSdWxlTmFtZSA9IG4udmlzaXQoKTtcbiAgICAgIGN1cnJlbnRSdWxlRm9ybWFscyA9IGZzLmNoaWxkcmVuLm1hcChjID0+IGMudmlzaXQoKSlbMF0gfHwgW107XG4gICAgICBjb25zdCBib2R5ID0gYi52aXNpdCgpO1xuICAgICAgY29uc3Qgc291cmNlID0gdGhpcy5zb3VyY2UudHJpbW1lZCgpO1xuICAgICAgcmV0dXJuIGRlY2wuZXh0ZW5kKGN1cnJlbnRSdWxlTmFtZSwgY3VycmVudFJ1bGVGb3JtYWxzLCBib2R5LCBudWxsLCBzb3VyY2UpO1xuICAgIH0sXG4gICAgUnVsZUJvZHkoXywgdGVybXMpIHtcbiAgICAgIHJldHVybiBidWlsZGVyLmFsdCguLi50ZXJtcy52aXNpdCgpKS53aXRoU291cmNlKHRoaXMuc291cmNlKTtcbiAgICB9LFxuICAgIE92ZXJyaWRlUnVsZUJvZHkoXywgdGVybXMpIHtcbiAgICAgIGNvbnN0IGFyZ3MgPSB0ZXJtcy52aXNpdCgpO1xuXG4gICAgICAvLyBDaGVjayBpZiB0aGUgc3VwZXItc3BsaWNlIG9wZXJhdG9yIChgLi4uYCkgYXBwZWFycyBpbiB0aGUgdGVybXMuXG4gICAgICBjb25zdCBleHBhbnNpb25Qb3MgPSBhcmdzLmluZGV4T2Yoc3VwZXJTcGxpY2VQbGFjZWhvbGRlcik7XG4gICAgICBpZiAoZXhwYW5zaW9uUG9zID49IDApIHtcbiAgICAgICAgY29uc3QgYmVmb3JlVGVybXMgPSBhcmdzLnNsaWNlKDAsIGV4cGFuc2lvblBvcyk7XG4gICAgICAgIGNvbnN0IGFmdGVyVGVybXMgPSBhcmdzLnNsaWNlKGV4cGFuc2lvblBvcyArIDEpO1xuXG4gICAgICAgIC8vIEVuc3VyZSBpdCBhcHBlYXJzIG5vIG1vcmUgdGhhbiBvbmNlLlxuICAgICAgICBhZnRlclRlcm1zLmZvckVhY2godCA9PiB7XG4gICAgICAgICAgaWYgKHQgPT09IHN1cGVyU3BsaWNlUGxhY2Vob2xkZXIpIHRocm93IGVycm9ycy5tdWx0aXBsZVN1cGVyU3BsaWNlcyh0KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBwZXhwcnMuU3BsaWNlKFxuICAgICAgICAgICAgZGVjbC5zdXBlckdyYW1tYXIsXG4gICAgICAgICAgICBjdXJyZW50UnVsZU5hbWUsXG4gICAgICAgICAgICBiZWZvcmVUZXJtcyxcbiAgICAgICAgICAgIGFmdGVyVGVybXNcbiAgICAgICAgKS53aXRoU291cmNlKHRoaXMuc291cmNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBidWlsZGVyLmFsdCguLi5hcmdzKS53aXRoU291cmNlKHRoaXMuc291cmNlKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIEZvcm1hbHMob3BvaW50eSwgZnMsIGNwb2ludHkpIHtcbiAgICAgIHJldHVybiBmcy52aXNpdCgpO1xuICAgIH0sXG5cbiAgICBQYXJhbXMob3BvaW50eSwgcHMsIGNwb2ludHkpIHtcbiAgICAgIHJldHVybiBwcy52aXNpdCgpO1xuICAgIH0sXG5cbiAgICBBbHQoc2Vxcykge1xuICAgICAgcmV0dXJuIGJ1aWxkZXIuYWx0KC4uLnNlcXMudmlzaXQoKSkud2l0aFNvdXJjZSh0aGlzLnNvdXJjZSk7XG4gICAgfSxcblxuICAgIFRvcExldmVsVGVybV9pbmxpbmUoYiwgbikge1xuICAgICAgY29uc3QgaW5saW5lUnVsZU5hbWUgPSBjdXJyZW50UnVsZU5hbWUgKyAnXycgKyBuLnZpc2l0KCk7XG4gICAgICBjb25zdCBib2R5ID0gYi52aXNpdCgpO1xuICAgICAgY29uc3Qgc291cmNlID0gdGhpcy5zb3VyY2UudHJpbW1lZCgpO1xuICAgICAgY29uc3QgaXNOZXdSdWxlRGVjbGFyYXRpb24gPSAhKFxuICAgICAgICBkZWNsLnN1cGVyR3JhbW1hciAmJiBkZWNsLnN1cGVyR3JhbW1hci5ydWxlc1tpbmxpbmVSdWxlTmFtZV1cbiAgICAgICk7XG4gICAgICBpZiAob3ZlcnJpZGluZyAmJiAhaXNOZXdSdWxlRGVjbGFyYXRpb24pIHtcbiAgICAgICAgZGVjbC5vdmVycmlkZShpbmxpbmVSdWxlTmFtZSwgY3VycmVudFJ1bGVGb3JtYWxzLCBib2R5LCBudWxsLCBzb3VyY2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVjbC5kZWZpbmUoaW5saW5lUnVsZU5hbWUsIGN1cnJlbnRSdWxlRm9ybWFscywgYm9keSwgbnVsbCwgc291cmNlKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHBhcmFtcyA9IGN1cnJlbnRSdWxlRm9ybWFscy5tYXAoZm9ybWFsID0+IGJ1aWxkZXIuYXBwKGZvcm1hbCkpO1xuICAgICAgcmV0dXJuIGJ1aWxkZXIuYXBwKGlubGluZVJ1bGVOYW1lLCBwYXJhbXMpLndpdGhTb3VyY2UoYm9keS5zb3VyY2UpO1xuICAgIH0sXG4gICAgT3ZlcnJpZGVUb3BMZXZlbFRlcm1fc3VwZXJTcGxpY2UoXykge1xuICAgICAgcmV0dXJuIHN1cGVyU3BsaWNlUGxhY2Vob2xkZXI7XG4gICAgfSxcblxuICAgIFNlcShleHByKSB7XG4gICAgICByZXR1cm4gYnVpbGRlci5zZXEoLi4uZXhwci5jaGlsZHJlbi5tYXAoYyA9PiBjLnZpc2l0KCkpKS53aXRoU291cmNlKHRoaXMuc291cmNlKTtcbiAgICB9LFxuXG4gICAgSXRlcl9zdGFyKHgsIF8pIHtcbiAgICAgIHJldHVybiBidWlsZGVyLnN0YXIoeC52aXNpdCgpKS53aXRoU291cmNlKHRoaXMuc291cmNlKTtcbiAgICB9LFxuICAgIEl0ZXJfcGx1cyh4LCBfKSB7XG4gICAgICByZXR1cm4gYnVpbGRlci5wbHVzKHgudmlzaXQoKSkud2l0aFNvdXJjZSh0aGlzLnNvdXJjZSk7XG4gICAgfSxcbiAgICBJdGVyX29wdCh4LCBfKSB7XG4gICAgICByZXR1cm4gYnVpbGRlci5vcHQoeC52aXNpdCgpKS53aXRoU291cmNlKHRoaXMuc291cmNlKTtcbiAgICB9LFxuXG4gICAgUHJlZF9ub3QoXywgeCkge1xuICAgICAgcmV0dXJuIGJ1aWxkZXIubm90KHgudmlzaXQoKSkud2l0aFNvdXJjZSh0aGlzLnNvdXJjZSk7XG4gICAgfSxcbiAgICBQcmVkX2xvb2thaGVhZChfLCB4KSB7XG4gICAgICByZXR1cm4gYnVpbGRlci5sb29rYWhlYWQoeC52aXNpdCgpKS53aXRoU291cmNlKHRoaXMuc291cmNlKTtcbiAgICB9LFxuXG4gICAgTGV4X2xleChfLCB4KSB7XG4gICAgICByZXR1cm4gYnVpbGRlci5sZXgoeC52aXNpdCgpKS53aXRoU291cmNlKHRoaXMuc291cmNlKTtcbiAgICB9LFxuXG4gICAgQmFzZV9hcHBsaWNhdGlvbihydWxlLCBwcykge1xuICAgICAgY29uc3QgcGFyYW1zID0gcHMuY2hpbGRyZW4ubWFwKGMgPT4gYy52aXNpdCgpKVswXSB8fCBbXTtcbiAgICAgIHJldHVybiBidWlsZGVyLmFwcChydWxlLnZpc2l0KCksIHBhcmFtcykud2l0aFNvdXJjZSh0aGlzLnNvdXJjZSk7XG4gICAgfSxcbiAgICBCYXNlX3JhbmdlKGZyb20sIF8sIHRvKSB7XG4gICAgICByZXR1cm4gYnVpbGRlci5yYW5nZShmcm9tLnZpc2l0KCksIHRvLnZpc2l0KCkpLndpdGhTb3VyY2UodGhpcy5zb3VyY2UpO1xuICAgIH0sXG4gICAgQmFzZV90ZXJtaW5hbChleHByKSB7XG4gICAgICByZXR1cm4gYnVpbGRlci50ZXJtaW5hbChleHByLnZpc2l0KCkpLndpdGhTb3VyY2UodGhpcy5zb3VyY2UpO1xuICAgIH0sXG4gICAgQmFzZV9wYXJlbihvcGVuLCB4LCBjbG9zZSkge1xuICAgICAgcmV0dXJuIHgudmlzaXQoKTtcbiAgICB9LFxuXG4gICAgcnVsZURlc2NyKG9wZW4sIHQsIGNsb3NlKSB7XG4gICAgICByZXR1cm4gdC52aXNpdCgpO1xuICAgIH0sXG4gICAgcnVsZURlc2NyVGV4dChfKSB7XG4gICAgICByZXR1cm4gdGhpcy5zb3VyY2VTdHJpbmcudHJpbSgpO1xuICAgIH0sXG5cbiAgICBjYXNlTmFtZShfLCBzcGFjZTEsIG4sIHNwYWNlMiwgZW5kKSB7XG4gICAgICByZXR1cm4gbi52aXNpdCgpO1xuICAgIH0sXG5cbiAgICBuYW1lKGZpcnN0LCByZXN0KSB7XG4gICAgICByZXR1cm4gdGhpcy5zb3VyY2VTdHJpbmc7XG4gICAgfSxcbiAgICBuYW1lRmlyc3QoZXhwcikge30sXG4gICAgbmFtZVJlc3QoZXhwcikge30sXG5cbiAgICB0ZXJtaW5hbChvcGVuLCBjcywgY2xvc2UpIHtcbiAgICAgIHJldHVybiBjcy5jaGlsZHJlbi5tYXAoYyA9PiBjLnZpc2l0KCkpLmpvaW4oJycpO1xuICAgIH0sXG5cbiAgICBvbmVDaGFyVGVybWluYWwob3BlbiwgYywgY2xvc2UpIHtcbiAgICAgIHJldHVybiBjLnZpc2l0KCk7XG4gICAgfSxcblxuICAgIGVzY2FwZUNoYXIoYykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGNvbW1vbi51bmVzY2FwZUNvZGVQb2ludCh0aGlzLnNvdXJjZVN0cmluZyk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIFJhbmdlRXJyb3IgJiYgZXJyLm1lc3NhZ2Uuc3RhcnRzV2l0aCgnSW52YWxpZCBjb2RlIHBvaW50ICcpKSB7XG4gICAgICAgICAgdGhyb3cgZXJyb3JzLmludmFsaWRDb2RlUG9pbnQoYyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgZXJyOyAvLyBSZXRocm93XG4gICAgICB9XG4gICAgfSxcblxuICAgIE5vbmVtcHR5TGlzdE9mKHgsIF8sIHhzKSB7XG4gICAgICByZXR1cm4gW3gudmlzaXQoKV0uY29uY2F0KHhzLmNoaWxkcmVuLm1hcChjID0+IGMudmlzaXQoKSkpO1xuICAgIH0sXG4gICAgRW1wdHlMaXN0T2YoKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfSxcblxuICAgIF90ZXJtaW5hbCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnNvdXJjZVN0cmluZztcbiAgICB9LFxuICB9KTtcbiAgcmV0dXJuIGhlbHBlcnMobWF0Y2gpLnZpc2l0KCk7XG59XG5cbmZ1bmN0aW9uIGNvbXBpbGVBbmRMb2FkKHNvdXJjZSwgbmFtZXNwYWNlKSB7XG4gIGNvbnN0IG0gPSBvaG1HcmFtbWFyLm1hdGNoKHNvdXJjZSwgJ0dyYW1tYXJzJyk7XG4gIGlmIChtLmZhaWxlZCgpKSB7XG4gICAgdGhyb3cgZXJyb3JzLmdyYW1tYXJTeW50YXhFcnJvcihtKTtcbiAgfVxuICByZXR1cm4gYnVpbGRHcmFtbWFyKG0sIG5hbWVzcGFjZSk7XG59XG5cbmZ1bmN0aW9uIGdyYW1tYXIoc291cmNlLCBvcHROYW1lc3BhY2UpIHtcbiAgY29uc3QgbnMgPSBncmFtbWFycyhzb3VyY2UsIG9wdE5hbWVzcGFjZSk7XG5cbiAgLy8gRW5zdXJlIHRoYXQgdGhlIHNvdXJjZSBjb250YWluZWQgbm8gbW9yZSB0aGFuIG9uZSBncmFtbWFyIGRlZmluaXRpb24uXG4gIGNvbnN0IGdyYW1tYXJOYW1lcyA9IE9iamVjdC5rZXlzKG5zKTtcbiAgaWYgKGdyYW1tYXJOYW1lcy5sZW5ndGggPT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgZ3JhbW1hciBkZWZpbml0aW9uJyk7XG4gIH0gZWxzZSBpZiAoZ3JhbW1hck5hbWVzLmxlbmd0aCA+IDEpIHtcbiAgICBjb25zdCBzZWNvbmRHcmFtbWFyID0gbnNbZ3JhbW1hck5hbWVzWzFdXTtcbiAgICBjb25zdCBpbnRlcnZhbCA9IHNlY29uZEdyYW1tYXIuc291cmNlO1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgdXRpbC5nZXRMaW5lQW5kQ29sdW1uTWVzc2FnZShpbnRlcnZhbC5zb3VyY2VTdHJpbmcsIGludGVydmFsLnN0YXJ0SWR4KSArXG4gICAgICAgICdGb3VuZCBtb3JlIHRoYW4gb25lIGdyYW1tYXIgZGVmaW5pdGlvbiAtLSB1c2Ugb2htLmdyYW1tYXJzKCkgaW5zdGVhZC4nXG4gICAgKTtcbiAgfVxuICByZXR1cm4gbnNbZ3JhbW1hck5hbWVzWzBdXTsgLy8gUmV0dXJuIHRoZSBvbmUgYW5kIG9ubHkgZ3JhbW1hci5cbn1cblxuZnVuY3Rpb24gZ3JhbW1hcnMoc291cmNlLCBvcHROYW1lc3BhY2UpIHtcbiAgY29uc3QgbnMgPSBOYW1lc3BhY2UuZXh0ZW5kKE5hbWVzcGFjZS5hc05hbWVzcGFjZShvcHROYW1lc3BhY2UpKTtcbiAgaWYgKHR5cGVvZiBzb3VyY2UgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gRm9yIGNvbnZlbmllbmNlLCBkZXRlY3QgTm9kZS5qcyBCdWZmZXIgb2JqZWN0cyBhbmQgYXV0b21hdGljYWxseSBjYWxsIHRvU3RyaW5nKCkuXG4gICAgaWYgKGlzQnVmZmVyKHNvdXJjZSkpIHtcbiAgICAgIHNvdXJjZSA9IHNvdXJjZS50b1N0cmluZygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgICdFeHBlY3RlZCBzdHJpbmcgYXMgZmlyc3QgYXJndW1lbnQsIGdvdCAnICsgY29tbW9uLnVuZXhwZWN0ZWRPYmpUb1N0cmluZyhzb3VyY2UpXG4gICAgICApO1xuICAgIH1cbiAgfVxuICBjb21waWxlQW5kTG9hZChzb3VyY2UsIG5zKTtcbiAgcmV0dXJuIG5zO1xufVxuXG5mdW5jdGlvbiBncmFtbWFyRnJvbVNjcmlwdEVsZW1lbnQob3B0Tm9kZSkge1xuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnZ3JhbW1hckZyb21TY3JpcHRFbGVtZW50IHdhcyByZW1vdmVkIGluIE9obSB2MTYuMC4gU2VlIGh0dHBzOi8vb2htanMub3JnL2QvZ2ZzIGZvciBtb3JlIGluZm8uJ1xuICApO1xufVxuXG5mdW5jdGlvbiBncmFtbWFyc0Zyb21TY3JpcHRFbGVtZW50cyhvcHROb2RlT3JOb2RlTGlzdCkge1xuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnZ3JhbW1hcnNGcm9tU2NyaXB0RWxlbWVudHMgd2FzIHJlbW92ZWQgaW4gT2htIHYxNi4wLiBTZWUgaHR0cHM6Ly9vaG1qcy5vcmcvZC9nZnMgZm9yIG1vcmUgaW5mby4nXG4gICk7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBFeHBvcnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vLyBTdHVmZiB0aGF0IHVzZXJzIHNob3VsZCBrbm93IGFib3V0XG5tYWluJDEuZXhwb3J0cyA9IHtcbiAgY3JlYXRlTmFtZXNwYWNlOiBOYW1lc3BhY2UuY3JlYXRlTmFtZXNwYWNlLFxuICBncmFtbWFyLFxuICBncmFtbWFycyxcbiAgZ3JhbW1hckZyb21TY3JpcHRFbGVtZW50LFxuICBncmFtbWFyc0Zyb21TY3JpcHRFbGVtZW50cyxcbiAgbWFrZVJlY2lwZSxcbiAgb2htR3JhbW1hcjogbnVsbCwgLy8gSW5pdGlhbGl6ZWQgYmVsb3csIGFmdGVyIEdyYW1tYXIuQnVpbHRJblJ1bGVzLlxuICBwZXhwcnMsXG4gIHV0aWwsXG4gIHZlcnNpb24sXG59O1xuXG4vLyBTdHVmZiBmb3IgdGVzdGluZywgZXRjLlxubWFpbiQxLmV4cG9ydHMuX2J1aWxkR3JhbW1hciA9IGJ1aWxkR3JhbW1hcjtcblxuLy8gTGF0ZSBpbml0aWFsaXphdGlvbiBmb3Igc3R1ZmYgdGhhdCBpcyBib290c3RyYXBwZWQuXG5cblxudXRpbC5hbm5vdW5jZUJ1aWx0SW5SdWxlcyhHcmFtbWFyLkJ1aWx0SW5SdWxlcyk7XG5cbm1haW4kMS5leHBvcnRzLm9obUdyYW1tYXIgPSBvaG1HcmFtbWFyID0gb2htR3JhbW1hciQxO1xuR3JhbW1hci5pbml0QXBwbGljYXRpb25QYXJzZXIob2htR3JhbW1hciwgYnVpbGRHcmFtbWFyKTtcblxudmFyIG9obSA9IG1haW4kMS5leHBvcnRzO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSW1wb3J0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuY29uc3Qge2Fzc2VydH0gPSBjb21tb24kbDtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFByaXZhdGUgc3R1ZmZcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vIEhlbHBlcnNcblxuZnVuY3Rpb24gZ2V0UHJvcChuYW1lLCB0aGluZywgZm4pIHtcbiAgcmV0dXJuIGZuKHRoaW5nW25hbWVdKTtcbn1cblxuZnVuY3Rpb24gbWFwUHJvcChuYW1lLCB0aGluZywgZm4pIHtcbiAgcmV0dXJuIHRoaW5nW25hbWVdLm1hcChmbik7XG59XG5cbi8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHdpbGwgd2FsayBhIHNpbmdsZSBwcm9wZXJ0eSBvZiBhIG5vZGUuXG4vLyBgZGVzY3JpcHRvcmAgaXMgYSBzdHJpbmcgaW5kaWNhdGluZyB0aGUgcHJvcGVydHkgbmFtZSwgb3B0aW9uYWxseSBlbmRpbmdcbi8vIHdpdGggJ1tdJyAoZS5nLiwgJ2NoaWxkcmVuW10nKS5cbmZ1bmN0aW9uIGdldFByb3BXYWxrRm4oZGVzY3JpcHRvcikge1xuICBjb25zdCBwYXJ0cyA9IGRlc2NyaXB0b3Iuc3BsaXQoLyA/XFxbXFxdLyk7XG4gIGlmIChwYXJ0cy5sZW5ndGggPT09IDIpIHtcbiAgICByZXR1cm4gbWFwUHJvcC5iaW5kKG51bGwsIHBhcnRzWzBdKTtcbiAgfVxuICByZXR1cm4gZ2V0UHJvcC5iaW5kKG51bGwsIGRlc2NyaXB0b3IpO1xufVxuXG5mdW5jdGlvbiBnZXRQcm9wcyh3YWxrRm5zLCB0aGluZywgZm4pIHtcbiAgcmV0dXJuIHdhbGtGbnMubWFwKHdhbGtGbiA9PiB3YWxrRm4odGhpbmcsIGZuKSk7XG59XG5cbmZ1bmN0aW9uIGdldFdhbGtGbihzaGFwZSkge1xuICBpZiAodHlwZW9mIHNoYXBlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBnZXRQcm9wcy5iaW5kKG51bGwsIFtnZXRQcm9wV2Fsa0ZuKHNoYXBlKV0pO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoc2hhcGUpKSB7XG4gICAgcmV0dXJuIGdldFByb3BzLmJpbmQobnVsbCwgc2hhcGUubWFwKGdldFByb3BXYWxrRm4pKTtcbiAgfSBlbHNlIHtcbiAgICBhc3NlcnQodHlwZW9mIHNoYXBlID09PSAnZnVuY3Rpb24nLCAnRXhwZWN0ZWQgYSBzdHJpbmcsIEFycmF5LCBvciBmdW5jdGlvbicpO1xuICAgIGFzc2VydChzaGFwZS5sZW5ndGggPT09IDIsICdFeHBlY3RlZCBhIGZ1bmN0aW9uIG9mIGFyaXR5IDIsIGdvdCAnICsgc2hhcGUubGVuZ3RoKTtcbiAgICByZXR1cm4gc2hhcGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNSZXN0cmljdGVkSWRlbnRpZmllcihzdHIpIHtcbiAgcmV0dXJuIC9eW2EtekEtWl9dWzAtOWEtekEtWl9dKiQvLnRlc3Qoc3RyKTtcbn1cblxuZnVuY3Rpb24gdHJpbShzKSB7XG4gIHJldHVybiBzLnRyaW0oKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VTaWduYXR1cmUoc2lnKSB7XG4gIGNvbnN0IHBhcnRzID0gc2lnLnNwbGl0KC9bKCldLykubWFwKHRyaW0pO1xuICBpZiAocGFydHMubGVuZ3RoID09PSAzICYmIHBhcnRzWzJdID09PSAnJykge1xuICAgIGNvbnN0IG5hbWUgPSBwYXJ0c1swXTtcbiAgICBsZXQgcGFyYW1zID0gW107XG4gICAgaWYgKHBhcnRzWzFdLmxlbmd0aCA+IDApIHtcbiAgICAgIHBhcmFtcyA9IHBhcnRzWzFdLnNwbGl0KCcsJykubWFwKHRyaW0pO1xuICAgIH1cbiAgICBpZiAoaXNSZXN0cmljdGVkSWRlbnRpZmllcihuYW1lKSAmJiBwYXJhbXMuZXZlcnkoaXNSZXN0cmljdGVkSWRlbnRpZmllcikpIHtcbiAgICAgIHJldHVybiB7bmFtZSwgZm9ybWFsczogcGFyYW1zfTtcbiAgICB9XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG9wZXJhdGlvbiBzaWduYXR1cmU6ICcgKyBzaWcpO1xufVxuXG4vKlxuICBBIFZpc2l0b3JGYW1pbHkgY29udGFpbnMgYSBzZXQgb2YgcmVjdXJzaXZlIG9wZXJhdGlvbnMgdGhhdCBhcmUgZGVmaW5lZCBvdmVyIHNvbWUga2luZCBvZlxuICB0cmVlIHN0cnVjdHVyZS4gVGhlIGBjb25maWdgIHBhcmFtZXRlciBzcGVjaWZpZXMgaG93IHRvIHdhbGsgdGhlIHRyZWU6XG4gIC0gJ2dldFRhZycgaXMgZnVuY3Rpb24gd2hpY2gsIGdpdmVuIGEgbm9kZSBpbiB0aGUgdHJlZSwgcmV0dXJucyB0aGUgbm9kZSdzICd0YWcnICh0eXBlKVxuICAtICdzaGFwZXMnIGFuIG9iamVjdCB0aGF0IG1hcHMgZnJvbSBhIHRhZyB0byBhIHZhbHVlIHRoYXQgZGVzY3JpYmVzIGhvdyB0byByZWN1cnNpdmVseVxuICAgIGV2YWx1YXRlIHRoZSBvcGVyYXRpb24gZm9yIG5vZGVzIG9mIHRoYXQgdHlwZS4gVGhlIHZhbHVlIGNhbiBiZTpcbiAgICAqIGEgc3RyaW5nIGluZGljYXRpbmcgdGhlIHByb3BlcnR5IG5hbWUgdGhhdCBob2xkcyB0aGF0IG5vZGUncyBvbmx5IGNoaWxkXG4gICAgKiBhbiBBcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyAob3IgYW4gZW1wdHkgYXJyYXkgaW5kaWNhdGluZyBhIGxlYWYgdHlwZSksIG9yXG4gICAgKiBhIGZ1bmN0aW9uIHRha2luZyB0d28gYXJndW1lbnRzIChub2RlLCBmbiksIGFuZCByZXR1cm5pbmcgYW4gQXJyYXkgd2hpY2ggaXMgdGhlIHJlc3VsdFxuICAgICAgb2YgYXBwbHkgYGZuYCB0byBlYWNoIG9mIHRoZSBub2RlJ3MgY2hpbGRyZW4uXG4gKi9cbmZ1bmN0aW9uIFZpc2l0b3JGYW1pbHkoY29uZmlnKSB7XG4gIHRoaXMuX3NoYXBlcyA9IGNvbmZpZy5zaGFwZXM7XG4gIHRoaXMuX2dldFRhZyA9IGNvbmZpZy5nZXRUYWc7XG5cbiAgdGhpcy5BZGFwdGVyID0gZnVuY3Rpb24odGhpbmcsIGZhbWlseSkge1xuICAgIHRoaXMuX2FkYXB0ZWUgPSB0aGluZztcbiAgICB0aGlzLl9mYW1pbHkgPSBmYW1pbHk7XG4gIH07XG4gIHRoaXMuQWRhcHRlci5wcm90b3R5cGUudmFsdWVPZiA9IGZ1bmN0aW9uKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignaGVlZXkhJyk7XG4gIH07XG4gIHRoaXMub3BlcmF0aW9ucyA9IHt9O1xuXG4gIHRoaXMuX2FyaXRpZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB0aGlzLl9nZXRDaGlsZHJlbiA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgT2JqZWN0LmtleXModGhpcy5fc2hhcGVzKS5mb3JFYWNoKGsgPT4ge1xuICAgIGNvbnN0IHNoYXBlID0gdGhpcy5fc2hhcGVzW2tdO1xuICAgIHRoaXMuX2dldENoaWxkcmVuW2tdID0gZ2V0V2Fsa0ZuKHNoYXBlKTtcblxuICAgIC8vIEEgZnVuY3Rpb24gbWVhbnMgdGhlIGFyaXR5IGlzbid0IGZpeGVkLCBzbyBkb24ndCBwdXQgYW4gZW50cnkgaW4gdGhlIGFyaXR5IG1hcC5cbiAgICBpZiAodHlwZW9mIHNoYXBlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLl9hcml0aWVzW2tdID0gQXJyYXkuaXNBcnJheShzaGFwZSkgPyBzaGFwZS5sZW5ndGggOiAxO1xuICAgIH1cbiAgfSk7XG4gIHRoaXMuX3dyYXAgPSB0aGluZyA9PiBuZXcgdGhpcy5BZGFwdGVyKHRoaW5nLCB0aGlzKTtcbn1cblxuVmlzaXRvckZhbWlseS5wcm90b3R5cGUud3JhcCA9IGZ1bmN0aW9uKHRoaW5nKSB7XG4gIHJldHVybiB0aGlzLl93cmFwKHRoaW5nKTtcbn07XG5cblZpc2l0b3JGYW1pbHkucHJvdG90eXBlLl9jaGVja0FjdGlvbkRpY3QgPSBmdW5jdGlvbihkaWN0KSB7XG4gIE9iamVjdC5rZXlzKGRpY3QpLmZvckVhY2goayA9PiB7XG4gICAgYXNzZXJ0KGsgaW4gdGhpcy5fZ2V0Q2hpbGRyZW4sIFwiVW5yZWNvZ25pemVkIGFjdGlvbiBuYW1lICdcIiArIGsgKyBcIidcIik7XG4gICAgY29uc3QgYWN0aW9uID0gZGljdFtrXTtcbiAgICBhc3NlcnQodHlwZW9mIGFjdGlvbiA9PT0gJ2Z1bmN0aW9uJywgXCJLZXkgJ1wiICsgayArIFwiJzogZXhwZWN0ZWQgZnVuY3Rpb24sIGdvdCBcIiArIGFjdGlvbik7XG4gICAgaWYgKGsgaW4gdGhpcy5fYXJpdGllcykge1xuICAgICAgY29uc3QgZXhwZWN0ZWQgPSB0aGlzLl9hcml0aWVzW2tdO1xuICAgICAgY29uc3QgYWN0dWFsID0gZGljdFtrXS5sZW5ndGg7XG4gICAgICBhc3NlcnQoXG4gICAgICAgICAgYWN0dWFsID09PSBleHBlY3RlZCxcbiAgICAgICAgICBcIkFjdGlvbiAnXCIgKyBrICsgXCInIGhhcyB0aGUgd3JvbmcgYXJpdHk6IGV4cGVjdGVkIFwiICsgZXhwZWN0ZWQgKyAnLCBnb3QgJyArIGFjdHVhbFxuICAgICAgKTtcbiAgICB9XG4gIH0pO1xufTtcblxuVmlzaXRvckZhbWlseS5wcm90b3R5cGUuYWRkT3BlcmF0aW9uID0gZnVuY3Rpb24oc2lnbmF0dXJlLCBhY3Rpb25zKSB7XG4gIGNvbnN0IHNpZyA9IHBhcnNlU2lnbmF0dXJlKHNpZ25hdHVyZSk7XG4gIGNvbnN0IHtuYW1lfSA9IHNpZztcbiAgdGhpcy5fY2hlY2tBY3Rpb25EaWN0KGFjdGlvbnMpO1xuICB0aGlzLm9wZXJhdGlvbnNbbmFtZV0gPSB7XG4gICAgbmFtZSxcbiAgICBmb3JtYWxzOiBzaWcuZm9ybWFscyxcbiAgICBhY3Rpb25zLFxuICB9O1xuXG4gIGNvbnN0IGZhbWlseSA9IHRoaXM7XG4gIHRoaXMuQWRhcHRlci5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbiguLi5hcmdzKSB7XG4gICAgY29uc3QgdGFnID0gZmFtaWx5Ll9nZXRUYWcodGhpcy5fYWRhcHRlZSk7XG4gICAgYXNzZXJ0KHRhZyBpbiBmYW1pbHkuX2dldENoaWxkcmVuLCBcImdldFRhZyByZXR1cm5lZCB1bnJlY29nbml6ZWQgdGFnICdcIiArIHRhZyArIFwiJ1wiKTtcbiAgICBhc3NlcnQodGFnIGluIGFjdGlvbnMsIFwiTm8gYWN0aW9uIGZvciAnXCIgKyB0YWcgKyBcIicgaW4gb3BlcmF0aW9uICdcIiArIG5hbWUgKyBcIidcIik7XG5cbiAgICAvLyBDcmVhdGUgYW4gXCJhcmd1bWVudHMgb2JqZWN0XCIgZnJvbSB0aGUgYXJndW1lbnRzIHRoYXQgd2VyZSBwYXNzZWQgdG8gdGhpc1xuICAgIC8vIG9wZXJhdGlvbiAvIGF0dHJpYnV0ZS5cbiAgICBjb25zdCBhcmdzT2JqID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBmb3IgKGNvbnN0IFtpLCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKGFyZ3MpKSB7XG4gICAgICBhcmdzT2JqW3NpZy5mb3JtYWxzW2ldXSA9IHZhbDtcbiAgICB9XG5cbiAgICBjb25zdCBvbGRBcmdzID0gdGhpcy5hcmdzO1xuICAgIHRoaXMuYXJncyA9IGFyZ3NPYmo7XG4gICAgY29uc3QgYW5zID0gYWN0aW9uc1t0YWddLmFwcGx5KFxuICAgICAgICB0aGlzLFxuICAgICAgICBmYW1pbHkuX2dldENoaWxkcmVuW3RhZ10odGhpcy5fYWRhcHRlZSwgZmFtaWx5Ll93cmFwKVxuICAgICk7XG4gICAgdGhpcy5hcmdzID0gb2xkQXJncztcbiAgICByZXR1cm4gYW5zO1xuICB9O1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBFeHBvcnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgVmlzaXRvckZhbWlseV8xID0gVmlzaXRvckZhbWlseTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIE9wZXJhdGlvbnNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IGRlZmF1bHRPcGVyYXRpb24gPSB7XG4gIF90ZXJtaW5hbCgpIHtcbiAgICByZXR1cm4gdGhpcy5zb3VyY2VTdHJpbmc7XG4gIH0sXG5cbiAgX25vbnRlcm1pbmFsKC4uLmNoaWxkcmVuKSB7XG4gICAgY29uc3Qge2N0b3JOYW1lfSA9IHRoaXMuX25vZGU7XG4gICAgY29uc3Qge21hcHBpbmd9ID0gdGhpcy5hcmdzO1xuXG4gICAgLy8gd2l0aG91dCBjdXN0b21pemF0aW9uXG4gICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobWFwcGluZywgY3Rvck5hbWUpKSB7XG4gICAgICAvLyBsZXhpY2FsIHJ1bGVcbiAgICAgIGlmICh0aGlzLmlzTGV4aWNhbCgpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNvdXJjZVN0cmluZztcbiAgICAgIH1cblxuICAgICAgLy8gc2luZ3VsYXIgbm9kZSAoZS5nLiBvbmx5IHN1cnJvdW5kZWQgYnkgbGl0ZXJhbHMgb3IgbG9va2FoZWFkcylcbiAgICAgIGNvbnN0IHJlYWxDaGlsZHJlbiA9IGNoaWxkcmVuLmZpbHRlcihjaGlsZCA9PiAhY2hpbGQuaXNUZXJtaW5hbCgpKTtcbiAgICAgIGlmIChyZWFsQ2hpbGRyZW4ubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiByZWFsQ2hpbGRyZW5bMF0udG9BU1QobWFwcGluZyk7XG4gICAgICB9XG5cbiAgICAgIC8vIHJlc3Q6IHRlcm1zIHdpdGggbXVsdGlwbGUgY2hpbGRyZW5cbiAgICB9XG5cbiAgICAvLyBkaXJlY3QgZm9yd2FyZFxuICAgIGlmICh0eXBlb2YgbWFwcGluZ1tjdG9yTmFtZV0gPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gY2hpbGRyZW5bbWFwcGluZ1tjdG9yTmFtZV1dLnRvQVNUKG1hcHBpbmcpO1xuICAgIH1cblxuICAgIC8vIG5hbWVkL21hcHBlZCBjaGlsZHJlbiBvciB1bm5hbWVkIGNoaWxkcmVuICgnMCcsICcxJywgJzInLCAuLi4pXG4gICAgY29uc3QgcHJvcE1hcCA9IG1hcHBpbmdbY3Rvck5hbWVdIHx8IGNoaWxkcmVuO1xuICAgIGNvbnN0IG5vZGUgPSB7XG4gICAgICB0eXBlOiBjdG9yTmFtZSxcbiAgICB9O1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW5cbiAgICBmb3IgKGNvbnN0IHByb3AgaW4gcHJvcE1hcCkge1xuICAgICAgY29uc3QgbWFwcGVkUHJvcCA9IG1hcHBpbmdbY3Rvck5hbWVdICYmIG1hcHBpbmdbY3Rvck5hbWVdW3Byb3BdO1xuICAgICAgaWYgKHR5cGVvZiBtYXBwZWRQcm9wID09PSAnbnVtYmVyJykge1xuICAgICAgICAvLyBkaXJlY3QgZm9yd2FyZFxuICAgICAgICBub2RlW3Byb3BdID0gY2hpbGRyZW5bbWFwcGVkUHJvcF0udG9BU1QobWFwcGluZyk7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICB0eXBlb2YgbWFwcGVkUHJvcCA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgdHlwZW9mIG1hcHBlZFByb3AgPT09ICdib29sZWFuJyB8fFxuICAgICAgICBtYXBwZWRQcm9wID09PSBudWxsXG4gICAgICApIHtcbiAgICAgICAgLy8gcHJpbWl0aXZlIHZhbHVlXG4gICAgICAgIG5vZGVbcHJvcF0gPSBtYXBwZWRQcm9wO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbWFwcGVkUHJvcCA9PT0gJ29iamVjdCcgJiYgbWFwcGVkUHJvcCBpbnN0YW5jZW9mIE51bWJlcikge1xuICAgICAgICAvLyBwcmltaXRpdmUgbnVtYmVyIChtdXN0IGJlIHVuYm94ZWQpXG4gICAgICAgIG5vZGVbcHJvcF0gPSBOdW1iZXIobWFwcGVkUHJvcCk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBtYXBwZWRQcm9wID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIGNvbXB1dGVkIHZhbHVlXG4gICAgICAgIG5vZGVbcHJvcF0gPSBtYXBwZWRQcm9wLmNhbGwodGhpcywgY2hpbGRyZW4pO1xuICAgICAgfSBlbHNlIGlmIChtYXBwZWRQcm9wID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGNoaWxkcmVuW3Byb3BdICYmICFjaGlsZHJlbltwcm9wXS5pc1Rlcm1pbmFsKCkpIHtcbiAgICAgICAgICBub2RlW3Byb3BdID0gY2hpbGRyZW5bcHJvcF0udG9BU1QobWFwcGluZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gZGVsZXRlIHByZWRlZmluZWQgJ3R5cGUnIHByb3BlcnRpZXMsIGxpa2UgJ3R5cGUnLCBpZiBleHBsaWNpdGVseSByZW1vdmVkXG4gICAgICAgICAgZGVsZXRlIG5vZGVbcHJvcF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5vZGU7XG4gIH0sXG5cbiAgX2l0ZXIoLi4uY2hpbGRyZW4pIHtcbiAgICBpZiAodGhpcy5fbm9kZS5pc09wdGlvbmFsKCkpIHtcbiAgICAgIGlmICh0aGlzLm51bUNoaWxkcmVuID09PSAwKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkcmVuWzBdLnRvQVNUKHRoaXMuYXJncy5tYXBwaW5nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY2hpbGRyZW4ubWFwKGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICByZXR1cm4gY2hpbGQudG9BU1QodGhpcy5hcmdzLm1hcHBpbmcpO1xuICAgIH0sIHRoaXMpO1xuICB9LFxuXG4gIE5vbmVtcHR5TGlzdE9mKGZpcnN0LCBzZXAsIHJlc3QpIHtcbiAgICByZXR1cm4gW2ZpcnN0LnRvQVNUKHRoaXMuYXJncy5tYXBwaW5nKV0uY29uY2F0KHJlc3QudG9BU1QodGhpcy5hcmdzLm1hcHBpbmcpKTtcbiAgfSxcblxuICBFbXB0eUxpc3RPZigpIHtcbiAgICByZXR1cm4gW107XG4gIH0sXG59O1xuXG4vLyBSZXR1cm5zIGEgcGxhaW4gSmF2YVNjcmlwdCBvYmplY3QgdGhhdCBpbmNsdWRlcyBhbiBhYnN0cmFjdCBzeW50YXggdHJlZSAoQVNUKVxuLy8gZm9yIHRoZSBnaXZlbiBtYXRjaCByZXN1bHQgYHJlc2AgY29udGFpbmcgYSBjb25jcmV0ZSBzeW50YXggdHJlZSAoQ1NUKSBhbmQgZ3JhbW1hci5cbi8vIFRoZSBvcHRpb25hbCBgbWFwcGluZ2AgcGFyYW1ldGVyIGNhbiBiZSB1c2VkIHRvIGN1c3RvbWl6ZSBob3cgdGhlIG5vZGVzIG9mIHRoZSBDU1Rcbi8vIGFyZSBtYXBwZWQgdG8gdGhlIEFTVCAoc2VlIC9kb2MvZXh0cmFzLm1kI3RvYXN0bWF0Y2hyZXN1bHQtbWFwcGluZykuXG5mdW5jdGlvbiB0b0FTVChyZXMsIG1hcHBpbmcpIHtcbiAgaWYgKHR5cGVvZiByZXMuZmFpbGVkICE9PSAnZnVuY3Rpb24nIHx8IHJlcy5mYWlsZWQoKSkge1xuICAgIHRocm93IG5ldyBFcnJvcigndG9BU1QoKSBleHBlY3RzIGEgc3VjY2VzZnVsIE1hdGNoUmVzdWx0IGFzIGZpcnN0IHBhcmFtZXRlcicpO1xuICB9XG5cbiAgbWFwcGluZyA9IE9iamVjdC5hc3NpZ24oe30sIG1hcHBpbmcpO1xuICBjb25zdCBvcGVyYXRpb24gPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0T3BlcmF0aW9uKTtcbiAgZm9yIChjb25zdCB0ZXJtTmFtZSBpbiBtYXBwaW5nKSB7XG4gICAgaWYgKHR5cGVvZiBtYXBwaW5nW3Rlcm1OYW1lXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgb3BlcmF0aW9uW3Rlcm1OYW1lXSA9IG1hcHBpbmdbdGVybU5hbWVdO1xuICAgICAgZGVsZXRlIG1hcHBpbmdbdGVybU5hbWVdO1xuICAgIH1cbiAgfVxuICBjb25zdCBnID0gcmVzLl9jc3QuZ3JhbW1hcjtcbiAgY29uc3QgcyA9IGcuY3JlYXRlU2VtYW50aWNzKCkuYWRkT3BlcmF0aW9uKCd0b0FTVChtYXBwaW5nKScsIG9wZXJhdGlvbik7XG4gIHJldHVybiBzKHJlcykudG9BU1QobWFwcGluZyk7XG59XG5cbi8vIFJldHVybnMgYSBzZW1hbnRpY3MgY29udGFpbmcgdGhlIHRvQVNUKG1hcHBpbmcpIG9wZXJhdGlvbiBmb3IgdGhlIGdpdmVuIGdyYW1tYXIgZy5cbmZ1bmN0aW9uIHNlbWFudGljc0ZvclRvQVNUKGcpIHtcbiAgaWYgKHR5cGVvZiBnLmNyZWF0ZVNlbWFudGljcyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignc2VtYW50aWNzVG9BU1QoKSBleHBlY3RzIGEgR3JhbW1hciBhcyBwYXJhbWV0ZXInKTtcbiAgfVxuXG4gIHJldHVybiBnLmNyZWF0ZVNlbWFudGljcygpLmFkZE9wZXJhdGlvbigndG9BU1QobWFwcGluZyknLCBkZWZhdWx0T3BlcmF0aW9uKTtcbn1cblxudmFyIHNlbWFudGljc1RvQVNUID0ge1xuICBoZWxwZXI6IHRvQVNULFxuICBzZW1hbnRpY3M6IHNlbWFudGljc0ZvclRvQVNULFxufTtcblxudmFyIGV4dHJhcyA9IHtcbiAgVmlzaXRvckZhbWlseTogVmlzaXRvckZhbWlseV8xLFxuICBzZW1hbnRpY3NGb3JUb0FTVDogc2VtYW50aWNzVG9BU1Quc2VtYW50aWNzLFxuICB0b0FTVDogc2VtYW50aWNzVG9BU1QuaGVscGVyLFxufTtcblxuZXhwb3J0IHsgb2htIGFzIGRlZmF1bHQsIGV4dHJhcyB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSW1wb3J0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuY29uc3Qge2Fzc2VydH0gPSByZXF1aXJlKCcuLi9zcmMvY29tbW9uJyk7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBQcml2YXRlIHN0dWZmXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vLyBIZWxwZXJzXG5cbmZ1bmN0aW9uIGdldFByb3AobmFtZSwgdGhpbmcsIGZuKSB7XG4gIHJldHVybiBmbih0aGluZ1tuYW1lXSk7XG59XG5cbmZ1bmN0aW9uIG1hcFByb3AobmFtZSwgdGhpbmcsIGZuKSB7XG4gIHJldHVybiB0aGluZ1tuYW1lXS5tYXAoZm4pO1xufVxuXG4vLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCB3aWxsIHdhbGsgYSBzaW5nbGUgcHJvcGVydHkgb2YgYSBub2RlLlxuLy8gYGRlc2NyaXB0b3JgIGlzIGEgc3RyaW5nIGluZGljYXRpbmcgdGhlIHByb3BlcnR5IG5hbWUsIG9wdGlvbmFsbHkgZW5kaW5nXG4vLyB3aXRoICdbXScgKGUuZy4sICdjaGlsZHJlbltdJykuXG5mdW5jdGlvbiBnZXRQcm9wV2Fsa0ZuKGRlc2NyaXB0b3IpIHtcbiAgY29uc3QgcGFydHMgPSBkZXNjcmlwdG9yLnNwbGl0KC8gP1xcW1xcXS8pO1xuICBpZiAocGFydHMubGVuZ3RoID09PSAyKSB7XG4gICAgcmV0dXJuIG1hcFByb3AuYmluZChudWxsLCBwYXJ0c1swXSk7XG4gIH1cbiAgcmV0dXJuIGdldFByb3AuYmluZChudWxsLCBkZXNjcmlwdG9yKTtcbn1cblxuZnVuY3Rpb24gZ2V0UHJvcHMod2Fsa0ZucywgdGhpbmcsIGZuKSB7XG4gIHJldHVybiB3YWxrRm5zLm1hcCh3YWxrRm4gPT4gd2Fsa0ZuKHRoaW5nLCBmbikpO1xufVxuXG5mdW5jdGlvbiBnZXRXYWxrRm4oc2hhcGUpIHtcbiAgaWYgKHR5cGVvZiBzaGFwZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZ2V0UHJvcHMuYmluZChudWxsLCBbZ2V0UHJvcFdhbGtGbihzaGFwZSldKTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHNoYXBlKSkge1xuICAgIHJldHVybiBnZXRQcm9wcy5iaW5kKG51bGwsIHNoYXBlLm1hcChnZXRQcm9wV2Fsa0ZuKSk7XG4gIH0gZWxzZSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBzaGFwZSA9PT0gJ2Z1bmN0aW9uJywgJ0V4cGVjdGVkIGEgc3RyaW5nLCBBcnJheSwgb3IgZnVuY3Rpb24nKTtcbiAgICBhc3NlcnQoc2hhcGUubGVuZ3RoID09PSAyLCAnRXhwZWN0ZWQgYSBmdW5jdGlvbiBvZiBhcml0eSAyLCBnb3QgJyArIHNoYXBlLmxlbmd0aCk7XG4gICAgcmV0dXJuIHNoYXBlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzUmVzdHJpY3RlZElkZW50aWZpZXIoc3RyKSB7XG4gIHJldHVybiAvXlthLXpBLVpfXVswLTlhLXpBLVpfXSokLy50ZXN0KHN0cik7XG59XG5cbmZ1bmN0aW9uIHRyaW0ocykge1xuICByZXR1cm4gcy50cmltKCk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlU2lnbmF0dXJlKHNpZykge1xuICBjb25zdCBwYXJ0cyA9IHNpZy5zcGxpdCgvWygpXS8pLm1hcCh0cmltKTtcbiAgaWYgKHBhcnRzLmxlbmd0aCA9PT0gMyAmJiBwYXJ0c1syXSA9PT0gJycpIHtcbiAgICBjb25zdCBuYW1lID0gcGFydHNbMF07XG4gICAgbGV0IHBhcmFtcyA9IFtdO1xuICAgIGlmIChwYXJ0c1sxXS5sZW5ndGggPiAwKSB7XG4gICAgICBwYXJhbXMgPSBwYXJ0c1sxXS5zcGxpdCgnLCcpLm1hcCh0cmltKTtcbiAgICB9XG4gICAgaWYgKGlzUmVzdHJpY3RlZElkZW50aWZpZXIobmFtZSkgJiYgcGFyYW1zLmV2ZXJ5KGlzUmVzdHJpY3RlZElkZW50aWZpZXIpKSB7XG4gICAgICByZXR1cm4ge25hbWUsIGZvcm1hbHM6IHBhcmFtc307XG4gICAgfVxuICB9XG4gIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBvcGVyYXRpb24gc2lnbmF0dXJlOiAnICsgc2lnKTtcbn1cblxuLypcbiAgQSBWaXNpdG9yRmFtaWx5IGNvbnRhaW5zIGEgc2V0IG9mIHJlY3Vyc2l2ZSBvcGVyYXRpb25zIHRoYXQgYXJlIGRlZmluZWQgb3ZlciBzb21lIGtpbmQgb2ZcbiAgdHJlZSBzdHJ1Y3R1cmUuIFRoZSBgY29uZmlnYCBwYXJhbWV0ZXIgc3BlY2lmaWVzIGhvdyB0byB3YWxrIHRoZSB0cmVlOlxuICAtICdnZXRUYWcnIGlzIGZ1bmN0aW9uIHdoaWNoLCBnaXZlbiBhIG5vZGUgaW4gdGhlIHRyZWUsIHJldHVybnMgdGhlIG5vZGUncyAndGFnJyAodHlwZSlcbiAgLSAnc2hhcGVzJyBhbiBvYmplY3QgdGhhdCBtYXBzIGZyb20gYSB0YWcgdG8gYSB2YWx1ZSB0aGF0IGRlc2NyaWJlcyBob3cgdG8gcmVjdXJzaXZlbHlcbiAgICBldmFsdWF0ZSB0aGUgb3BlcmF0aW9uIGZvciBub2RlcyBvZiB0aGF0IHR5cGUuIFRoZSB2YWx1ZSBjYW4gYmU6XG4gICAgKiBhIHN0cmluZyBpbmRpY2F0aW5nIHRoZSBwcm9wZXJ0eSBuYW1lIHRoYXQgaG9sZHMgdGhhdCBub2RlJ3Mgb25seSBjaGlsZFxuICAgICogYW4gQXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgKG9yIGFuIGVtcHR5IGFycmF5IGluZGljYXRpbmcgYSBsZWFmIHR5cGUpLCBvclxuICAgICogYSBmdW5jdGlvbiB0YWtpbmcgdHdvIGFyZ3VtZW50cyAobm9kZSwgZm4pLCBhbmQgcmV0dXJuaW5nIGFuIEFycmF5IHdoaWNoIGlzIHRoZSByZXN1bHRcbiAgICAgIG9mIGFwcGx5IGBmbmAgdG8gZWFjaCBvZiB0aGUgbm9kZSdzIGNoaWxkcmVuLlxuICovXG5mdW5jdGlvbiBWaXNpdG9yRmFtaWx5KGNvbmZpZykge1xuICB0aGlzLl9zaGFwZXMgPSBjb25maWcuc2hhcGVzO1xuICB0aGlzLl9nZXRUYWcgPSBjb25maWcuZ2V0VGFnO1xuXG4gIHRoaXMuQWRhcHRlciA9IGZ1bmN0aW9uKHRoaW5nLCBmYW1pbHkpIHtcbiAgICB0aGlzLl9hZGFwdGVlID0gdGhpbmc7XG4gICAgdGhpcy5fZmFtaWx5ID0gZmFtaWx5O1xuICB9O1xuICB0aGlzLkFkYXB0ZXIucHJvdG90eXBlLnZhbHVlT2YgPSBmdW5jdGlvbigpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2hlZWV5IScpO1xuICB9O1xuICB0aGlzLm9wZXJhdGlvbnMgPSB7fTtcblxuICB0aGlzLl9hcml0aWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdGhpcy5fZ2V0Q2hpbGRyZW4gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIE9iamVjdC5rZXlzKHRoaXMuX3NoYXBlcykuZm9yRWFjaChrID0+IHtcbiAgICBjb25zdCBzaGFwZSA9IHRoaXMuX3NoYXBlc1trXTtcbiAgICB0aGlzLl9nZXRDaGlsZHJlbltrXSA9IGdldFdhbGtGbihzaGFwZSk7XG5cbiAgICAvLyBBIGZ1bmN0aW9uIG1lYW5zIHRoZSBhcml0eSBpc24ndCBmaXhlZCwgc28gZG9uJ3QgcHV0IGFuIGVudHJ5IGluIHRoZSBhcml0eSBtYXAuXG4gICAgaWYgKHR5cGVvZiBzaGFwZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpcy5fYXJpdGllc1trXSA9IEFycmF5LmlzQXJyYXkoc2hhcGUpID8gc2hhcGUubGVuZ3RoIDogMTtcbiAgICB9XG4gIH0pO1xuICB0aGlzLl93cmFwID0gdGhpbmcgPT4gbmV3IHRoaXMuQWRhcHRlcih0aGluZywgdGhpcyk7XG59XG5cblZpc2l0b3JGYW1pbHkucHJvdG90eXBlLndyYXAgPSBmdW5jdGlvbih0aGluZykge1xuICByZXR1cm4gdGhpcy5fd3JhcCh0aGluZyk7XG59O1xuXG5WaXNpdG9yRmFtaWx5LnByb3RvdHlwZS5fY2hlY2tBY3Rpb25EaWN0ID0gZnVuY3Rpb24oZGljdCkge1xuICBPYmplY3Qua2V5cyhkaWN0KS5mb3JFYWNoKGsgPT4ge1xuICAgIGFzc2VydChrIGluIHRoaXMuX2dldENoaWxkcmVuLCBcIlVucmVjb2duaXplZCBhY3Rpb24gbmFtZSAnXCIgKyBrICsgXCInXCIpO1xuICAgIGNvbnN0IGFjdGlvbiA9IGRpY3Rba107XG4gICAgYXNzZXJ0KHR5cGVvZiBhY3Rpb24gPT09ICdmdW5jdGlvbicsIFwiS2V5ICdcIiArIGsgKyBcIic6IGV4cGVjdGVkIGZ1bmN0aW9uLCBnb3QgXCIgKyBhY3Rpb24pO1xuICAgIGlmIChrIGluIHRoaXMuX2FyaXRpZXMpIHtcbiAgICAgIGNvbnN0IGV4cGVjdGVkID0gdGhpcy5fYXJpdGllc1trXTtcbiAgICAgIGNvbnN0IGFjdHVhbCA9IGRpY3Rba10ubGVuZ3RoO1xuICAgICAgYXNzZXJ0KFxuICAgICAgICAgIGFjdHVhbCA9PT0gZXhwZWN0ZWQsXG4gICAgICAgICAgXCJBY3Rpb24gJ1wiICsgayArIFwiJyBoYXMgdGhlIHdyb25nIGFyaXR5OiBleHBlY3RlZCBcIiArIGV4cGVjdGVkICsgJywgZ290ICcgKyBhY3R1YWxcbiAgICAgICk7XG4gICAgfVxuICB9KTtcbn07XG5cblZpc2l0b3JGYW1pbHkucHJvdG90eXBlLmFkZE9wZXJhdGlvbiA9IGZ1bmN0aW9uKHNpZ25hdHVyZSwgYWN0aW9ucykge1xuICBjb25zdCBzaWcgPSBwYXJzZVNpZ25hdHVyZShzaWduYXR1cmUpO1xuICBjb25zdCB7bmFtZX0gPSBzaWc7XG4gIHRoaXMuX2NoZWNrQWN0aW9uRGljdChhY3Rpb25zKTtcbiAgdGhpcy5vcGVyYXRpb25zW25hbWVdID0ge1xuICAgIG5hbWUsXG4gICAgZm9ybWFsczogc2lnLmZvcm1hbHMsXG4gICAgYWN0aW9ucyxcbiAgfTtcblxuICBjb25zdCBmYW1pbHkgPSB0aGlzO1xuICB0aGlzLkFkYXB0ZXIucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oLi4uYXJncykge1xuICAgIGNvbnN0IHRhZyA9IGZhbWlseS5fZ2V0VGFnKHRoaXMuX2FkYXB0ZWUpO1xuICAgIGFzc2VydCh0YWcgaW4gZmFtaWx5Ll9nZXRDaGlsZHJlbiwgXCJnZXRUYWcgcmV0dXJuZWQgdW5yZWNvZ25pemVkIHRhZyAnXCIgKyB0YWcgKyBcIidcIik7XG4gICAgYXNzZXJ0KHRhZyBpbiBhY3Rpb25zLCBcIk5vIGFjdGlvbiBmb3IgJ1wiICsgdGFnICsgXCInIGluIG9wZXJhdGlvbiAnXCIgKyBuYW1lICsgXCInXCIpO1xuXG4gICAgLy8gQ3JlYXRlIGFuIFwiYXJndW1lbnRzIG9iamVjdFwiIGZyb20gdGhlIGFyZ3VtZW50cyB0aGF0IHdlcmUgcGFzc2VkIHRvIHRoaXNcbiAgICAvLyBvcGVyYXRpb24gLyBhdHRyaWJ1dGUuXG4gICAgY29uc3QgYXJnc09iaiA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgZm9yIChjb25zdCBbaSwgdmFsXSBvZiBPYmplY3QuZW50cmllcyhhcmdzKSkge1xuICAgICAgYXJnc09ialtzaWcuZm9ybWFsc1tpXV0gPSB2YWw7XG4gICAgfVxuXG4gICAgY29uc3Qgb2xkQXJncyA9IHRoaXMuYXJncztcbiAgICB0aGlzLmFyZ3MgPSBhcmdzT2JqO1xuICAgIGNvbnN0IGFucyA9IGFjdGlvbnNbdGFnXS5hcHBseShcbiAgICAgICAgdGhpcyxcbiAgICAgICAgZmFtaWx5Ll9nZXRDaGlsZHJlblt0YWddKHRoaXMuX2FkYXB0ZWUsIGZhbWlseS5fd3JhcClcbiAgICApO1xuICAgIHRoaXMuYXJncyA9IG9sZEFyZ3M7XG4gICAgcmV0dXJuIGFucztcbiAgfTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gRXhwb3J0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxubW9kdWxlLmV4cG9ydHMgPSBWaXNpdG9yRmFtaWx5O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgVmlzaXRvckZhbWlseTogcmVxdWlyZSgnLi9WaXNpdG9yRmFtaWx5JyksXG4gIHNlbWFudGljc0ZvclRvQVNUOiByZXF1aXJlKCcuL3NlbWFudGljcy10b0FTVCcpLnNlbWFudGljcyxcbiAgdG9BU1Q6IHJlcXVpcmUoJy4vc2VtYW50aWNzLXRvQVNUJykuaGVscGVyLFxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIE9wZXJhdGlvbnNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IGRlZmF1bHRPcGVyYXRpb24gPSB7XG4gIF90ZXJtaW5hbCgpIHtcbiAgICByZXR1cm4gdGhpcy5zb3VyY2VTdHJpbmc7XG4gIH0sXG5cbiAgX25vbnRlcm1pbmFsKC4uLmNoaWxkcmVuKSB7XG4gICAgY29uc3Qge2N0b3JOYW1lfSA9IHRoaXMuX25vZGU7XG4gICAgY29uc3Qge21hcHBpbmd9ID0gdGhpcy5hcmdzO1xuXG4gICAgLy8gd2l0aG91dCBjdXN0b21pemF0aW9uXG4gICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobWFwcGluZywgY3Rvck5hbWUpKSB7XG4gICAgICAvLyBsZXhpY2FsIHJ1bGVcbiAgICAgIGlmICh0aGlzLmlzTGV4aWNhbCgpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNvdXJjZVN0cmluZztcbiAgICAgIH1cblxuICAgICAgLy8gc2luZ3VsYXIgbm9kZSAoZS5nLiBvbmx5IHN1cnJvdW5kZWQgYnkgbGl0ZXJhbHMgb3IgbG9va2FoZWFkcylcbiAgICAgIGNvbnN0IHJlYWxDaGlsZHJlbiA9IGNoaWxkcmVuLmZpbHRlcihjaGlsZCA9PiAhY2hpbGQuaXNUZXJtaW5hbCgpKTtcbiAgICAgIGlmIChyZWFsQ2hpbGRyZW4ubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiByZWFsQ2hpbGRyZW5bMF0udG9BU1QobWFwcGluZyk7XG4gICAgICB9XG5cbiAgICAgIC8vIHJlc3Q6IHRlcm1zIHdpdGggbXVsdGlwbGUgY2hpbGRyZW5cbiAgICB9XG5cbiAgICAvLyBkaXJlY3QgZm9yd2FyZFxuICAgIGlmICh0eXBlb2YgbWFwcGluZ1tjdG9yTmFtZV0gPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gY2hpbGRyZW5bbWFwcGluZ1tjdG9yTmFtZV1dLnRvQVNUKG1hcHBpbmcpO1xuICAgIH1cblxuICAgIC8vIG5hbWVkL21hcHBlZCBjaGlsZHJlbiBvciB1bm5hbWVkIGNoaWxkcmVuICgnMCcsICcxJywgJzInLCAuLi4pXG4gICAgY29uc3QgcHJvcE1hcCA9IG1hcHBpbmdbY3Rvck5hbWVdIHx8IGNoaWxkcmVuO1xuICAgIGNvbnN0IG5vZGUgPSB7XG4gICAgICB0eXBlOiBjdG9yTmFtZSxcbiAgICB9O1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW5cbiAgICBmb3IgKGNvbnN0IHByb3AgaW4gcHJvcE1hcCkge1xuICAgICAgY29uc3QgbWFwcGVkUHJvcCA9IG1hcHBpbmdbY3Rvck5hbWVdICYmIG1hcHBpbmdbY3Rvck5hbWVdW3Byb3BdO1xuICAgICAgaWYgKHR5cGVvZiBtYXBwZWRQcm9wID09PSAnbnVtYmVyJykge1xuICAgICAgICAvLyBkaXJlY3QgZm9yd2FyZFxuICAgICAgICBub2RlW3Byb3BdID0gY2hpbGRyZW5bbWFwcGVkUHJvcF0udG9BU1QobWFwcGluZyk7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICB0eXBlb2YgbWFwcGVkUHJvcCA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgdHlwZW9mIG1hcHBlZFByb3AgPT09ICdib29sZWFuJyB8fFxuICAgICAgICBtYXBwZWRQcm9wID09PSBudWxsXG4gICAgICApIHtcbiAgICAgICAgLy8gcHJpbWl0aXZlIHZhbHVlXG4gICAgICAgIG5vZGVbcHJvcF0gPSBtYXBwZWRQcm9wO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbWFwcGVkUHJvcCA9PT0gJ29iamVjdCcgJiYgbWFwcGVkUHJvcCBpbnN0YW5jZW9mIE51bWJlcikge1xuICAgICAgICAvLyBwcmltaXRpdmUgbnVtYmVyIChtdXN0IGJlIHVuYm94ZWQpXG4gICAgICAgIG5vZGVbcHJvcF0gPSBOdW1iZXIobWFwcGVkUHJvcCk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBtYXBwZWRQcm9wID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIGNvbXB1dGVkIHZhbHVlXG4gICAgICAgIG5vZGVbcHJvcF0gPSBtYXBwZWRQcm9wLmNhbGwodGhpcywgY2hpbGRyZW4pO1xuICAgICAgfSBlbHNlIGlmIChtYXBwZWRQcm9wID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGNoaWxkcmVuW3Byb3BdICYmICFjaGlsZHJlbltwcm9wXS5pc1Rlcm1pbmFsKCkpIHtcbiAgICAgICAgICBub2RlW3Byb3BdID0gY2hpbGRyZW5bcHJvcF0udG9BU1QobWFwcGluZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gZGVsZXRlIHByZWRlZmluZWQgJ3R5cGUnIHByb3BlcnRpZXMsIGxpa2UgJ3R5cGUnLCBpZiBleHBsaWNpdGVseSByZW1vdmVkXG4gICAgICAgICAgZGVsZXRlIG5vZGVbcHJvcF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5vZGU7XG4gIH0sXG5cbiAgX2l0ZXIoLi4uY2hpbGRyZW4pIHtcbiAgICBpZiAodGhpcy5fbm9kZS5pc09wdGlvbmFsKCkpIHtcbiAgICAgIGlmICh0aGlzLm51bUNoaWxkcmVuID09PSAwKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkcmVuWzBdLnRvQVNUKHRoaXMuYXJncy5tYXBwaW5nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY2hpbGRyZW4ubWFwKGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICByZXR1cm4gY2hpbGQudG9BU1QodGhpcy5hcmdzLm1hcHBpbmcpO1xuICAgIH0sIHRoaXMpO1xuICB9LFxuXG4gIE5vbmVtcHR5TGlzdE9mKGZpcnN0LCBzZXAsIHJlc3QpIHtcbiAgICByZXR1cm4gW2ZpcnN0LnRvQVNUKHRoaXMuYXJncy5tYXBwaW5nKV0uY29uY2F0KHJlc3QudG9BU1QodGhpcy5hcmdzLm1hcHBpbmcpKTtcbiAgfSxcblxuICBFbXB0eUxpc3RPZigpIHtcbiAgICByZXR1cm4gW107XG4gIH0sXG59O1xuXG4vLyBSZXR1cm5zIGEgcGxhaW4gSmF2YVNjcmlwdCBvYmplY3QgdGhhdCBpbmNsdWRlcyBhbiBhYnN0cmFjdCBzeW50YXggdHJlZSAoQVNUKVxuLy8gZm9yIHRoZSBnaXZlbiBtYXRjaCByZXN1bHQgYHJlc2AgY29udGFpbmcgYSBjb25jcmV0ZSBzeW50YXggdHJlZSAoQ1NUKSBhbmQgZ3JhbW1hci5cbi8vIFRoZSBvcHRpb25hbCBgbWFwcGluZ2AgcGFyYW1ldGVyIGNhbiBiZSB1c2VkIHRvIGN1c3RvbWl6ZSBob3cgdGhlIG5vZGVzIG9mIHRoZSBDU1Rcbi8vIGFyZSBtYXBwZWQgdG8gdGhlIEFTVCAoc2VlIC9kb2MvZXh0cmFzLm1kI3RvYXN0bWF0Y2hyZXN1bHQtbWFwcGluZykuXG5mdW5jdGlvbiB0b0FTVChyZXMsIG1hcHBpbmcpIHtcbiAgaWYgKHR5cGVvZiByZXMuZmFpbGVkICE9PSAnZnVuY3Rpb24nIHx8IHJlcy5mYWlsZWQoKSkge1xuICAgIHRocm93IG5ldyBFcnJvcigndG9BU1QoKSBleHBlY3RzIGEgc3VjY2VzZnVsIE1hdGNoUmVzdWx0IGFzIGZpcnN0IHBhcmFtZXRlcicpO1xuICB9XG5cbiAgbWFwcGluZyA9IE9iamVjdC5hc3NpZ24oe30sIG1hcHBpbmcpO1xuICBjb25zdCBvcGVyYXRpb24gPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0T3BlcmF0aW9uKTtcbiAgZm9yIChjb25zdCB0ZXJtTmFtZSBpbiBtYXBwaW5nKSB7XG4gICAgaWYgKHR5cGVvZiBtYXBwaW5nW3Rlcm1OYW1lXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgb3BlcmF0aW9uW3Rlcm1OYW1lXSA9IG1hcHBpbmdbdGVybU5hbWVdO1xuICAgICAgZGVsZXRlIG1hcHBpbmdbdGVybU5hbWVdO1xuICAgIH1cbiAgfVxuICBjb25zdCBnID0gcmVzLl9jc3QuZ3JhbW1hcjtcbiAgY29uc3QgcyA9IGcuY3JlYXRlU2VtYW50aWNzKCkuYWRkT3BlcmF0aW9uKCd0b0FTVChtYXBwaW5nKScsIG9wZXJhdGlvbik7XG4gIHJldHVybiBzKHJlcykudG9BU1QobWFwcGluZyk7XG59XG5cbi8vIFJldHVybnMgYSBzZW1hbnRpY3MgY29udGFpbmcgdGhlIHRvQVNUKG1hcHBpbmcpIG9wZXJhdGlvbiBmb3IgdGhlIGdpdmVuIGdyYW1tYXIgZy5cbmZ1bmN0aW9uIHNlbWFudGljc0ZvclRvQVNUKGcpIHtcbiAgaWYgKHR5cGVvZiBnLmNyZWF0ZVNlbWFudGljcyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignc2VtYW50aWNzVG9BU1QoKSBleHBlY3RzIGEgR3JhbW1hciBhcyBwYXJhbWV0ZXInKTtcbiAgfVxuXG4gIHJldHVybiBnLmNyZWF0ZVNlbWFudGljcygpLmFkZE9wZXJhdGlvbigndG9BU1QobWFwcGluZyknLCBkZWZhdWx0T3BlcmF0aW9uKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGhlbHBlcjogdG9BU1QsXG4gIHNlbWFudGljczogc2VtYW50aWNzRm9yVG9BU1QsXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUHJpdmF0ZSBTdHVmZlxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gSGVscGVyc1xuXG5jb25zdCBlc2NhcGVTdHJpbmdGb3IgPSB7fTtcbmZvciAobGV0IGMgPSAwOyBjIDwgMTI4OyBjKyspIHtcbiAgZXNjYXBlU3RyaW5nRm9yW2NdID0gU3RyaW5nLmZyb21DaGFyQ29kZShjKTtcbn1cbmVzY2FwZVN0cmluZ0ZvcltcIidcIi5jaGFyQ29kZUF0KDApXSA9IFwiXFxcXCdcIjtcbmVzY2FwZVN0cmluZ0ZvclsnXCInLmNoYXJDb2RlQXQoMCldID0gJ1xcXFxcIic7XG5lc2NhcGVTdHJpbmdGb3JbJ1xcXFwnLmNoYXJDb2RlQXQoMCldID0gJ1xcXFxcXFxcJztcbmVzY2FwZVN0cmluZ0ZvclsnXFxiJy5jaGFyQ29kZUF0KDApXSA9ICdcXFxcYic7XG5lc2NhcGVTdHJpbmdGb3JbJ1xcZicuY2hhckNvZGVBdCgwKV0gPSAnXFxcXGYnO1xuZXNjYXBlU3RyaW5nRm9yWydcXG4nLmNoYXJDb2RlQXQoMCldID0gJ1xcXFxuJztcbmVzY2FwZVN0cmluZ0ZvclsnXFxyJy5jaGFyQ29kZUF0KDApXSA9ICdcXFxccic7XG5lc2NhcGVTdHJpbmdGb3JbJ1xcdCcuY2hhckNvZGVBdCgwKV0gPSAnXFxcXHQnO1xuZXNjYXBlU3RyaW5nRm9yWydcXHUwMDBiJy5jaGFyQ29kZUF0KDApXSA9ICdcXFxcdic7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBFeHBvcnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnRzLmFic3RyYWN0ID0gZnVuY3Rpb24ob3B0TWV0aG9kTmFtZSkge1xuICBjb25zdCBtZXRob2ROYW1lID0gb3B0TWV0aG9kTmFtZSB8fCAnJztcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ3RoaXMgbWV0aG9kICcgK1xuICAgICAgICBtZXRob2ROYW1lICtcbiAgICAgICAgJyBpcyBhYnN0cmFjdCEgJyArXG4gICAgICAgICcoaXQgaGFzIG5vIGltcGxlbWVudGF0aW9uIGluIGNsYXNzICcgK1xuICAgICAgICB0aGlzLmNvbnN0cnVjdG9yLm5hbWUgK1xuICAgICAgICAnKSdcbiAgICApO1xuICB9O1xufTtcblxuZXhwb3J0cy5hc3NlcnQgPSBmdW5jdGlvbihjb25kLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZCkge1xuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlIHx8ICdBc3NlcnRpb24gZmFpbGVkJyk7XG4gIH1cbn07XG5cbi8vIERlZmluZSBhIGxhemlseS1jb21wdXRlZCwgbm9uLWVudW1lcmFibGUgcHJvcGVydHkgbmFtZWQgYHByb3BOYW1lYFxuLy8gb24gdGhlIG9iamVjdCBgb2JqYC4gYGdldHRlckZuYCB3aWxsIGJlIGNhbGxlZCB0byBjb21wdXRlIHRoZSB2YWx1ZSB0aGVcbi8vIGZpcnN0IHRpbWUgdGhlIHByb3BlcnR5IGlzIGFjY2Vzc2VkLlxuZXhwb3J0cy5kZWZpbmVMYXp5UHJvcGVydHkgPSBmdW5jdGlvbihvYmosIHByb3BOYW1lLCBnZXR0ZXJGbikge1xuICBsZXQgbWVtbztcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgcHJvcE5hbWUsIHtcbiAgICBnZXQoKSB7XG4gICAgICBpZiAoIW1lbW8pIHtcbiAgICAgICAgbWVtbyA9IGdldHRlckZuLmNhbGwodGhpcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWVtbztcbiAgICB9LFxuICB9KTtcbn07XG5cbmV4cG9ydHMuY2xvbmUgPSBmdW5jdGlvbihvYmopIHtcbiAgaWYgKG9iaikge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBvYmopO1xuICB9XG4gIHJldHVybiBvYmo7XG59O1xuXG5leHBvcnRzLnJlcGVhdEZuID0gZnVuY3Rpb24oZm4sIG4pIHtcbiAgY29uc3QgYXJyID0gW107XG4gIHdoaWxlIChuLS0gPiAwKSB7XG4gICAgYXJyLnB1c2goZm4oKSk7XG4gIH1cbiAgcmV0dXJuIGFycjtcbn07XG5cbmV4cG9ydHMucmVwZWF0U3RyID0gZnVuY3Rpb24oc3RyLCBuKSB7XG4gIHJldHVybiBuZXcgQXJyYXkobiArIDEpLmpvaW4oc3RyKTtcbn07XG5cbmV4cG9ydHMucmVwZWF0ID0gZnVuY3Rpb24oeCwgbikge1xuICByZXR1cm4gZXhwb3J0cy5yZXBlYXRGbigoKSA9PiB4LCBuKTtcbn07XG5cbmV4cG9ydHMuZ2V0RHVwbGljYXRlcyA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gIGNvbnN0IGR1cGxpY2F0ZXMgPSBbXTtcbiAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgYXJyYXkubGVuZ3RoOyBpZHgrKykge1xuICAgIGNvbnN0IHggPSBhcnJheVtpZHhdO1xuICAgIGlmIChhcnJheS5sYXN0SW5kZXhPZih4KSAhPT0gaWR4ICYmIGR1cGxpY2F0ZXMuaW5kZXhPZih4KSA8IDApIHtcbiAgICAgIGR1cGxpY2F0ZXMucHVzaCh4KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGR1cGxpY2F0ZXM7XG59O1xuXG5leHBvcnRzLmNvcHlXaXRob3V0RHVwbGljYXRlcyA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gIGNvbnN0IG5vRHVwbGljYXRlcyA9IFtdO1xuICBhcnJheS5mb3JFYWNoKGVudHJ5ID0+IHtcbiAgICBpZiAobm9EdXBsaWNhdGVzLmluZGV4T2YoZW50cnkpIDwgMCkge1xuICAgICAgbm9EdXBsaWNhdGVzLnB1c2goZW50cnkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBub0R1cGxpY2F0ZXM7XG59O1xuXG5leHBvcnRzLmlzU3ludGFjdGljID0gZnVuY3Rpb24ocnVsZU5hbWUpIHtcbiAgY29uc3QgZmlyc3RDaGFyID0gcnVsZU5hbWVbMF07XG4gIHJldHVybiBmaXJzdENoYXIgPT09IGZpcnN0Q2hhci50b1VwcGVyQ2FzZSgpO1xufTtcblxuZXhwb3J0cy5pc0xleGljYWwgPSBmdW5jdGlvbihydWxlTmFtZSkge1xuICByZXR1cm4gIWV4cG9ydHMuaXNTeW50YWN0aWMocnVsZU5hbWUpO1xufTtcblxuZXhwb3J0cy5wYWRMZWZ0ID0gZnVuY3Rpb24oc3RyLCBsZW4sIG9wdENoYXIpIHtcbiAgY29uc3QgY2ggPSBvcHRDaGFyIHx8ICcgJztcbiAgaWYgKHN0ci5sZW5ndGggPCBsZW4pIHtcbiAgICByZXR1cm4gZXhwb3J0cy5yZXBlYXRTdHIoY2gsIGxlbiAtIHN0ci5sZW5ndGgpICsgc3RyO1xuICB9XG4gIHJldHVybiBzdHI7XG59O1xuXG4vLyBTdHJpbmdCdWZmZXJcblxuZXhwb3J0cy5TdHJpbmdCdWZmZXIgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zdHJpbmdzID0gW107XG59O1xuXG5leHBvcnRzLlN0cmluZ0J1ZmZlci5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24oc3RyKSB7XG4gIHRoaXMuc3RyaW5ncy5wdXNoKHN0cik7XG59O1xuXG5leHBvcnRzLlN0cmluZ0J1ZmZlci5wcm90b3R5cGUuY29udGVudHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc3RyaW5ncy5qb2luKCcnKTtcbn07XG5cbmNvbnN0IGVzY2FwZVVuaWNvZGUgPSBzdHIgPT4gU3RyaW5nLmZyb21Db2RlUG9pbnQocGFyc2VJbnQoc3RyLCAxNikpO1xuXG5leHBvcnRzLnVuZXNjYXBlQ29kZVBvaW50ID0gZnVuY3Rpb24ocykge1xuICBpZiAocy5jaGFyQXQoMCkgPT09ICdcXFxcJykge1xuICAgIHN3aXRjaCAocy5jaGFyQXQoMSkpIHtcbiAgICAgIGNhc2UgJ2InOlxuICAgICAgICByZXR1cm4gJ1xcYic7XG4gICAgICBjYXNlICdmJzpcbiAgICAgICAgcmV0dXJuICdcXGYnO1xuICAgICAgY2FzZSAnbic6XG4gICAgICAgIHJldHVybiAnXFxuJztcbiAgICAgIGNhc2UgJ3InOlxuICAgICAgICByZXR1cm4gJ1xccic7XG4gICAgICBjYXNlICd0JzpcbiAgICAgICAgcmV0dXJuICdcXHQnO1xuICAgICAgY2FzZSAndic6XG4gICAgICAgIHJldHVybiAnXFx2JztcbiAgICAgIGNhc2UgJ3gnOlxuICAgICAgICByZXR1cm4gZXNjYXBlVW5pY29kZShzLnNsaWNlKDIsIDQpKTtcbiAgICAgIGNhc2UgJ3UnOlxuICAgICAgICByZXR1cm4gcy5jaGFyQXQoMikgPT09ICd7JyA/XG4gICAgICAgICAgZXNjYXBlVW5pY29kZShzLnNsaWNlKDMsIC0xKSkgOlxuICAgICAgICAgIGVzY2FwZVVuaWNvZGUocy5zbGljZSgyLCA2KSk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gcy5jaGFyQXQoMSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBzO1xuICB9XG59O1xuXG4vLyBIZWxwZXIgZm9yIHByb2R1Y2luZyBhIGRlc2NyaXB0aW9uIG9mIGFuIHVua25vd24gb2JqZWN0IGluIGEgc2FmZSB3YXkuXG4vLyBFc3BlY2lhbGx5IHVzZWZ1bCBmb3IgZXJyb3IgbWVzc2FnZXMgd2hlcmUgYW4gdW5leHBlY3RlZCB0eXBlIG9mIG9iamVjdCB3YXMgZW5jb3VudGVyZWQuXG5leHBvcnRzLnVuZXhwZWN0ZWRPYmpUb1N0cmluZyA9IGZ1bmN0aW9uKG9iaikge1xuICBpZiAob2JqID09IG51bGwpIHtcbiAgICByZXR1cm4gU3RyaW5nKG9iaik7XG4gIH1cbiAgY29uc3QgYmFzZVRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaik7XG4gIHRyeSB7XG4gICAgbGV0IHR5cGVOYW1lO1xuICAgIGlmIChvYmouY29uc3RydWN0b3IgJiYgb2JqLmNvbnN0cnVjdG9yLm5hbWUpIHtcbiAgICAgIHR5cGVOYW1lID0gb2JqLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgfSBlbHNlIGlmIChiYXNlVG9TdHJpbmcuaW5kZXhPZignW29iamVjdCAnKSA9PT0gMCkge1xuICAgICAgdHlwZU5hbWUgPSBiYXNlVG9TdHJpbmcuc2xpY2UoOCwgLTEpOyAvLyBFeHRyYWN0IGUuZy4gXCJBcnJheVwiIGZyb20gXCJbb2JqZWN0IEFycmF5XVwiLlxuICAgIH0gZWxzZSB7XG4gICAgICB0eXBlTmFtZSA9IHR5cGVvZiBvYmo7XG4gICAgfVxuICAgIHJldHVybiB0eXBlTmFtZSArICc6ICcgKyBKU09OLnN0cmluZ2lmeShTdHJpbmcob2JqKSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gYmFzZVRvU3RyaW5nO1xuICB9XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX3ByZXR0aWVyX187IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCIiLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGlzIHJlZmVyZW5jZWQgYnkgb3RoZXIgbW9kdWxlcyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL2Rpc3QvaW5kZXguanNcIik7XG4iLCIiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=