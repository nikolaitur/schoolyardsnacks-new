"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.walk = exports.cstToAst = exports.toLiquidHtmlAST = exports.isBranchedTag = void 0;
const cst_1 = require("../parser/cst");
const types_1 = require("../types");
const utils_1 = require("../utils");
const errors_1 = require("../parser/errors");
function isBranchedTag(node) {
    return (node.type === types_1.NodeTypes.LiquidTag &&
        ['if', 'for', 'unless', 'case'].includes(node.name));
}
exports.isBranchedTag = isBranchedTag;
function isBranchTag(node) {
    return (node.type === types_1.NodeTypes.LiquidTag &&
        ['else', 'elsif', 'when'].includes(node.name));
}
function toLiquidHtmlAST(text) {
    const cst = (0, cst_1.toLiquidHtmlCST)(text);
    const root = {
        type: types_1.NodeTypes.Document,
        source: text,
        children: cstToAst(cst, text),
        name: '#document',
        position: {
            start: 0,
            end: text.length,
        },
    };
    return root;
}
exports.toLiquidHtmlAST = toLiquidHtmlAST;
class ASTBuilder {
    constructor(source) {
        this.ast = [];
        this.cursor = [];
        this.source = source;
    }
    get current() {
        return (0, utils_1.deepGet)(this.cursor, this.ast);
    }
    get currentPosition() {
        return (this.current || []).length - 1;
    }
    get parent() {
        if (this.cursor.length == 0)
            return undefined;
        return (0, utils_1.deepGet)((0, utils_1.dropLast)(1, this.cursor), this.ast);
    }
    open(node) {
        this.current.push(node);
        this.cursor.push(this.currentPosition);
        this.cursor.push('children');
        if (isBranchedTag(node)) {
            this.open({
                type: types_1.NodeTypes.LiquidBranch,
                name: null,
                markup: '',
                position: {
                    start: node.position.end,
                    end: node.position.end,
                },
                blockStartPosition: {
                    start: node.position.end,
                    end: node.position.end,
                },
                children: [],
                whitespaceStart: '',
                whitespaceEnd: '',
                source: this.source,
            });
        }
    }
    push(node) {
        var _a;
        if (node.type === types_1.NodeTypes.LiquidTag && isBranchTag(node)) {
            this.cursor.pop();
            this.cursor.pop();
            this.open({
                name: node.name,
                type: types_1.NodeTypes.LiquidBranch,
                markup: node.markup,
                position: Object.assign({}, node.position),
                children: [],
                blockStartPosition: Object.assign({}, node.position),
                whitespaceStart: node.whitespaceStart,
                whitespaceEnd: node.whitespaceEnd,
                source: this.source,
            });
        }
        else {
            if (((_a = this.parent) === null || _a === void 0 ? void 0 : _a.type) === types_1.NodeTypes.LiquidBranch) {
                this.parent.position.end = node.position.end;
            }
            this.current.push(node);
        }
    }
    close(node, nodeType) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        if (((_a = this.parent) === null || _a === void 0 ? void 0 : _a.type) === types_1.NodeTypes.LiquidBranch) {
            this.parent.position.end = node.locStart;
            this.cursor.pop();
            this.cursor.pop();
        }
        if (getName(this.parent) !== getName(node) ||
            ((_b = this.parent) === null || _b === void 0 ? void 0 : _b.type) !== nodeType) {
            throw new errors_1.LiquidHTMLASTParsingError(`Attempting to close ${nodeType} '${node.name}' before ${(_c = this.parent) === null || _c === void 0 ? void 0 : _c.type} '${(_d = this.parent) === null || _d === void 0 ? void 0 : _d.name}' was closed`, this.source, ((_f = (_e = this.parent) === null || _e === void 0 ? void 0 : _e.position) === null || _f === void 0 ? void 0 : _f.start) || 0, node.locEnd);
        }
        this.parent.position.end = node.locEnd;
        this.parent.blockEndPosition = position(node);
        if (this.parent.type == types_1.NodeTypes.LiquidTag &&
            node.type == cst_1.ConcreteNodeTypes.LiquidTagClose) {
            this.parent.delimiterWhitespaceStart = (_g = node.whitespaceStart) !== null && _g !== void 0 ? _g : '';
            this.parent.delimiterWhitespaceEnd = (_h = node.whitespaceEnd) !== null && _h !== void 0 ? _h : '';
        }
        this.cursor.pop();
        this.cursor.pop();
    }
}
function getName(node) {
    if (!node)
        return null;
    switch (node.type) {
        case types_1.NodeTypes.HtmlElement:
        case cst_1.ConcreteNodeTypes.HtmlTagClose:
            if (typeof node.name === 'string')
                return node.name;
            return `{{${node.name.markup.trim()}}}`;
        default:
            return node.name;
    }
}
function cstToAst(cst, source) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const builder = new ASTBuilder(source);
    for (const node of cst) {
        switch (node.type) {
            case cst_1.ConcreteNodeTypes.TextNode: {
                builder.push({
                    type: types_1.NodeTypes.TextNode,
                    value: node.value,
                    position: position(node),
                    source,
                });
                break;
            }
            case cst_1.ConcreteNodeTypes.LiquidDrop: {
                builder.push(toLiquidDrop(node, source));
                break;
            }
            case cst_1.ConcreteNodeTypes.LiquidTagOpen: {
                builder.open({
                    type: types_1.NodeTypes.LiquidTag,
                    markup: node.markup,
                    position: position(node),
                    children: [],
                    name: node.name,
                    whitespaceStart: (_a = node.whitespaceStart) !== null && _a !== void 0 ? _a : '',
                    whitespaceEnd: (_b = node.whitespaceEnd) !== null && _b !== void 0 ? _b : '',
                    blockStartPosition: position(node),
                    source,
                });
                break;
            }
            case cst_1.ConcreteNodeTypes.LiquidTagClose: {
                builder.close(node, types_1.NodeTypes.LiquidTag);
                break;
            }
            case cst_1.ConcreteNodeTypes.LiquidTag: {
                builder.push({
                    type: types_1.NodeTypes.LiquidTag,
                    markup: node.markup,
                    position: position(node),
                    name: node.name,
                    whitespaceStart: (_c = node.whitespaceStart) !== null && _c !== void 0 ? _c : '',
                    whitespaceEnd: (_d = node.whitespaceEnd) !== null && _d !== void 0 ? _d : '',
                    blockStartPosition: position(node),
                    source,
                });
                break;
            }
            case cst_1.ConcreteNodeTypes.LiquidRawTag: {
                builder.push({
                    type: types_1.NodeTypes.LiquidRawTag,
                    name: node.name,
                    body: node.body,
                    whitespaceStart: (_e = node.whitespaceStart) !== null && _e !== void 0 ? _e : '',
                    whitespaceEnd: (_f = node.whitespaceEnd) !== null && _f !== void 0 ? _f : '',
                    delimiterWhitespaceStart: (_g = node.delimiterWhitespaceStart) !== null && _g !== void 0 ? _g : '',
                    delimiterWhitespaceEnd: (_h = node.delimiterWhitespaceEnd) !== null && _h !== void 0 ? _h : '',
                    position: position(node),
                    blockStartPosition: {
                        start: node.blockStartLocStart,
                        end: node.blockStartLocEnd,
                    },
                    blockEndPosition: {
                        start: node.blockEndLocStart,
                        end: node.blockEndLocEnd,
                    },
                    source,
                });
                break;
            }
            case cst_1.ConcreteNodeTypes.HtmlTagOpen: {
                builder.open(toHtmlElement(node, source));
                break;
            }
            case cst_1.ConcreteNodeTypes.HtmlTagClose: {
                builder.close(node, types_1.NodeTypes.HtmlElement);
                break;
            }
            case cst_1.ConcreteNodeTypes.HtmlVoidElement: {
                builder.push(toHtmlVoidElement(node, source));
                break;
            }
            case cst_1.ConcreteNodeTypes.HtmlSelfClosingElement: {
                builder.push(toHtmlSelfClosingElement(node, source));
                break;
            }
            case cst_1.ConcreteNodeTypes.HtmlComment: {
                builder.push({
                    type: types_1.NodeTypes.HtmlComment,
                    body: node.body,
                    position: position(node),
                    source,
                });
                break;
            }
            case cst_1.ConcreteNodeTypes.HtmlRawTag: {
                builder.push({
                    type: types_1.NodeTypes.HtmlRawNode,
                    name: node.name,
                    body: node.body,
                    attributes: toAttributes(node.attrList || [], source),
                    position: position(node),
                    source,
                    blockStartPosition: {
                        start: node.blockStartLocStart,
                        end: node.blockStartLocEnd,
                    },
                    blockEndPosition: {
                        start: node.blockEndLocStart,
                        end: node.blockEndLocEnd,
                    },
                });
                break;
            }
            case cst_1.ConcreteNodeTypes.AttrEmpty: {
                builder.push({
                    type: types_1.NodeTypes.AttrEmpty,
                    name: node.name,
                    position: position(node),
                    source,
                });
                break;
            }
            case cst_1.ConcreteNodeTypes.AttrSingleQuoted:
            case cst_1.ConcreteNodeTypes.AttrDoubleQuoted:
            case cst_1.ConcreteNodeTypes.AttrUnquoted: {
                const abstractNode = {
                    type: node.type,
                    name: node.name,
                    position: position(node),
                    source,
                    attributePosition: { start: -1, end: -1 },
                    value: [],
                };
                const value = toAttributeValue(node.value, source);
                abstractNode.value = value;
                abstractNode.attributePosition = toAttributePosition(node, value);
                builder.push(abstractNode);
                break;
            }
            default: {
                (0, utils_1.assertNever)(node);
            }
        }
    }
    return builder.ast;
}
exports.cstToAst = cstToAst;
function toAttributePosition(node, value) {
    if (value.length === 0) {
        return {
            start: node.locStart + node.name.length + '='.length + '"'.length,
            end: node.locStart + node.name.length + '='.length + '"'.length,
        };
    }
    return {
        start: value[0].position.start,
        end: value[value.length - 1].position.end,
    };
}
function toAttributeValue(value, source) {
    return cstToAst(value, source);
}
function toAttributes(attrList, source) {
    return cstToAst(attrList, source);
}
function toName(name, source) {
    if (typeof name === 'string')
        return name;
    return toLiquidDrop(name, source);
}
function toLiquidDrop(node, source) {
    var _a, _b;
    return {
        type: types_1.NodeTypes.LiquidDrop,
        markup: node.markup,
        whitespaceStart: (_a = node.whitespaceStart) !== null && _a !== void 0 ? _a : '',
        whitespaceEnd: (_b = node.whitespaceEnd) !== null && _b !== void 0 ? _b : '',
        position: position(node),
        source,
    };
}
function toHtmlElement(node, source) {
    return {
        type: types_1.NodeTypes.HtmlElement,
        name: toName(node.name, source),
        attributes: toAttributes(node.attrList || [], source),
        position: position(node),
        blockStartPosition: position(node),
        blockEndPosition: { start: -1, end: -1 },
        children: [],
        source,
    };
}
function toHtmlVoidElement(node, source) {
    return {
        type: types_1.NodeTypes.HtmlVoidElement,
        name: node.name,
        attributes: toAttributes(node.attrList || [], source),
        position: position(node),
        blockStartPosition: position(node),
        source,
    };
}
function toHtmlSelfClosingElement(node, source) {
    return {
        type: types_1.NodeTypes.HtmlSelfClosingElement,
        name: toName(node.name, source),
        attributes: toAttributes(node.attrList || [], source),
        position: position(node),
        blockStartPosition: position(node),
        source,
    };
}
function position(node) {
    return {
        start: node.locStart,
        end: node.locEnd,
    };
}
function walk(ast, fn, parentNode) {
    for (const key of ['children', 'attributes']) {
        if (key in ast) {
            ast[key].forEach((node) => walk(node, fn, ast));
        }
    }
    if ('value' in ast) {
        if (Array.isArray(ast.value)) {
            ast.value.forEach((node) => walk(node, fn, ast));
        }
    }
    if ('name' in ast) {
        if (ast.name && typeof ast.name !== 'string' && ast.name.type) {
            fn(ast.name, ast);
        }
    }
    fn(ast, parentNode);
}
exports.walk = walk;
//# sourceMappingURL=data:application/json;base64,