"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toLiquidHtmlCST = exports.ConcreteNodeTypes = void 0;
const extras_1 = require("ohm-js/extras");
const grammar_1 = require("../parser/grammar");
const errors_1 = require("../parser/errors");
var ConcreteNodeTypes;
(function (ConcreteNodeTypes) {
    ConcreteNodeTypes["HtmlComment"] = "HtmlComment";
    ConcreteNodeTypes["HtmlRawTag"] = "HtmlRawTag";
    ConcreteNodeTypes["HtmlVoidElement"] = "HtmlVoidElement";
    ConcreteNodeTypes["HtmlSelfClosingElement"] = "HtmlSelfClosingElement";
    ConcreteNodeTypes["HtmlTagOpen"] = "HtmlTagOpen";
    ConcreteNodeTypes["HtmlTagClose"] = "HtmlTagClose";
    ConcreteNodeTypes["AttrSingleQuoted"] = "AttrSingleQuoted";
    ConcreteNodeTypes["AttrDoubleQuoted"] = "AttrDoubleQuoted";
    ConcreteNodeTypes["AttrUnquoted"] = "AttrUnquoted";
    ConcreteNodeTypes["AttrEmpty"] = "AttrEmpty";
    ConcreteNodeTypes["LiquidDrop"] = "LiquidDrop";
    ConcreteNodeTypes["LiquidRawTag"] = "LiquidRawTag";
    ConcreteNodeTypes["LiquidTag"] = "LiquidTag";
    ConcreteNodeTypes["LiquidTagOpen"] = "LiquidTagOpen";
    ConcreteNodeTypes["LiquidTagClose"] = "LiquidTagClose";
    ConcreteNodeTypes["TextNode"] = "TextNode";
})(ConcreteNodeTypes = exports.ConcreteNodeTypes || (exports.ConcreteNodeTypes = {}));
const markup = (i) => (tokens) => tokens[i].sourceString.trim();
function toLiquidHtmlCST(text) {
    const locStart = (tokens) => tokens[0].source.startIdx;
    const locEnd = (tokens) => tokens[tokens.length - 1].source.endIdx;
    const textNode = {
        type: ConcreteNodeTypes.TextNode,
        value: function () {
            return this.sourceString;
        },
        locStart,
        locEnd,
    };
    const res = grammar_1.liquidHtmlGrammar.match(text);
    if (res.failed()) {
        throw new errors_1.LiquidHTMLCSTParsingError(res);
    }
    const ohmAST = (0, extras_1.toAST)(res, {
        HtmlComment: {
            body: markup(1),
            locStart,
            locEnd,
        },
        HtmlRawTagImpl: {
            type: 'HtmlRawTag',
            name: 1,
            attrList: 2,
            body: 4,
            locStart,
            locEnd,
            blockStartLocStart: (tokens) => tokens[0].source.startIdx,
            blockStartLocEnd: (tokens) => tokens[3].source.endIdx,
            blockEndLocStart: (tokens) => tokens[5].source.startIdx,
            blockEndLocEnd: (tokens) => tokens[5].source.endIdx,
        },
        HtmlVoidElement: {
            name: 1,
            attrList: 2,
            locStart,
            locEnd,
        },
        HtmlSelfClosingElement: {
            name: 1,
            attrList: 2,
            locStart,
            locEnd,
        },
        HtmlTagOpen: {
            name: 1,
            attrList: 2,
            locStart,
            locEnd,
        },
        HtmlTagClose: {
            name: 1,
            locStart,
            locEnd,
        },
        tagNameOrLiquidDrop: 0,
        AttrUnquoted: {
            name: 0,
            value: 2,
            locStart,
            locEnd,
        },
        AttrSingleQuoted: {
            name: 0,
            value: 3,
            locStart,
            locEnd,
        },
        AttrDoubleQuoted: {
            name: 0,
            value: 3,
            locStart,
            locEnd,
        },
        attrEmpty: {
            type: ConcreteNodeTypes.AttrEmpty,
            name: 0,
            locStart,
            locEnd,
        },
        attrDoubleQuotedValue: 0,
        attrSingleQuotedValue: 0,
        attrUnquotedValue: 0,
        attrDoubleQuotedTextNode: textNode,
        attrSingleQuotedTextNode: textNode,
        attrUnquotedTextNode: textNode,
        liquidNode: 0,
        liquidRawTag: 0,
        liquidRawTagImpl: {
            type: ConcreteNodeTypes.LiquidRawTag,
            name: 3,
            body: 7,
            whitespaceStart: 1,
            whitespaceEnd: 5,
            delimiterWhitespaceStart: 9,
            delimiterWhitespaceEnd: 14,
            locStart,
            locEnd,
            blockStartLocStart: (tokens) => tokens[0].source.startIdx,
            blockStartLocEnd: (tokens) => tokens[6].source.endIdx,
            blockEndLocStart: (tokens) => tokens[8].source.startIdx,
            blockEndLocEnd: (tokens) => tokens[15].source.endIdx,
        },
        liquidTagOpen: {
            type: ConcreteNodeTypes.LiquidTagOpen,
            name: 3,
            markup: markup(5),
            whitespaceStart: 1,
            whitespaceEnd: 6,
            locStart,
            locEnd,
        },
        liquidTagClose: {
            type: ConcreteNodeTypes.LiquidTagClose,
            name: 4,
            whitespaceStart: 1,
            whitespaceEnd: 7,
            locStart,
            locEnd,
        },
        liquidTag: {
            type: ConcreteNodeTypes.LiquidTag,
            name: 3,
            markup: markup(5),
            whitespaceStart: 1,
            whitespaceEnd: 6,
            locStart,
            locEnd,
        },
        liquidDrop: {
            type: ConcreteNodeTypes.LiquidDrop,
            markup: markup(2),
            whitespaceStart: 1,
            whitespaceEnd: 3,
            locStart,
            locEnd,
        },
        liquidInlineComment: {
            type: ConcreteNodeTypes.LiquidTag,
            name: 3,
            markup: markup(5),
            whitespaceStart: 1,
            whitespaceEnd: 6,
            locStart,
            locEnd,
        },
        TextNode: textNode,
    });
    return ohmAST;
}
exports.toLiquidHtmlCST = toLiquidHtmlCST;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3N0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3BhcnNlci9jc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsMENBQXNDO0FBQ3RDLDhDQUFxRDtBQUNyRCw0Q0FBNEQ7QUFFNUQsSUFBWSxpQkFpQlg7QUFqQkQsV0FBWSxpQkFBaUI7SUFDM0IsZ0RBQTJCLENBQUE7SUFDM0IsOENBQXlCLENBQUE7SUFDekIsd0RBQW1DLENBQUE7SUFDbkMsc0VBQWlELENBQUE7SUFDakQsZ0RBQTJCLENBQUE7SUFDM0Isa0RBQTZCLENBQUE7SUFDN0IsMERBQXFDLENBQUE7SUFDckMsMERBQXFDLENBQUE7SUFDckMsa0RBQTZCLENBQUE7SUFDN0IsNENBQXVCLENBQUE7SUFDdkIsOENBQXlCLENBQUE7SUFDekIsa0RBQTZCLENBQUE7SUFDN0IsNENBQXVCLENBQUE7SUFDdkIsb0RBQStCLENBQUE7SUFDL0Isc0RBQWlDLENBQUE7SUFDakMsMENBQXFCLENBQUE7QUFDdkIsQ0FBQyxFQWpCVyxpQkFBaUIsR0FBakIseUJBQWlCLEtBQWpCLHlCQUFpQixRQWlCNUI7QUFtSUQsTUFBTSxNQUFNLEdBQUcsQ0FBQyxDQUFTLEVBQUUsRUFBRSxDQUFDLENBQUMsTUFBVyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDO0FBRTdFLFNBQWdCLGVBQWUsQ0FBQyxJQUFZO0lBQzFDLE1BQU0sUUFBUSxHQUFHLENBQUMsTUFBVyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztJQUM1RCxNQUFNLE1BQU0sR0FBRyxDQUFDLE1BQVcsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUN4RSxNQUFNLFFBQVEsR0FBRztR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