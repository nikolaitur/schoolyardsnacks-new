"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasLineBreakInRange = exports.originallyHadLineBreaks = exports.reindent = exports.markupLines = exports.bodyLines = exports.trimEnd = exports.trim = exports.isWhitespace = void 0;
function isWhitespace(source, loc) {
    if (loc < 0 || loc >= source.length)
        return false;
    return !!source[loc].match(/\s/);
}
exports.isWhitespace = isWhitespace;
const trim = (x) => x.trim();
exports.trim = trim;
const trimEnd = (x) => x.trimEnd();
exports.trimEnd = trimEnd;
function bodyLines(str) {
    return str
        .replace(/^\n*|\s*$/g, '')
        .split(/\r?\n/);
}
exports.bodyLines = bodyLines;
function markupLines(node) {
    return node.markup.trim().split('\n');
}
exports.markupLines = markupLines;
function reindent(lines, skipFirst = false) {
    const minIndentLevel = lines
        .filter((_, i) => (skipFirst ? i > 0 : true))
        .filter((line) => line.trim().length > 0)
        .map((line) => line.match(/^\s*/)[0].length)
        .reduce((a, b) => Math.min(a, b), Infinity);
    if (minIndentLevel === Infinity) {
        return lines;
    }
    const indentStrip = new RegExp('^' + ' '.repeat(minIndentLevel));
    return lines.map((line) => line.replace(indentStrip, '')).map(exports.trimEnd);
}
exports.reindent = reindent;
function originallyHadLineBreaks(path, { locStart, locEnd }) {
    const node = path.getValue();
    return hasLineBreakInRange(node.source, locStart(node), locEnd(node));
}
exports.originallyHadLineBreaks = originallyHadLineBreaks;
function hasLineBreakInRange(source, locStart, locEnd) {
    const indexOfNewLine = source.indexOf('\n', locStart);
    return 0 <= indexOfNewLine && indexOfNewLine < locEnd;
}
exports.hasLineBreakInRange = hasLineBreakInRange;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3ByaW50ZXIvdXRpbHMvc3RyaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBLFNBQWdCLFlBQVksQ0FBQyxNQUFjLEVBQUUsR0FBVztJQUN0RCxJQUFJLEdBQUcsR0FBRyxDQUFDLElBQUksR0FBRyxJQUFJLE1BQU0sQ0FBQyxNQUFNO1FBQUUsT0FBTyxLQUFLLENBQUM7SUFDbEQsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNuQyxDQUFDO0FBSEQsb0NBR0M7QUFFTSxNQUFNLElBQUksR0FBRyxDQUFDLENBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQS9CLFFBQUEsSUFBSSxRQUEyQjtBQUNyQyxNQUFNLE9BQU8sR0FBRyxDQUFDLENBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQXJDLFFBQUEsT0FBTyxXQUE4QjtBQUVsRCxTQUFnQixTQUFTLENBQUMsR0FBVztJQUNuQyxPQUFPLEdBQUc7U0FDUCxPQUFPLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQztTQUN6QixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDcEIsQ0FBQztBQUpELDhCQUlDO0FBRUQsU0FBZ0IsV0FBVyxDQUV6QixJQUFPO0lBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN4QyxDQUFDO0FBSkQsa0NBSUM7QUFFRCxTQUFnQixRQUFRLENBQUMsS0FBZSxFQUFFLFNBQVMsR0FBRyxLQUFLO0lBQ3pELE1BQU0sY0FBYyxHQUFHLEtBQUs7U0FDekIsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzVDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7U0FDeEMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztTQUNwRCxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUU5QyxJQUFJLGNBQWMsS0FBSyxRQUFRLEVBQUU7UUFDL0IsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUVELE1BQU0sV0FBVyxHQUFHLElBQUksTUFBTSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7SUFDakUsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxlQUFPLENBQUMsQ0FBQztBQUN6RSxDQUFDO0FBYkQsNEJBYUM7QUFFRCxTQUFnQix1QkFBdUIsQ0FDckMsSUFBbUIsRUFDbkIsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUF1QjtJQUV6QyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDN0IsT0FBTyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUN4RSxDQUFDO0FBTkQsMERBTUM7QUFFRCxTQUFnQixtQkFBbUIsQ0FDakMsTUFBYyxFQUNkLFFBQWdCLEVBQ2hCLE1BQWM7SUFFZCxNQUFNLGNBQWMsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztJQUN0RCxPQUFPLENBQUMsSUFBSSxjQUFjLElBQUksY0FBYyxHQUFHLE1BQU0sQ0FBQztBQUN4RCxDQUFDO0FBUEQsa0RBT0MifQ==