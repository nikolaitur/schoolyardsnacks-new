"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.printerLiquidHtml = void 0;
const prettier_1 = require("prettier");
const types_1 = require("../types");
const utils_1 = require("../utils");
const print_preprocess_1 = require("../printer/print-preprocess");
const utils_2 = require("../printer/utils");
const element_1 = require("../printer/print/element");
const tag_1 = require("../printer/print/tag");
const liquid_1 = require("../printer/print/liquid");
const children_1 = require("../printer/print/children");
const { builders } = prettier_1.doc;
const { fill, group, hardline, indent, join, line, softline } = builders;
const { replaceTextEndOfLine } = prettier_1.doc.utils;
function getSchema(contents, options) {
    try {
        return [JSON.stringify(JSON.parse(contents), null, options.tabWidth), true];
    }
    catch (e) {
        return [contents, false];
    }
}
function printAttributes(path, _options, print) {
    const node = path.getValue();
    if ((0, utils_2.isEmpty)(node.attributes))
        return '';
    return group([
        indent([
            line,
            join(line, path.map((p) => print(p), 'attributes')),
        ]),
        softline,
    ], {
        shouldBreak: (0, utils_2.hasLineBreakInRange)(node.source, node.blockStartPosition.start, node.blockStartPosition.end),
    });
}
const oppositeQuotes = {
    '"': "'",
    "'": '"',
};
function printAttribute(path, options, _print) {
    const node = path.getValue();
    const attrGroupId = Symbol('attr-group-id');
    const value = node.source.slice(node.attributePosition.start, node.attributePosition.end);
    const preferredQuote = options.singleQuote ? `'` : `"`;
    const attributeValueContainsQuote = !!node.value.find((valueNode) => (0, utils_2.isTextLikeNode)(valueNode) && valueNode.value.includes(preferredQuote));
    const quote = attributeValueContainsQuote
        ? oppositeQuotes[preferredQuote]
        : preferredQuote;
    return [
        node.name,
        '=',
        quote,
        (0, utils_2.hasLineBreakInRange)(node.source, node.attributePosition.start, node.attributePosition.end)
            ? group([
                indent([
                    softline,
                    join(hardline, (0, utils_2.reindent)((0, utils_2.bodyLines)(value), true)),
                ]),
                softline,
            ], { id: attrGroupId })
            : value,
        quote,
    ];
}
function printTextNode(path, options, _print) {
    const node = path.getValue();
    if (node.value.match(/^\s*$/))
        return '';
    const text = node.value;
    const paragraphs = text
        .split(/(\r?\n){2,}/)
        .filter(Boolean)
        .map((curr) => {
        let doc = [];
        const words = curr.trim().split(/\s+/g);
        let isFirst = true;
        for (let j = 0; j < words.length; j++) {
            const word = words[j];
            if (isFirst) {
                isFirst = false;
            }
            else {
                doc.push(line);
            }
            doc.push(word);
        }
        return fill(doc);
    });
    return [
        (0, tag_1.printOpeningTagPrefix)(node, options),
        join(hardline, paragraphs),
        (0, tag_1.printClosingTagSuffix)(node, options),
    ];
}
function printNode(path, options, print, args = {}) {
    const node = path.getValue();
    switch (node.type) {
        case types_1.NodeTypes.Document: {
            return [
                (0, children_1.printChildren)(path, options, print, args),
                hardline,
            ];
        }
        case types_1.NodeTypes.HtmlElement: {
            return (0, element_1.printElement)(path, options, print);
        }
        case types_1.NodeTypes.HtmlVoidElement: {
            return (0, element_1.printElement)(path, options, print);
        }
        case types_1.NodeTypes.HtmlSelfClosingElement: {
            return (0, element_1.printElement)(path, options, print);
        }
        case types_1.NodeTypes.HtmlRawNode: {
            const lines = (0, utils_2.bodyLines)(node.body);
            const shouldSkipFirstLine = !node.source[node.blockStartPosition.end].match(/\r|\n/);
            const body = lines.length > 0 && lines[0] !== ''
                ? [
                    indent([
                        hardline,
                        join(hardline, (0, utils_2.reindent)(lines, shouldSkipFirstLine)),
                    ]),
                    hardline,
                ]
                : [softline];
            return group([
                group([
                    '<',
                    node.name,
                    printAttributes(path, options, print),
                    '>',
                ]),
                body,
                ['</', node.name, '>'],
            ]);
        }
        case types_1.NodeTypes.LiquidDrop: {
            return (0, liquid_1.printLiquidDrop)(path, options, print, args);
        }
        case types_1.NodeTypes.LiquidRawTag: {
            const lines = (0, utils_2.bodyLines)(node.body);
            const shouldSkipFirstLine = !node.source[node.blockStartPosition.end].match(/\r|\n/);
            const body = (0, utils_2.reindent)(lines, shouldSkipFirstLine);
            const blockStart = group([
                '{%',
                node.whitespaceStart,
                ' ',
                node.name,
                ' ',
                node.whitespaceEnd,
                '%}',
            ]);
            const blockEnd = [
                '{%',
                node.whitespaceStart,
                ' ',
                'end',
                node.name,
                ' ',
                node.whitespaceEnd,
                '%}',
            ];
            if (node.name === 'schema') {
                const [schema, isValid] = getSchema(node.body, options);
                if (!isValid) {
                    return [
                        blockStart,
                        ...replaceTextEndOfLine(schema, hardline),
                        blockEnd,
                    ];
                }
                const body = [hardline, ...replaceTextEndOfLine(schema, hardline)];
                return [
                    blockStart,
                    options.indentSchema ? indent(body) : body,
                    hardline,
                    blockEnd,
                ];
            }
            if (!(0, utils_2.hasLineBreakInRange)(node.source, node.blockStartPosition.end, node.blockEndPosition.start)) {
                return [
                    blockStart,
                    node.source.slice(node.blockStartPosition.end, node.blockEndPosition.start),
                    blockEnd,
                ];
            }
            return [
                blockStart,
                indent([hardline, join(hardline, body)]),
                hardline,
                blockEnd,
            ];
        }
        case types_1.NodeTypes.LiquidTag: {
            return (0, liquid_1.printLiquidTag)(path, options, print, args);
        }
        case types_1.NodeTypes.LiquidBranch: {
            return (0, liquid_1.printLiquidBranch)(path, options, print, args);
        }
        case types_1.NodeTypes.AttrEmpty: {
            return node.name;
        }
        case types_1.NodeTypes.AttrUnquoted:
        case types_1.NodeTypes.AttrSingleQuoted:
        case types_1.NodeTypes.AttrDoubleQuoted: {
            return printAttribute(path, options, print);
        }
        case types_1.NodeTypes.HtmlComment: {
            return [
                '<!--',
                group([
                    indent([line, join(hardline, (0, utils_2.reindent)((0, utils_2.bodyLines)(node.body), true))]),
                    line,
                ]),
                '-->',
            ];
        }
        case types_1.NodeTypes.TextNode: {
            return printTextNode(path, options, print);
        }
        default: {
            return (0, utils_1.assertNever)(node);
        }
    }
}
exports.printerLiquidHtml = {
    print: printNode,
    preprocess: print_preprocess_1.preprocess,
};
//# sourceMappingURL=data:application/json;base64,