<script>
  !(function (u) {
    window.edgetag =
      window.edgetag ||
      function () {
        (edgetag.stubs = edgetag.stubs || []).push(arguments);
      };
    const t = document.createElement('script');
    (t.type = 'text/javascript'), (t.src = u), (t.async = !0);
    const e = document.getElementsByTagName('script')[0];
    e.parentNode.insertBefore(t, e);
  })('https://mrpfj.schoolyardsnacks.com/load');
  edgetag('init', {
    edgeURL: 'https://mrpfj.schoolyardsnacks.com',
    disableConsentCheck: true,
  });
</script>

<script>
  !function() {
    const addToCart = (form) => {
      if (!form) {
        return
      }

      let quantity = 1
      let id = ''
      let options = []

      Array.from(form.elements).forEach((item) => {
        if (item.type === 'radio' && item.checked) {
          options.push(item.value)
        }

        if (item.name === 'quantity') {
          quantity = parseInt(item.value, 10)
          return
        }

        if (item.name === 'id') {
          id = item.value
        }
      })

       const obj = {
        id,
        quantity,
      }

      let totalPrice = 0
      {% if product %}
       const variants = []
       {% for item in product.variants %}
        variants.push({{item | json}})
       {% endfor %}

        const currentId = parseInt(obj.id, 10)
        const variant = variants.find(variant => currentId === variant.id)
        if (variant) {
          obj.id = variant.id
          obj.item_price = parseFloat(variant.price) / 100
          obj.title = variant.title
          obj.category = '{{product.type | escape_once}}'
          totalPrice = quantity * obj.item_price
        }
      {% endif %}

      edgetag('tag', 'AddToCart', {
        name: '{{product.title | escape_once}}',
        currency: '{{shop.currency | downcase}}',
        value: totalPrice,
        type: 'product',
        contents: [
          obj
        ]
      })


    }

    edgetag('tag', 'PageView')

    {% if product %}
      edgetag('tag', 'ViewContent', {
        name: '{{product.title | escape_once}}',
        currency: '{{shop.currency | upcase}}',
        type: 'product',
        category: '{{product.type | escape_once}}',
        contents: [{
          id: '{{product.id}}',
          quantity: 1,
          item_price: {{product.price | money_without_currency}},
          title: '{{product.title | escape_once}}',
          category: '{{product.type}}'
        }],
        value: {{product.price | money_without_currency}}
      })
    {% endif %}

    const actions = [
      {
        selectors: ['[class^="shopify-payment-button"]', 'form[action^="/cart/add"]'],
        length: 2,
        fun: (ele) => {
          addToCart(ele)
          edgetag('tag', 'InitiateCheckout')

        },
        current: 0
      },
      {
        selectors: ['[type="submit"]', 'form[action^="/cart/add"]'],
        length: 2,
        fun: (ele) => {
          addToCart(ele)
        },
        current: 0
      },
      {
        selectors: ['button', 'form[action="/cart"]'],
        length: 2,
        fun: (ele) => {
          edgetag('tag', 'InitiateCheckout')

        },
        current: 0
      },
      {
        selectors: ['a[href="/checkout"]'],
        length: 1,
        fun: (ele) => {
          edgetag('tag', 'InitiateCheckout')

        },
        current: 0
      },
      {
        selectors: ['[form="cart"]'],
        length: 1,
        fun: (ele) => {
          edgetag('tag', 'InitiateCheckout')

        },
        current: 0
      },
      {
        selectors: ['[type="submit"]', 'form[action="/account/login"]'],
        length: 2,
        fun: (ele) => {


          const inputEmail = ele.querySelector('input[type="email"]')
          const email = inputEmail && inputEmail.value
          if (email) {
            edgetag('user', 'email', email)


          }
        },
        current: 0
      },
      {
        selectors: ['[type="submit"]', 'form[action="/account"]'],
        length: 2,
        fun: (ele) => {
          const inputEmail = ele.querySelector('input[type="email"]')
          const email = (inputEmail && inputEmail.value) || ''
          if (email) {
            edgetag('user', 'email', email)


          }


              const inputPhone = ele.querySelector('input[type="tel"]')
              const phone = (inputPhone && inputPhone.value) || ''
              if (phone) {
                edgetag('user', 'phone', phone)
              }


              const inputFirstName = ele.querySelector('input#first_name')
              const firstName = (inputFirstName && inputFirstName.value) || ''
              if (firstName) {
                edgetag('user', 'firstName', firstName)
              }


              const inputLastName = ele.querySelector('input#last_name')
              const lastName = (inputLastName && inputLastName.value) || ''
              if (lastName) {
                edgetag('user', 'lastName', lastName)
              }

          edgetag('tag', 'CompleteRegistration')
        },
        current: 0
      },
      {
        selectors: ['[type="submit"]', 'form[action^="/contact"]'],
        length: 2,
        fun: (ele) => {

          const inputEmail = ele.querySelector('input[type="email"]')
          const email = inputEmail && inputEmail.value
          if (email) {
            edgetag('user', 'email', email)


          }


              let inputPhone = ele.querySelector('input#ContactFormPhone')
              let phone = inputPhone && inputPhone.value
              if (phone) {
                edgetag('user', 'phone', phone)
              } else {
                inputPhone = ele.querySelector('input[type="tel"]')
                phone = inputPhone && inputPhone.value
                if (phone) {
                  edgetag('user', 'phone', phone)
                }
              }


              const inputName = ele.querySelector('input#ContactFormName')
              const firstName = inputName && inputName.value
              if (firstName) {
                edgetag('user', 'firstName', firstName)
              }

          edgetag('tag', 'Contact')
        },
        current: 0
      },
       {
          selectors: ['[type="submit"]', '#footer-newsletter-email'],
            length: 2,
            fun: (ele) => {
              const inputEmail = ele.querySelector('input[type="email"]')
              const email = inputEmail && inputEmail.value
              if (email) {
                edgetag('user', 'email', email)


              }

              edgetag('tag', 'Subscribe')

            },
            current: 0
          },
       {
          selectors: ['button', '#footer-newsletter-email'],
            length: 2,
            fun: (ele) => {
              const inputEmail = ele.querySelector('input[type="email"]')
              const email = inputEmail && inputEmail.value
              if (email) {
                edgetag('user', 'email', email)


              }

              edgetag('tag', 'Subscribe')

            },
            current: 0
          },
    ]

    const actionsLength = actions.length

    const resetActions = () => {
      for (let i = 0; i < actionsLength; i++) {
        actions[i].current = 0
      }
    }

    const checkElement = (element) => {
      if (!element || element.nodeName === 'BODY') {
        resetActions()
        return
      }

      if (element.nodeName !== 'DIV' && element.nodeName !== 'INPUT' && element.nodeName !== 'A' && element.nodeName !== 'BUTTON' && element.nodeName !== 'FORM') {
        checkElement(element.parentElement)
        return
      }

      for (let i = 0; i < actionsLength; ++i) {
        if (element.matches(actions[i].selectors[actions[i].current])) {
          ++actions[i].current
          if (actions[i].length === actions[i].current) {
            actions[i].fun(element)
            resetActions()
            return
          }
        }
      }

      checkElement(element.parentElement)
    }

    window.addEventListener('load', () => {
      document.addEventListener('click', (e) => {
        checkElement(e.target)
      })
    })

    if (window.location.pathname.startsWith('/search')) {
      let searchParams = new URLSearchParams(window.location.search)
      const search = searchParams.get('q')
      if (search) {

            edgetag('tag', 'Search', {
              search
            })

      }
    }

    const findParent = (element, selector) => {
   if (!element || element.nodeName === 'BODY') {
     return null
   }

   if (element.matches(selector)) {
     return element
   }

   return findParent(element.parentElement, selector)
  }

  const customAddToCart = () => {
    return
    console.log("customAddToCart event");
   const form = document.querySelector('#growltvProductForm')
   if (!form) {
     return
   }
   let totalPriceElement = form.querySelector(
     '.growltv-purchase-type .growltv-purchase-option--selected .growltv-purchase-option__price'
   )
   if (!totalPriceElement) {
     totalPriceElement = form.querySelector(
       '.growltv-add-to-cart .price-wrap .price'
     )
   }
   const totalPrice =
     totalPriceElement &&
     totalPriceElement.lastChild.textContent.replace(/[^\d.]+/g, '')
   const contents = []
   const variants = document.querySelectorAll(
     '.growltv-options-group__options:not(.growltv-options-group__options-bundle) .growltv-options-group__option--selected'
   )
   const lineItemsLength = variants.length
   variants.forEach((variant) => {
     const idElement = variant.querySelector('input[name="flavor"]')
     const id = idElement && idElement.id
     const titleElement = variant.querySelector(
       '.growltv-options-group__option-title'
     )
     const title = titleElement && titleElement.innerText
     contents.push({
       id,
       title,
       quantity: 1,
       item_price: totalPrice / lineItemsLength,
     })
   })

   edgetag('tag', 'AddToCart', {
     name: '{{product.title | escape_once}}',
     currency: '{{shop.currency | downcase}}',
     value: parseFloat(totalPrice),
     type: 'product',
     contents,
   })

  //  {% if template.suffix contains 'subscription-only' %}
  //     document.location.href = "/checkout";
  //   {% endif %}






  }
  const upsellAddToCart = (product) => {
   if (!product) {
     return
   }

   const titleElement = product.querySelector('.rebuy-product-title')
   const title = titleElement && titleElement.innerText.trim()
   const totalPriceElement = product.querySelector('.rebuy-money')
   const totalPrice =
     totalPriceElement && totalPriceElement.innerText.replace(/[^\d.]+/g, '')
   const variantTitleElement = product.querySelector('.rebuy-variant-title')
   const variantTitle =
     variantTitleElement && variantTitleElement.innerText.trim()
   const obj = {
     title: variantTitle,
     quantity: 1,
     item_price: parseFloat(totalPrice),
   }
   edgetag('tag', 'AddToCart', {
     name: title,
     currency: '{{shop.currency | downcase}}',
     value: parseFloat(totalPrice),
     type: 'product',
     contents: [obj],
   })
  }
  document.addEventListener('click', (e) => {
   // Custom add to cart event
   if (e.target.matches('.growltv-add-to-cart button.btn')) {
     customAddToCart()
     return
   }

   // initiate checkout
   let button = findParent(e.target, '.rebuy-cart__checkout-button')
   if (!button) {
     button = findParent(e.target, '.rebuy-cart__shop-pay-button')
   }
   if (button) {
     edgetag('tag', 'InitiateCheckout')
     return
   }

   // upsell add to cart event
   button = findParent(e.target, '.rebuy-button')
   if (button) {
     const product = findParent(e.target, '.rebuy-product-block')
     upsellAddToCart(product)
     return
   }
  })


  }();
</script>
