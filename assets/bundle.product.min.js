function changeTimezone(date, ianatz) {
  var invdate = new Date(
    date.toLocaleString("en-US", {
      timeZone: ianatz,
    })
  );

  var diff = date.getTime() - invdate.getTime();

  return new Date(date.getTime() + diff);
}

function msToTime(s) {
  var ms = s % 1000;
  s = (s - ms) / 1000;
  var secs = s % 60;
  s = (s - secs) / 60;
  var mins = s % 60;
  var hrs = (s - mins) / 60;
  var hours = hrs + " hr";
  var minutes = mins + " min";
  var output = "";
  if (hrs >= 24) {
    return "24 hours";
  }
  if (hrs > 0) {
    output = hours;
  }
  if (hrs > 0 && mins > 0) {
    output = output + ", ";
  }
  if (mins > 0) {
    output = output + minutes;
  }
  return output;
}

function ordinalSuffixOf(i) {
  var j = i % 10,
    k = i % 100;
  if (j == 1 && k != 11) {
    return "st";
  }
  if (j == 2 && k != 12) {
    return "nd";
  }
  if (j == 3 && k != 13) {
    return "rd";
  }
  return "th";
}

function addZipCode(zipCode) {
  return (
    ' Ship to: <strong id="zipcode">' +
    zipCode +
    '</strong> <a href="#" id="change-zipcode">Change Zip</a><input name="zipcode-input" id="zipcode-input" class="visually-hidden" value="' +
    zipCode +
    '"/><a href="#" id="save-zipcode" class="visually-hidden">Update</a>'
  );
}

function showOrderWithinMessage() {
  // console.log('order message returning use no--------------');

  var then = new Date();
  then.setHours(24, 0, 0, 0);
  then = changeTimezone(then, "America/Los_Angeles");

  var orderBy = msToTime(then - new Date());
  var today = new Date();
  if (today.toDateString().includes("Sat")) {
    today.setDate(today.getDate() + 2);
  }
  if (today.toDateString().includes("Sun")) {
    today.setDate(today.getDate() + 1);
  }
  var businessDays = 2;
  today.setDate(today.getDate() + businessDays);
  if (today.toDateString().includes("Sat")) {
    today.setDate(today.getDate() + 2);
  }
  if (today.toDateString().includes("Sun")) {
    today.setDate(today.getDate() + 1);
  }
  var newDateTimeFormat = new Intl.DateTimeFormat("en", {
    timeZone: "America/Los_Angeles",
    weekday: "long",
    month: "short",
    day: "numeric",
  });
  deliveryDay = newDateTimeFormat.format(today);
  var deliveryDayNum = deliveryDay.split(" ")[2];
  var receiveBy = deliveryDay + ordinalSuffixOf(deliveryDayNum);

  var geoInfo = localStorage.getItem("Fomo.geocodeResponse");
  if (!geoInfo) {
    return;
  }

  geoInfo = JSON.parse(geoInfo);
  var zipCode = localStorage.getItem("zipCodeInUS") || geoInfo.zip_code;
  if (geoInfo.country_code != "US") {
    return;
  }

  // var output1 = '<div id="product-order-by" class="variation-a product-order-by-date" style="text-align: center"><p>Get it by <strong id="receive-by">'+receiveBy+'</strong> Order within <strong>'+orderBy+'</strong>.'+addZipCode(zipCode)+'</p></div>';
  // var output2 = '<div id="product-order-by" class="variation-b product-order-by-date" style="text-align: center"><p>Get it by <strong id="receive-by">'+receiveBy+'</strong> with 2 Day Express Shipping'+'.'+addZipCode(zipCode)+'</p></div>';
  var output1 =
    '<div id="product-order-by" class="variation-c product-order-by-date" style="text-align: center"><p>Order in the next <strong>' +
    orderBy +
    '</strong> and get it by <strong id="receive-by">' +
    receiveBy +
    "</strong>." +
    addZipCode(zipCode) +
    "</p></div>";

  $(".product-action").before(output1);
  // $('#add-to-cart').before(output2);
  // $('#add-to-cart').before(output3);
  $("body").on("click", "#change-zipcode", function (e) {
    e.preventDefault();
    console.log("zipCode clicked");
    $("#zipcode").addClass("visually-hidden");
    $("#change-zipcode").addClass("visually-hidden");
    $("#zipcode-input").removeClass("visually-hidden");
    $("#save-zipcode").removeClass("visually-hidden");
  });
  $("body").on("click", "#save-zipcode", function (e) {
    e.preventDefault();
    console.log("zipCode clicked");
    $("#change-zipcode").removeClass("visually-hidden");
    $("#zipcode-input").addClass("visually-hidden");
    $("#save-zipcode").addClass("visually-hidden");
    localStorage.setItem("zipCodeInUS", $("#zipcode-input").val());
    $("#zipcode")
      .html($("#zipcode-input").val())
      .removeClass("visually-hidden");
  });
}

(window.REBASE = window.REBASE || {}),
  (REBASE.theme = REBASE.theme || {}),
  document.addEventListener("DOMContentLoaded", function () {
    var t,
      e = $(".product-option--bundle.product-option--selected input");
    var slidesPerView = 1;

    if (
      ((REBASE.theme.product_photo_gallery = new Swiper(
        ".gallery.swiper-container",
        {
          effect: "slide",
          loop: !0,
          speed: 300,
          slidesPerView: slidesPerView,
          centeredSlides: !0,
          spaceBetween: 20,
          navigation: {
            nextEl: ".swiper__button--next",
            prevEl: ".swiper__button--prev",
          },
          thumbs: { swiper: REBASE.theme.product_photo_thumbs },
          breakpoints: {
            960: { slidesPerView: 1, centeredSlides: !1, spaceBetween: 0 },
          },
        }
      )),
      $(document).on("click", ".thumbs .thumbs__item", function () {
        REBASE.theme.product_photo_gallery.slideToLoop($(this).data("index"));
      }),
      (product = new REBASE.theme.Product({
        $container: $("#add-to-cart-form"),
      })),
      product.currentVariant
        ? ((t = product.currentVariant.option1.split("+")),
          $(".product-option").removeClass("product-option--selected"),
          $(
            '.product-option--bundle input[value="' +
              product.currentVariant.option3 +
              '"]'
          ).click(),
          t.forEach(function (t) {
            $(
              '.product-option--flavor input[value="' + t.trim() + '"]'
            ).click();
          }))
        : e.click(),
      $(".sold-in-number") && $("#add-to-cart-form"))
    ) {
      var n = $("#add-to-cart-form").data("productid"),
        i = localStorage.getItem(n + "SoldIn");
      i ||
        ((i = Math.floor(Math.random() * (400 - 300 + 1)) + 300),
        localStorage.setItem(n + "SoldIn", i)),
        $(".sold-in-number").html(i);
    }
    showOrderWithinMessage();
  }),
  (REBASE.theme.Product = (function () {
    function t(t) {
      (this.variants = null),
        (this.$container = t.$container),
        (this.data = JSON.parse(
          document.getElementById("product__json").innerHTML
        )),
        (this.currentVariant = JSON.parse(
          document.getElementById("current_variant__json").innerHTML
        )),
        (this.variantDefaults = JSON.parse(
          document.getElementById("variant__defaults").innerHTML
        )),
        (this.variantPerBagPrices = JSON.parse(
          document.getElementById("variant_per_bag").innerHTML
        )),
        (this.settings = {
          single_option_selector: ".single-option-select",
          original_select_id: "select#product-select",
        }),
        this.data
          ? this._initVariants()
          : console && console.log("Missing product json data!");
    }
    return (
      (t.prototype = $.extend({}, t.prototype, {
        _initVariants: function () {
          var t = {
            $container: this.$container,
            enable_history_state: !0,
            single_option_selector: this.settings.single_option_selector,
            original_select_id: this.settings.original_select_id,
            product: this.data,
          };
          (this.variants = new REBASE.theme.Variants(t)),
            this.$container.on(
              "variantChange",
              this._updateAddToCart.bind(this)
            ),
            this.$container.on("variantChange", this._updatePrices.bind(this)),
            this.$container.on(
              "optionChange",
              this._updateSelectedOption.bind(this)
            );
        },
        _setSlashPrice: function (t) {
          var e = t.compare_at_price || "",
            n = t.compare_at_price || "",
            i = new Intl.NumberFormat("en-US", {
              style: "currency",
              currency: "USD",
              minimumFractionDigits: 2,
              maximumFractionDigits: 2,
            });
          0 !== e.length && (e = i.format(0.01 * e)),
            0 !== n.length && (n = i.format(0.01 * n));

          $("#slash_price_one_time").text(e);
          $("#slash_price_subscription").text(n);

          setTimeout(function () {
            $("#sub_slash_price_one_time").text(n);
          }, 100);
          setTimeout(function () {
            var subRcPrice = $("#rc_price_autodeliver").text();
            $("#sub_rc_price_autodeliver").text(subRcPrice);
          }, 100);
        },
        _setPricesInBundles: function () {
          function t() {
            $(".rc_block__type__onetime").hasClass("rc_block__type--active")
              ? ($(".product-option--selected .per-bag--once").css(
                  "display",
                  "block"
                ),
                $(".product-option--selected .per-bag--subs").css(
                  "display",
                  "none"
                ))
              : $(".rc_block__type__autodeliver").hasClass(
                  "rc_block__type--active"
                ) &&
                ($(".product-option--selected .per-bag--subs").css(
                  "display",
                  "block"
                ),
                $(".product-option--selected .per-bag--once").css(
                  "display",
                  "none"
                ));
          }
          t(),
            $(".rc_block").click(function () {
              t();
            });
        },
        _setPerBagPrices: function (t) {
          var e = this.variantPerBagPrices[t];
          $(".per-bag--once").html(e.once), $(".per-bag--subs").html(e.subs);
        },
        _getSelectedBundleLimit: function () {
          return $(
            ".product-option--bundle.product-option--selected input"
          ).data("flavor-limit");
        },
        _getSelectedFlavorCount: function () {
          return $(".product-option--flavor.product-option--selected").length;
        },
        _setFlavorsForBundle: function (t) {
          $(".product-option--flavor").removeClass("product-option--selected"),
            (defaultFlavors = this.variantDefaults[t].split("|")),
            defaultFlavors.forEach(function (t) {
              $('.product-option--flavor input[value="' + t + '"]').click();
            });
        },
        _getDisabledButtonLabel: function (t) {
          switch (t) {
            case 1:
              return "Select 2nd Flavor";
            case 2:
              return "Select 3rd Flavor";
            case 3:
              return "Select 4th Flavor";
          }
        },
        _updateBundleOption: function (t) {
          $(".product-option--bundle").removeClass("product-option--selected"),
            $('.product-option--bundle input[value="' + t + '"]')
              .parents(".product-option")
              .addClass("product-option--selected");
        },
        _updateFlavorOption: function (t) {
          var e = this._getSelectedBundleLimit(),
            n = this._getSelectedFlavorCount();
          n < e &&
            $('.product-option--flavor input[value="' + t + '"]')
              .parents(".product-option")
              .addClass("product-option--selected"),
            n >= e &&
              ($(".product-option--flavor").removeClass(
                "product-option--selected"
              ),
              $('.product-option--flavor input[value="' + t + '"]')
                .parents(".product-option")
                .addClass("product-option--selected"));
        },
        _updateSelectedOption: function (t) {
          var e = t.target.dataset.type,
            n = t.target.value;
          "bundle" == e
            ? (this._updateBundleOption(n), this._setFlavorsForBundle(n))
            : "flavor" == e && this._updateFlavorOption(n);
        },
        _updatePrices: function (t) {
          t.variant &&
            (this._setSlashPrice(t.variant),
            this._setPerBagPrices(t.variant.id),
            this._setPricesInBundles());
        },
        _updateAddToCart: function (t) {
          var e = $("#add-to-cart"),
            n = $("#add-to-cart-text"),
            i = this._getSelectedBundleLimit(),
            o = this._getSelectedFlavorCount(),
            r = n.data("add-to-cart-text");
          var _this = this;
          !t.variant || i > o
            ? ((r = this._getDisabledButtonLabel(o)),
              e.addClass("disabled"),
              $(".product-option--flavor.product-option--selected").length <=
                0 && (r = "Sold Out"))
            : e.removeClass("disabled"),
            n.text(r);
          var variant_title = "";
          if (t.variant) {
            $(".sub_upsell_add").attr("data-variant-title", t.variant.title);
            variant_title = t.variant.title;
          }
          if (document.getElementById("prepaid_product_variant__json") == null)
            return;
          var json_data = JSON.parse(
            document.getElementById("prepaid_product_variant__json").innerHTML
          );

          var pre_upsell_product1 = $("#preCartUpsell1");
          var pre_upsell_product2 = $("#preCartUpsell2");
          var pre_upsell_product3 = $("#preCartUpsell3");

          jQuery.each(json_data, function (key, value) {
            if (key == variant_title) {
              $("#preCartUpsell3").attr("data-prod-id", value);
              pre_upsell_product1
                .find(".onetime_upsell_add")
                .removeClass("is--active");
              pre_upsell_product2
                .find(".onetime_upsell_add")
                .removeClass("is--active");
              pre_upsell_product3
                .find(".sub_upsell_add")
                .removeClass("is--active");
              $(".puff-add-to-cart.non-prepay").removeClass("hide--item");
              $(".puff-add-to-cart.for-prepay").addClass("hide--item");
            }
          });

          for (var i = 0; i < CartJS.cart.items.length; i++) {
            var item = CartJS.cart.items[i];
            if (
              item.variant_id ==
              pre_upsell_product1
                .find(".onetime_upsell_add")
                .attr("data-product-id")
            ) {
              $('[data-cart-item-id="' + item.variant_id + '"]')
                .find(".cart-drawer__item-qty")
                .addClass("hide--item");
            }
            if (
              item.variant_id ==
              pre_upsell_product2
                .find(".onetime_upsell_add")
                .attr("data-product-id")
            ) {
              $('[data-cart-item-id="' + item.variant_id + '"]')
                .find(".cart-drawer__item-qty")
                .addClass("hide--item");
            }
            jQuery.each(json_data, function (key, value) {
              if (value == item.variant_id) {
                $('[data-cart-item-id="' + item.variant_id + '"]')
                  .find(".cart-drawer__item-qty")
                  .addClass("hide--item");
                var prePayTitle =
                  $("#preCartUpsell3").attr("data-product-title");
                $('[data-cart-item-id="' + item.variant_id + '"]')
                  .find(".cart-drawer__item-title")
                  .html(prePayTitle);
              }
            });
          }

          $.ajax({
            type: "GET",
            url: "/cart.js",
            cache: false,
            dataType: "json",
            success: function (cart) {
              // Pre-Upsell
              var total_price = cart.total_price / 100;

              if (
                $(".rc_block.rc_block__type__autodeliver").hasClass(
                  "rc_block__type--active"
                )
              ) {
                pre_upsell_product1.addClass("hide--item");
                pre_upsell_product2.addClass("hide--item");
                pre_upsell_product3.removeClass("hide--item");
              } else {
                pre_upsell_product3.addClass("hide--item");
                if (total_price < 50) {
                  pre_upsell_product2.addClass("hide--item");
                  pre_upsell_product1.removeClass("hide--item");
                } else {
                  pre_upsell_product2.removeClass("hide--item");
                  pre_upsell_product1.addClass("hide--item");
                }
              }
            },
          });
        },
      })),
      t
    );
  })()),
  (REBASE.theme.Variants = (function () {
    function t(t) {
      (this.$container = t.$container),
        (this.product = t.product),
        (this.single_option_selector = t.single_option_selector),
        (this.original_select_id = t.original_select_id),
        (this.enable_history_state = t.enable_history_state),
        (this.variantFlavorLimits = JSON.parse(
          document.getElementById("variant__flavor_limits").innerHTML
        )),
        (this.current_variant = {}),
        $(this.single_option_selector, this.$container).on(
          "click",
          this._onOptionChange.bind(this)
        );
    }
    return (
      (t.prototype = $.extend({}, t.prototype, {
        _getCurrentSelections: function () {
          return $.map(
            $(this.single_option_selector, this.$container),
            function (t) {
              var e = {};
              return (
                !!$(t).parents(".product-option--selected").length &&
                ((e.value = t.value), (e.type = t.dataset.type), e)
              );
            }
          ).filter(Boolean);
        },
        _getVariantFromOptions: function () {
          var t,
            e = this._getCurrentOptions(),
            n = this.product.variants;
          return {
            variant_match: (t = (t = $.grep(n, function (t) {
              return e.every(function (e) {
                return t[e.index] === e.value;
              });
            })).length
              ? t[0]
              : void 0),
          };
        },
        _getSelectedBundle: function () {
          return $('input[name="single-option-select-bundle"]:checked').val();
        },
        _getFlavorLimit: function (t) {
          return this.variantFlavorLimits[t];
        },
        _getSelectedVariant: function () {
          var t = this._getCurrentSelections(),
            e = [],
            n = null,
            i = !1,
            o = t.filter(function (t) {
              return "bundle" === t.type;
            })[0],
            r = t.filter(function (t) {
              return "flavor" === t.type;
            });
          switch (o.value) {
            case "variety":
              var a = Math.min(
                $(".product-options--flavors .product-option").length,
                this._getFlavorLimit(o.value)
              );
              i = r.length === a;
              break;
            case "bundle":
            case "single":
            case "single-sm":
              i = r.length === this._getFlavorLimit(o.value);
          }
          return (
            i &&
              (e = (e = this.product.variants.filter(function (t) {
                return t.option3 === o.value;
              })).filter(function (t) {
                var e = !0;
                return (
                  r.forEach(function (n) {
                    t.option1.includes(n.value) || (e = !1);
                  }),
                  e
                );
              })).length > 0 &&
              (n = e[0]),
            n
          );
        },
        _onOptionChange: function (t) {
          var e,
            n = this._getSelectedBundle();
          this.$container.trigger({
            type: "optionChange",
            target: t.target,
            selected_bundle: n,
          }),
            (e = this._getSelectedVariant()),
            this._variantChange(e),
            e
              ? (this._updateMasterSelect(e),
                this._updatePrice(e),
                (this.current_variant = e),
                this.enable_history_state && this._updateHistoryState(e))
              : (this.current_variant = {});
        },
        _variantChange: function (t) {
          this.$container.trigger({ type: "variantChange", variant: t });
        },
        _updatePrice: function (t) {
          (t.price === this.current_variant.price &&
            t.compare_at_price === this.current_variant.compare_at_price) ||
            this.$container.trigger({ type: "variantPriceChange", variant: t });
        },
        _updateHistoryState: function (t) {
          if (history.replaceState && t) {
            var e = new URLSearchParams(window.location.search);
            e.set("variant", t.id);
            var n =
              window.location.protocol +
              "//" +
              window.location.host +
              window.location.pathname +
              "?" +
              e.toString();
            window.history.replaceState({ path: n }, "", n);
          }
        },
        _updateMasterSelect: function (t) {
          $(this.original_select_id, this.$container).val(t.id);
        },
      })),
      t
    );
  })());

$(".bf-collection-addtocart").on("click", function () {
  const $productForm = $(this).closest("form");
  const qty = $productForm
    .find("[data-bundle-qty-value]")
    .attr("data-bundle-qty-value");
  const productId = $productForm.find(".product-select").val();
  $.ajax({
    type: "POST",
    url: "/cart/add.js",
    data: {
      quantity: qty,
      id: productId,
    },
    dataType: "json",
    success: function (data) {
      updateCartDrawerUI();
      cart_calc();
      $(".cart-drawer-toggle").trigger("click");
    },
  });
});

function reChargeProcessCart() {
  var checkout_url = generateCheckoutUrl();
  $(".js-cart-checkout-recharge-btn").attr("href", checkout_url);
}

function updateCartDrawerUI() {
  $("body").addClass("cart-loading");
  $.get("/cart?view=drawer", function (data) {
    $("body").removeClass("cart-loading");
    $("body").addClass("cart-drawer-open");

    var newCartEl = $(data);
    $("#shopify-section-cart-drawer").replaceWith(newCartEl);
    $(".cart-drawer").addClass("cart-drawer--visible");
    $(".cart-drawer-bg").addClass("cart-drawer-bg--visible");
    reChargeProcessCart();
    $("#add-to-cart").removeClass("disabled");

    if (localStorage.getItem("utmDiscountCode")) {
      setTimeout(function () {
        if ($(".cart-drawer__action .btn.btn--second.btn--block")) return;
        rechargeCheckoutLink = $(
          ".cart-drawer__action .js-cart-checkout-recharge-btn"
        ).attr("href");
        var remove_after = rechargeCheckoutLink.indexOf("&flashSale=");
        var rechargeCheckoutLinkWithoutSales = rechargeCheckoutLink.substring(
          0,
          remove_after
        );
        $(".cart-drawer__action .js-cart-checkout-recharge-btn").hide();
        $(".cart-drawer__action .js-cart-checkout-recharge-btn").addClass(
          "hide--item"
        );
        $(".cart-drawer__action").append(
          "<a href='' class='btn btn--second btn--block'>Secure Checkout</a>"
        );
        $(".btn--second").attr(
          "href",
          `${rechargeCheckoutLinkWithoutSales.replace(
            "&flashSale=",
            ""
          )}&discount=${localStorage.getItem("utmDiscountCode")}`
        );
      }, 100);
    }
    //check_upsell_product();
  });
}
